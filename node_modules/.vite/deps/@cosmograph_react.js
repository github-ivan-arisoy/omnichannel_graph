import {
  Headers as Headers2,
  browser_default,
  browser_exports,
  init_browser
} from "./chunk-5H4R2CZR.js";
import {
  axisBottom,
  brushX,
  color,
  extent,
  identity2 as identity,
  linear2 as linear,
  pairs,
  pow,
  quadIn,
  quadInOut,
  quadOut,
  range,
  rollup,
  second,
  select_default,
  symlog,
  time,
  timeDay,
  timeFormat,
  timeHour,
  timeMinute,
  timeMonth,
  timeSunday,
  timeYear,
  zoom_default2 as zoom_default
} from "./chunk-ZFGRBS3A.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __commonJS,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/regl/dist/regl.js
var require_regl = __commonJS({
  "node_modules/regl/dist/regl.js"(exports, module) {
    (function(global3, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global3.createREGL = factory();
    })(exports, function() {
      "use strict";
      var isTypedArray = function(x3) {
        return x3 instanceof Uint8Array || x3 instanceof Uint16Array || x3 instanceof Uint32Array || x3 instanceof Int8Array || x3 instanceof Int16Array || x3 instanceof Int32Array || x3 instanceof Float32Array || x3 instanceof Float64Array || x3 instanceof Uint8ClampedArray;
      };
      var extend = function(base, opts) {
        var keys = Object.keys(opts);
        for (var i11 = 0; i11 < keys.length; ++i11) {
          base[keys[i11]] = opts[keys[i11]];
        }
        return base;
      };
      var endl = "\n";
      function decodeB64(str2) {
        if (typeof atob !== "undefined") {
          return atob(str2);
        }
        return "base64:" + str2;
      }
      function raise(message) {
        var error = new Error("(regl) " + message);
        console.error(error);
        throw error;
      }
      function check(pred, message) {
        if (!pred) {
          raise(message);
        }
      }
      function encolon(message) {
        if (message) {
          return ": " + message;
        }
        return "";
      }
      function checkParameter(param, possibilities, message) {
        if (!(param in possibilities)) {
          raise("unknown parameter (" + param + ")" + encolon(message) + ". possible values: " + Object.keys(possibilities).join());
        }
      }
      function checkIsTypedArray(data, message) {
        if (!isTypedArray(data)) {
          raise(
            "invalid parameter type" + encolon(message) + ". must be a typed array"
          );
        }
      }
      function standardTypeEh(value, type) {
        switch (type) {
          case "number":
            return typeof value === "number";
          case "object":
            return typeof value === "object";
          case "string":
            return typeof value === "string";
          case "boolean":
            return typeof value === "boolean";
          case "function":
            return typeof value === "function";
          case "undefined":
            return typeof value === "undefined";
          case "symbol":
            return typeof value === "symbol";
        }
      }
      function checkTypeOf(value, type, message) {
        if (!standardTypeEh(value, type)) {
          raise(
            "invalid parameter type" + encolon(message) + ". expected " + type + ", got " + typeof value
          );
        }
      }
      function checkNonNegativeInt(value, message) {
        if (!(value >= 0 && (value | 0) === value)) {
          raise("invalid parameter type, (" + value + ")" + encolon(message) + ". must be a nonnegative integer");
        }
      }
      function checkOneOf(value, list, message) {
        if (list.indexOf(value) < 0) {
          raise("invalid value" + encolon(message) + ". must be one of: " + list);
        }
      }
      var constructorKeys = [
        "gl",
        "canvas",
        "container",
        "attributes",
        "pixelRatio",
        "extensions",
        "optionalExtensions",
        "profile",
        "onDone"
      ];
      function checkConstructor(obj) {
        Object.keys(obj).forEach(function(key) {
          if (constructorKeys.indexOf(key) < 0) {
            raise('invalid regl constructor argument "' + key + '". must be one of ' + constructorKeys);
          }
        });
      }
      function leftPad(str2, n17) {
        str2 = str2 + "";
        while (str2.length < n17) {
          str2 = " " + str2;
        }
        return str2;
      }
      function ShaderFile() {
        this.name = "unknown";
        this.lines = [];
        this.index = {};
        this.hasErrors = false;
      }
      function ShaderLine(number, line2) {
        this.number = number;
        this.line = line2;
        this.errors = [];
      }
      function ShaderError(fileNumber, lineNumber, message) {
        this.file = fileNumber;
        this.line = lineNumber;
        this.message = message;
      }
      function guessCommand() {
        var error = new Error();
        var stack = (error.stack || error).toString();
        var pat = /compileProcedure.*\n\s*at.*\((.*)\)/.exec(stack);
        if (pat) {
          return pat[1];
        }
        var pat2 = /compileProcedure.*\n\s*at\s+(.*)(\n|$)/.exec(stack);
        if (pat2) {
          return pat2[1];
        }
        return "unknown";
      }
      function guessCallSite() {
        var error = new Error();
        var stack = (error.stack || error).toString();
        var pat = /at REGLCommand.*\n\s+at.*\((.*)\)/.exec(stack);
        if (pat) {
          return pat[1];
        }
        var pat2 = /at REGLCommand.*\n\s+at\s+(.*)\n/.exec(stack);
        if (pat2) {
          return pat2[1];
        }
        return "unknown";
      }
      function parseSource(source, command) {
        var lines2 = source.split("\n");
        var lineNumber = 1;
        var fileNumber = 0;
        var files = {
          unknown: new ShaderFile(),
          0: new ShaderFile()
        };
        files.unknown.name = files[0].name = command || guessCommand();
        files.unknown.lines.push(new ShaderLine(0, ""));
        for (var i11 = 0; i11 < lines2.length; ++i11) {
          var line2 = lines2[i11];
          var parts = /^\s*#\s*(\w+)\s+(.+)\s*$/.exec(line2);
          if (parts) {
            switch (parts[1]) {
              case "line":
                var lineNumberInfo = /(\d+)(\s+\d+)?/.exec(parts[2]);
                if (lineNumberInfo) {
                  lineNumber = lineNumberInfo[1] | 0;
                  if (lineNumberInfo[2]) {
                    fileNumber = lineNumberInfo[2] | 0;
                    if (!(fileNumber in files)) {
                      files[fileNumber] = new ShaderFile();
                    }
                  }
                }
                break;
              case "define":
                var nameInfo = /SHADER_NAME(_B64)?\s+(.*)$/.exec(parts[2]);
                if (nameInfo) {
                  files[fileNumber].name = nameInfo[1] ? decodeB64(nameInfo[2]) : nameInfo[2];
                }
                break;
            }
          }
          files[fileNumber].lines.push(new ShaderLine(lineNumber++, line2));
        }
        Object.keys(files).forEach(function(fileNumber2) {
          var file = files[fileNumber2];
          file.lines.forEach(function(line3) {
            file.index[line3.number] = line3;
          });
        });
        return files;
      }
      function parseErrorLog(errLog) {
        var result = [];
        errLog.split("\n").forEach(function(errMsg) {
          if (errMsg.length < 5) {
            return;
          }
          var parts = /^ERROR:\s+(\d+):(\d+):\s*(.*)$/.exec(errMsg);
          if (parts) {
            result.push(new ShaderError(
              parts[1] | 0,
              parts[2] | 0,
              parts[3].trim()
            ));
          } else if (errMsg.length > 0) {
            result.push(new ShaderError("unknown", 0, errMsg));
          }
        });
        return result;
      }
      function annotateFiles(files, errors) {
        errors.forEach(function(error) {
          var file = files[error.file];
          if (file) {
            var line2 = file.index[error.line];
            if (line2) {
              line2.errors.push(error);
              file.hasErrors = true;
              return;
            }
          }
          files.unknown.hasErrors = true;
          files.unknown.lines[0].errors.push(error);
        });
      }
      function checkShaderError(gl, shader, source, type, command) {
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
          var errLog = gl.getShaderInfoLog(shader);
          var typeName = type === gl.FRAGMENT_SHADER ? "fragment" : "vertex";
          checkCommandType(source, "string", typeName + " shader source must be a string", command);
          var files = parseSource(source, command);
          var errors = parseErrorLog(errLog);
          annotateFiles(files, errors);
          Object.keys(files).forEach(function(fileNumber) {
            var file = files[fileNumber];
            if (!file.hasErrors) {
              return;
            }
            var strings = [""];
            var styles = [""];
            function push(str2, style) {
              strings.push(str2);
              styles.push(style || "");
            }
            push("file number " + fileNumber + ": " + file.name + "\n", "color:red;text-decoration:underline;font-weight:bold");
            file.lines.forEach(function(line2) {
              if (line2.errors.length > 0) {
                push(leftPad(line2.number, 4) + "|  ", "background-color:yellow; font-weight:bold");
                push(line2.line + endl, "color:red; background-color:yellow; font-weight:bold");
                var offset = 0;
                line2.errors.forEach(function(error) {
                  var message = error.message;
                  var token = /^\s*'(.*)'\s*:\s*(.*)$/.exec(message);
                  if (token) {
                    var tokenPat = token[1];
                    message = token[2];
                    switch (tokenPat) {
                      case "assign":
                        tokenPat = "=";
                        break;
                    }
                    offset = Math.max(line2.line.indexOf(tokenPat, offset), 0);
                  } else {
                    offset = 0;
                  }
                  push(leftPad("| ", 6));
                  push(leftPad("^^^", offset + 3) + endl, "font-weight:bold");
                  push(leftPad("| ", 6));
                  push(message + endl, "font-weight:bold");
                });
                push(leftPad("| ", 6) + endl);
              } else {
                push(leftPad(line2.number, 4) + "|  ");
                push(line2.line + endl, "color:red");
              }
            });
            if (typeof document !== "undefined" && !window.chrome) {
              styles[0] = strings.join("%c");
              console.log.apply(console, styles);
            } else {
              console.log(strings.join(""));
            }
          });
          check.raise("Error compiling " + typeName + " shader, " + files[0].name);
        }
      }
      function checkLinkError(gl, program, fragShader, vertShader, command) {
        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
          var errLog = gl.getProgramInfoLog(program);
          var fragParse = parseSource(fragShader, command);
          var vertParse = parseSource(vertShader, command);
          var header = 'Error linking program with vertex shader, "' + vertParse[0].name + '", and fragment shader "' + fragParse[0].name + '"';
          if (typeof document !== "undefined") {
            console.log(
              "%c" + header + endl + "%c" + errLog,
              "color:red;text-decoration:underline;font-weight:bold",
              "color:red"
            );
          } else {
            console.log(header + endl + errLog);
          }
          check.raise(header);
        }
      }
      function saveCommandRef(object) {
        object._commandRef = guessCommand();
      }
      function saveDrawCommandInfo(opts, uniforms, attributes, stringStore) {
        saveCommandRef(opts);
        function id(str2) {
          if (str2) {
            return stringStore.id(str2);
          }
          return 0;
        }
        opts._fragId = id(opts.static.frag);
        opts._vertId = id(opts.static.vert);
        function addProps(dict, set3) {
          Object.keys(set3).forEach(function(u8) {
            dict[stringStore.id(u8)] = true;
          });
        }
        var uniformSet = opts._uniformSet = {};
        addProps(uniformSet, uniforms.static);
        addProps(uniformSet, uniforms.dynamic);
        var attributeSet = opts._attributeSet = {};
        addProps(attributeSet, attributes.static);
        addProps(attributeSet, attributes.dynamic);
        opts._hasCount = "count" in opts.static || "count" in opts.dynamic || "elements" in opts.static || "elements" in opts.dynamic;
      }
      function commandRaise(message, command) {
        var callSite = guessCallSite();
        raise(message + " in command " + (command || guessCommand()) + (callSite === "unknown" ? "" : " called from " + callSite));
      }
      function checkCommand(pred, message, command) {
        if (!pred) {
          commandRaise(message, command || guessCommand());
        }
      }
      function checkParameterCommand(param, possibilities, message, command) {
        if (!(param in possibilities)) {
          commandRaise(
            "unknown parameter (" + param + ")" + encolon(message) + ". possible values: " + Object.keys(possibilities).join(),
            command || guessCommand()
          );
        }
      }
      function checkCommandType(value, type, message, command) {
        if (!standardTypeEh(value, type)) {
          commandRaise(
            "invalid parameter type" + encolon(message) + ". expected " + type + ", got " + typeof value,
            command || guessCommand()
          );
        }
      }
      function checkOptional(block) {
        block();
      }
      function checkFramebufferFormat(attachment, texFormats, rbFormats) {
        if (attachment.texture) {
          checkOneOf(
            attachment.texture._texture.internalformat,
            texFormats,
            "unsupported texture format for attachment"
          );
        } else {
          checkOneOf(
            attachment.renderbuffer._renderbuffer.format,
            rbFormats,
            "unsupported renderbuffer format for attachment"
          );
        }
      }
      var GL_CLAMP_TO_EDGE = 33071;
      var GL_NEAREST = 9728;
      var GL_NEAREST_MIPMAP_NEAREST = 9984;
      var GL_LINEAR_MIPMAP_NEAREST = 9985;
      var GL_NEAREST_MIPMAP_LINEAR = 9986;
      var GL_LINEAR_MIPMAP_LINEAR = 9987;
      var GL_BYTE = 5120;
      var GL_UNSIGNED_BYTE = 5121;
      var GL_SHORT = 5122;
      var GL_UNSIGNED_SHORT = 5123;
      var GL_INT = 5124;
      var GL_UNSIGNED_INT = 5125;
      var GL_FLOAT = 5126;
      var GL_UNSIGNED_SHORT_4_4_4_4 = 32819;
      var GL_UNSIGNED_SHORT_5_5_5_1 = 32820;
      var GL_UNSIGNED_SHORT_5_6_5 = 33635;
      var GL_UNSIGNED_INT_24_8_WEBGL = 34042;
      var GL_HALF_FLOAT_OES = 36193;
      var TYPE_SIZE = {};
      TYPE_SIZE[GL_BYTE] = TYPE_SIZE[GL_UNSIGNED_BYTE] = 1;
      TYPE_SIZE[GL_SHORT] = TYPE_SIZE[GL_UNSIGNED_SHORT] = TYPE_SIZE[GL_HALF_FLOAT_OES] = TYPE_SIZE[GL_UNSIGNED_SHORT_5_6_5] = TYPE_SIZE[GL_UNSIGNED_SHORT_4_4_4_4] = TYPE_SIZE[GL_UNSIGNED_SHORT_5_5_5_1] = 2;
      TYPE_SIZE[GL_INT] = TYPE_SIZE[GL_UNSIGNED_INT] = TYPE_SIZE[GL_FLOAT] = TYPE_SIZE[GL_UNSIGNED_INT_24_8_WEBGL] = 4;
      function pixelSize(type, channels) {
        if (type === GL_UNSIGNED_SHORT_5_5_5_1 || type === GL_UNSIGNED_SHORT_4_4_4_4 || type === GL_UNSIGNED_SHORT_5_6_5) {
          return 2;
        } else if (type === GL_UNSIGNED_INT_24_8_WEBGL) {
          return 4;
        } else {
          return TYPE_SIZE[type] * channels;
        }
      }
      function isPow2(v3) {
        return !(v3 & v3 - 1) && !!v3;
      }
      function checkTexture2D(info, mipData, limits) {
        var i11;
        var w3 = mipData.width;
        var h6 = mipData.height;
        var c11 = mipData.channels;
        check(
          w3 > 0 && w3 <= limits.maxTextureSize && h6 > 0 && h6 <= limits.maxTextureSize,
          "invalid texture shape"
        );
        if (info.wrapS !== GL_CLAMP_TO_EDGE || info.wrapT !== GL_CLAMP_TO_EDGE) {
          check(
            isPow2(w3) && isPow2(h6),
            "incompatible wrap mode for texture, both width and height must be power of 2"
          );
        }
        if (mipData.mipmask === 1) {
          if (w3 !== 1 && h6 !== 1) {
            check(
              info.minFilter !== GL_NEAREST_MIPMAP_NEAREST && info.minFilter !== GL_NEAREST_MIPMAP_LINEAR && info.minFilter !== GL_LINEAR_MIPMAP_NEAREST && info.minFilter !== GL_LINEAR_MIPMAP_LINEAR,
              "min filter requires mipmap"
            );
          }
        } else {
          check(
            isPow2(w3) && isPow2(h6),
            "texture must be a square power of 2 to support mipmapping"
          );
          check(
            mipData.mipmask === (w3 << 1) - 1,
            "missing or incomplete mipmap data"
          );
        }
        if (mipData.type === GL_FLOAT) {
          if (limits.extensions.indexOf("oes_texture_float_linear") < 0) {
            check(
              info.minFilter === GL_NEAREST && info.magFilter === GL_NEAREST,
              "filter not supported, must enable oes_texture_float_linear"
            );
          }
          check(
            !info.genMipmaps,
            "mipmap generation not supported with float textures"
          );
        }
        var mipimages = mipData.images;
        for (i11 = 0; i11 < 16; ++i11) {
          if (mipimages[i11]) {
            var mw = w3 >> i11;
            var mh = h6 >> i11;
            check(mipData.mipmask & 1 << i11, "missing mipmap data");
            var img = mipimages[i11];
            check(
              img.width === mw && img.height === mh,
              "invalid shape for mip images"
            );
            check(
              img.format === mipData.format && img.internalformat === mipData.internalformat && img.type === mipData.type,
              "incompatible type for mip image"
            );
            if (img.compressed) {
            } else if (img.data) {
              var rowSize = Math.ceil(pixelSize(img.type, c11) * mw / img.unpackAlignment) * img.unpackAlignment;
              check(
                img.data.byteLength === rowSize * mh,
                "invalid data for image, buffer size is inconsistent with image format"
              );
            } else if (img.element) {
            } else if (img.copy) {
            }
          } else if (!info.genMipmaps) {
            check((mipData.mipmask & 1 << i11) === 0, "extra mipmap data");
          }
        }
        if (mipData.compressed) {
          check(
            !info.genMipmaps,
            "mipmap generation for compressed images not supported"
          );
        }
      }
      function checkTextureCube(texture, info, faces, limits) {
        var w3 = texture.width;
        var h6 = texture.height;
        var c11 = texture.channels;
        check(
          w3 > 0 && w3 <= limits.maxTextureSize && h6 > 0 && h6 <= limits.maxTextureSize,
          "invalid texture shape"
        );
        check(
          w3 === h6,
          "cube map must be square"
        );
        check(
          info.wrapS === GL_CLAMP_TO_EDGE && info.wrapT === GL_CLAMP_TO_EDGE,
          "wrap mode not supported by cube map"
        );
        for (var i11 = 0; i11 < faces.length; ++i11) {
          var face = faces[i11];
          check(
            face.width === w3 && face.height === h6,
            "inconsistent cube map face shape"
          );
          if (info.genMipmaps) {
            check(
              !face.compressed,
              "can not generate mipmap for compressed textures"
            );
            check(
              face.mipmask === 1,
              "can not specify mipmaps and generate mipmaps"
            );
          } else {
          }
          var mipmaps = face.images;
          for (var j6 = 0; j6 < 16; ++j6) {
            var img = mipmaps[j6];
            if (img) {
              var mw = w3 >> j6;
              var mh = h6 >> j6;
              check(face.mipmask & 1 << j6, "missing mipmap data");
              check(
                img.width === mw && img.height === mh,
                "invalid shape for mip images"
              );
              check(
                img.format === texture.format && img.internalformat === texture.internalformat && img.type === texture.type,
                "incompatible type for mip image"
              );
              if (img.compressed) {
              } else if (img.data) {
                check(
                  img.data.byteLength === mw * mh * Math.max(pixelSize(img.type, c11), img.unpackAlignment),
                  "invalid data for image, buffer size is inconsistent with image format"
                );
              } else if (img.element) {
              } else if (img.copy) {
              }
            }
          }
        }
      }
      var check$1 = extend(check, {
        optional: checkOptional,
        raise,
        commandRaise,
        command: checkCommand,
        parameter: checkParameter,
        commandParameter: checkParameterCommand,
        constructor: checkConstructor,
        type: checkTypeOf,
        commandType: checkCommandType,
        isTypedArray: checkIsTypedArray,
        nni: checkNonNegativeInt,
        oneOf: checkOneOf,
        shaderError: checkShaderError,
        linkError: checkLinkError,
        callSite: guessCallSite,
        saveCommandRef,
        saveDrawInfo: saveDrawCommandInfo,
        framebufferFormat: checkFramebufferFormat,
        guessCommand,
        texture2D: checkTexture2D,
        textureCube: checkTextureCube
      });
      var VARIABLE_COUNTER = 0;
      var DYN_FUNC = 0;
      var DYN_CONSTANT = 5;
      var DYN_ARRAY = 6;
      function DynamicVariable(type, data) {
        this.id = VARIABLE_COUNTER++;
        this.type = type;
        this.data = data;
      }
      function escapeStr(str2) {
        return str2.replace(/\\/g, "\\\\").replace(/"/g, '\\"');
      }
      function splitParts(str2) {
        if (str2.length === 0) {
          return [];
        }
        var firstChar = str2.charAt(0);
        var lastChar = str2.charAt(str2.length - 1);
        if (str2.length > 1 && firstChar === lastChar && (firstChar === '"' || firstChar === "'")) {
          return ['"' + escapeStr(str2.substr(1, str2.length - 2)) + '"'];
        }
        var parts = /\[(false|true|null|\d+|'[^']*'|"[^"]*")\]/.exec(str2);
        if (parts) {
          return splitParts(str2.substr(0, parts.index)).concat(splitParts(parts[1])).concat(splitParts(str2.substr(parts.index + parts[0].length)));
        }
        var subparts = str2.split(".");
        if (subparts.length === 1) {
          return ['"' + escapeStr(str2) + '"'];
        }
        var result = [];
        for (var i11 = 0; i11 < subparts.length; ++i11) {
          result = result.concat(splitParts(subparts[i11]));
        }
        return result;
      }
      function toAccessorString(str2) {
        return "[" + splitParts(str2).join("][") + "]";
      }
      function defineDynamic(type, data) {
        return new DynamicVariable(type, toAccessorString(data + ""));
      }
      function isDynamic(x3) {
        return typeof x3 === "function" && !x3._reglType || x3 instanceof DynamicVariable;
      }
      function unbox(x3, path) {
        if (typeof x3 === "function") {
          return new DynamicVariable(DYN_FUNC, x3);
        } else if (typeof x3 === "number" || typeof x3 === "boolean") {
          return new DynamicVariable(DYN_CONSTANT, x3);
        } else if (Array.isArray(x3)) {
          return new DynamicVariable(DYN_ARRAY, x3.map(function(y3, i11) {
            return unbox(y3, path + "[" + i11 + "]");
          }));
        } else if (x3 instanceof DynamicVariable) {
          return x3;
        }
        check$1(false, "invalid option type in uniform " + path);
      }
      var dynamic = {
        DynamicVariable,
        define: defineDynamic,
        isDynamic,
        unbox,
        accessor: toAccessorString
      };
      var raf = {
        next: typeof requestAnimationFrame === "function" ? function(cb) {
          return requestAnimationFrame(cb);
        } : function(cb) {
          return setTimeout(cb, 16);
        },
        cancel: typeof cancelAnimationFrame === "function" ? function(raf2) {
          return cancelAnimationFrame(raf2);
        } : clearTimeout
      };
      var clock = typeof performance !== "undefined" && performance.now ? function() {
        return performance.now();
      } : function() {
        return +/* @__PURE__ */ new Date();
      };
      function createStringStore() {
        var stringIds = { "": 0 };
        var stringValues = [""];
        return {
          id: function(str2) {
            var result = stringIds[str2];
            if (result) {
              return result;
            }
            result = stringIds[str2] = stringValues.length;
            stringValues.push(str2);
            return result;
          },
          str: function(id) {
            return stringValues[id];
          }
        };
      }
      function createCanvas(element, onDone, pixelRatio) {
        var canvas = document.createElement("canvas");
        extend(canvas.style, {
          border: 0,
          margin: 0,
          padding: 0,
          top: 0,
          left: 0,
          width: "100%",
          height: "100%"
        });
        element.appendChild(canvas);
        if (element === document.body) {
          canvas.style.position = "absolute";
          extend(element.style, {
            margin: 0,
            padding: 0
          });
        }
        function resize() {
          var w3 = window.innerWidth;
          var h6 = window.innerHeight;
          if (element !== document.body) {
            var bounds = canvas.getBoundingClientRect();
            w3 = bounds.right - bounds.left;
            h6 = bounds.bottom - bounds.top;
          }
          canvas.width = pixelRatio * w3;
          canvas.height = pixelRatio * h6;
        }
        var resizeObserver;
        if (element !== document.body && typeof ResizeObserver === "function") {
          resizeObserver = new ResizeObserver(function() {
            setTimeout(resize);
          });
          resizeObserver.observe(element);
        } else {
          window.addEventListener("resize", resize, false);
        }
        function onDestroy() {
          if (resizeObserver) {
            resizeObserver.disconnect();
          } else {
            window.removeEventListener("resize", resize);
          }
          element.removeChild(canvas);
        }
        resize();
        return {
          canvas,
          onDestroy
        };
      }
      function createContext(canvas, contextAttributes) {
        function get3(name) {
          try {
            return canvas.getContext(name, contextAttributes);
          } catch (e36) {
            return null;
          }
        }
        return get3("webgl") || get3("experimental-webgl") || get3("webgl-experimental");
      }
      function isHTMLElement(obj) {
        return typeof obj.nodeName === "string" && typeof obj.appendChild === "function" && typeof obj.getBoundingClientRect === "function";
      }
      function isWebGLContext(obj) {
        return typeof obj.drawArrays === "function" || typeof obj.drawElements === "function";
      }
      function parseExtensions(input) {
        if (typeof input === "string") {
          return input.split();
        }
        check$1(Array.isArray(input), "invalid extension array");
        return input;
      }
      function getElement(desc) {
        if (typeof desc === "string") {
          check$1(typeof document !== "undefined", "not supported outside of DOM");
          return document.querySelector(desc);
        }
        return desc;
      }
      function parseArgs(args_) {
        var args = args_ || {};
        var element, container, canvas, gl;
        var contextAttributes = {};
        var extensions = [];
        var optionalExtensions = [];
        var pixelRatio = typeof window === "undefined" ? 1 : window.devicePixelRatio;
        var profile = false;
        var onDone = function(err) {
          if (err) {
            check$1.raise(err);
          }
        };
        var onDestroy = function() {
        };
        if (typeof args === "string") {
          check$1(
            typeof document !== "undefined",
            "selector queries only supported in DOM enviroments"
          );
          element = document.querySelector(args);
          check$1(element, "invalid query string for element");
        } else if (typeof args === "object") {
          if (isHTMLElement(args)) {
            element = args;
          } else if (isWebGLContext(args)) {
            gl = args;
            canvas = gl.canvas;
          } else {
            check$1.constructor(args);
            if ("gl" in args) {
              gl = args.gl;
            } else if ("canvas" in args) {
              canvas = getElement(args.canvas);
            } else if ("container" in args) {
              container = getElement(args.container);
            }
            if ("attributes" in args) {
              contextAttributes = args.attributes;
              check$1.type(contextAttributes, "object", "invalid context attributes");
            }
            if ("extensions" in args) {
              extensions = parseExtensions(args.extensions);
            }
            if ("optionalExtensions" in args) {
              optionalExtensions = parseExtensions(args.optionalExtensions);
            }
            if ("onDone" in args) {
              check$1.type(
                args.onDone,
                "function",
                "invalid or missing onDone callback"
              );
              onDone = args.onDone;
            }
            if ("profile" in args) {
              profile = !!args.profile;
            }
            if ("pixelRatio" in args) {
              pixelRatio = +args.pixelRatio;
              check$1(pixelRatio > 0, "invalid pixel ratio");
            }
          }
        } else {
          check$1.raise("invalid arguments to regl");
        }
        if (element) {
          if (element.nodeName.toLowerCase() === "canvas") {
            canvas = element;
          } else {
            container = element;
          }
        }
        if (!gl) {
          if (!canvas) {
            check$1(
              typeof document !== "undefined",
              "must manually specify webgl context outside of DOM environments"
            );
            var result = createCanvas(container || document.body, onDone, pixelRatio);
            if (!result) {
              return null;
            }
            canvas = result.canvas;
            onDestroy = result.onDestroy;
          }
          if (contextAttributes.premultipliedAlpha === void 0) contextAttributes.premultipliedAlpha = true;
          gl = createContext(canvas, contextAttributes);
        }
        if (!gl) {
          onDestroy();
          onDone("webgl not supported, try upgrading your browser or graphics drivers http://get.webgl.org");
          return null;
        }
        return {
          gl,
          canvas,
          container,
          extensions,
          optionalExtensions,
          pixelRatio,
          profile,
          onDone,
          onDestroy
        };
      }
      function createExtensionCache(gl, config) {
        var extensions = {};
        function tryLoadExtension(name_) {
          check$1.type(name_, "string", "extension name must be string");
          var name2 = name_.toLowerCase();
          var ext;
          try {
            ext = extensions[name2] = gl.getExtension(name2);
          } catch (e36) {
          }
          return !!ext;
        }
        for (var i11 = 0; i11 < config.extensions.length; ++i11) {
          var name = config.extensions[i11];
          if (!tryLoadExtension(name)) {
            config.onDestroy();
            config.onDone('"' + name + '" extension is not supported by the current WebGL context, try upgrading your system or a different browser');
            return null;
          }
        }
        config.optionalExtensions.forEach(tryLoadExtension);
        return {
          extensions,
          restore: function() {
            Object.keys(extensions).forEach(function(name2) {
              if (extensions[name2] && !tryLoadExtension(name2)) {
                throw new Error("(regl): error restoring extension " + name2);
              }
            });
          }
        };
      }
      function loop(n17, f6) {
        var result = Array(n17);
        for (var i11 = 0; i11 < n17; ++i11) {
          result[i11] = f6(i11);
        }
        return result;
      }
      var GL_BYTE$1 = 5120;
      var GL_UNSIGNED_BYTE$2 = 5121;
      var GL_SHORT$1 = 5122;
      var GL_UNSIGNED_SHORT$1 = 5123;
      var GL_INT$1 = 5124;
      var GL_UNSIGNED_INT$1 = 5125;
      var GL_FLOAT$2 = 5126;
      function nextPow16(v3) {
        for (var i11 = 16; i11 <= 1 << 28; i11 *= 16) {
          if (v3 <= i11) {
            return i11;
          }
        }
        return 0;
      }
      function log2(v3) {
        var r14, shift;
        r14 = (v3 > 65535) << 4;
        v3 >>>= r14;
        shift = (v3 > 255) << 3;
        v3 >>>= shift;
        r14 |= shift;
        shift = (v3 > 15) << 2;
        v3 >>>= shift;
        r14 |= shift;
        shift = (v3 > 3) << 1;
        v3 >>>= shift;
        r14 |= shift;
        return r14 | v3 >> 1;
      }
      function createPool() {
        var bufferPool = loop(8, function() {
          return [];
        });
        function alloc(n17) {
          var sz = nextPow16(n17);
          var bin = bufferPool[log2(sz) >> 2];
          if (bin.length > 0) {
            return bin.pop();
          }
          return new ArrayBuffer(sz);
        }
        function free(buf) {
          bufferPool[log2(buf.byteLength) >> 2].push(buf);
        }
        function allocType(type, n17) {
          var result = null;
          switch (type) {
            case GL_BYTE$1:
              result = new Int8Array(alloc(n17), 0, n17);
              break;
            case GL_UNSIGNED_BYTE$2:
              result = new Uint8Array(alloc(n17), 0, n17);
              break;
            case GL_SHORT$1:
              result = new Int16Array(alloc(2 * n17), 0, n17);
              break;
            case GL_UNSIGNED_SHORT$1:
              result = new Uint16Array(alloc(2 * n17), 0, n17);
              break;
            case GL_INT$1:
              result = new Int32Array(alloc(4 * n17), 0, n17);
              break;
            case GL_UNSIGNED_INT$1:
              result = new Uint32Array(alloc(4 * n17), 0, n17);
              break;
            case GL_FLOAT$2:
              result = new Float32Array(alloc(4 * n17), 0, n17);
              break;
            default:
              return null;
          }
          if (result.length !== n17) {
            return result.subarray(0, n17);
          }
          return result;
        }
        function freeType(array) {
          free(array.buffer);
        }
        return {
          alloc,
          free,
          allocType,
          freeType
        };
      }
      var pool = createPool();
      pool.zero = createPool();
      var GL_SUBPIXEL_BITS = 3408;
      var GL_RED_BITS = 3410;
      var GL_GREEN_BITS = 3411;
      var GL_BLUE_BITS = 3412;
      var GL_ALPHA_BITS = 3413;
      var GL_DEPTH_BITS = 3414;
      var GL_STENCIL_BITS = 3415;
      var GL_ALIASED_POINT_SIZE_RANGE = 33901;
      var GL_ALIASED_LINE_WIDTH_RANGE = 33902;
      var GL_MAX_TEXTURE_SIZE = 3379;
      var GL_MAX_VIEWPORT_DIMS = 3386;
      var GL_MAX_VERTEX_ATTRIBS = 34921;
      var GL_MAX_VERTEX_UNIFORM_VECTORS = 36347;
      var GL_MAX_VARYING_VECTORS = 36348;
      var GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
      var GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
      var GL_MAX_TEXTURE_IMAGE_UNITS = 34930;
      var GL_MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
      var GL_MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
      var GL_MAX_RENDERBUFFER_SIZE = 34024;
      var GL_VENDOR = 7936;
      var GL_RENDERER = 7937;
      var GL_VERSION = 7938;
      var GL_SHADING_LANGUAGE_VERSION = 35724;
      var GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
      var GL_MAX_COLOR_ATTACHMENTS_WEBGL = 36063;
      var GL_MAX_DRAW_BUFFERS_WEBGL = 34852;
      var GL_TEXTURE_2D = 3553;
      var GL_TEXTURE_CUBE_MAP = 34067;
      var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
      var GL_TEXTURE0 = 33984;
      var GL_RGBA = 6408;
      var GL_FLOAT$1 = 5126;
      var GL_UNSIGNED_BYTE$1 = 5121;
      var GL_FRAMEBUFFER = 36160;
      var GL_FRAMEBUFFER_COMPLETE = 36053;
      var GL_COLOR_ATTACHMENT0 = 36064;
      var GL_COLOR_BUFFER_BIT$1 = 16384;
      var wrapLimits = function(gl, extensions) {
        var maxAnisotropic = 1;
        if (extensions.ext_texture_filter_anisotropic) {
          maxAnisotropic = gl.getParameter(GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT);
        }
        var maxDrawbuffers = 1;
        var maxColorAttachments = 1;
        if (extensions.webgl_draw_buffers) {
          maxDrawbuffers = gl.getParameter(GL_MAX_DRAW_BUFFERS_WEBGL);
          maxColorAttachments = gl.getParameter(GL_MAX_COLOR_ATTACHMENTS_WEBGL);
        }
        var readFloat = !!extensions.oes_texture_float;
        if (readFloat) {
          var readFloatTexture = gl.createTexture();
          gl.bindTexture(GL_TEXTURE_2D, readFloatTexture);
          gl.texImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 1, 1, 0, GL_RGBA, GL_FLOAT$1, null);
          var fbo = gl.createFramebuffer();
          gl.bindFramebuffer(GL_FRAMEBUFFER, fbo);
          gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, readFloatTexture, 0);
          gl.bindTexture(GL_TEXTURE_2D, null);
          if (gl.checkFramebufferStatus(GL_FRAMEBUFFER) !== GL_FRAMEBUFFER_COMPLETE) readFloat = false;
          else {
            gl.viewport(0, 0, 1, 1);
            gl.clearColor(1, 0, 0, 1);
            gl.clear(GL_COLOR_BUFFER_BIT$1);
            var pixels = pool.allocType(GL_FLOAT$1, 4);
            gl.readPixels(0, 0, 1, 1, GL_RGBA, GL_FLOAT$1, pixels);
            if (gl.getError()) readFloat = false;
            else {
              gl.deleteFramebuffer(fbo);
              gl.deleteTexture(readFloatTexture);
              readFloat = pixels[0] === 1;
            }
            pool.freeType(pixels);
          }
        }
        var isIE = typeof navigator !== "undefined" && (/MSIE/.test(navigator.userAgent) || /Trident\//.test(navigator.appVersion) || /Edge/.test(navigator.userAgent));
        var npotTextureCube = true;
        if (!isIE) {
          var cubeTexture = gl.createTexture();
          var data = pool.allocType(GL_UNSIGNED_BYTE$1, 36);
          gl.activeTexture(GL_TEXTURE0);
          gl.bindTexture(GL_TEXTURE_CUBE_MAP, cubeTexture);
          gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X, 0, GL_RGBA, 3, 3, 0, GL_RGBA, GL_UNSIGNED_BYTE$1, data);
          pool.freeType(data);
          gl.bindTexture(GL_TEXTURE_CUBE_MAP, null);
          gl.deleteTexture(cubeTexture);
          npotTextureCube = !gl.getError();
        }
        return {
          // drawing buffer bit depth
          colorBits: [
            gl.getParameter(GL_RED_BITS),
            gl.getParameter(GL_GREEN_BITS),
            gl.getParameter(GL_BLUE_BITS),
            gl.getParameter(GL_ALPHA_BITS)
          ],
          depthBits: gl.getParameter(GL_DEPTH_BITS),
          stencilBits: gl.getParameter(GL_STENCIL_BITS),
          subpixelBits: gl.getParameter(GL_SUBPIXEL_BITS),
          // supported extensions
          extensions: Object.keys(extensions).filter(function(ext) {
            return !!extensions[ext];
          }),
          // max aniso samples
          maxAnisotropic,
          // max draw buffers
          maxDrawbuffers,
          maxColorAttachments,
          // point and line size ranges
          pointSizeDims: gl.getParameter(GL_ALIASED_POINT_SIZE_RANGE),
          lineWidthDims: gl.getParameter(GL_ALIASED_LINE_WIDTH_RANGE),
          maxViewportDims: gl.getParameter(GL_MAX_VIEWPORT_DIMS),
          maxCombinedTextureUnits: gl.getParameter(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS),
          maxCubeMapSize: gl.getParameter(GL_MAX_CUBE_MAP_TEXTURE_SIZE),
          maxRenderbufferSize: gl.getParameter(GL_MAX_RENDERBUFFER_SIZE),
          maxTextureUnits: gl.getParameter(GL_MAX_TEXTURE_IMAGE_UNITS),
          maxTextureSize: gl.getParameter(GL_MAX_TEXTURE_SIZE),
          maxAttributes: gl.getParameter(GL_MAX_VERTEX_ATTRIBS),
          maxVertexUniforms: gl.getParameter(GL_MAX_VERTEX_UNIFORM_VECTORS),
          maxVertexTextureUnits: gl.getParameter(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS),
          maxVaryingVectors: gl.getParameter(GL_MAX_VARYING_VECTORS),
          maxFragmentUniforms: gl.getParameter(GL_MAX_FRAGMENT_UNIFORM_VECTORS),
          // vendor info
          glsl: gl.getParameter(GL_SHADING_LANGUAGE_VERSION),
          renderer: gl.getParameter(GL_RENDERER),
          vendor: gl.getParameter(GL_VENDOR),
          version: gl.getParameter(GL_VERSION),
          // quirks
          readFloat,
          npotTextureCube
        };
      };
      function isNDArrayLike(obj) {
        return !!obj && typeof obj === "object" && Array.isArray(obj.shape) && Array.isArray(obj.stride) && typeof obj.offset === "number" && obj.shape.length === obj.stride.length && (Array.isArray(obj.data) || isTypedArray(obj.data));
      }
      var values = function(obj) {
        return Object.keys(obj).map(function(key) {
          return obj[key];
        });
      };
      var flattenUtils = {
        shape: arrayShape$1,
        flatten: flattenArray
      };
      function flatten1D(array, nx, out) {
        for (var i11 = 0; i11 < nx; ++i11) {
          out[i11] = array[i11];
        }
      }
      function flatten2D(array, nx, ny, out) {
        var ptr = 0;
        for (var i11 = 0; i11 < nx; ++i11) {
          var row = array[i11];
          for (var j6 = 0; j6 < ny; ++j6) {
            out[ptr++] = row[j6];
          }
        }
      }
      function flatten3D(array, nx, ny, nz, out, ptr_) {
        var ptr = ptr_;
        for (var i11 = 0; i11 < nx; ++i11) {
          var row = array[i11];
          for (var j6 = 0; j6 < ny; ++j6) {
            var col = row[j6];
            for (var k5 = 0; k5 < nz; ++k5) {
              out[ptr++] = col[k5];
            }
          }
        }
      }
      function flattenRec(array, shape, level, out, ptr) {
        var stride = 1;
        for (var i11 = level + 1; i11 < shape.length; ++i11) {
          stride *= shape[i11];
        }
        var n17 = shape[level];
        if (shape.length - level === 4) {
          var nx = shape[level + 1];
          var ny = shape[level + 2];
          var nz = shape[level + 3];
          for (i11 = 0; i11 < n17; ++i11) {
            flatten3D(array[i11], nx, ny, nz, out, ptr);
            ptr += stride;
          }
        } else {
          for (i11 = 0; i11 < n17; ++i11) {
            flattenRec(array[i11], shape, level + 1, out, ptr);
            ptr += stride;
          }
        }
      }
      function flattenArray(array, shape, type, out_) {
        var sz = 1;
        if (shape.length) {
          for (var i11 = 0; i11 < shape.length; ++i11) {
            sz *= shape[i11];
          }
        } else {
          sz = 0;
        }
        var out = out_ || pool.allocType(type, sz);
        switch (shape.length) {
          case 0:
            break;
          case 1:
            flatten1D(array, shape[0], out);
            break;
          case 2:
            flatten2D(array, shape[0], shape[1], out);
            break;
          case 3:
            flatten3D(array, shape[0], shape[1], shape[2], out, 0);
            break;
          default:
            flattenRec(array, shape, 0, out, 0);
        }
        return out;
      }
      function arrayShape$1(array_) {
        var shape = [];
        for (var array = array_; array.length; array = array[0]) {
          shape.push(array.length);
        }
        return shape;
      }
      var arrayTypes = {
        "[object Int8Array]": 5120,
        "[object Int16Array]": 5122,
        "[object Int32Array]": 5124,
        "[object Uint8Array]": 5121,
        "[object Uint8ClampedArray]": 5121,
        "[object Uint16Array]": 5123,
        "[object Uint32Array]": 5125,
        "[object Float32Array]": 5126,
        "[object Float64Array]": 5121,
        "[object ArrayBuffer]": 5121
      };
      var int8 = 5120;
      var int16 = 5122;
      var int32 = 5124;
      var uint8 = 5121;
      var uint16 = 5123;
      var uint32 = 5125;
      var float = 5126;
      var float32 = 5126;
      var glTypes = {
        int8,
        int16,
        int32,
        uint8,
        uint16,
        uint32,
        float,
        float32
      };
      var dynamic$1 = 35048;
      var stream = 35040;
      var usageTypes = {
        dynamic: dynamic$1,
        stream,
        "static": 35044
      };
      var arrayFlatten = flattenUtils.flatten;
      var arrayShape = flattenUtils.shape;
      var GL_STATIC_DRAW = 35044;
      var GL_STREAM_DRAW = 35040;
      var GL_UNSIGNED_BYTE$3 = 5121;
      var GL_FLOAT$3 = 5126;
      var DTYPES_SIZES = [];
      DTYPES_SIZES[5120] = 1;
      DTYPES_SIZES[5122] = 2;
      DTYPES_SIZES[5124] = 4;
      DTYPES_SIZES[5121] = 1;
      DTYPES_SIZES[5123] = 2;
      DTYPES_SIZES[5125] = 4;
      DTYPES_SIZES[5126] = 4;
      function typedArrayCode(data) {
        return arrayTypes[Object.prototype.toString.call(data)] | 0;
      }
      function copyArray(out, inp) {
        for (var i11 = 0; i11 < inp.length; ++i11) {
          out[i11] = inp[i11];
        }
      }
      function transpose2(result, data, shapeX, shapeY, strideX, strideY, offset) {
        var ptr = 0;
        for (var i11 = 0; i11 < shapeX; ++i11) {
          for (var j6 = 0; j6 < shapeY; ++j6) {
            result[ptr++] = data[strideX * i11 + strideY * j6 + offset];
          }
        }
      }
      function wrapBufferState(gl, stats2, config, destroyBuffer2) {
        var bufferCount = 0;
        var bufferSet = {};
        function REGLBuffer(type) {
          this.id = bufferCount++;
          this.buffer = gl.createBuffer();
          this.type = type;
          this.usage = GL_STATIC_DRAW;
          this.byteLength = 0;
          this.dimension = 1;
          this.dtype = GL_UNSIGNED_BYTE$3;
          this.persistentData = null;
          if (config.profile) {
            this.stats = { size: 0 };
          }
        }
        REGLBuffer.prototype.bind = function() {
          gl.bindBuffer(this.type, this.buffer);
        };
        REGLBuffer.prototype.destroy = function() {
          destroy(this);
        };
        var streamPool = [];
        function createStream(type, data) {
          var buffer = streamPool.pop();
          if (!buffer) {
            buffer = new REGLBuffer(type);
          }
          buffer.bind();
          initBufferFromData(buffer, data, GL_STREAM_DRAW, 0, 1, false);
          return buffer;
        }
        function destroyStream(stream$$1) {
          streamPool.push(stream$$1);
        }
        function initBufferFromTypedArray(buffer, data, usage) {
          buffer.byteLength = data.byteLength;
          gl.bufferData(buffer.type, data, usage);
        }
        function initBufferFromData(buffer, data, usage, dtype, dimension, persist) {
          var shape;
          buffer.usage = usage;
          if (Array.isArray(data)) {
            buffer.dtype = dtype || GL_FLOAT$3;
            if (data.length > 0) {
              var flatData;
              if (Array.isArray(data[0])) {
                shape = arrayShape(data);
                var dim = 1;
                for (var i11 = 1; i11 < shape.length; ++i11) {
                  dim *= shape[i11];
                }
                buffer.dimension = dim;
                flatData = arrayFlatten(data, shape, buffer.dtype);
                initBufferFromTypedArray(buffer, flatData, usage);
                if (persist) {
                  buffer.persistentData = flatData;
                } else {
                  pool.freeType(flatData);
                }
              } else if (typeof data[0] === "number") {
                buffer.dimension = dimension;
                var typedData = pool.allocType(buffer.dtype, data.length);
                copyArray(typedData, data);
                initBufferFromTypedArray(buffer, typedData, usage);
                if (persist) {
                  buffer.persistentData = typedData;
                } else {
                  pool.freeType(typedData);
                }
              } else if (isTypedArray(data[0])) {
                buffer.dimension = data[0].length;
                buffer.dtype = dtype || typedArrayCode(data[0]) || GL_FLOAT$3;
                flatData = arrayFlatten(
                  data,
                  [data.length, data[0].length],
                  buffer.dtype
                );
                initBufferFromTypedArray(buffer, flatData, usage);
                if (persist) {
                  buffer.persistentData = flatData;
                } else {
                  pool.freeType(flatData);
                }
              } else {
                check$1.raise("invalid buffer data");
              }
            }
          } else if (isTypedArray(data)) {
            buffer.dtype = dtype || typedArrayCode(data);
            buffer.dimension = dimension;
            initBufferFromTypedArray(buffer, data, usage);
            if (persist) {
              buffer.persistentData = new Uint8Array(new Uint8Array(data.buffer));
            }
          } else if (isNDArrayLike(data)) {
            shape = data.shape;
            var stride = data.stride;
            var offset = data.offset;
            var shapeX = 0;
            var shapeY = 0;
            var strideX = 0;
            var strideY = 0;
            if (shape.length === 1) {
              shapeX = shape[0];
              shapeY = 1;
              strideX = stride[0];
              strideY = 0;
            } else if (shape.length === 2) {
              shapeX = shape[0];
              shapeY = shape[1];
              strideX = stride[0];
              strideY = stride[1];
            } else {
              check$1.raise("invalid shape");
            }
            buffer.dtype = dtype || typedArrayCode(data.data) || GL_FLOAT$3;
            buffer.dimension = shapeY;
            var transposeData2 = pool.allocType(buffer.dtype, shapeX * shapeY);
            transpose2(
              transposeData2,
              data.data,
              shapeX,
              shapeY,
              strideX,
              strideY,
              offset
            );
            initBufferFromTypedArray(buffer, transposeData2, usage);
            if (persist) {
              buffer.persistentData = transposeData2;
            } else {
              pool.freeType(transposeData2);
            }
          } else if (data instanceof ArrayBuffer) {
            buffer.dtype = GL_UNSIGNED_BYTE$3;
            buffer.dimension = dimension;
            initBufferFromTypedArray(buffer, data, usage);
            if (persist) {
              buffer.persistentData = new Uint8Array(new Uint8Array(data));
            }
          } else {
            check$1.raise("invalid buffer data");
          }
        }
        function destroy(buffer) {
          stats2.bufferCount--;
          destroyBuffer2(buffer);
          var handle = buffer.buffer;
          check$1(handle, "buffer must not be deleted already");
          gl.deleteBuffer(handle);
          buffer.buffer = null;
          delete bufferSet[buffer.id];
        }
        function createBuffer(options, type, deferInit, persistent) {
          stats2.bufferCount++;
          var buffer = new REGLBuffer(type);
          bufferSet[buffer.id] = buffer;
          function reglBuffer(options2) {
            var usage = GL_STATIC_DRAW;
            var data = null;
            var byteLength = 0;
            var dtype = 0;
            var dimension = 1;
            if (Array.isArray(options2) || isTypedArray(options2) || isNDArrayLike(options2) || options2 instanceof ArrayBuffer) {
              data = options2;
            } else if (typeof options2 === "number") {
              byteLength = options2 | 0;
            } else if (options2) {
              check$1.type(
                options2,
                "object",
                "buffer arguments must be an object, a number or an array"
              );
              if ("data" in options2) {
                check$1(
                  data === null || Array.isArray(data) || isTypedArray(data) || isNDArrayLike(data),
                  "invalid data for buffer"
                );
                data = options2.data;
              }
              if ("usage" in options2) {
                check$1.parameter(options2.usage, usageTypes, "invalid buffer usage");
                usage = usageTypes[options2.usage];
              }
              if ("type" in options2) {
                check$1.parameter(options2.type, glTypes, "invalid buffer type");
                dtype = glTypes[options2.type];
              }
              if ("dimension" in options2) {
                check$1.type(options2.dimension, "number", "invalid dimension");
                dimension = options2.dimension | 0;
              }
              if ("length" in options2) {
                check$1.nni(byteLength, "buffer length must be a nonnegative integer");
                byteLength = options2.length | 0;
              }
            }
            buffer.bind();
            if (!data) {
              if (byteLength) gl.bufferData(buffer.type, byteLength, usage);
              buffer.dtype = dtype || GL_UNSIGNED_BYTE$3;
              buffer.usage = usage;
              buffer.dimension = dimension;
              buffer.byteLength = byteLength;
            } else {
              initBufferFromData(buffer, data, usage, dtype, dimension, persistent);
            }
            if (config.profile) {
              buffer.stats.size = buffer.byteLength * DTYPES_SIZES[buffer.dtype];
            }
            return reglBuffer;
          }
          function setSubData(data, offset) {
            check$1(
              offset + data.byteLength <= buffer.byteLength,
              "invalid buffer subdata call, buffer is too small.  Can't write data of size " + data.byteLength + " starting from offset " + offset + " to a buffer of size " + buffer.byteLength
            );
            gl.bufferSubData(buffer.type, offset, data);
          }
          function subdata(data, offset_) {
            var offset = (offset_ || 0) | 0;
            var shape;
            buffer.bind();
            if (isTypedArray(data) || data instanceof ArrayBuffer) {
              setSubData(data, offset);
            } else if (Array.isArray(data)) {
              if (data.length > 0) {
                if (typeof data[0] === "number") {
                  var converted = pool.allocType(buffer.dtype, data.length);
                  copyArray(converted, data);
                  setSubData(converted, offset);
                  pool.freeType(converted);
                } else if (Array.isArray(data[0]) || isTypedArray(data[0])) {
                  shape = arrayShape(data);
                  var flatData = arrayFlatten(data, shape, buffer.dtype);
                  setSubData(flatData, offset);
                  pool.freeType(flatData);
                } else {
                  check$1.raise("invalid buffer data");
                }
              }
            } else if (isNDArrayLike(data)) {
              shape = data.shape;
              var stride = data.stride;
              var shapeX = 0;
              var shapeY = 0;
              var strideX = 0;
              var strideY = 0;
              if (shape.length === 1) {
                shapeX = shape[0];
                shapeY = 1;
                strideX = stride[0];
                strideY = 0;
              } else if (shape.length === 2) {
                shapeX = shape[0];
                shapeY = shape[1];
                strideX = stride[0];
                strideY = stride[1];
              } else {
                check$1.raise("invalid shape");
              }
              var dtype = Array.isArray(data.data) ? buffer.dtype : typedArrayCode(data.data);
              var transposeData2 = pool.allocType(dtype, shapeX * shapeY);
              transpose2(
                transposeData2,
                data.data,
                shapeX,
                shapeY,
                strideX,
                strideY,
                data.offset
              );
              setSubData(transposeData2, offset);
              pool.freeType(transposeData2);
            } else {
              check$1.raise("invalid data for buffer subdata");
            }
            return reglBuffer;
          }
          if (!deferInit) {
            reglBuffer(options);
          }
          reglBuffer._reglType = "buffer";
          reglBuffer._buffer = buffer;
          reglBuffer.subdata = subdata;
          if (config.profile) {
            reglBuffer.stats = buffer.stats;
          }
          reglBuffer.destroy = function() {
            destroy(buffer);
          };
          return reglBuffer;
        }
        function restoreBuffers() {
          values(bufferSet).forEach(function(buffer) {
            buffer.buffer = gl.createBuffer();
            gl.bindBuffer(buffer.type, buffer.buffer);
            gl.bufferData(
              buffer.type,
              buffer.persistentData || buffer.byteLength,
              buffer.usage
            );
          });
        }
        if (config.profile) {
          stats2.getTotalBufferSize = function() {
            var total = 0;
            Object.keys(bufferSet).forEach(function(key) {
              total += bufferSet[key].stats.size;
            });
            return total;
          };
        }
        return {
          create: createBuffer,
          createStream,
          destroyStream,
          clear: function() {
            values(bufferSet).forEach(destroy);
            streamPool.forEach(destroy);
          },
          getBuffer: function(wrapper) {
            if (wrapper && wrapper._buffer instanceof REGLBuffer) {
              return wrapper._buffer;
            }
            return null;
          },
          restore: restoreBuffers,
          _initBuffer: initBufferFromData
        };
      }
      var points = 0;
      var point = 0;
      var lines = 1;
      var line = 1;
      var triangles = 4;
      var triangle = 4;
      var primTypes = {
        points,
        point,
        lines,
        line,
        triangles,
        triangle,
        "line loop": 2,
        "line strip": 3,
        "triangle strip": 5,
        "triangle fan": 6
      };
      var GL_POINTS = 0;
      var GL_LINES = 1;
      var GL_TRIANGLES = 4;
      var GL_BYTE$2 = 5120;
      var GL_UNSIGNED_BYTE$4 = 5121;
      var GL_SHORT$2 = 5122;
      var GL_UNSIGNED_SHORT$2 = 5123;
      var GL_INT$2 = 5124;
      var GL_UNSIGNED_INT$2 = 5125;
      var GL_ELEMENT_ARRAY_BUFFER = 34963;
      var GL_STREAM_DRAW$1 = 35040;
      var GL_STATIC_DRAW$1 = 35044;
      function wrapElementsState(gl, extensions, bufferState, stats2) {
        var elementSet = {};
        var elementCount = 0;
        var elementTypes = {
          "uint8": GL_UNSIGNED_BYTE$4,
          "uint16": GL_UNSIGNED_SHORT$2
        };
        if (extensions.oes_element_index_uint) {
          elementTypes.uint32 = GL_UNSIGNED_INT$2;
        }
        function REGLElementBuffer(buffer) {
          this.id = elementCount++;
          elementSet[this.id] = this;
          this.buffer = buffer;
          this.primType = GL_TRIANGLES;
          this.vertCount = 0;
          this.type = 0;
        }
        REGLElementBuffer.prototype.bind = function() {
          this.buffer.bind();
        };
        var bufferPool = [];
        function createElementStream(data) {
          var result = bufferPool.pop();
          if (!result) {
            result = new REGLElementBuffer(bufferState.create(
              null,
              GL_ELEMENT_ARRAY_BUFFER,
              true,
              false
            )._buffer);
          }
          initElements(result, data, GL_STREAM_DRAW$1, -1, -1, 0, 0);
          return result;
        }
        function destroyElementStream(elements) {
          bufferPool.push(elements);
        }
        function initElements(elements, data, usage, prim, count, byteLength, type) {
          elements.buffer.bind();
          var dtype;
          if (data) {
            var predictedType = type;
            if (!type && (!isTypedArray(data) || isNDArrayLike(data) && !isTypedArray(data.data))) {
              predictedType = extensions.oes_element_index_uint ? GL_UNSIGNED_INT$2 : GL_UNSIGNED_SHORT$2;
            }
            bufferState._initBuffer(
              elements.buffer,
              data,
              usage,
              predictedType,
              3
            );
          } else {
            gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, byteLength, usage);
            elements.buffer.dtype = dtype || GL_UNSIGNED_BYTE$4;
            elements.buffer.usage = usage;
            elements.buffer.dimension = 3;
            elements.buffer.byteLength = byteLength;
          }
          dtype = type;
          if (!type) {
            switch (elements.buffer.dtype) {
              case GL_UNSIGNED_BYTE$4:
              case GL_BYTE$2:
                dtype = GL_UNSIGNED_BYTE$4;
                break;
              case GL_UNSIGNED_SHORT$2:
              case GL_SHORT$2:
                dtype = GL_UNSIGNED_SHORT$2;
                break;
              case GL_UNSIGNED_INT$2:
              case GL_INT$2:
                dtype = GL_UNSIGNED_INT$2;
                break;
              default:
                check$1.raise("unsupported type for element array");
            }
            elements.buffer.dtype = dtype;
          }
          elements.type = dtype;
          check$1(
            dtype !== GL_UNSIGNED_INT$2 || !!extensions.oes_element_index_uint,
            "32 bit element buffers not supported, enable oes_element_index_uint first"
          );
          var vertCount = count;
          if (vertCount < 0) {
            vertCount = elements.buffer.byteLength;
            if (dtype === GL_UNSIGNED_SHORT$2) {
              vertCount >>= 1;
            } else if (dtype === GL_UNSIGNED_INT$2) {
              vertCount >>= 2;
            }
          }
          elements.vertCount = vertCount;
          var primType = prim;
          if (prim < 0) {
            primType = GL_TRIANGLES;
            var dimension = elements.buffer.dimension;
            if (dimension === 1) primType = GL_POINTS;
            if (dimension === 2) primType = GL_LINES;
            if (dimension === 3) primType = GL_TRIANGLES;
          }
          elements.primType = primType;
        }
        function destroyElements(elements) {
          stats2.elementsCount--;
          check$1(elements.buffer !== null, "must not double destroy elements");
          delete elementSet[elements.id];
          elements.buffer.destroy();
          elements.buffer = null;
        }
        function createElements(options, persistent) {
          var buffer = bufferState.create(null, GL_ELEMENT_ARRAY_BUFFER, true);
          var elements = new REGLElementBuffer(buffer._buffer);
          stats2.elementsCount++;
          function reglElements(options2) {
            if (!options2) {
              buffer();
              elements.primType = GL_TRIANGLES;
              elements.vertCount = 0;
              elements.type = GL_UNSIGNED_BYTE$4;
            } else if (typeof options2 === "number") {
              buffer(options2);
              elements.primType = GL_TRIANGLES;
              elements.vertCount = options2 | 0;
              elements.type = GL_UNSIGNED_BYTE$4;
            } else {
              var data = null;
              var usage = GL_STATIC_DRAW$1;
              var primType = -1;
              var vertCount = -1;
              var byteLength = 0;
              var dtype = 0;
              if (Array.isArray(options2) || isTypedArray(options2) || isNDArrayLike(options2)) {
                data = options2;
              } else {
                check$1.type(options2, "object", "invalid arguments for elements");
                if ("data" in options2) {
                  data = options2.data;
                  check$1(
                    Array.isArray(data) || isTypedArray(data) || isNDArrayLike(data),
                    "invalid data for element buffer"
                  );
                }
                if ("usage" in options2) {
                  check$1.parameter(
                    options2.usage,
                    usageTypes,
                    "invalid element buffer usage"
                  );
                  usage = usageTypes[options2.usage];
                }
                if ("primitive" in options2) {
                  check$1.parameter(
                    options2.primitive,
                    primTypes,
                    "invalid element buffer primitive"
                  );
                  primType = primTypes[options2.primitive];
                }
                if ("count" in options2) {
                  check$1(
                    typeof options2.count === "number" && options2.count >= 0,
                    "invalid vertex count for elements"
                  );
                  vertCount = options2.count | 0;
                }
                if ("type" in options2) {
                  check$1.parameter(
                    options2.type,
                    elementTypes,
                    "invalid buffer type"
                  );
                  dtype = elementTypes[options2.type];
                }
                if ("length" in options2) {
                  byteLength = options2.length | 0;
                } else {
                  byteLength = vertCount;
                  if (dtype === GL_UNSIGNED_SHORT$2 || dtype === GL_SHORT$2) {
                    byteLength *= 2;
                  } else if (dtype === GL_UNSIGNED_INT$2 || dtype === GL_INT$2) {
                    byteLength *= 4;
                  }
                }
              }
              initElements(
                elements,
                data,
                usage,
                primType,
                vertCount,
                byteLength,
                dtype
              );
            }
            return reglElements;
          }
          reglElements(options);
          reglElements._reglType = "elements";
          reglElements._elements = elements;
          reglElements.subdata = function(data, offset) {
            buffer.subdata(data, offset);
            return reglElements;
          };
          reglElements.destroy = function() {
            destroyElements(elements);
          };
          return reglElements;
        }
        return {
          create: createElements,
          createStream: createElementStream,
          destroyStream: destroyElementStream,
          getElements: function(elements) {
            if (typeof elements === "function" && elements._elements instanceof REGLElementBuffer) {
              return elements._elements;
            }
            return null;
          },
          clear: function() {
            values(elementSet).forEach(destroyElements);
          }
        };
      }
      var FLOAT = new Float32Array(1);
      var INT = new Uint32Array(FLOAT.buffer);
      var GL_UNSIGNED_SHORT$4 = 5123;
      function convertToHalfFloat(array) {
        var ushorts = pool.allocType(GL_UNSIGNED_SHORT$4, array.length);
        for (var i11 = 0; i11 < array.length; ++i11) {
          if (isNaN(array[i11])) {
            ushorts[i11] = 65535;
          } else if (array[i11] === Infinity) {
            ushorts[i11] = 31744;
          } else if (array[i11] === -Infinity) {
            ushorts[i11] = 64512;
          } else {
            FLOAT[0] = array[i11];
            var x3 = INT[0];
            var sgn = x3 >>> 31 << 15;
            var exp = (x3 << 1 >>> 24) - 127;
            var frac = x3 >> 13 & (1 << 10) - 1;
            if (exp < -24) {
              ushorts[i11] = sgn;
            } else if (exp < -14) {
              var s15 = -14 - exp;
              ushorts[i11] = sgn + (frac + (1 << 10) >> s15);
            } else if (exp > 15) {
              ushorts[i11] = sgn + 31744;
            } else {
              ushorts[i11] = sgn + (exp + 15 << 10) + frac;
            }
          }
        }
        return ushorts;
      }
      function isArrayLike(s15) {
        return Array.isArray(s15) || isTypedArray(s15);
      }
      var isPow2$1 = function(v3) {
        return !(v3 & v3 - 1) && !!v3;
      };
      var GL_COMPRESSED_TEXTURE_FORMATS = 34467;
      var GL_TEXTURE_2D$1 = 3553;
      var GL_TEXTURE_CUBE_MAP$1 = 34067;
      var GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 = 34069;
      var GL_RGBA$1 = 6408;
      var GL_ALPHA = 6406;
      var GL_RGB = 6407;
      var GL_LUMINANCE = 6409;
      var GL_LUMINANCE_ALPHA = 6410;
      var GL_RGBA4 = 32854;
      var GL_RGB5_A1 = 32855;
      var GL_RGB565 = 36194;
      var GL_UNSIGNED_SHORT_4_4_4_4$1 = 32819;
      var GL_UNSIGNED_SHORT_5_5_5_1$1 = 32820;
      var GL_UNSIGNED_SHORT_5_6_5$1 = 33635;
      var GL_UNSIGNED_INT_24_8_WEBGL$1 = 34042;
      var GL_DEPTH_COMPONENT = 6402;
      var GL_DEPTH_STENCIL = 34041;
      var GL_SRGB_EXT = 35904;
      var GL_SRGB_ALPHA_EXT = 35906;
      var GL_HALF_FLOAT_OES$1 = 36193;
      var GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 33776;
      var GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777;
      var GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778;
      var GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779;
      var GL_COMPRESSED_RGB_ATC_WEBGL = 35986;
      var GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 35987;
      var GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 34798;
      var GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 35840;
      var GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 35841;
      var GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 35842;
      var GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 35843;
      var GL_COMPRESSED_RGB_ETC1_WEBGL = 36196;
      var GL_UNSIGNED_BYTE$5 = 5121;
      var GL_UNSIGNED_SHORT$3 = 5123;
      var GL_UNSIGNED_INT$3 = 5125;
      var GL_FLOAT$4 = 5126;
      var GL_TEXTURE_WRAP_S = 10242;
      var GL_TEXTURE_WRAP_T = 10243;
      var GL_REPEAT = 10497;
      var GL_CLAMP_TO_EDGE$1 = 33071;
      var GL_MIRRORED_REPEAT = 33648;
      var GL_TEXTURE_MAG_FILTER = 10240;
      var GL_TEXTURE_MIN_FILTER = 10241;
      var GL_NEAREST$1 = 9728;
      var GL_LINEAR = 9729;
      var GL_NEAREST_MIPMAP_NEAREST$1 = 9984;
      var GL_LINEAR_MIPMAP_NEAREST$1 = 9985;
      var GL_NEAREST_MIPMAP_LINEAR$1 = 9986;
      var GL_LINEAR_MIPMAP_LINEAR$1 = 9987;
      var GL_GENERATE_MIPMAP_HINT = 33170;
      var GL_DONT_CARE = 4352;
      var GL_FASTEST = 4353;
      var GL_NICEST = 4354;
      var GL_TEXTURE_MAX_ANISOTROPY_EXT = 34046;
      var GL_UNPACK_ALIGNMENT = 3317;
      var GL_UNPACK_FLIP_Y_WEBGL = 37440;
      var GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
      var GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
      var GL_BROWSER_DEFAULT_WEBGL = 37444;
      var GL_TEXTURE0$1 = 33984;
      var MIPMAP_FILTERS = [
        GL_NEAREST_MIPMAP_NEAREST$1,
        GL_NEAREST_MIPMAP_LINEAR$1,
        GL_LINEAR_MIPMAP_NEAREST$1,
        GL_LINEAR_MIPMAP_LINEAR$1
      ];
      var CHANNELS_FORMAT = [
        0,
        GL_LUMINANCE,
        GL_LUMINANCE_ALPHA,
        GL_RGB,
        GL_RGBA$1
      ];
      var FORMAT_CHANNELS = {};
      FORMAT_CHANNELS[GL_LUMINANCE] = FORMAT_CHANNELS[GL_ALPHA] = FORMAT_CHANNELS[GL_DEPTH_COMPONENT] = 1;
      FORMAT_CHANNELS[GL_DEPTH_STENCIL] = FORMAT_CHANNELS[GL_LUMINANCE_ALPHA] = 2;
      FORMAT_CHANNELS[GL_RGB] = FORMAT_CHANNELS[GL_SRGB_EXT] = 3;
      FORMAT_CHANNELS[GL_RGBA$1] = FORMAT_CHANNELS[GL_SRGB_ALPHA_EXT] = 4;
      function objectName(str2) {
        return "[object " + str2 + "]";
      }
      var CANVAS_CLASS = objectName("HTMLCanvasElement");
      var OFFSCREENCANVAS_CLASS = objectName("OffscreenCanvas");
      var CONTEXT2D_CLASS = objectName("CanvasRenderingContext2D");
      var BITMAP_CLASS = objectName("ImageBitmap");
      var IMAGE_CLASS = objectName("HTMLImageElement");
      var VIDEO_CLASS = objectName("HTMLVideoElement");
      var PIXEL_CLASSES = Object.keys(arrayTypes).concat([
        CANVAS_CLASS,
        OFFSCREENCANVAS_CLASS,
        CONTEXT2D_CLASS,
        BITMAP_CLASS,
        IMAGE_CLASS,
        VIDEO_CLASS
      ]);
      var TYPE_SIZES = [];
      TYPE_SIZES[GL_UNSIGNED_BYTE$5] = 1;
      TYPE_SIZES[GL_FLOAT$4] = 4;
      TYPE_SIZES[GL_HALF_FLOAT_OES$1] = 2;
      TYPE_SIZES[GL_UNSIGNED_SHORT$3] = 2;
      TYPE_SIZES[GL_UNSIGNED_INT$3] = 4;
      var FORMAT_SIZES_SPECIAL = [];
      FORMAT_SIZES_SPECIAL[GL_RGBA4] = 2;
      FORMAT_SIZES_SPECIAL[GL_RGB5_A1] = 2;
      FORMAT_SIZES_SPECIAL[GL_RGB565] = 2;
      FORMAT_SIZES_SPECIAL[GL_DEPTH_STENCIL] = 4;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_S3TC_DXT1_EXT] = 0.5;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT1_EXT] = 0.5;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT3_EXT] = 1;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT5_EXT] = 1;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ATC_WEBGL] = 0.5;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL] = 1;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL] = 1;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG] = 0.5;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG] = 0.25;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG] = 0.5;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG] = 0.25;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ETC1_WEBGL] = 0.5;
      function isNumericArray(arr) {
        return Array.isArray(arr) && (arr.length === 0 || typeof arr[0] === "number");
      }
      function isRectArray(arr) {
        if (!Array.isArray(arr)) {
          return false;
        }
        var width = arr.length;
        if (width === 0 || !isArrayLike(arr[0])) {
          return false;
        }
        return true;
      }
      function classString(x3) {
        return Object.prototype.toString.call(x3);
      }
      function isCanvasElement(object) {
        return classString(object) === CANVAS_CLASS;
      }
      function isOffscreenCanvas(object) {
        return classString(object) === OFFSCREENCANVAS_CLASS;
      }
      function isContext2D(object) {
        return classString(object) === CONTEXT2D_CLASS;
      }
      function isBitmap(object) {
        return classString(object) === BITMAP_CLASS;
      }
      function isImageElement(object) {
        return classString(object) === IMAGE_CLASS;
      }
      function isVideoElement(object) {
        return classString(object) === VIDEO_CLASS;
      }
      function isPixelData(object) {
        if (!object) {
          return false;
        }
        var className = classString(object);
        if (PIXEL_CLASSES.indexOf(className) >= 0) {
          return true;
        }
        return isNumericArray(object) || isRectArray(object) || isNDArrayLike(object);
      }
      function typedArrayCode$1(data) {
        return arrayTypes[Object.prototype.toString.call(data)] | 0;
      }
      function convertData(result, data) {
        var n17 = data.length;
        switch (result.type) {
          case GL_UNSIGNED_BYTE$5:
          case GL_UNSIGNED_SHORT$3:
          case GL_UNSIGNED_INT$3:
          case GL_FLOAT$4:
            var converted = pool.allocType(result.type, n17);
            converted.set(data);
            result.data = converted;
            break;
          case GL_HALF_FLOAT_OES$1:
            result.data = convertToHalfFloat(data);
            break;
          default:
            check$1.raise("unsupported texture type, must specify a typed array");
        }
      }
      function preConvert(image, n17) {
        return pool.allocType(
          image.type === GL_HALF_FLOAT_OES$1 ? GL_FLOAT$4 : image.type,
          n17
        );
      }
      function postConvert(image, data) {
        if (image.type === GL_HALF_FLOAT_OES$1) {
          image.data = convertToHalfFloat(data);
          pool.freeType(data);
        } else {
          image.data = data;
        }
      }
      function transposeData(image, array, strideX, strideY, strideC, offset) {
        var w3 = image.width;
        var h6 = image.height;
        var c11 = image.channels;
        var n17 = w3 * h6 * c11;
        var data = preConvert(image, n17);
        var p5 = 0;
        for (var i11 = 0; i11 < h6; ++i11) {
          for (var j6 = 0; j6 < w3; ++j6) {
            for (var k5 = 0; k5 < c11; ++k5) {
              data[p5++] = array[strideX * j6 + strideY * i11 + strideC * k5 + offset];
            }
          }
        }
        postConvert(image, data);
      }
      function getTextureSize(format, type, width, height, isMipmap, isCube) {
        var s15;
        if (typeof FORMAT_SIZES_SPECIAL[format] !== "undefined") {
          s15 = FORMAT_SIZES_SPECIAL[format];
        } else {
          s15 = FORMAT_CHANNELS[format] * TYPE_SIZES[type];
        }
        if (isCube) {
          s15 *= 6;
        }
        if (isMipmap) {
          var total = 0;
          var w3 = width;
          while (w3 >= 1) {
            total += s15 * w3 * w3;
            w3 /= 2;
          }
          return total;
        } else {
          return s15 * width * height;
        }
      }
      function createTextureSet(gl, extensions, limits, reglPoll, contextState, stats2, config) {
        var mipmapHint = {
          "don't care": GL_DONT_CARE,
          "dont care": GL_DONT_CARE,
          "nice": GL_NICEST,
          "fast": GL_FASTEST
        };
        var wrapModes = {
          "repeat": GL_REPEAT,
          "clamp": GL_CLAMP_TO_EDGE$1,
          "mirror": GL_MIRRORED_REPEAT
        };
        var magFilters = {
          "nearest": GL_NEAREST$1,
          "linear": GL_LINEAR
        };
        var minFilters = extend({
          "mipmap": GL_LINEAR_MIPMAP_LINEAR$1,
          "nearest mipmap nearest": GL_NEAREST_MIPMAP_NEAREST$1,
          "linear mipmap nearest": GL_LINEAR_MIPMAP_NEAREST$1,
          "nearest mipmap linear": GL_NEAREST_MIPMAP_LINEAR$1,
          "linear mipmap linear": GL_LINEAR_MIPMAP_LINEAR$1
        }, magFilters);
        var colorSpace = {
          "none": 0,
          "browser": GL_BROWSER_DEFAULT_WEBGL
        };
        var textureTypes = {
          "uint8": GL_UNSIGNED_BYTE$5,
          "rgba4": GL_UNSIGNED_SHORT_4_4_4_4$1,
          "rgb565": GL_UNSIGNED_SHORT_5_6_5$1,
          "rgb5 a1": GL_UNSIGNED_SHORT_5_5_5_1$1
        };
        var textureFormats = {
          "alpha": GL_ALPHA,
          "luminance": GL_LUMINANCE,
          "luminance alpha": GL_LUMINANCE_ALPHA,
          "rgb": GL_RGB,
          "rgba": GL_RGBA$1,
          "rgba4": GL_RGBA4,
          "rgb5 a1": GL_RGB5_A1,
          "rgb565": GL_RGB565
        };
        var compressedTextureFormats = {};
        if (extensions.ext_srgb) {
          textureFormats.srgb = GL_SRGB_EXT;
          textureFormats.srgba = GL_SRGB_ALPHA_EXT;
        }
        if (extensions.oes_texture_float) {
          textureTypes.float32 = textureTypes.float = GL_FLOAT$4;
        }
        if (extensions.oes_texture_half_float) {
          textureTypes["float16"] = textureTypes["half float"] = GL_HALF_FLOAT_OES$1;
        }
        if (extensions.webgl_depth_texture) {
          extend(textureFormats, {
            "depth": GL_DEPTH_COMPONENT,
            "depth stencil": GL_DEPTH_STENCIL
          });
          extend(textureTypes, {
            "uint16": GL_UNSIGNED_SHORT$3,
            "uint32": GL_UNSIGNED_INT$3,
            "depth stencil": GL_UNSIGNED_INT_24_8_WEBGL$1
          });
        }
        if (extensions.webgl_compressed_texture_s3tc) {
          extend(compressedTextureFormats, {
            "rgb s3tc dxt1": GL_COMPRESSED_RGB_S3TC_DXT1_EXT,
            "rgba s3tc dxt1": GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,
            "rgba s3tc dxt3": GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,
            "rgba s3tc dxt5": GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
          });
        }
        if (extensions.webgl_compressed_texture_atc) {
          extend(compressedTextureFormats, {
            "rgb atc": GL_COMPRESSED_RGB_ATC_WEBGL,
            "rgba atc explicit alpha": GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL,
            "rgba atc interpolated alpha": GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL
          });
        }
        if (extensions.webgl_compressed_texture_pvrtc) {
          extend(compressedTextureFormats, {
            "rgb pvrtc 4bppv1": GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG,
            "rgb pvrtc 2bppv1": GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG,
            "rgba pvrtc 4bppv1": GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,
            "rgba pvrtc 2bppv1": GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
          });
        }
        if (extensions.webgl_compressed_texture_etc1) {
          compressedTextureFormats["rgb etc1"] = GL_COMPRESSED_RGB_ETC1_WEBGL;
        }
        var supportedCompressedFormats = Array.prototype.slice.call(
          gl.getParameter(GL_COMPRESSED_TEXTURE_FORMATS)
        );
        Object.keys(compressedTextureFormats).forEach(function(name) {
          var format = compressedTextureFormats[name];
          if (supportedCompressedFormats.indexOf(format) >= 0) {
            textureFormats[name] = format;
          }
        });
        var supportedFormats = Object.keys(textureFormats);
        limits.textureFormats = supportedFormats;
        var textureFormatsInvert = [];
        Object.keys(textureFormats).forEach(function(key) {
          var val = textureFormats[key];
          textureFormatsInvert[val] = key;
        });
        var textureTypesInvert = [];
        Object.keys(textureTypes).forEach(function(key) {
          var val = textureTypes[key];
          textureTypesInvert[val] = key;
        });
        var magFiltersInvert = [];
        Object.keys(magFilters).forEach(function(key) {
          var val = magFilters[key];
          magFiltersInvert[val] = key;
        });
        var minFiltersInvert = [];
        Object.keys(minFilters).forEach(function(key) {
          var val = minFilters[key];
          minFiltersInvert[val] = key;
        });
        var wrapModesInvert = [];
        Object.keys(wrapModes).forEach(function(key) {
          var val = wrapModes[key];
          wrapModesInvert[val] = key;
        });
        var colorFormats = supportedFormats.reduce(function(color2, key) {
          var glenum = textureFormats[key];
          if (glenum === GL_LUMINANCE || glenum === GL_ALPHA || glenum === GL_LUMINANCE || glenum === GL_LUMINANCE_ALPHA || glenum === GL_DEPTH_COMPONENT || glenum === GL_DEPTH_STENCIL || extensions.ext_srgb && (glenum === GL_SRGB_EXT || glenum === GL_SRGB_ALPHA_EXT)) {
            color2[glenum] = glenum;
          } else if (glenum === GL_RGB5_A1 || key.indexOf("rgba") >= 0) {
            color2[glenum] = GL_RGBA$1;
          } else {
            color2[glenum] = GL_RGB;
          }
          return color2;
        }, {});
        function TexFlags() {
          this.internalformat = GL_RGBA$1;
          this.format = GL_RGBA$1;
          this.type = GL_UNSIGNED_BYTE$5;
          this.compressed = false;
          this.premultiplyAlpha = false;
          this.flipY = false;
          this.unpackAlignment = 1;
          this.colorSpace = GL_BROWSER_DEFAULT_WEBGL;
          this.width = 0;
          this.height = 0;
          this.channels = 0;
        }
        function copyFlags(result, other) {
          result.internalformat = other.internalformat;
          result.format = other.format;
          result.type = other.type;
          result.compressed = other.compressed;
          result.premultiplyAlpha = other.premultiplyAlpha;
          result.flipY = other.flipY;
          result.unpackAlignment = other.unpackAlignment;
          result.colorSpace = other.colorSpace;
          result.width = other.width;
          result.height = other.height;
          result.channels = other.channels;
        }
        function parseFlags(flags, options) {
          if (typeof options !== "object" || !options) {
            return;
          }
          if ("premultiplyAlpha" in options) {
            check$1.type(
              options.premultiplyAlpha,
              "boolean",
              "invalid premultiplyAlpha"
            );
            flags.premultiplyAlpha = options.premultiplyAlpha;
          }
          if ("flipY" in options) {
            check$1.type(
              options.flipY,
              "boolean",
              "invalid texture flip"
            );
            flags.flipY = options.flipY;
          }
          if ("alignment" in options) {
            check$1.oneOf(
              options.alignment,
              [1, 2, 4, 8],
              "invalid texture unpack alignment"
            );
            flags.unpackAlignment = options.alignment;
          }
          if ("colorSpace" in options) {
            check$1.parameter(
              options.colorSpace,
              colorSpace,
              "invalid colorSpace"
            );
            flags.colorSpace = colorSpace[options.colorSpace];
          }
          if ("type" in options) {
            var type = options.type;
            check$1(
              extensions.oes_texture_float || !(type === "float" || type === "float32"),
              "you must enable the OES_texture_float extension in order to use floating point textures."
            );
            check$1(
              extensions.oes_texture_half_float || !(type === "half float" || type === "float16"),
              "you must enable the OES_texture_half_float extension in order to use 16-bit floating point textures."
            );
            check$1(
              extensions.webgl_depth_texture || !(type === "uint16" || type === "uint32" || type === "depth stencil"),
              "you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures."
            );
            check$1.parameter(
              type,
              textureTypes,
              "invalid texture type"
            );
            flags.type = textureTypes[type];
          }
          var w3 = flags.width;
          var h6 = flags.height;
          var c11 = flags.channels;
          var hasChannels = false;
          if ("shape" in options) {
            check$1(
              Array.isArray(options.shape) && options.shape.length >= 2,
              "shape must be an array"
            );
            w3 = options.shape[0];
            h6 = options.shape[1];
            if (options.shape.length === 3) {
              c11 = options.shape[2];
              check$1(c11 > 0 && c11 <= 4, "invalid number of channels");
              hasChannels = true;
            }
            check$1(w3 >= 0 && w3 <= limits.maxTextureSize, "invalid width");
            check$1(h6 >= 0 && h6 <= limits.maxTextureSize, "invalid height");
          } else {
            if ("radius" in options) {
              w3 = h6 = options.radius;
              check$1(w3 >= 0 && w3 <= limits.maxTextureSize, "invalid radius");
            }
            if ("width" in options) {
              w3 = options.width;
              check$1(w3 >= 0 && w3 <= limits.maxTextureSize, "invalid width");
            }
            if ("height" in options) {
              h6 = options.height;
              check$1(h6 >= 0 && h6 <= limits.maxTextureSize, "invalid height");
            }
            if ("channels" in options) {
              c11 = options.channels;
              check$1(c11 > 0 && c11 <= 4, "invalid number of channels");
              hasChannels = true;
            }
          }
          flags.width = w3 | 0;
          flags.height = h6 | 0;
          flags.channels = c11 | 0;
          var hasFormat = false;
          if ("format" in options) {
            var formatStr = options.format;
            check$1(
              extensions.webgl_depth_texture || !(formatStr === "depth" || formatStr === "depth stencil"),
              "you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures."
            );
            check$1.parameter(
              formatStr,
              textureFormats,
              "invalid texture format"
            );
            var internalformat = flags.internalformat = textureFormats[formatStr];
            flags.format = colorFormats[internalformat];
            if (formatStr in textureTypes) {
              if (!("type" in options)) {
                flags.type = textureTypes[formatStr];
              }
            }
            if (formatStr in compressedTextureFormats) {
              flags.compressed = true;
            }
            hasFormat = true;
          }
          if (!hasChannels && hasFormat) {
            flags.channels = FORMAT_CHANNELS[flags.format];
          } else if (hasChannels && !hasFormat) {
            if (flags.channels !== CHANNELS_FORMAT[flags.format]) {
              flags.format = flags.internalformat = CHANNELS_FORMAT[flags.channels];
            }
          } else if (hasFormat && hasChannels) {
            check$1(
              flags.channels === FORMAT_CHANNELS[flags.format],
              "number of channels inconsistent with specified format"
            );
          }
        }
        function setFlags(flags) {
          gl.pixelStorei(GL_UNPACK_FLIP_Y_WEBGL, flags.flipY);
          gl.pixelStorei(GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL, flags.premultiplyAlpha);
          gl.pixelStorei(GL_UNPACK_COLORSPACE_CONVERSION_WEBGL, flags.colorSpace);
          gl.pixelStorei(GL_UNPACK_ALIGNMENT, flags.unpackAlignment);
        }
        function TexImage() {
          TexFlags.call(this);
          this.xOffset = 0;
          this.yOffset = 0;
          this.data = null;
          this.needsFree = false;
          this.element = null;
          this.needsCopy = false;
        }
        function parseImage(image, options) {
          var data = null;
          if (isPixelData(options)) {
            data = options;
          } else if (options) {
            check$1.type(options, "object", "invalid pixel data type");
            parseFlags(image, options);
            if ("x" in options) {
              image.xOffset = options.x | 0;
            }
            if ("y" in options) {
              image.yOffset = options.y | 0;
            }
            if (isPixelData(options.data)) {
              data = options.data;
            }
          }
          check$1(
            !image.compressed || data instanceof Uint8Array,
            "compressed texture data must be stored in a uint8array"
          );
          if (options.copy) {
            check$1(!data, "can not specify copy and data field for the same texture");
            var viewW = contextState.viewportWidth;
            var viewH = contextState.viewportHeight;
            image.width = image.width || viewW - image.xOffset;
            image.height = image.height || viewH - image.yOffset;
            image.needsCopy = true;
            check$1(
              image.xOffset >= 0 && image.xOffset < viewW && image.yOffset >= 0 && image.yOffset < viewH && image.width > 0 && image.width <= viewW && image.height > 0 && image.height <= viewH,
              "copy texture read out of bounds"
            );
          } else if (!data) {
            image.width = image.width || 1;
            image.height = image.height || 1;
            image.channels = image.channels || 4;
          } else if (isTypedArray(data)) {
            image.channels = image.channels || 4;
            image.data = data;
            if (!("type" in options) && image.type === GL_UNSIGNED_BYTE$5) {
              image.type = typedArrayCode$1(data);
            }
          } else if (isNumericArray(data)) {
            image.channels = image.channels || 4;
            convertData(image, data);
            image.alignment = 1;
            image.needsFree = true;
          } else if (isNDArrayLike(data)) {
            var array = data.data;
            if (!Array.isArray(array) && image.type === GL_UNSIGNED_BYTE$5) {
              image.type = typedArrayCode$1(array);
            }
            var shape = data.shape;
            var stride = data.stride;
            var shapeX, shapeY, shapeC, strideX, strideY, strideC;
            if (shape.length === 3) {
              shapeC = shape[2];
              strideC = stride[2];
            } else {
              check$1(shape.length === 2, "invalid ndarray pixel data, must be 2 or 3D");
              shapeC = 1;
              strideC = 1;
            }
            shapeX = shape[0];
            shapeY = shape[1];
            strideX = stride[0];
            strideY = stride[1];
            image.alignment = 1;
            image.width = shapeX;
            image.height = shapeY;
            image.channels = shapeC;
            image.format = image.internalformat = CHANNELS_FORMAT[shapeC];
            image.needsFree = true;
            transposeData(image, array, strideX, strideY, strideC, data.offset);
          } else if (isCanvasElement(data) || isOffscreenCanvas(data) || isContext2D(data)) {
            if (isCanvasElement(data) || isOffscreenCanvas(data)) {
              image.element = data;
            } else {
              image.element = data.canvas;
            }
            image.width = image.element.width;
            image.height = image.element.height;
            image.channels = 4;
          } else if (isBitmap(data)) {
            image.element = data;
            image.width = data.width;
            image.height = data.height;
            image.channels = 4;
          } else if (isImageElement(data)) {
            image.element = data;
            image.width = data.naturalWidth;
            image.height = data.naturalHeight;
            image.channels = 4;
          } else if (isVideoElement(data)) {
            image.element = data;
            image.width = data.videoWidth;
            image.height = data.videoHeight;
            image.channels = 4;
          } else if (isRectArray(data)) {
            var w3 = image.width || data[0].length;
            var h6 = image.height || data.length;
            var c11 = image.channels;
            if (isArrayLike(data[0][0])) {
              c11 = c11 || data[0][0].length;
            } else {
              c11 = c11 || 1;
            }
            var arrayShape2 = flattenUtils.shape(data);
            var n17 = 1;
            for (var dd = 0; dd < arrayShape2.length; ++dd) {
              n17 *= arrayShape2[dd];
            }
            var allocData = preConvert(image, n17);
            flattenUtils.flatten(data, arrayShape2, "", allocData);
            postConvert(image, allocData);
            image.alignment = 1;
            image.width = w3;
            image.height = h6;
            image.channels = c11;
            image.format = image.internalformat = CHANNELS_FORMAT[c11];
            image.needsFree = true;
          }
          if (image.type === GL_FLOAT$4) {
            check$1(
              limits.extensions.indexOf("oes_texture_float") >= 0,
              "oes_texture_float extension not enabled"
            );
          } else if (image.type === GL_HALF_FLOAT_OES$1) {
            check$1(
              limits.extensions.indexOf("oes_texture_half_float") >= 0,
              "oes_texture_half_float extension not enabled"
            );
          }
        }
        function setImage(info, target, miplevel) {
          var element = info.element;
          var data = info.data;
          var internalformat = info.internalformat;
          var format = info.format;
          var type = info.type;
          var width = info.width;
          var height = info.height;
          setFlags(info);
          if (element) {
            gl.texImage2D(target, miplevel, format, format, type, element);
          } else if (info.compressed) {
            gl.compressedTexImage2D(target, miplevel, internalformat, width, height, 0, data);
          } else if (info.needsCopy) {
            reglPoll();
            gl.copyTexImage2D(
              target,
              miplevel,
              format,
              info.xOffset,
              info.yOffset,
              width,
              height,
              0
            );
          } else {
            gl.texImage2D(target, miplevel, format, width, height, 0, format, type, data || null);
          }
        }
        function setSubImage(info, target, x3, y3, miplevel) {
          var element = info.element;
          var data = info.data;
          var internalformat = info.internalformat;
          var format = info.format;
          var type = info.type;
          var width = info.width;
          var height = info.height;
          setFlags(info);
          if (element) {
            gl.texSubImage2D(
              target,
              miplevel,
              x3,
              y3,
              format,
              type,
              element
            );
          } else if (info.compressed) {
            gl.compressedTexSubImage2D(
              target,
              miplevel,
              x3,
              y3,
              internalformat,
              width,
              height,
              data
            );
          } else if (info.needsCopy) {
            reglPoll();
            gl.copyTexSubImage2D(
              target,
              miplevel,
              x3,
              y3,
              info.xOffset,
              info.yOffset,
              width,
              height
            );
          } else {
            gl.texSubImage2D(
              target,
              miplevel,
              x3,
              y3,
              width,
              height,
              format,
              type,
              data
            );
          }
        }
        var imagePool = [];
        function allocImage() {
          return imagePool.pop() || new TexImage();
        }
        function freeImage(image) {
          if (image.needsFree) {
            pool.freeType(image.data);
          }
          TexImage.call(image);
          imagePool.push(image);
        }
        function MipMap() {
          TexFlags.call(this);
          this.genMipmaps = false;
          this.mipmapHint = GL_DONT_CARE;
          this.mipmask = 0;
          this.images = Array(16);
        }
        function parseMipMapFromShape(mipmap, width, height) {
          var img = mipmap.images[0] = allocImage();
          mipmap.mipmask = 1;
          img.width = mipmap.width = width;
          img.height = mipmap.height = height;
          img.channels = mipmap.channels = 4;
        }
        function parseMipMapFromObject(mipmap, options) {
          var imgData = null;
          if (isPixelData(options)) {
            imgData = mipmap.images[0] = allocImage();
            copyFlags(imgData, mipmap);
            parseImage(imgData, options);
            mipmap.mipmask = 1;
          } else {
            parseFlags(mipmap, options);
            if (Array.isArray(options.mipmap)) {
              var mipData = options.mipmap;
              for (var i11 = 0; i11 < mipData.length; ++i11) {
                imgData = mipmap.images[i11] = allocImage();
                copyFlags(imgData, mipmap);
                imgData.width >>= i11;
                imgData.height >>= i11;
                parseImage(imgData, mipData[i11]);
                mipmap.mipmask |= 1 << i11;
              }
            } else {
              imgData = mipmap.images[0] = allocImage();
              copyFlags(imgData, mipmap);
              parseImage(imgData, options);
              mipmap.mipmask = 1;
            }
          }
          copyFlags(mipmap, mipmap.images[0]);
          if (mipmap.compressed && (mipmap.internalformat === GL_COMPRESSED_RGB_S3TC_DXT1_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT1_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT3_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT5_EXT)) {
            check$1(
              mipmap.width % 4 === 0 && mipmap.height % 4 === 0,
              "for compressed texture formats, mipmap level 0 must have width and height that are a multiple of 4"
            );
          }
        }
        function setMipMap(mipmap, target) {
          var images = mipmap.images;
          for (var i11 = 0; i11 < images.length; ++i11) {
            if (!images[i11]) {
              return;
            }
            setImage(images[i11], target, i11);
          }
        }
        var mipPool = [];
        function allocMipMap() {
          var result = mipPool.pop() || new MipMap();
          TexFlags.call(result);
          result.mipmask = 0;
          for (var i11 = 0; i11 < 16; ++i11) {
            result.images[i11] = null;
          }
          return result;
        }
        function freeMipMap(mipmap) {
          var images = mipmap.images;
          for (var i11 = 0; i11 < images.length; ++i11) {
            if (images[i11]) {
              freeImage(images[i11]);
            }
            images[i11] = null;
          }
          mipPool.push(mipmap);
        }
        function TexInfo() {
          this.minFilter = GL_NEAREST$1;
          this.magFilter = GL_NEAREST$1;
          this.wrapS = GL_CLAMP_TO_EDGE$1;
          this.wrapT = GL_CLAMP_TO_EDGE$1;
          this.anisotropic = 1;
          this.genMipmaps = false;
          this.mipmapHint = GL_DONT_CARE;
        }
        function parseTexInfo(info, options) {
          if ("min" in options) {
            var minFilter = options.min;
            check$1.parameter(minFilter, minFilters);
            info.minFilter = minFilters[minFilter];
            if (MIPMAP_FILTERS.indexOf(info.minFilter) >= 0 && !("faces" in options)) {
              info.genMipmaps = true;
            }
          }
          if ("mag" in options) {
            var magFilter = options.mag;
            check$1.parameter(magFilter, magFilters);
            info.magFilter = magFilters[magFilter];
          }
          var wrapS = info.wrapS;
          var wrapT = info.wrapT;
          if ("wrap" in options) {
            var wrap = options.wrap;
            if (typeof wrap === "string") {
              check$1.parameter(wrap, wrapModes);
              wrapS = wrapT = wrapModes[wrap];
            } else if (Array.isArray(wrap)) {
              check$1.parameter(wrap[0], wrapModes);
              check$1.parameter(wrap[1], wrapModes);
              wrapS = wrapModes[wrap[0]];
              wrapT = wrapModes[wrap[1]];
            }
          } else {
            if ("wrapS" in options) {
              var optWrapS = options.wrapS;
              check$1.parameter(optWrapS, wrapModes);
              wrapS = wrapModes[optWrapS];
            }
            if ("wrapT" in options) {
              var optWrapT = options.wrapT;
              check$1.parameter(optWrapT, wrapModes);
              wrapT = wrapModes[optWrapT];
            }
          }
          info.wrapS = wrapS;
          info.wrapT = wrapT;
          if ("anisotropic" in options) {
            var anisotropic = options.anisotropic;
            check$1(
              typeof anisotropic === "number" && anisotropic >= 1 && anisotropic <= limits.maxAnisotropic,
              "aniso samples must be between 1 and "
            );
            info.anisotropic = options.anisotropic;
          }
          if ("mipmap" in options) {
            var hasMipMap = false;
            switch (typeof options.mipmap) {
              case "string":
                check$1.parameter(
                  options.mipmap,
                  mipmapHint,
                  "invalid mipmap hint"
                );
                info.mipmapHint = mipmapHint[options.mipmap];
                info.genMipmaps = true;
                hasMipMap = true;
                break;
              case "boolean":
                hasMipMap = info.genMipmaps = options.mipmap;
                break;
              case "object":
                check$1(Array.isArray(options.mipmap), "invalid mipmap type");
                info.genMipmaps = false;
                hasMipMap = true;
                break;
              default:
                check$1.raise("invalid mipmap type");
            }
            if (hasMipMap && !("min" in options)) {
              info.minFilter = GL_NEAREST_MIPMAP_NEAREST$1;
            }
          }
        }
        function setTexInfo(info, target) {
          gl.texParameteri(target, GL_TEXTURE_MIN_FILTER, info.minFilter);
          gl.texParameteri(target, GL_TEXTURE_MAG_FILTER, info.magFilter);
          gl.texParameteri(target, GL_TEXTURE_WRAP_S, info.wrapS);
          gl.texParameteri(target, GL_TEXTURE_WRAP_T, info.wrapT);
          if (extensions.ext_texture_filter_anisotropic) {
            gl.texParameteri(target, GL_TEXTURE_MAX_ANISOTROPY_EXT, info.anisotropic);
          }
          if (info.genMipmaps) {
            gl.hint(GL_GENERATE_MIPMAP_HINT, info.mipmapHint);
            gl.generateMipmap(target);
          }
        }
        var textureCount = 0;
        var textureSet = {};
        var numTexUnits = limits.maxTextureUnits;
        var textureUnits = Array(numTexUnits).map(function() {
          return null;
        });
        function REGLTexture(target) {
          TexFlags.call(this);
          this.mipmask = 0;
          this.internalformat = GL_RGBA$1;
          this.id = textureCount++;
          this.refCount = 1;
          this.target = target;
          this.texture = gl.createTexture();
          this.unit = -1;
          this.bindCount = 0;
          this.texInfo = new TexInfo();
          if (config.profile) {
            this.stats = { size: 0 };
          }
        }
        function tempBind(texture) {
          gl.activeTexture(GL_TEXTURE0$1);
          gl.bindTexture(texture.target, texture.texture);
        }
        function tempRestore() {
          var prev = textureUnits[0];
          if (prev) {
            gl.bindTexture(prev.target, prev.texture);
          } else {
            gl.bindTexture(GL_TEXTURE_2D$1, null);
          }
        }
        function destroy(texture) {
          var handle = texture.texture;
          check$1(handle, "must not double destroy texture");
          var unit = texture.unit;
          var target = texture.target;
          if (unit >= 0) {
            gl.activeTexture(GL_TEXTURE0$1 + unit);
            gl.bindTexture(target, null);
            textureUnits[unit] = null;
          }
          gl.deleteTexture(handle);
          texture.texture = null;
          texture.params = null;
          texture.pixels = null;
          texture.refCount = 0;
          delete textureSet[texture.id];
          stats2.textureCount--;
        }
        extend(REGLTexture.prototype, {
          bind: function() {
            var texture = this;
            texture.bindCount += 1;
            var unit = texture.unit;
            if (unit < 0) {
              for (var i11 = 0; i11 < numTexUnits; ++i11) {
                var other = textureUnits[i11];
                if (other) {
                  if (other.bindCount > 0) {
                    continue;
                  }
                  other.unit = -1;
                }
                textureUnits[i11] = texture;
                unit = i11;
                break;
              }
              if (unit >= numTexUnits) {
                check$1.raise("insufficient number of texture units");
              }
              if (config.profile && stats2.maxTextureUnits < unit + 1) {
                stats2.maxTextureUnits = unit + 1;
              }
              texture.unit = unit;
              gl.activeTexture(GL_TEXTURE0$1 + unit);
              gl.bindTexture(texture.target, texture.texture);
            }
            return unit;
          },
          unbind: function() {
            this.bindCount -= 1;
          },
          decRef: function() {
            if (--this.refCount <= 0) {
              destroy(this);
            }
          }
        });
        function createTexture2D(a13, b5) {
          var texture = new REGLTexture(GL_TEXTURE_2D$1);
          textureSet[texture.id] = texture;
          stats2.textureCount++;
          function reglTexture2D(a14, b6) {
            var texInfo = texture.texInfo;
            TexInfo.call(texInfo);
            var mipData = allocMipMap();
            if (typeof a14 === "number") {
              if (typeof b6 === "number") {
                parseMipMapFromShape(mipData, a14 | 0, b6 | 0);
              } else {
                parseMipMapFromShape(mipData, a14 | 0, a14 | 0);
              }
            } else if (a14) {
              check$1.type(a14, "object", "invalid arguments to regl.texture");
              parseTexInfo(texInfo, a14);
              parseMipMapFromObject(mipData, a14);
            } else {
              parseMipMapFromShape(mipData, 1, 1);
            }
            if (texInfo.genMipmaps) {
              mipData.mipmask = (mipData.width << 1) - 1;
            }
            texture.mipmask = mipData.mipmask;
            copyFlags(texture, mipData);
            check$1.texture2D(texInfo, mipData, limits);
            texture.internalformat = mipData.internalformat;
            reglTexture2D.width = mipData.width;
            reglTexture2D.height = mipData.height;
            tempBind(texture);
            setMipMap(mipData, GL_TEXTURE_2D$1);
            setTexInfo(texInfo, GL_TEXTURE_2D$1);
            tempRestore();
            freeMipMap(mipData);
            if (config.profile) {
              texture.stats.size = getTextureSize(
                texture.internalformat,
                texture.type,
                mipData.width,
                mipData.height,
                texInfo.genMipmaps,
                false
              );
            }
            reglTexture2D.format = textureFormatsInvert[texture.internalformat];
            reglTexture2D.type = textureTypesInvert[texture.type];
            reglTexture2D.mag = magFiltersInvert[texInfo.magFilter];
            reglTexture2D.min = minFiltersInvert[texInfo.minFilter];
            reglTexture2D.wrapS = wrapModesInvert[texInfo.wrapS];
            reglTexture2D.wrapT = wrapModesInvert[texInfo.wrapT];
            return reglTexture2D;
          }
          function subimage(image, x_, y_, level_) {
            check$1(!!image, "must specify image data");
            var x3 = x_ | 0;
            var y3 = y_ | 0;
            var level = level_ | 0;
            var imageData = allocImage();
            copyFlags(imageData, texture);
            imageData.width = 0;
            imageData.height = 0;
            parseImage(imageData, image);
            imageData.width = imageData.width || (texture.width >> level) - x3;
            imageData.height = imageData.height || (texture.height >> level) - y3;
            check$1(
              texture.type === imageData.type && texture.format === imageData.format && texture.internalformat === imageData.internalformat,
              "incompatible format for texture.subimage"
            );
            check$1(
              x3 >= 0 && y3 >= 0 && x3 + imageData.width <= texture.width && y3 + imageData.height <= texture.height,
              "texture.subimage write out of bounds"
            );
            check$1(
              texture.mipmask & 1 << level,
              "missing mipmap data"
            );
            check$1(
              imageData.data || imageData.element || imageData.needsCopy,
              "missing image data"
            );
            tempBind(texture);
            setSubImage(imageData, GL_TEXTURE_2D$1, x3, y3, level);
            tempRestore();
            freeImage(imageData);
            return reglTexture2D;
          }
          function resize(w_, h_) {
            var w3 = w_ | 0;
            var h6 = h_ | 0 || w3;
            if (w3 === texture.width && h6 === texture.height) {
              return reglTexture2D;
            }
            reglTexture2D.width = texture.width = w3;
            reglTexture2D.height = texture.height = h6;
            tempBind(texture);
            for (var i11 = 0; texture.mipmask >> i11; ++i11) {
              var _w = w3 >> i11;
              var _h = h6 >> i11;
              if (!_w || !_h) break;
              gl.texImage2D(
                GL_TEXTURE_2D$1,
                i11,
                texture.format,
                _w,
                _h,
                0,
                texture.format,
                texture.type,
                null
              );
            }
            tempRestore();
            if (config.profile) {
              texture.stats.size = getTextureSize(
                texture.internalformat,
                texture.type,
                w3,
                h6,
                false,
                false
              );
            }
            return reglTexture2D;
          }
          reglTexture2D(a13, b5);
          reglTexture2D.subimage = subimage;
          reglTexture2D.resize = resize;
          reglTexture2D._reglType = "texture2d";
          reglTexture2D._texture = texture;
          if (config.profile) {
            reglTexture2D.stats = texture.stats;
          }
          reglTexture2D.destroy = function() {
            texture.decRef();
          };
          return reglTexture2D;
        }
        function createTextureCube(a0, a1, a22, a32, a42, a52) {
          var texture = new REGLTexture(GL_TEXTURE_CUBE_MAP$1);
          textureSet[texture.id] = texture;
          stats2.cubeCount++;
          var faces = new Array(6);
          function reglTextureCube(a02, a13, a23, a33, a43, a53) {
            var i11;
            var texInfo = texture.texInfo;
            TexInfo.call(texInfo);
            for (i11 = 0; i11 < 6; ++i11) {
              faces[i11] = allocMipMap();
            }
            if (typeof a02 === "number" || !a02) {
              var s15 = a02 | 0 || 1;
              for (i11 = 0; i11 < 6; ++i11) {
                parseMipMapFromShape(faces[i11], s15, s15);
              }
            } else if (typeof a02 === "object") {
              if (a13) {
                parseMipMapFromObject(faces[0], a02);
                parseMipMapFromObject(faces[1], a13);
                parseMipMapFromObject(faces[2], a23);
                parseMipMapFromObject(faces[3], a33);
                parseMipMapFromObject(faces[4], a43);
                parseMipMapFromObject(faces[5], a53);
              } else {
                parseTexInfo(texInfo, a02);
                parseFlags(texture, a02);
                if ("faces" in a02) {
                  var faceInput = a02.faces;
                  check$1(
                    Array.isArray(faceInput) && faceInput.length === 6,
                    "cube faces must be a length 6 array"
                  );
                  for (i11 = 0; i11 < 6; ++i11) {
                    check$1(
                      typeof faceInput[i11] === "object" && !!faceInput[i11],
                      "invalid input for cube map face"
                    );
                    copyFlags(faces[i11], texture);
                    parseMipMapFromObject(faces[i11], faceInput[i11]);
                  }
                } else {
                  for (i11 = 0; i11 < 6; ++i11) {
                    parseMipMapFromObject(faces[i11], a02);
                  }
                }
              }
            } else {
              check$1.raise("invalid arguments to cube map");
            }
            copyFlags(texture, faces[0]);
            check$1.optional(function() {
              if (!limits.npotTextureCube) {
                check$1(isPow2$1(texture.width) && isPow2$1(texture.height), "your browser does not support non power or two texture dimensions");
              }
            });
            if (texInfo.genMipmaps) {
              texture.mipmask = (faces[0].width << 1) - 1;
            } else {
              texture.mipmask = faces[0].mipmask;
            }
            check$1.textureCube(texture, texInfo, faces, limits);
            texture.internalformat = faces[0].internalformat;
            reglTextureCube.width = faces[0].width;
            reglTextureCube.height = faces[0].height;
            tempBind(texture);
            for (i11 = 0; i11 < 6; ++i11) {
              setMipMap(faces[i11], GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i11);
            }
            setTexInfo(texInfo, GL_TEXTURE_CUBE_MAP$1);
            tempRestore();
            if (config.profile) {
              texture.stats.size = getTextureSize(
                texture.internalformat,
                texture.type,
                reglTextureCube.width,
                reglTextureCube.height,
                texInfo.genMipmaps,
                true
              );
            }
            reglTextureCube.format = textureFormatsInvert[texture.internalformat];
            reglTextureCube.type = textureTypesInvert[texture.type];
            reglTextureCube.mag = magFiltersInvert[texInfo.magFilter];
            reglTextureCube.min = minFiltersInvert[texInfo.minFilter];
            reglTextureCube.wrapS = wrapModesInvert[texInfo.wrapS];
            reglTextureCube.wrapT = wrapModesInvert[texInfo.wrapT];
            for (i11 = 0; i11 < 6; ++i11) {
              freeMipMap(faces[i11]);
            }
            return reglTextureCube;
          }
          function subimage(face, image, x_, y_, level_) {
            check$1(!!image, "must specify image data");
            check$1(typeof face === "number" && face === (face | 0) && face >= 0 && face < 6, "invalid face");
            var x3 = x_ | 0;
            var y3 = y_ | 0;
            var level = level_ | 0;
            var imageData = allocImage();
            copyFlags(imageData, texture);
            imageData.width = 0;
            imageData.height = 0;
            parseImage(imageData, image);
            imageData.width = imageData.width || (texture.width >> level) - x3;
            imageData.height = imageData.height || (texture.height >> level) - y3;
            check$1(
              texture.type === imageData.type && texture.format === imageData.format && texture.internalformat === imageData.internalformat,
              "incompatible format for texture.subimage"
            );
            check$1(
              x3 >= 0 && y3 >= 0 && x3 + imageData.width <= texture.width && y3 + imageData.height <= texture.height,
              "texture.subimage write out of bounds"
            );
            check$1(
              texture.mipmask & 1 << level,
              "missing mipmap data"
            );
            check$1(
              imageData.data || imageData.element || imageData.needsCopy,
              "missing image data"
            );
            tempBind(texture);
            setSubImage(imageData, GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + face, x3, y3, level);
            tempRestore();
            freeImage(imageData);
            return reglTextureCube;
          }
          function resize(radius_) {
            var radius = radius_ | 0;
            if (radius === texture.width) {
              return;
            }
            reglTextureCube.width = texture.width = radius;
            reglTextureCube.height = texture.height = radius;
            tempBind(texture);
            for (var i11 = 0; i11 < 6; ++i11) {
              for (var j6 = 0; texture.mipmask >> j6; ++j6) {
                gl.texImage2D(
                  GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i11,
                  j6,
                  texture.format,
                  radius >> j6,
                  radius >> j6,
                  0,
                  texture.format,
                  texture.type,
                  null
                );
              }
            }
            tempRestore();
            if (config.profile) {
              texture.stats.size = getTextureSize(
                texture.internalformat,
                texture.type,
                reglTextureCube.width,
                reglTextureCube.height,
                false,
                true
              );
            }
            return reglTextureCube;
          }
          reglTextureCube(a0, a1, a22, a32, a42, a52);
          reglTextureCube.subimage = subimage;
          reglTextureCube.resize = resize;
          reglTextureCube._reglType = "textureCube";
          reglTextureCube._texture = texture;
          if (config.profile) {
            reglTextureCube.stats = texture.stats;
          }
          reglTextureCube.destroy = function() {
            texture.decRef();
          };
          return reglTextureCube;
        }
        function destroyTextures() {
          for (var i11 = 0; i11 < numTexUnits; ++i11) {
            gl.activeTexture(GL_TEXTURE0$1 + i11);
            gl.bindTexture(GL_TEXTURE_2D$1, null);
            textureUnits[i11] = null;
          }
          values(textureSet).forEach(destroy);
          stats2.cubeCount = 0;
          stats2.textureCount = 0;
        }
        if (config.profile) {
          stats2.getTotalTextureSize = function() {
            var total = 0;
            Object.keys(textureSet).forEach(function(key) {
              total += textureSet[key].stats.size;
            });
            return total;
          };
        }
        function restoreTextures() {
          for (var i11 = 0; i11 < numTexUnits; ++i11) {
            var tex = textureUnits[i11];
            if (tex) {
              tex.bindCount = 0;
              tex.unit = -1;
              textureUnits[i11] = null;
            }
          }
          values(textureSet).forEach(function(texture) {
            texture.texture = gl.createTexture();
            gl.bindTexture(texture.target, texture.texture);
            for (var i12 = 0; i12 < 32; ++i12) {
              if ((texture.mipmask & 1 << i12) === 0) {
                continue;
              }
              if (texture.target === GL_TEXTURE_2D$1) {
                gl.texImage2D(
                  GL_TEXTURE_2D$1,
                  i12,
                  texture.internalformat,
                  texture.width >> i12,
                  texture.height >> i12,
                  0,
                  texture.internalformat,
                  texture.type,
                  null
                );
              } else {
                for (var j6 = 0; j6 < 6; ++j6) {
                  gl.texImage2D(
                    GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + j6,
                    i12,
                    texture.internalformat,
                    texture.width >> i12,
                    texture.height >> i12,
                    0,
                    texture.internalformat,
                    texture.type,
                    null
                  );
                }
              }
            }
            setTexInfo(texture.texInfo, texture.target);
          });
        }
        function refreshTextures() {
          for (var i11 = 0; i11 < numTexUnits; ++i11) {
            var tex = textureUnits[i11];
            if (tex) {
              tex.bindCount = 0;
              tex.unit = -1;
              textureUnits[i11] = null;
            }
            gl.activeTexture(GL_TEXTURE0$1 + i11);
            gl.bindTexture(GL_TEXTURE_2D$1, null);
            gl.bindTexture(GL_TEXTURE_CUBE_MAP$1, null);
          }
        }
        return {
          create2D: createTexture2D,
          createCube: createTextureCube,
          clear: destroyTextures,
          getTexture: function(wrapper) {
            return null;
          },
          restore: restoreTextures,
          refresh: refreshTextures
        };
      }
      var GL_RENDERBUFFER = 36161;
      var GL_RGBA4$1 = 32854;
      var GL_RGB5_A1$1 = 32855;
      var GL_RGB565$1 = 36194;
      var GL_DEPTH_COMPONENT16 = 33189;
      var GL_STENCIL_INDEX8 = 36168;
      var GL_DEPTH_STENCIL$1 = 34041;
      var GL_SRGB8_ALPHA8_EXT = 35907;
      var GL_RGBA32F_EXT = 34836;
      var GL_RGBA16F_EXT = 34842;
      var GL_RGB16F_EXT = 34843;
      var FORMAT_SIZES = [];
      FORMAT_SIZES[GL_RGBA4$1] = 2;
      FORMAT_SIZES[GL_RGB5_A1$1] = 2;
      FORMAT_SIZES[GL_RGB565$1] = 2;
      FORMAT_SIZES[GL_DEPTH_COMPONENT16] = 2;
      FORMAT_SIZES[GL_STENCIL_INDEX8] = 1;
      FORMAT_SIZES[GL_DEPTH_STENCIL$1] = 4;
      FORMAT_SIZES[GL_SRGB8_ALPHA8_EXT] = 4;
      FORMAT_SIZES[GL_RGBA32F_EXT] = 16;
      FORMAT_SIZES[GL_RGBA16F_EXT] = 8;
      FORMAT_SIZES[GL_RGB16F_EXT] = 6;
      function getRenderbufferSize(format, width, height) {
        return FORMAT_SIZES[format] * width * height;
      }
      var wrapRenderbuffers = function(gl, extensions, limits, stats2, config) {
        var formatTypes = {
          "rgba4": GL_RGBA4$1,
          "rgb565": GL_RGB565$1,
          "rgb5 a1": GL_RGB5_A1$1,
          "depth": GL_DEPTH_COMPONENT16,
          "stencil": GL_STENCIL_INDEX8,
          "depth stencil": GL_DEPTH_STENCIL$1
        };
        if (extensions.ext_srgb) {
          formatTypes["srgba"] = GL_SRGB8_ALPHA8_EXT;
        }
        if (extensions.ext_color_buffer_half_float) {
          formatTypes["rgba16f"] = GL_RGBA16F_EXT;
          formatTypes["rgb16f"] = GL_RGB16F_EXT;
        }
        if (extensions.webgl_color_buffer_float) {
          formatTypes["rgba32f"] = GL_RGBA32F_EXT;
        }
        var formatTypesInvert = [];
        Object.keys(formatTypes).forEach(function(key) {
          var val = formatTypes[key];
          formatTypesInvert[val] = key;
        });
        var renderbufferCount = 0;
        var renderbufferSet = {};
        function REGLRenderbuffer(renderbuffer) {
          this.id = renderbufferCount++;
          this.refCount = 1;
          this.renderbuffer = renderbuffer;
          this.format = GL_RGBA4$1;
          this.width = 0;
          this.height = 0;
          if (config.profile) {
            this.stats = { size: 0 };
          }
        }
        REGLRenderbuffer.prototype.decRef = function() {
          if (--this.refCount <= 0) {
            destroy(this);
          }
        };
        function destroy(rb) {
          var handle = rb.renderbuffer;
          check$1(handle, "must not double destroy renderbuffer");
          gl.bindRenderbuffer(GL_RENDERBUFFER, null);
          gl.deleteRenderbuffer(handle);
          rb.renderbuffer = null;
          rb.refCount = 0;
          delete renderbufferSet[rb.id];
          stats2.renderbufferCount--;
        }
        function createRenderbuffer(a13, b5) {
          var renderbuffer = new REGLRenderbuffer(gl.createRenderbuffer());
          renderbufferSet[renderbuffer.id] = renderbuffer;
          stats2.renderbufferCount++;
          function reglRenderbuffer(a14, b6) {
            var w3 = 0;
            var h6 = 0;
            var format = GL_RGBA4$1;
            if (typeof a14 === "object" && a14) {
              var options = a14;
              if ("shape" in options) {
                var shape = options.shape;
                check$1(
                  Array.isArray(shape) && shape.length >= 2,
                  "invalid renderbuffer shape"
                );
                w3 = shape[0] | 0;
                h6 = shape[1] | 0;
              } else {
                if ("radius" in options) {
                  w3 = h6 = options.radius | 0;
                }
                if ("width" in options) {
                  w3 = options.width | 0;
                }
                if ("height" in options) {
                  h6 = options.height | 0;
                }
              }
              if ("format" in options) {
                check$1.parameter(
                  options.format,
                  formatTypes,
                  "invalid renderbuffer format"
                );
                format = formatTypes[options.format];
              }
            } else if (typeof a14 === "number") {
              w3 = a14 | 0;
              if (typeof b6 === "number") {
                h6 = b6 | 0;
              } else {
                h6 = w3;
              }
            } else if (!a14) {
              w3 = h6 = 1;
            } else {
              check$1.raise("invalid arguments to renderbuffer constructor");
            }
            check$1(
              w3 > 0 && h6 > 0 && w3 <= limits.maxRenderbufferSize && h6 <= limits.maxRenderbufferSize,
              "invalid renderbuffer size"
            );
            if (w3 === renderbuffer.width && h6 === renderbuffer.height && format === renderbuffer.format) {
              return;
            }
            reglRenderbuffer.width = renderbuffer.width = w3;
            reglRenderbuffer.height = renderbuffer.height = h6;
            renderbuffer.format = format;
            gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);
            gl.renderbufferStorage(GL_RENDERBUFFER, format, w3, h6);
            check$1(
              gl.getError() === 0,
              "invalid render buffer format"
            );
            if (config.profile) {
              renderbuffer.stats.size = getRenderbufferSize(renderbuffer.format, renderbuffer.width, renderbuffer.height);
            }
            reglRenderbuffer.format = formatTypesInvert[renderbuffer.format];
            return reglRenderbuffer;
          }
          function resize(w_, h_) {
            var w3 = w_ | 0;
            var h6 = h_ | 0 || w3;
            if (w3 === renderbuffer.width && h6 === renderbuffer.height) {
              return reglRenderbuffer;
            }
            check$1(
              w3 > 0 && h6 > 0 && w3 <= limits.maxRenderbufferSize && h6 <= limits.maxRenderbufferSize,
              "invalid renderbuffer size"
            );
            reglRenderbuffer.width = renderbuffer.width = w3;
            reglRenderbuffer.height = renderbuffer.height = h6;
            gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);
            gl.renderbufferStorage(GL_RENDERBUFFER, renderbuffer.format, w3, h6);
            check$1(
              gl.getError() === 0,
              "invalid render buffer format"
            );
            if (config.profile) {
              renderbuffer.stats.size = getRenderbufferSize(
                renderbuffer.format,
                renderbuffer.width,
                renderbuffer.height
              );
            }
            return reglRenderbuffer;
          }
          reglRenderbuffer(a13, b5);
          reglRenderbuffer.resize = resize;
          reglRenderbuffer._reglType = "renderbuffer";
          reglRenderbuffer._renderbuffer = renderbuffer;
          if (config.profile) {
            reglRenderbuffer.stats = renderbuffer.stats;
          }
          reglRenderbuffer.destroy = function() {
            renderbuffer.decRef();
          };
          return reglRenderbuffer;
        }
        if (config.profile) {
          stats2.getTotalRenderbufferSize = function() {
            var total = 0;
            Object.keys(renderbufferSet).forEach(function(key) {
              total += renderbufferSet[key].stats.size;
            });
            return total;
          };
        }
        function restoreRenderbuffers() {
          values(renderbufferSet).forEach(function(rb) {
            rb.renderbuffer = gl.createRenderbuffer();
            gl.bindRenderbuffer(GL_RENDERBUFFER, rb.renderbuffer);
            gl.renderbufferStorage(GL_RENDERBUFFER, rb.format, rb.width, rb.height);
          });
          gl.bindRenderbuffer(GL_RENDERBUFFER, null);
        }
        return {
          create: createRenderbuffer,
          clear: function() {
            values(renderbufferSet).forEach(destroy);
          },
          restore: restoreRenderbuffers
        };
      };
      var GL_FRAMEBUFFER$1 = 36160;
      var GL_RENDERBUFFER$1 = 36161;
      var GL_TEXTURE_2D$2 = 3553;
      var GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 = 34069;
      var GL_COLOR_ATTACHMENT0$1 = 36064;
      var GL_DEPTH_ATTACHMENT = 36096;
      var GL_STENCIL_ATTACHMENT = 36128;
      var GL_DEPTH_STENCIL_ATTACHMENT = 33306;
      var GL_FRAMEBUFFER_COMPLETE$1 = 36053;
      var GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
      var GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
      var GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
      var GL_FRAMEBUFFER_UNSUPPORTED = 36061;
      var GL_HALF_FLOAT_OES$2 = 36193;
      var GL_UNSIGNED_BYTE$6 = 5121;
      var GL_FLOAT$5 = 5126;
      var GL_RGB$1 = 6407;
      var GL_RGBA$2 = 6408;
      var GL_DEPTH_COMPONENT$1 = 6402;
      var colorTextureFormatEnums = [
        GL_RGB$1,
        GL_RGBA$2
      ];
      var textureFormatChannels = [];
      textureFormatChannels[GL_RGBA$2] = 4;
      textureFormatChannels[GL_RGB$1] = 3;
      var textureTypeSizes = [];
      textureTypeSizes[GL_UNSIGNED_BYTE$6] = 1;
      textureTypeSizes[GL_FLOAT$5] = 4;
      textureTypeSizes[GL_HALF_FLOAT_OES$2] = 2;
      var GL_RGBA4$2 = 32854;
      var GL_RGB5_A1$2 = 32855;
      var GL_RGB565$2 = 36194;
      var GL_DEPTH_COMPONENT16$1 = 33189;
      var GL_STENCIL_INDEX8$1 = 36168;
      var GL_DEPTH_STENCIL$2 = 34041;
      var GL_SRGB8_ALPHA8_EXT$1 = 35907;
      var GL_RGBA32F_EXT$1 = 34836;
      var GL_RGBA16F_EXT$1 = 34842;
      var GL_RGB16F_EXT$1 = 34843;
      var colorRenderbufferFormatEnums = [
        GL_RGBA4$2,
        GL_RGB5_A1$2,
        GL_RGB565$2,
        GL_SRGB8_ALPHA8_EXT$1,
        GL_RGBA16F_EXT$1,
        GL_RGB16F_EXT$1,
        GL_RGBA32F_EXT$1
      ];
      var statusCode = {};
      statusCode[GL_FRAMEBUFFER_COMPLETE$1] = "complete";
      statusCode[GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT] = "incomplete attachment";
      statusCode[GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS] = "incomplete dimensions";
      statusCode[GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT] = "incomplete, missing attachment";
      statusCode[GL_FRAMEBUFFER_UNSUPPORTED] = "unsupported";
      function wrapFBOState(gl, extensions, limits, textureState, renderbufferState, stats2) {
        var framebufferState = {
          cur: null,
          next: null,
          dirty: false,
          setFBO: null
        };
        var colorTextureFormats = ["rgba"];
        var colorRenderbufferFormats = ["rgba4", "rgb565", "rgb5 a1"];
        if (extensions.ext_srgb) {
          colorRenderbufferFormats.push("srgba");
        }
        if (extensions.ext_color_buffer_half_float) {
          colorRenderbufferFormats.push("rgba16f", "rgb16f");
        }
        if (extensions.webgl_color_buffer_float) {
          colorRenderbufferFormats.push("rgba32f");
        }
        var colorTypes = ["uint8"];
        if (extensions.oes_texture_half_float) {
          colorTypes.push("half float", "float16");
        }
        if (extensions.oes_texture_float) {
          colorTypes.push("float", "float32");
        }
        function FramebufferAttachment(target, texture, renderbuffer) {
          this.target = target;
          this.texture = texture;
          this.renderbuffer = renderbuffer;
          var w3 = 0;
          var h6 = 0;
          if (texture) {
            w3 = texture.width;
            h6 = texture.height;
          } else if (renderbuffer) {
            w3 = renderbuffer.width;
            h6 = renderbuffer.height;
          }
          this.width = w3;
          this.height = h6;
        }
        function decRef(attachment) {
          if (attachment) {
            if (attachment.texture) {
              attachment.texture._texture.decRef();
            }
            if (attachment.renderbuffer) {
              attachment.renderbuffer._renderbuffer.decRef();
            }
          }
        }
        function incRefAndCheckShape(attachment, width, height) {
          if (!attachment) {
            return;
          }
          if (attachment.texture) {
            var texture = attachment.texture._texture;
            var tw = Math.max(1, texture.width);
            var th = Math.max(1, texture.height);
            check$1(
              tw === width && th === height,
              "inconsistent width/height for supplied texture"
            );
            texture.refCount += 1;
          } else {
            var renderbuffer = attachment.renderbuffer._renderbuffer;
            check$1(
              renderbuffer.width === width && renderbuffer.height === height,
              "inconsistent width/height for renderbuffer"
            );
            renderbuffer.refCount += 1;
          }
        }
        function attach(location, attachment) {
          if (attachment) {
            if (attachment.texture) {
              gl.framebufferTexture2D(
                GL_FRAMEBUFFER$1,
                location,
                attachment.target,
                attachment.texture._texture.texture,
                0
              );
            } else {
              gl.framebufferRenderbuffer(
                GL_FRAMEBUFFER$1,
                location,
                GL_RENDERBUFFER$1,
                attachment.renderbuffer._renderbuffer.renderbuffer
              );
            }
          }
        }
        function parseAttachment(attachment) {
          var target = GL_TEXTURE_2D$2;
          var texture = null;
          var renderbuffer = null;
          var data = attachment;
          if (typeof attachment === "object") {
            data = attachment.data;
            if ("target" in attachment) {
              target = attachment.target | 0;
            }
          }
          check$1.type(data, "function", "invalid attachment data");
          var type = data._reglType;
          if (type === "texture2d") {
            texture = data;
            check$1(target === GL_TEXTURE_2D$2);
          } else if (type === "textureCube") {
            texture = data;
            check$1(
              target >= GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 && target < GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + 6,
              "invalid cube map target"
            );
          } else if (type === "renderbuffer") {
            renderbuffer = data;
            target = GL_RENDERBUFFER$1;
          } else {
            check$1.raise("invalid regl object for attachment");
          }
          return new FramebufferAttachment(target, texture, renderbuffer);
        }
        function allocAttachment(width, height, isTexture, format, type) {
          if (isTexture) {
            var texture = textureState.create2D({
              width,
              height,
              format,
              type
            });
            texture._texture.refCount = 0;
            return new FramebufferAttachment(GL_TEXTURE_2D$2, texture, null);
          } else {
            var rb = renderbufferState.create({
              width,
              height,
              format
            });
            rb._renderbuffer.refCount = 0;
            return new FramebufferAttachment(GL_RENDERBUFFER$1, null, rb);
          }
        }
        function unwrapAttachment(attachment) {
          return attachment && (attachment.texture || attachment.renderbuffer);
        }
        function resizeAttachment(attachment, w3, h6) {
          if (attachment) {
            if (attachment.texture) {
              attachment.texture.resize(w3, h6);
            } else if (attachment.renderbuffer) {
              attachment.renderbuffer.resize(w3, h6);
            }
            attachment.width = w3;
            attachment.height = h6;
          }
        }
        var framebufferCount = 0;
        var framebufferSet = {};
        function REGLFramebuffer() {
          this.id = framebufferCount++;
          framebufferSet[this.id] = this;
          this.framebuffer = gl.createFramebuffer();
          this.width = 0;
          this.height = 0;
          this.colorAttachments = [];
          this.depthAttachment = null;
          this.stencilAttachment = null;
          this.depthStencilAttachment = null;
        }
        function decFBORefs(framebuffer) {
          framebuffer.colorAttachments.forEach(decRef);
          decRef(framebuffer.depthAttachment);
          decRef(framebuffer.stencilAttachment);
          decRef(framebuffer.depthStencilAttachment);
        }
        function destroy(framebuffer) {
          var handle = framebuffer.framebuffer;
          check$1(handle, "must not double destroy framebuffer");
          gl.deleteFramebuffer(handle);
          framebuffer.framebuffer = null;
          stats2.framebufferCount--;
          delete framebufferSet[framebuffer.id];
        }
        function updateFramebuffer(framebuffer) {
          var i11;
          gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebuffer.framebuffer);
          var colorAttachments = framebuffer.colorAttachments;
          for (i11 = 0; i11 < colorAttachments.length; ++i11) {
            attach(GL_COLOR_ATTACHMENT0$1 + i11, colorAttachments[i11]);
          }
          for (i11 = colorAttachments.length; i11 < limits.maxColorAttachments; ++i11) {
            gl.framebufferTexture2D(
              GL_FRAMEBUFFER$1,
              GL_COLOR_ATTACHMENT0$1 + i11,
              GL_TEXTURE_2D$2,
              null,
              0
            );
          }
          gl.framebufferTexture2D(
            GL_FRAMEBUFFER$1,
            GL_DEPTH_STENCIL_ATTACHMENT,
            GL_TEXTURE_2D$2,
            null,
            0
          );
          gl.framebufferTexture2D(
            GL_FRAMEBUFFER$1,
            GL_DEPTH_ATTACHMENT,
            GL_TEXTURE_2D$2,
            null,
            0
          );
          gl.framebufferTexture2D(
            GL_FRAMEBUFFER$1,
            GL_STENCIL_ATTACHMENT,
            GL_TEXTURE_2D$2,
            null,
            0
          );
          attach(GL_DEPTH_ATTACHMENT, framebuffer.depthAttachment);
          attach(GL_STENCIL_ATTACHMENT, framebuffer.stencilAttachment);
          attach(GL_DEPTH_STENCIL_ATTACHMENT, framebuffer.depthStencilAttachment);
          var status = gl.checkFramebufferStatus(GL_FRAMEBUFFER$1);
          if (!gl.isContextLost() && status !== GL_FRAMEBUFFER_COMPLETE$1) {
            check$1.raise("framebuffer configuration not supported, status = " + statusCode[status]);
          }
          gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebufferState.next ? framebufferState.next.framebuffer : null);
          framebufferState.cur = framebufferState.next;
          gl.getError();
        }
        function createFBO(a0, a1) {
          var framebuffer = new REGLFramebuffer();
          stats2.framebufferCount++;
          function reglFramebuffer(a13, b5) {
            var i11;
            check$1(
              framebufferState.next !== framebuffer,
              "can not update framebuffer which is currently in use"
            );
            var width = 0;
            var height = 0;
            var needsDepth = true;
            var needsStencil = true;
            var colorBuffer = null;
            var colorTexture = true;
            var colorFormat = "rgba";
            var colorType = "uint8";
            var colorCount = 1;
            var depthBuffer = null;
            var stencilBuffer = null;
            var depthStencilBuffer = null;
            var depthStencilTexture = false;
            if (typeof a13 === "number") {
              width = a13 | 0;
              height = b5 | 0 || width;
            } else if (!a13) {
              width = height = 1;
            } else {
              check$1.type(a13, "object", "invalid arguments for framebuffer");
              var options = a13;
              if ("shape" in options) {
                var shape = options.shape;
                check$1(
                  Array.isArray(shape) && shape.length >= 2,
                  "invalid shape for framebuffer"
                );
                width = shape[0];
                height = shape[1];
              } else {
                if ("radius" in options) {
                  width = height = options.radius;
                }
                if ("width" in options) {
                  width = options.width;
                }
                if ("height" in options) {
                  height = options.height;
                }
              }
              if ("color" in options || "colors" in options) {
                colorBuffer = options.color || options.colors;
                if (Array.isArray(colorBuffer)) {
                  check$1(
                    colorBuffer.length === 1 || extensions.webgl_draw_buffers,
                    "multiple render targets not supported"
                  );
                }
              }
              if (!colorBuffer) {
                if ("colorCount" in options) {
                  colorCount = options.colorCount | 0;
                  check$1(colorCount > 0, "invalid color buffer count");
                }
                if ("colorTexture" in options) {
                  colorTexture = !!options.colorTexture;
                  colorFormat = "rgba4";
                }
                if ("colorType" in options) {
                  colorType = options.colorType;
                  if (!colorTexture) {
                    if (colorType === "half float" || colorType === "float16") {
                      check$1(
                        extensions.ext_color_buffer_half_float,
                        "you must enable EXT_color_buffer_half_float to use 16-bit render buffers"
                      );
                      colorFormat = "rgba16f";
                    } else if (colorType === "float" || colorType === "float32") {
                      check$1(
                        extensions.webgl_color_buffer_float,
                        "you must enable WEBGL_color_buffer_float in order to use 32-bit floating point renderbuffers"
                      );
                      colorFormat = "rgba32f";
                    }
                  } else {
                    check$1(
                      extensions.oes_texture_float || !(colorType === "float" || colorType === "float32"),
                      "you must enable OES_texture_float in order to use floating point framebuffer objects"
                    );
                    check$1(
                      extensions.oes_texture_half_float || !(colorType === "half float" || colorType === "float16"),
                      "you must enable OES_texture_half_float in order to use 16-bit floating point framebuffer objects"
                    );
                  }
                  check$1.oneOf(colorType, colorTypes, "invalid color type");
                }
                if ("colorFormat" in options) {
                  colorFormat = options.colorFormat;
                  if (colorTextureFormats.indexOf(colorFormat) >= 0) {
                    colorTexture = true;
                  } else if (colorRenderbufferFormats.indexOf(colorFormat) >= 0) {
                    colorTexture = false;
                  } else {
                    check$1.optional(function() {
                      if (colorTexture) {
                        check$1.oneOf(
                          options.colorFormat,
                          colorTextureFormats,
                          "invalid color format for texture"
                        );
                      } else {
                        check$1.oneOf(
                          options.colorFormat,
                          colorRenderbufferFormats,
                          "invalid color format for renderbuffer"
                        );
                      }
                    });
                  }
                }
              }
              if ("depthTexture" in options || "depthStencilTexture" in options) {
                depthStencilTexture = !!(options.depthTexture || options.depthStencilTexture);
                check$1(
                  !depthStencilTexture || extensions.webgl_depth_texture,
                  "webgl_depth_texture extension not supported"
                );
              }
              if ("depth" in options) {
                if (typeof options.depth === "boolean") {
                  needsDepth = options.depth;
                } else {
                  depthBuffer = options.depth;
                  needsStencil = false;
                }
              }
              if ("stencil" in options) {
                if (typeof options.stencil === "boolean") {
                  needsStencil = options.stencil;
                } else {
                  stencilBuffer = options.stencil;
                  needsDepth = false;
                }
              }
              if ("depthStencil" in options) {
                if (typeof options.depthStencil === "boolean") {
                  needsDepth = needsStencil = options.depthStencil;
                } else {
                  depthStencilBuffer = options.depthStencil;
                  needsDepth = false;
                  needsStencil = false;
                }
              }
            }
            var colorAttachments = null;
            var depthAttachment = null;
            var stencilAttachment = null;
            var depthStencilAttachment = null;
            if (Array.isArray(colorBuffer)) {
              colorAttachments = colorBuffer.map(parseAttachment);
            } else if (colorBuffer) {
              colorAttachments = [parseAttachment(colorBuffer)];
            } else {
              colorAttachments = new Array(colorCount);
              for (i11 = 0; i11 < colorCount; ++i11) {
                colorAttachments[i11] = allocAttachment(
                  width,
                  height,
                  colorTexture,
                  colorFormat,
                  colorType
                );
              }
            }
            check$1(
              extensions.webgl_draw_buffers || colorAttachments.length <= 1,
              "you must enable the WEBGL_draw_buffers extension in order to use multiple color buffers."
            );
            check$1(
              colorAttachments.length <= limits.maxColorAttachments,
              "too many color attachments, not supported"
            );
            width = width || colorAttachments[0].width;
            height = height || colorAttachments[0].height;
            if (depthBuffer) {
              depthAttachment = parseAttachment(depthBuffer);
            } else if (needsDepth && !needsStencil) {
              depthAttachment = allocAttachment(
                width,
                height,
                depthStencilTexture,
                "depth",
                "uint32"
              );
            }
            if (stencilBuffer) {
              stencilAttachment = parseAttachment(stencilBuffer);
            } else if (needsStencil && !needsDepth) {
              stencilAttachment = allocAttachment(
                width,
                height,
                false,
                "stencil",
                "uint8"
              );
            }
            if (depthStencilBuffer) {
              depthStencilAttachment = parseAttachment(depthStencilBuffer);
            } else if (!depthBuffer && !stencilBuffer && needsStencil && needsDepth) {
              depthStencilAttachment = allocAttachment(
                width,
                height,
                depthStencilTexture,
                "depth stencil",
                "depth stencil"
              );
            }
            check$1(
              !!depthBuffer + !!stencilBuffer + !!depthStencilBuffer <= 1,
              "invalid framebuffer configuration, can specify exactly one depth/stencil attachment"
            );
            var commonColorAttachmentSize = null;
            for (i11 = 0; i11 < colorAttachments.length; ++i11) {
              incRefAndCheckShape(colorAttachments[i11], width, height);
              check$1(
                !colorAttachments[i11] || colorAttachments[i11].texture && colorTextureFormatEnums.indexOf(colorAttachments[i11].texture._texture.format) >= 0 || colorAttachments[i11].renderbuffer && colorRenderbufferFormatEnums.indexOf(colorAttachments[i11].renderbuffer._renderbuffer.format) >= 0,
                "framebuffer color attachment " + i11 + " is invalid"
              );
              if (colorAttachments[i11] && colorAttachments[i11].texture) {
                var colorAttachmentSize = textureFormatChannels[colorAttachments[i11].texture._texture.format] * textureTypeSizes[colorAttachments[i11].texture._texture.type];
                if (commonColorAttachmentSize === null) {
                  commonColorAttachmentSize = colorAttachmentSize;
                } else {
                  check$1(
                    commonColorAttachmentSize === colorAttachmentSize,
                    "all color attachments much have the same number of bits per pixel."
                  );
                }
              }
            }
            incRefAndCheckShape(depthAttachment, width, height);
            check$1(
              !depthAttachment || depthAttachment.texture && depthAttachment.texture._texture.format === GL_DEPTH_COMPONENT$1 || depthAttachment.renderbuffer && depthAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_COMPONENT16$1,
              "invalid depth attachment for framebuffer object"
            );
            incRefAndCheckShape(stencilAttachment, width, height);
            check$1(
              !stencilAttachment || stencilAttachment.renderbuffer && stencilAttachment.renderbuffer._renderbuffer.format === GL_STENCIL_INDEX8$1,
              "invalid stencil attachment for framebuffer object"
            );
            incRefAndCheckShape(depthStencilAttachment, width, height);
            check$1(
              !depthStencilAttachment || depthStencilAttachment.texture && depthStencilAttachment.texture._texture.format === GL_DEPTH_STENCIL$2 || depthStencilAttachment.renderbuffer && depthStencilAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_STENCIL$2,
              "invalid depth-stencil attachment for framebuffer object"
            );
            decFBORefs(framebuffer);
            framebuffer.width = width;
            framebuffer.height = height;
            framebuffer.colorAttachments = colorAttachments;
            framebuffer.depthAttachment = depthAttachment;
            framebuffer.stencilAttachment = stencilAttachment;
            framebuffer.depthStencilAttachment = depthStencilAttachment;
            reglFramebuffer.color = colorAttachments.map(unwrapAttachment);
            reglFramebuffer.depth = unwrapAttachment(depthAttachment);
            reglFramebuffer.stencil = unwrapAttachment(stencilAttachment);
            reglFramebuffer.depthStencil = unwrapAttachment(depthStencilAttachment);
            reglFramebuffer.width = framebuffer.width;
            reglFramebuffer.height = framebuffer.height;
            updateFramebuffer(framebuffer);
            return reglFramebuffer;
          }
          function resize(w_, h_) {
            check$1(
              framebufferState.next !== framebuffer,
              "can not resize a framebuffer which is currently in use"
            );
            var w3 = Math.max(w_ | 0, 1);
            var h6 = Math.max(h_ | 0 || w3, 1);
            if (w3 === framebuffer.width && h6 === framebuffer.height) {
              return reglFramebuffer;
            }
            var colorAttachments = framebuffer.colorAttachments;
            for (var i11 = 0; i11 < colorAttachments.length; ++i11) {
              resizeAttachment(colorAttachments[i11], w3, h6);
            }
            resizeAttachment(framebuffer.depthAttachment, w3, h6);
            resizeAttachment(framebuffer.stencilAttachment, w3, h6);
            resizeAttachment(framebuffer.depthStencilAttachment, w3, h6);
            framebuffer.width = reglFramebuffer.width = w3;
            framebuffer.height = reglFramebuffer.height = h6;
            updateFramebuffer(framebuffer);
            return reglFramebuffer;
          }
          reglFramebuffer(a0, a1);
          return extend(reglFramebuffer, {
            resize,
            _reglType: "framebuffer",
            _framebuffer: framebuffer,
            destroy: function() {
              destroy(framebuffer);
              decFBORefs(framebuffer);
            },
            use: function(block) {
              framebufferState.setFBO({
                framebuffer: reglFramebuffer
              }, block);
            }
          });
        }
        function createCubeFBO(options) {
          var faces = Array(6);
          function reglFramebufferCube(a13) {
            var i11;
            check$1(
              faces.indexOf(framebufferState.next) < 0,
              "can not update framebuffer which is currently in use"
            );
            var params = {
              color: null
            };
            var radius = 0;
            var colorBuffer = null;
            var colorFormat = "rgba";
            var colorType = "uint8";
            var colorCount = 1;
            if (typeof a13 === "number") {
              radius = a13 | 0;
            } else if (!a13) {
              radius = 1;
            } else {
              check$1.type(a13, "object", "invalid arguments for framebuffer");
              var options2 = a13;
              if ("shape" in options2) {
                var shape = options2.shape;
                check$1(
                  Array.isArray(shape) && shape.length >= 2,
                  "invalid shape for framebuffer"
                );
                check$1(
                  shape[0] === shape[1],
                  "cube framebuffer must be square"
                );
                radius = shape[0];
              } else {
                if ("radius" in options2) {
                  radius = options2.radius | 0;
                }
                if ("width" in options2) {
                  radius = options2.width | 0;
                  if ("height" in options2) {
                    check$1(options2.height === radius, "must be square");
                  }
                } else if ("height" in options2) {
                  radius = options2.height | 0;
                }
              }
              if ("color" in options2 || "colors" in options2) {
                colorBuffer = options2.color || options2.colors;
                if (Array.isArray(colorBuffer)) {
                  check$1(
                    colorBuffer.length === 1 || extensions.webgl_draw_buffers,
                    "multiple render targets not supported"
                  );
                }
              }
              if (!colorBuffer) {
                if ("colorCount" in options2) {
                  colorCount = options2.colorCount | 0;
                  check$1(colorCount > 0, "invalid color buffer count");
                }
                if ("colorType" in options2) {
                  check$1.oneOf(
                    options2.colorType,
                    colorTypes,
                    "invalid color type"
                  );
                  colorType = options2.colorType;
                }
                if ("colorFormat" in options2) {
                  colorFormat = options2.colorFormat;
                  check$1.oneOf(
                    options2.colorFormat,
                    colorTextureFormats,
                    "invalid color format for texture"
                  );
                }
              }
              if ("depth" in options2) {
                params.depth = options2.depth;
              }
              if ("stencil" in options2) {
                params.stencil = options2.stencil;
              }
              if ("depthStencil" in options2) {
                params.depthStencil = options2.depthStencil;
              }
            }
            var colorCubes;
            if (colorBuffer) {
              if (Array.isArray(colorBuffer)) {
                colorCubes = [];
                for (i11 = 0; i11 < colorBuffer.length; ++i11) {
                  colorCubes[i11] = colorBuffer[i11];
                }
              } else {
                colorCubes = [colorBuffer];
              }
            } else {
              colorCubes = Array(colorCount);
              var cubeMapParams = {
                radius,
                format: colorFormat,
                type: colorType
              };
              for (i11 = 0; i11 < colorCount; ++i11) {
                colorCubes[i11] = textureState.createCube(cubeMapParams);
              }
            }
            params.color = Array(colorCubes.length);
            for (i11 = 0; i11 < colorCubes.length; ++i11) {
              var cube = colorCubes[i11];
              check$1(
                typeof cube === "function" && cube._reglType === "textureCube",
                "invalid cube map"
              );
              radius = radius || cube.width;
              check$1(
                cube.width === radius && cube.height === radius,
                "invalid cube map shape"
              );
              params.color[i11] = {
                target: GL_TEXTURE_CUBE_MAP_POSITIVE_X$2,
                data: colorCubes[i11]
              };
            }
            for (i11 = 0; i11 < 6; ++i11) {
              for (var j6 = 0; j6 < colorCubes.length; ++j6) {
                params.color[j6].target = GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + i11;
              }
              if (i11 > 0) {
                params.depth = faces[0].depth;
                params.stencil = faces[0].stencil;
                params.depthStencil = faces[0].depthStencil;
              }
              if (faces[i11]) {
                faces[i11](params);
              } else {
                faces[i11] = createFBO(params);
              }
            }
            return extend(reglFramebufferCube, {
              width: radius,
              height: radius,
              color: colorCubes
            });
          }
          function resize(radius_) {
            var i11;
            var radius = radius_ | 0;
            check$1(
              radius > 0 && radius <= limits.maxCubeMapSize,
              "invalid radius for cube fbo"
            );
            if (radius === reglFramebufferCube.width) {
              return reglFramebufferCube;
            }
            var colors = reglFramebufferCube.color;
            for (i11 = 0; i11 < colors.length; ++i11) {
              colors[i11].resize(radius);
            }
            for (i11 = 0; i11 < 6; ++i11) {
              faces[i11].resize(radius);
            }
            reglFramebufferCube.width = reglFramebufferCube.height = radius;
            return reglFramebufferCube;
          }
          reglFramebufferCube(options);
          return extend(reglFramebufferCube, {
            faces,
            resize,
            _reglType: "framebufferCube",
            destroy: function() {
              faces.forEach(function(f6) {
                f6.destroy();
              });
            }
          });
        }
        function restoreFramebuffers() {
          framebufferState.cur = null;
          framebufferState.next = null;
          framebufferState.dirty = true;
          values(framebufferSet).forEach(function(fb) {
            fb.framebuffer = gl.createFramebuffer();
            updateFramebuffer(fb);
          });
        }
        return extend(framebufferState, {
          getFramebuffer: function(object) {
            if (typeof object === "function" && object._reglType === "framebuffer") {
              var fbo = object._framebuffer;
              if (fbo instanceof REGLFramebuffer) {
                return fbo;
              }
            }
            return null;
          },
          create: createFBO,
          createCube: createCubeFBO,
          clear: function() {
            values(framebufferSet).forEach(destroy);
          },
          restore: restoreFramebuffers
        });
      }
      var GL_FLOAT$6 = 5126;
      var GL_ARRAY_BUFFER$1 = 34962;
      var GL_ELEMENT_ARRAY_BUFFER$1 = 34963;
      var VAO_OPTIONS = [
        "attributes",
        "elements",
        "offset",
        "count",
        "primitive",
        "instances"
      ];
      function AttributeRecord() {
        this.state = 0;
        this.x = 0;
        this.y = 0;
        this.z = 0;
        this.w = 0;
        this.buffer = null;
        this.size = 0;
        this.normalized = false;
        this.type = GL_FLOAT$6;
        this.offset = 0;
        this.stride = 0;
        this.divisor = 0;
      }
      function wrapAttributeState(gl, extensions, limits, stats2, bufferState, elementState, drawState) {
        var NUM_ATTRIBUTES = limits.maxAttributes;
        var attributeBindings = new Array(NUM_ATTRIBUTES);
        for (var i11 = 0; i11 < NUM_ATTRIBUTES; ++i11) {
          attributeBindings[i11] = new AttributeRecord();
        }
        var vaoCount = 0;
        var vaoSet = {};
        var state = {
          Record: AttributeRecord,
          scope: {},
          state: attributeBindings,
          currentVAO: null,
          targetVAO: null,
          restore: extVAO() ? restoreVAO : function() {
          },
          createVAO,
          getVAO,
          destroyBuffer: destroyBuffer2,
          setVAO: extVAO() ? setVAOEXT : setVAOEmulated,
          clear: extVAO() ? destroyVAOEXT : function() {
          }
        };
        function destroyBuffer2(buffer) {
          for (var i12 = 0; i12 < attributeBindings.length; ++i12) {
            var record = attributeBindings[i12];
            if (record.buffer === buffer) {
              gl.disableVertexAttribArray(i12);
              record.buffer = null;
            }
          }
        }
        function extVAO() {
          return extensions.oes_vertex_array_object;
        }
        function extInstanced() {
          return extensions.angle_instanced_arrays;
        }
        function getVAO(vao) {
          if (typeof vao === "function" && vao._vao) {
            return vao._vao;
          }
          return null;
        }
        function setVAOEXT(vao) {
          if (vao === state.currentVAO) {
            return;
          }
          var ext = extVAO();
          if (vao) {
            ext.bindVertexArrayOES(vao.vao);
          } else {
            ext.bindVertexArrayOES(null);
          }
          state.currentVAO = vao;
        }
        function setVAOEmulated(vao) {
          if (vao === state.currentVAO) {
            return;
          }
          if (vao) {
            vao.bindAttrs();
          } else {
            var exti = extInstanced();
            for (var i12 = 0; i12 < attributeBindings.length; ++i12) {
              var binding = attributeBindings[i12];
              if (binding.buffer) {
                gl.enableVertexAttribArray(i12);
                binding.buffer.bind();
                gl.vertexAttribPointer(i12, binding.size, binding.type, binding.normalized, binding.stride, binding.offfset);
                if (exti && binding.divisor) {
                  exti.vertexAttribDivisorANGLE(i12, binding.divisor);
                }
              } else {
                gl.disableVertexAttribArray(i12);
                gl.vertexAttrib4f(i12, binding.x, binding.y, binding.z, binding.w);
              }
            }
            if (drawState.elements) {
              gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, drawState.elements.buffer.buffer);
            } else {
              gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, null);
            }
          }
          state.currentVAO = vao;
        }
        function destroyVAOEXT() {
          values(vaoSet).forEach(function(vao) {
            vao.destroy();
          });
        }
        function REGLVAO() {
          this.id = ++vaoCount;
          this.attributes = [];
          this.elements = null;
          this.ownsElements = false;
          this.count = 0;
          this.offset = 0;
          this.instances = -1;
          this.primitive = 4;
          var extension = extVAO();
          if (extension) {
            this.vao = extension.createVertexArrayOES();
          } else {
            this.vao = null;
          }
          vaoSet[this.id] = this;
          this.buffers = [];
        }
        REGLVAO.prototype.bindAttrs = function() {
          var exti = extInstanced();
          var attributes = this.attributes;
          for (var i12 = 0; i12 < attributes.length; ++i12) {
            var attr = attributes[i12];
            if (attr.buffer) {
              gl.enableVertexAttribArray(i12);
              gl.bindBuffer(GL_ARRAY_BUFFER$1, attr.buffer.buffer);
              gl.vertexAttribPointer(i12, attr.size, attr.type, attr.normalized, attr.stride, attr.offset);
              if (exti && attr.divisor) {
                exti.vertexAttribDivisorANGLE(i12, attr.divisor);
              }
            } else {
              gl.disableVertexAttribArray(i12);
              gl.vertexAttrib4f(i12, attr.x, attr.y, attr.z, attr.w);
            }
          }
          for (var j6 = attributes.length; j6 < NUM_ATTRIBUTES; ++j6) {
            gl.disableVertexAttribArray(j6);
          }
          var elements = elementState.getElements(this.elements);
          if (elements) {
            gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, elements.buffer.buffer);
          } else {
            gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, null);
          }
        };
        REGLVAO.prototype.refresh = function() {
          var ext = extVAO();
          if (ext) {
            ext.bindVertexArrayOES(this.vao);
            this.bindAttrs();
            state.currentVAO = null;
            ext.bindVertexArrayOES(null);
          }
        };
        REGLVAO.prototype.destroy = function() {
          if (this.vao) {
            var extension = extVAO();
            if (this === state.currentVAO) {
              state.currentVAO = null;
              extension.bindVertexArrayOES(null);
            }
            extension.deleteVertexArrayOES(this.vao);
            this.vao = null;
          }
          if (this.ownsElements) {
            this.elements.destroy();
            this.elements = null;
            this.ownsElements = false;
          }
          if (vaoSet[this.id]) {
            delete vaoSet[this.id];
            stats2.vaoCount -= 1;
          }
        };
        function restoreVAO() {
          var ext = extVAO();
          if (ext) {
            values(vaoSet).forEach(function(vao) {
              vao.refresh();
            });
          }
        }
        function createVAO(_attr) {
          var vao = new REGLVAO();
          stats2.vaoCount += 1;
          function updateVAO(options) {
            var attributes;
            if (Array.isArray(options)) {
              attributes = options;
              if (vao.elements && vao.ownsElements) {
                vao.elements.destroy();
              }
              vao.elements = null;
              vao.ownsElements = false;
              vao.offset = 0;
              vao.count = 0;
              vao.instances = -1;
              vao.primitive = 4;
            } else {
              check$1(typeof options === "object", "invalid arguments for create vao");
              check$1("attributes" in options, "must specify attributes for vao");
              if (options.elements) {
                var elements = options.elements;
                if (vao.ownsElements) {
                  if (typeof elements === "function" && elements._reglType === "elements") {
                    vao.elements.destroy();
                    vao.ownsElements = false;
                  } else {
                    vao.elements(elements);
                    vao.ownsElements = false;
                  }
                } else if (elementState.getElements(options.elements)) {
                  vao.elements = options.elements;
                  vao.ownsElements = false;
                } else {
                  vao.elements = elementState.create(options.elements);
                  vao.ownsElements = true;
                }
              } else {
                vao.elements = null;
                vao.ownsElements = false;
              }
              attributes = options.attributes;
              vao.offset = 0;
              vao.count = -1;
              vao.instances = -1;
              vao.primitive = 4;
              if (vao.elements) {
                vao.count = vao.elements._elements.vertCount;
                vao.primitive = vao.elements._elements.primType;
              }
              if ("offset" in options) {
                vao.offset = options.offset | 0;
              }
              if ("count" in options) {
                vao.count = options.count | 0;
              }
              if ("instances" in options) {
                vao.instances = options.instances | 0;
              }
              if ("primitive" in options) {
                check$1(options.primitive in primTypes, "bad primitive type: " + options.primitive);
                vao.primitive = primTypes[options.primitive];
              }
              check$1.optional(() => {
                var keys = Object.keys(options);
                for (var i13 = 0; i13 < keys.length; ++i13) {
                  check$1(VAO_OPTIONS.indexOf(keys[i13]) >= 0, 'invalid option for vao: "' + keys[i13] + '" valid options are ' + VAO_OPTIONS);
                }
              });
              check$1(Array.isArray(attributes), "attributes must be an array");
            }
            check$1(attributes.length < NUM_ATTRIBUTES, "too many attributes");
            check$1(attributes.length > 0, "must specify at least one attribute");
            var bufUpdated = {};
            var nattributes = vao.attributes;
            nattributes.length = attributes.length;
            for (var i12 = 0; i12 < attributes.length; ++i12) {
              var spec = attributes[i12];
              var rec = nattributes[i12] = new AttributeRecord();
              var data = spec.data || spec;
              if (Array.isArray(data) || isTypedArray(data) || isNDArrayLike(data)) {
                var buf;
                if (vao.buffers[i12]) {
                  buf = vao.buffers[i12];
                  if (isTypedArray(data) && buf._buffer.byteLength >= data.byteLength) {
                    buf.subdata(data);
                  } else {
                    buf.destroy();
                    vao.buffers[i12] = null;
                  }
                }
                if (!vao.buffers[i12]) {
                  buf = vao.buffers[i12] = bufferState.create(spec, GL_ARRAY_BUFFER$1, false, true);
                }
                rec.buffer = bufferState.getBuffer(buf);
                rec.size = rec.buffer.dimension | 0;
                rec.normalized = false;
                rec.type = rec.buffer.dtype;
                rec.offset = 0;
                rec.stride = 0;
                rec.divisor = 0;
                rec.state = 1;
                bufUpdated[i12] = 1;
              } else if (bufferState.getBuffer(spec)) {
                rec.buffer = bufferState.getBuffer(spec);
                rec.size = rec.buffer.dimension | 0;
                rec.normalized = false;
                rec.type = rec.buffer.dtype;
                rec.offset = 0;
                rec.stride = 0;
                rec.divisor = 0;
                rec.state = 1;
              } else if (bufferState.getBuffer(spec.buffer)) {
                rec.buffer = bufferState.getBuffer(spec.buffer);
                rec.size = (+spec.size || rec.buffer.dimension) | 0;
                rec.normalized = !!spec.normalized || false;
                if ("type" in spec) {
                  check$1.parameter(spec.type, glTypes, "invalid buffer type");
                  rec.type = glTypes[spec.type];
                } else {
                  rec.type = rec.buffer.dtype;
                }
                rec.offset = (spec.offset || 0) | 0;
                rec.stride = (spec.stride || 0) | 0;
                rec.divisor = (spec.divisor || 0) | 0;
                rec.state = 1;
                check$1(rec.size >= 1 && rec.size <= 4, "size must be between 1 and 4");
                check$1(rec.offset >= 0, "invalid offset");
                check$1(rec.stride >= 0 && rec.stride <= 255, "stride must be between 0 and 255");
                check$1(rec.divisor >= 0, "divisor must be positive");
                check$1(!rec.divisor || !!extensions.angle_instanced_arrays, "ANGLE_instanced_arrays must be enabled to use divisor");
              } else if ("x" in spec) {
                check$1(i12 > 0, "first attribute must not be a constant");
                rec.x = +spec.x || 0;
                rec.y = +spec.y || 0;
                rec.z = +spec.z || 0;
                rec.w = +spec.w || 0;
                rec.state = 2;
              } else {
                check$1(false, "invalid attribute spec for location " + i12);
              }
            }
            for (var j6 = 0; j6 < vao.buffers.length; ++j6) {
              if (!bufUpdated[j6] && vao.buffers[j6]) {
                vao.buffers[j6].destroy();
                vao.buffers[j6] = null;
              }
            }
            vao.refresh();
            return updateVAO;
          }
          updateVAO.destroy = function() {
            for (var j6 = 0; j6 < vao.buffers.length; ++j6) {
              if (vao.buffers[j6]) {
                vao.buffers[j6].destroy();
              }
            }
            vao.buffers.length = 0;
            if (vao.ownsElements) {
              vao.elements.destroy();
              vao.elements = null;
              vao.ownsElements = false;
            }
            vao.destroy();
          };
          updateVAO._vao = vao;
          updateVAO._reglType = "vao";
          return updateVAO(_attr);
        }
        return state;
      }
      var GL_FRAGMENT_SHADER = 35632;
      var GL_VERTEX_SHADER = 35633;
      var GL_ACTIVE_UNIFORMS = 35718;
      var GL_ACTIVE_ATTRIBUTES = 35721;
      function wrapShaderState(gl, stringStore, stats2, config) {
        var fragShaders = {};
        var vertShaders = {};
        function ActiveInfo(name, id, location, info) {
          this.name = name;
          this.id = id;
          this.location = location;
          this.info = info;
        }
        function insertActiveInfo(list, info) {
          for (var i11 = 0; i11 < list.length; ++i11) {
            if (list[i11].id === info.id) {
              list[i11].location = info.location;
              return;
            }
          }
          list.push(info);
        }
        function getShader(type, id, command) {
          var cache2 = type === GL_FRAGMENT_SHADER ? fragShaders : vertShaders;
          var shader = cache2[id];
          if (!shader) {
            var source = stringStore.str(id);
            shader = gl.createShader(type);
            gl.shaderSource(shader, source);
            gl.compileShader(shader);
            check$1.shaderError(gl, shader, source, type, command);
            cache2[id] = shader;
          }
          return shader;
        }
        var programCache = {};
        var programList = [];
        var PROGRAM_COUNTER = 0;
        function REGLProgram(fragId, vertId) {
          this.id = PROGRAM_COUNTER++;
          this.fragId = fragId;
          this.vertId = vertId;
          this.program = null;
          this.uniforms = [];
          this.attributes = [];
          this.refCount = 1;
          if (config.profile) {
            this.stats = {
              uniformsCount: 0,
              attributesCount: 0
            };
          }
        }
        function linkProgram(desc, command, attributeLocations) {
          var i11, info;
          var fragShader = getShader(GL_FRAGMENT_SHADER, desc.fragId);
          var vertShader = getShader(GL_VERTEX_SHADER, desc.vertId);
          var program = desc.program = gl.createProgram();
          gl.attachShader(program, fragShader);
          gl.attachShader(program, vertShader);
          if (attributeLocations) {
            for (i11 = 0; i11 < attributeLocations.length; ++i11) {
              var binding = attributeLocations[i11];
              gl.bindAttribLocation(program, binding[0], binding[1]);
            }
          }
          gl.linkProgram(program);
          check$1.linkError(
            gl,
            program,
            stringStore.str(desc.fragId),
            stringStore.str(desc.vertId),
            command
          );
          var numUniforms = gl.getProgramParameter(program, GL_ACTIVE_UNIFORMS);
          if (config.profile) {
            desc.stats.uniformsCount = numUniforms;
          }
          var uniforms = desc.uniforms;
          for (i11 = 0; i11 < numUniforms; ++i11) {
            info = gl.getActiveUniform(program, i11);
            if (info) {
              if (info.size > 1) {
                for (var j6 = 0; j6 < info.size; ++j6) {
                  var name = info.name.replace("[0]", "[" + j6 + "]");
                  insertActiveInfo(uniforms, new ActiveInfo(
                    name,
                    stringStore.id(name),
                    gl.getUniformLocation(program, name),
                    info
                  ));
                }
              }
              var uniName = info.name;
              if (info.size > 1) {
                uniName = uniName.replace("[0]", "");
              }
              insertActiveInfo(uniforms, new ActiveInfo(
                uniName,
                stringStore.id(uniName),
                gl.getUniformLocation(program, uniName),
                info
              ));
            }
          }
          var numAttributes = gl.getProgramParameter(program, GL_ACTIVE_ATTRIBUTES);
          if (config.profile) {
            desc.stats.attributesCount = numAttributes;
          }
          var attributes = desc.attributes;
          for (i11 = 0; i11 < numAttributes; ++i11) {
            info = gl.getActiveAttrib(program, i11);
            if (info) {
              insertActiveInfo(attributes, new ActiveInfo(
                info.name,
                stringStore.id(info.name),
                gl.getAttribLocation(program, info.name),
                info
              ));
            }
          }
        }
        if (config.profile) {
          stats2.getMaxUniformsCount = function() {
            var m6 = 0;
            programList.forEach(function(desc) {
              if (desc.stats.uniformsCount > m6) {
                m6 = desc.stats.uniformsCount;
              }
            });
            return m6;
          };
          stats2.getMaxAttributesCount = function() {
            var m6 = 0;
            programList.forEach(function(desc) {
              if (desc.stats.attributesCount > m6) {
                m6 = desc.stats.attributesCount;
              }
            });
            return m6;
          };
        }
        function restoreShaders() {
          fragShaders = {};
          vertShaders = {};
          for (var i11 = 0; i11 < programList.length; ++i11) {
            linkProgram(programList[i11], null, programList[i11].attributes.map(function(info) {
              return [info.location, info.name];
            }));
          }
        }
        return {
          clear: function() {
            var deleteShader = gl.deleteShader.bind(gl);
            values(fragShaders).forEach(deleteShader);
            fragShaders = {};
            values(vertShaders).forEach(deleteShader);
            vertShaders = {};
            programList.forEach(function(desc) {
              gl.deleteProgram(desc.program);
            });
            programList.length = 0;
            programCache = {};
            stats2.shaderCount = 0;
          },
          program: function(vertId, fragId, command, attribLocations) {
            check$1.command(vertId >= 0, "missing vertex shader", command);
            check$1.command(fragId >= 0, "missing fragment shader", command);
            var cache2 = programCache[fragId];
            if (!cache2) {
              cache2 = programCache[fragId] = {};
            }
            var prevProgram = cache2[vertId];
            if (prevProgram) {
              prevProgram.refCount++;
              if (!attribLocations) {
                return prevProgram;
              }
            }
            var program = new REGLProgram(fragId, vertId);
            stats2.shaderCount++;
            linkProgram(program, command, attribLocations);
            if (!prevProgram) {
              cache2[vertId] = program;
            }
            programList.push(program);
            return extend(program, {
              destroy: function() {
                program.refCount--;
                if (program.refCount <= 0) {
                  gl.deleteProgram(program.program);
                  var idx = programList.indexOf(program);
                  programList.splice(idx, 1);
                  stats2.shaderCount--;
                }
                if (cache2[program.vertId].refCount <= 0) {
                  gl.deleteShader(vertShaders[program.vertId]);
                  delete vertShaders[program.vertId];
                  delete programCache[program.fragId][program.vertId];
                }
                if (!Object.keys(programCache[program.fragId]).length) {
                  gl.deleteShader(fragShaders[program.fragId]);
                  delete fragShaders[program.fragId];
                  delete programCache[program.fragId];
                }
              }
            });
          },
          restore: restoreShaders,
          shader: getShader,
          frag: -1,
          vert: -1
        };
      }
      var GL_RGBA$3 = 6408;
      var GL_UNSIGNED_BYTE$7 = 5121;
      var GL_PACK_ALIGNMENT = 3333;
      var GL_FLOAT$7 = 5126;
      function wrapReadPixels(gl, framebufferState, reglPoll, context, glAttributes, extensions, limits) {
        function readPixelsImpl(input) {
          var type;
          if (framebufferState.next === null) {
            check$1(
              glAttributes.preserveDrawingBuffer,
              'you must create a webgl context with "preserveDrawingBuffer":true in order to read pixels from the drawing buffer'
            );
            type = GL_UNSIGNED_BYTE$7;
          } else {
            check$1(
              framebufferState.next.colorAttachments[0].texture !== null,
              "You cannot read from a renderbuffer"
            );
            type = framebufferState.next.colorAttachments[0].texture._texture.type;
            check$1.optional(function() {
              if (extensions.oes_texture_float) {
                check$1(
                  type === GL_UNSIGNED_BYTE$7 || type === GL_FLOAT$7,
                  "Reading from a framebuffer is only allowed for the types 'uint8' and 'float'"
                );
                if (type === GL_FLOAT$7) {
                  check$1(limits.readFloat, "Reading 'float' values is not permitted in your browser. For a fallback, please see: https://www.npmjs.com/package/glsl-read-float");
                }
              } else {
                check$1(
                  type === GL_UNSIGNED_BYTE$7,
                  "Reading from a framebuffer is only allowed for the type 'uint8'"
                );
              }
            });
          }
          var x3 = 0;
          var y3 = 0;
          var width = context.framebufferWidth;
          var height = context.framebufferHeight;
          var data = null;
          if (isTypedArray(input)) {
            data = input;
          } else if (input) {
            check$1.type(input, "object", "invalid arguments to regl.read()");
            x3 = input.x | 0;
            y3 = input.y | 0;
            check$1(
              x3 >= 0 && x3 < context.framebufferWidth,
              "invalid x offset for regl.read"
            );
            check$1(
              y3 >= 0 && y3 < context.framebufferHeight,
              "invalid y offset for regl.read"
            );
            width = (input.width || context.framebufferWidth - x3) | 0;
            height = (input.height || context.framebufferHeight - y3) | 0;
            data = input.data || null;
          }
          if (data) {
            if (type === GL_UNSIGNED_BYTE$7) {
              check$1(
                data instanceof Uint8Array,
                "buffer must be 'Uint8Array' when reading from a framebuffer of type 'uint8'"
              );
            } else if (type === GL_FLOAT$7) {
              check$1(
                data instanceof Float32Array,
                "buffer must be 'Float32Array' when reading from a framebuffer of type 'float'"
              );
            }
          }
          check$1(
            width > 0 && width + x3 <= context.framebufferWidth,
            "invalid width for read pixels"
          );
          check$1(
            height > 0 && height + y3 <= context.framebufferHeight,
            "invalid height for read pixels"
          );
          reglPoll();
          var size2 = width * height * 4;
          if (!data) {
            if (type === GL_UNSIGNED_BYTE$7) {
              data = new Uint8Array(size2);
            } else if (type === GL_FLOAT$7) {
              data = data || new Float32Array(size2);
            }
          }
          check$1.isTypedArray(data, "data buffer for regl.read() must be a typedarray");
          check$1(data.byteLength >= size2, "data buffer for regl.read() too small");
          gl.pixelStorei(GL_PACK_ALIGNMENT, 4);
          gl.readPixels(
            x3,
            y3,
            width,
            height,
            GL_RGBA$3,
            type,
            data
          );
          return data;
        }
        function readPixelsFBO(options) {
          var result;
          framebufferState.setFBO({
            framebuffer: options.framebuffer
          }, function() {
            result = readPixelsImpl(options);
          });
          return result;
        }
        function readPixels2(options) {
          if (!options || !("framebuffer" in options)) {
            return readPixelsImpl(options);
          } else {
            return readPixelsFBO(options);
          }
        }
        return readPixels2;
      }
      function slice(x3) {
        return Array.prototype.slice.call(x3);
      }
      function join(x3) {
        return slice(x3).join("");
      }
      function createEnvironment() {
        var varCounter = 0;
        var linkedNames = [];
        var linkedValues = [];
        function link(value) {
          for (var i11 = 0; i11 < linkedValues.length; ++i11) {
            if (linkedValues[i11] === value) {
              return linkedNames[i11];
            }
          }
          var name = "g" + varCounter++;
          linkedNames.push(name);
          linkedValues.push(value);
          return name;
        }
        function block() {
          var code = [];
          function push() {
            code.push.apply(code, slice(arguments));
          }
          var vars = [];
          function def() {
            var name = "v" + varCounter++;
            vars.push(name);
            if (arguments.length > 0) {
              code.push(name, "=");
              code.push.apply(code, slice(arguments));
              code.push(";");
            }
            return name;
          }
          return extend(push, {
            def,
            toString: function() {
              return join([
                vars.length > 0 ? "var " + vars.join(",") + ";" : "",
                join(code)
              ]);
            }
          });
        }
        function scope() {
          var entry = block();
          var exit = block();
          var entryToString = entry.toString;
          var exitToString = exit.toString;
          function save(object, prop) {
            exit(object, prop, "=", entry.def(object, prop), ";");
          }
          return extend(function() {
            entry.apply(entry, slice(arguments));
          }, {
            def: entry.def,
            entry,
            exit,
            save,
            set: function(object, prop, value) {
              save(object, prop);
              entry(object, prop, "=", value, ";");
            },
            toString: function() {
              return entryToString() + exitToString();
            }
          });
        }
        function conditional() {
          var pred = join(arguments);
          var thenBlock = scope();
          var elseBlock = scope();
          var thenToString = thenBlock.toString;
          var elseToString = elseBlock.toString;
          return extend(thenBlock, {
            then: function() {
              thenBlock.apply(thenBlock, slice(arguments));
              return this;
            },
            else: function() {
              elseBlock.apply(elseBlock, slice(arguments));
              return this;
            },
            toString: function() {
              var elseClause = elseToString();
              if (elseClause) {
                elseClause = "else{" + elseClause + "}";
              }
              return join([
                "if(",
                pred,
                "){",
                thenToString(),
                "}",
                elseClause
              ]);
            }
          });
        }
        var globalBlock = block();
        var procedures = {};
        function proc(name, count) {
          var args = [];
          function arg() {
            var name2 = "a" + args.length;
            args.push(name2);
            return name2;
          }
          count = count || 0;
          for (var i11 = 0; i11 < count; ++i11) {
            arg();
          }
          var body = scope();
          var bodyToString = body.toString;
          var result = procedures[name] = extend(body, {
            arg,
            toString: function() {
              return join([
                "function(",
                args.join(),
                "){",
                bodyToString(),
                "}"
              ]);
            }
          });
          return result;
        }
        function compile() {
          var code = [
            '"use strict";',
            globalBlock,
            "return {"
          ];
          Object.keys(procedures).forEach(function(name) {
            code.push('"', name, '":', procedures[name].toString(), ",");
          });
          code.push("}");
          var src = join(code).replace(/;/g, ";\n").replace(/}/g, "}\n").replace(/{/g, "{\n");
          var proc2 = Function.apply(null, linkedNames.concat(src));
          return proc2.apply(null, linkedValues);
        }
        return {
          global: globalBlock,
          link,
          block,
          proc,
          scope,
          cond: conditional,
          compile
        };
      }
      var CUTE_COMPONENTS = "xyzw".split("");
      var GL_UNSIGNED_BYTE$8 = 5121;
      var ATTRIB_STATE_POINTER = 1;
      var ATTRIB_STATE_CONSTANT = 2;
      var DYN_FUNC$1 = 0;
      var DYN_PROP$1 = 1;
      var DYN_CONTEXT$1 = 2;
      var DYN_STATE$1 = 3;
      var DYN_THUNK = 4;
      var DYN_CONSTANT$1 = 5;
      var DYN_ARRAY$1 = 6;
      var S_DITHER = "dither";
      var S_BLEND_ENABLE = "blend.enable";
      var S_BLEND_COLOR = "blend.color";
      var S_BLEND_EQUATION = "blend.equation";
      var S_BLEND_FUNC = "blend.func";
      var S_DEPTH_ENABLE = "depth.enable";
      var S_DEPTH_FUNC = "depth.func";
      var S_DEPTH_RANGE = "depth.range";
      var S_DEPTH_MASK = "depth.mask";
      var S_COLOR_MASK = "colorMask";
      var S_CULL_ENABLE = "cull.enable";
      var S_CULL_FACE = "cull.face";
      var S_FRONT_FACE = "frontFace";
      var S_LINE_WIDTH = "lineWidth";
      var S_POLYGON_OFFSET_ENABLE = "polygonOffset.enable";
      var S_POLYGON_OFFSET_OFFSET = "polygonOffset.offset";
      var S_SAMPLE_ALPHA = "sample.alpha";
      var S_SAMPLE_ENABLE = "sample.enable";
      var S_SAMPLE_COVERAGE = "sample.coverage";
      var S_STENCIL_ENABLE = "stencil.enable";
      var S_STENCIL_MASK = "stencil.mask";
      var S_STENCIL_FUNC = "stencil.func";
      var S_STENCIL_OPFRONT = "stencil.opFront";
      var S_STENCIL_OPBACK = "stencil.opBack";
      var S_SCISSOR_ENABLE = "scissor.enable";
      var S_SCISSOR_BOX = "scissor.box";
      var S_VIEWPORT = "viewport";
      var S_PROFILE = "profile";
      var S_FRAMEBUFFER = "framebuffer";
      var S_VERT = "vert";
      var S_FRAG = "frag";
      var S_ELEMENTS = "elements";
      var S_PRIMITIVE = "primitive";
      var S_COUNT = "count";
      var S_OFFSET = "offset";
      var S_INSTANCES = "instances";
      var S_VAO = "vao";
      var SUFFIX_WIDTH = "Width";
      var SUFFIX_HEIGHT = "Height";
      var S_FRAMEBUFFER_WIDTH = S_FRAMEBUFFER + SUFFIX_WIDTH;
      var S_FRAMEBUFFER_HEIGHT = S_FRAMEBUFFER + SUFFIX_HEIGHT;
      var S_VIEWPORT_WIDTH = S_VIEWPORT + SUFFIX_WIDTH;
      var S_VIEWPORT_HEIGHT = S_VIEWPORT + SUFFIX_HEIGHT;
      var S_DRAWINGBUFFER = "drawingBuffer";
      var S_DRAWINGBUFFER_WIDTH = S_DRAWINGBUFFER + SUFFIX_WIDTH;
      var S_DRAWINGBUFFER_HEIGHT = S_DRAWINGBUFFER + SUFFIX_HEIGHT;
      var NESTED_OPTIONS = [
        S_BLEND_FUNC,
        S_BLEND_EQUATION,
        S_STENCIL_FUNC,
        S_STENCIL_OPFRONT,
        S_STENCIL_OPBACK,
        S_SAMPLE_COVERAGE,
        S_VIEWPORT,
        S_SCISSOR_BOX,
        S_POLYGON_OFFSET_OFFSET
      ];
      var GL_ARRAY_BUFFER$2 = 34962;
      var GL_ELEMENT_ARRAY_BUFFER$2 = 34963;
      var GL_FRAGMENT_SHADER$1 = 35632;
      var GL_VERTEX_SHADER$1 = 35633;
      var GL_TEXTURE_2D$3 = 3553;
      var GL_TEXTURE_CUBE_MAP$2 = 34067;
      var GL_CULL_FACE = 2884;
      var GL_BLEND = 3042;
      var GL_DITHER = 3024;
      var GL_STENCIL_TEST = 2960;
      var GL_DEPTH_TEST = 2929;
      var GL_SCISSOR_TEST = 3089;
      var GL_POLYGON_OFFSET_FILL = 32823;
      var GL_SAMPLE_ALPHA_TO_COVERAGE = 32926;
      var GL_SAMPLE_COVERAGE = 32928;
      var GL_FLOAT$8 = 5126;
      var GL_FLOAT_VEC2 = 35664;
      var GL_FLOAT_VEC3 = 35665;
      var GL_FLOAT_VEC4 = 35666;
      var GL_INT$3 = 5124;
      var GL_INT_VEC2 = 35667;
      var GL_INT_VEC3 = 35668;
      var GL_INT_VEC4 = 35669;
      var GL_BOOL = 35670;
      var GL_BOOL_VEC2 = 35671;
      var GL_BOOL_VEC3 = 35672;
      var GL_BOOL_VEC4 = 35673;
      var GL_FLOAT_MAT2 = 35674;
      var GL_FLOAT_MAT3 = 35675;
      var GL_FLOAT_MAT4 = 35676;
      var GL_SAMPLER_2D = 35678;
      var GL_SAMPLER_CUBE = 35680;
      var GL_TRIANGLES$1 = 4;
      var GL_FRONT = 1028;
      var GL_BACK = 1029;
      var GL_CW = 2304;
      var GL_CCW = 2305;
      var GL_MIN_EXT = 32775;
      var GL_MAX_EXT = 32776;
      var GL_ALWAYS = 519;
      var GL_KEEP = 7680;
      var GL_ZERO = 0;
      var GL_ONE = 1;
      var GL_FUNC_ADD = 32774;
      var GL_LESS = 513;
      var GL_FRAMEBUFFER$2 = 36160;
      var GL_COLOR_ATTACHMENT0$2 = 36064;
      var blendFuncs = {
        "0": 0,
        "1": 1,
        "zero": 0,
        "one": 1,
        "src color": 768,
        "one minus src color": 769,
        "src alpha": 770,
        "one minus src alpha": 771,
        "dst color": 774,
        "one minus dst color": 775,
        "dst alpha": 772,
        "one minus dst alpha": 773,
        "constant color": 32769,
        "one minus constant color": 32770,
        "constant alpha": 32771,
        "one minus constant alpha": 32772,
        "src alpha saturate": 776
      };
      var invalidBlendCombinations = [
        "constant color, constant alpha",
        "one minus constant color, constant alpha",
        "constant color, one minus constant alpha",
        "one minus constant color, one minus constant alpha",
        "constant alpha, constant color",
        "constant alpha, one minus constant color",
        "one minus constant alpha, constant color",
        "one minus constant alpha, one minus constant color"
      ];
      var compareFuncs = {
        "never": 512,
        "less": 513,
        "<": 513,
        "equal": 514,
        "=": 514,
        "==": 514,
        "===": 514,
        "lequal": 515,
        "<=": 515,
        "greater": 516,
        ">": 516,
        "notequal": 517,
        "!=": 517,
        "!==": 517,
        "gequal": 518,
        ">=": 518,
        "always": 519
      };
      var stencilOps = {
        "0": 0,
        "zero": 0,
        "keep": 7680,
        "replace": 7681,
        "increment": 7682,
        "decrement": 7683,
        "increment wrap": 34055,
        "decrement wrap": 34056,
        "invert": 5386
      };
      var shaderType = {
        "frag": GL_FRAGMENT_SHADER$1,
        "vert": GL_VERTEX_SHADER$1
      };
      var orientationType = {
        "cw": GL_CW,
        "ccw": GL_CCW
      };
      function isBufferArgs(x3) {
        return Array.isArray(x3) || isTypedArray(x3) || isNDArrayLike(x3);
      }
      function sortState(state) {
        return state.sort(function(a13, b5) {
          if (a13 === S_VIEWPORT) {
            return -1;
          } else if (b5 === S_VIEWPORT) {
            return 1;
          }
          return a13 < b5 ? -1 : 1;
        });
      }
      function Declaration(thisDep, contextDep, propDep, append) {
        this.thisDep = thisDep;
        this.contextDep = contextDep;
        this.propDep = propDep;
        this.append = append;
      }
      function isStatic(decl) {
        return decl && !(decl.thisDep || decl.contextDep || decl.propDep);
      }
      function createStaticDecl(append) {
        return new Declaration(false, false, false, append);
      }
      function createDynamicDecl(dyn, append) {
        var type = dyn.type;
        if (type === DYN_FUNC$1) {
          var numArgs = dyn.data.length;
          return new Declaration(
            true,
            numArgs >= 1,
            numArgs >= 2,
            append
          );
        } else if (type === DYN_THUNK) {
          var data = dyn.data;
          return new Declaration(
            data.thisDep,
            data.contextDep,
            data.propDep,
            append
          );
        } else if (type === DYN_CONSTANT$1) {
          return new Declaration(
            false,
            false,
            false,
            append
          );
        } else if (type === DYN_ARRAY$1) {
          var thisDep = false;
          var contextDep = false;
          var propDep = false;
          for (var i11 = 0; i11 < dyn.data.length; ++i11) {
            var subDyn = dyn.data[i11];
            if (subDyn.type === DYN_PROP$1) {
              propDep = true;
            } else if (subDyn.type === DYN_CONTEXT$1) {
              contextDep = true;
            } else if (subDyn.type === DYN_STATE$1) {
              thisDep = true;
            } else if (subDyn.type === DYN_FUNC$1) {
              thisDep = true;
              var subArgs = subDyn.data;
              if (subArgs >= 1) {
                contextDep = true;
              }
              if (subArgs >= 2) {
                propDep = true;
              }
            } else if (subDyn.type === DYN_THUNK) {
              thisDep = thisDep || subDyn.data.thisDep;
              contextDep = contextDep || subDyn.data.contextDep;
              propDep = propDep || subDyn.data.propDep;
            }
          }
          return new Declaration(
            thisDep,
            contextDep,
            propDep,
            append
          );
        } else {
          return new Declaration(
            type === DYN_STATE$1,
            type === DYN_CONTEXT$1,
            type === DYN_PROP$1,
            append
          );
        }
      }
      var SCOPE_DECL = new Declaration(false, false, false, function() {
      });
      function reglCore(gl, stringStore, extensions, limits, bufferState, elementState, textureState, framebufferState, uniformState, attributeState, shaderState, drawState, contextState, timer, config) {
        var AttributeRecord2 = attributeState.Record;
        var blendEquations = {
          "add": 32774,
          "subtract": 32778,
          "reverse subtract": 32779
        };
        if (extensions.ext_blend_minmax) {
          blendEquations.min = GL_MIN_EXT;
          blendEquations.max = GL_MAX_EXT;
        }
        var extInstancing = extensions.angle_instanced_arrays;
        var extDrawBuffers = extensions.webgl_draw_buffers;
        var extVertexArrays = extensions.oes_vertex_array_object;
        var currentState = {
          dirty: true,
          profile: config.profile
        };
        var nextState = {};
        var GL_STATE_NAMES = [];
        var GL_FLAGS = {};
        var GL_VARIABLES = {};
        function propName(name) {
          return name.replace(".", "_");
        }
        function stateFlag(sname, cap, init) {
          var name = propName(sname);
          GL_STATE_NAMES.push(sname);
          nextState[name] = currentState[name] = !!init;
          GL_FLAGS[name] = cap;
        }
        function stateVariable(sname, func, init) {
          var name = propName(sname);
          GL_STATE_NAMES.push(sname);
          if (Array.isArray(init)) {
            currentState[name] = init.slice();
            nextState[name] = init.slice();
          } else {
            currentState[name] = nextState[name] = init;
          }
          GL_VARIABLES[name] = func;
        }
        stateFlag(S_DITHER, GL_DITHER);
        stateFlag(S_BLEND_ENABLE, GL_BLEND);
        stateVariable(S_BLEND_COLOR, "blendColor", [0, 0, 0, 0]);
        stateVariable(
          S_BLEND_EQUATION,
          "blendEquationSeparate",
          [GL_FUNC_ADD, GL_FUNC_ADD]
        );
        stateVariable(
          S_BLEND_FUNC,
          "blendFuncSeparate",
          [GL_ONE, GL_ZERO, GL_ONE, GL_ZERO]
        );
        stateFlag(S_DEPTH_ENABLE, GL_DEPTH_TEST, true);
        stateVariable(S_DEPTH_FUNC, "depthFunc", GL_LESS);
        stateVariable(S_DEPTH_RANGE, "depthRange", [0, 1]);
        stateVariable(S_DEPTH_MASK, "depthMask", true);
        stateVariable(S_COLOR_MASK, S_COLOR_MASK, [true, true, true, true]);
        stateFlag(S_CULL_ENABLE, GL_CULL_FACE);
        stateVariable(S_CULL_FACE, "cullFace", GL_BACK);
        stateVariable(S_FRONT_FACE, S_FRONT_FACE, GL_CCW);
        stateVariable(S_LINE_WIDTH, S_LINE_WIDTH, 1);
        stateFlag(S_POLYGON_OFFSET_ENABLE, GL_POLYGON_OFFSET_FILL);
        stateVariable(S_POLYGON_OFFSET_OFFSET, "polygonOffset", [0, 0]);
        stateFlag(S_SAMPLE_ALPHA, GL_SAMPLE_ALPHA_TO_COVERAGE);
        stateFlag(S_SAMPLE_ENABLE, GL_SAMPLE_COVERAGE);
        stateVariable(S_SAMPLE_COVERAGE, "sampleCoverage", [1, false]);
        stateFlag(S_STENCIL_ENABLE, GL_STENCIL_TEST);
        stateVariable(S_STENCIL_MASK, "stencilMask", -1);
        stateVariable(S_STENCIL_FUNC, "stencilFunc", [GL_ALWAYS, 0, -1]);
        stateVariable(
          S_STENCIL_OPFRONT,
          "stencilOpSeparate",
          [GL_FRONT, GL_KEEP, GL_KEEP, GL_KEEP]
        );
        stateVariable(
          S_STENCIL_OPBACK,
          "stencilOpSeparate",
          [GL_BACK, GL_KEEP, GL_KEEP, GL_KEEP]
        );
        stateFlag(S_SCISSOR_ENABLE, GL_SCISSOR_TEST);
        stateVariable(
          S_SCISSOR_BOX,
          "scissor",
          [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]
        );
        stateVariable(
          S_VIEWPORT,
          S_VIEWPORT,
          [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]
        );
        var sharedState = {
          gl,
          context: contextState,
          strings: stringStore,
          next: nextState,
          current: currentState,
          draw: drawState,
          elements: elementState,
          buffer: bufferState,
          shader: shaderState,
          attributes: attributeState.state,
          vao: attributeState,
          uniforms: uniformState,
          framebuffer: framebufferState,
          extensions,
          timer,
          isBufferArgs
        };
        var sharedConstants = {
          primTypes,
          compareFuncs,
          blendFuncs,
          blendEquations,
          stencilOps,
          glTypes,
          orientationType
        };
        check$1.optional(function() {
          sharedState.isArrayLike = isArrayLike;
        });
        if (extDrawBuffers) {
          sharedConstants.backBuffer = [GL_BACK];
          sharedConstants.drawBuffer = loop(limits.maxDrawbuffers, function(i11) {
            if (i11 === 0) {
              return [0];
            }
            return loop(i11, function(j6) {
              return GL_COLOR_ATTACHMENT0$2 + j6;
            });
          });
        }
        var drawCallCounter = 0;
        function createREGLEnvironment() {
          var env = createEnvironment();
          var link = env.link;
          var global3 = env.global;
          env.id = drawCallCounter++;
          env.batchId = "0";
          var SHARED = link(sharedState);
          var shared = env.shared = {
            props: "a0"
          };
          Object.keys(sharedState).forEach(function(prop) {
            shared[prop] = global3.def(SHARED, ".", prop);
          });
          check$1.optional(function() {
            env.CHECK = link(check$1);
            env.commandStr = check$1.guessCommand();
            env.command = link(env.commandStr);
            env.assert = function(block, pred, message) {
              block(
                "if(!(",
                pred,
                "))",
                this.CHECK,
                ".commandRaise(",
                link(message),
                ",",
                this.command,
                ");"
              );
            };
            sharedConstants.invalidBlendCombinations = invalidBlendCombinations;
          });
          var nextVars = env.next = {};
          var currentVars = env.current = {};
          Object.keys(GL_VARIABLES).forEach(function(variable) {
            if (Array.isArray(currentState[variable])) {
              nextVars[variable] = global3.def(shared.next, ".", variable);
              currentVars[variable] = global3.def(shared.current, ".", variable);
            }
          });
          var constants = env.constants = {};
          Object.keys(sharedConstants).forEach(function(name) {
            constants[name] = global3.def(JSON.stringify(sharedConstants[name]));
          });
          env.invoke = function(block, x3) {
            switch (x3.type) {
              case DYN_FUNC$1:
                var argList = [
                  "this",
                  shared.context,
                  shared.props,
                  env.batchId
                ];
                return block.def(
                  link(x3.data),
                  ".call(",
                  argList.slice(0, Math.max(x3.data.length + 1, 4)),
                  ")"
                );
              case DYN_PROP$1:
                return block.def(shared.props, x3.data);
              case DYN_CONTEXT$1:
                return block.def(shared.context, x3.data);
              case DYN_STATE$1:
                return block.def("this", x3.data);
              case DYN_THUNK:
                x3.data.append(env, block);
                return x3.data.ref;
              case DYN_CONSTANT$1:
                return x3.data.toString();
              case DYN_ARRAY$1:
                return x3.data.map(function(y3) {
                  return env.invoke(block, y3);
                });
            }
          };
          env.attribCache = {};
          var scopeAttribs = {};
          env.scopeAttrib = function(name) {
            var id = stringStore.id(name);
            if (id in scopeAttribs) {
              return scopeAttribs[id];
            }
            var binding = attributeState.scope[id];
            if (!binding) {
              binding = attributeState.scope[id] = new AttributeRecord2();
            }
            var result = scopeAttribs[id] = link(binding);
            return result;
          };
          return env;
        }
        function parseProfile(options) {
          var staticOptions = options.static;
          var dynamicOptions = options.dynamic;
          var profileEnable;
          if (S_PROFILE in staticOptions) {
            var value = !!staticOptions[S_PROFILE];
            profileEnable = createStaticDecl(function(env, scope) {
              return value;
            });
            profileEnable.enable = value;
          } else if (S_PROFILE in dynamicOptions) {
            var dyn = dynamicOptions[S_PROFILE];
            profileEnable = createDynamicDecl(dyn, function(env, scope) {
              return env.invoke(scope, dyn);
            });
          }
          return profileEnable;
        }
        function parseFramebuffer(options, env) {
          var staticOptions = options.static;
          var dynamicOptions = options.dynamic;
          if (S_FRAMEBUFFER in staticOptions) {
            var framebuffer = staticOptions[S_FRAMEBUFFER];
            if (framebuffer) {
              framebuffer = framebufferState.getFramebuffer(framebuffer);
              check$1.command(framebuffer, "invalid framebuffer object");
              return createStaticDecl(function(env2, block) {
                var FRAMEBUFFER = env2.link(framebuffer);
                var shared = env2.shared;
                block.set(
                  shared.framebuffer,
                  ".next",
                  FRAMEBUFFER
                );
                var CONTEXT = shared.context;
                block.set(
                  CONTEXT,
                  "." + S_FRAMEBUFFER_WIDTH,
                  FRAMEBUFFER + ".width"
                );
                block.set(
                  CONTEXT,
                  "." + S_FRAMEBUFFER_HEIGHT,
                  FRAMEBUFFER + ".height"
                );
                return FRAMEBUFFER;
              });
            } else {
              return createStaticDecl(function(env2, scope) {
                var shared = env2.shared;
                scope.set(
                  shared.framebuffer,
                  ".next",
                  "null"
                );
                var CONTEXT = shared.context;
                scope.set(
                  CONTEXT,
                  "." + S_FRAMEBUFFER_WIDTH,
                  CONTEXT + "." + S_DRAWINGBUFFER_WIDTH
                );
                scope.set(
                  CONTEXT,
                  "." + S_FRAMEBUFFER_HEIGHT,
                  CONTEXT + "." + S_DRAWINGBUFFER_HEIGHT
                );
                return "null";
              });
            }
          } else if (S_FRAMEBUFFER in dynamicOptions) {
            var dyn = dynamicOptions[S_FRAMEBUFFER];
            return createDynamicDecl(dyn, function(env2, scope) {
              var FRAMEBUFFER_FUNC = env2.invoke(scope, dyn);
              var shared = env2.shared;
              var FRAMEBUFFER_STATE = shared.framebuffer;
              var FRAMEBUFFER = scope.def(
                FRAMEBUFFER_STATE,
                ".getFramebuffer(",
                FRAMEBUFFER_FUNC,
                ")"
              );
              check$1.optional(function() {
                env2.assert(
                  scope,
                  "!" + FRAMEBUFFER_FUNC + "||" + FRAMEBUFFER,
                  "invalid framebuffer object"
                );
              });
              scope.set(
                FRAMEBUFFER_STATE,
                ".next",
                FRAMEBUFFER
              );
              var CONTEXT = shared.context;
              scope.set(
                CONTEXT,
                "." + S_FRAMEBUFFER_WIDTH,
                FRAMEBUFFER + "?" + FRAMEBUFFER + ".width:" + CONTEXT + "." + S_DRAWINGBUFFER_WIDTH
              );
              scope.set(
                CONTEXT,
                "." + S_FRAMEBUFFER_HEIGHT,
                FRAMEBUFFER + "?" + FRAMEBUFFER + ".height:" + CONTEXT + "." + S_DRAWINGBUFFER_HEIGHT
              );
              return FRAMEBUFFER;
            });
          } else {
            return null;
          }
        }
        function parseViewportScissor(options, framebuffer, env) {
          var staticOptions = options.static;
          var dynamicOptions = options.dynamic;
          function parseBox(param) {
            if (param in staticOptions) {
              var box = staticOptions[param];
              check$1.commandType(box, "object", "invalid " + param, env.commandStr);
              var isStatic2 = true;
              var x3 = box.x | 0;
              var y3 = box.y | 0;
              var w3, h6;
              if ("width" in box) {
                w3 = box.width | 0;
                check$1.command(w3 >= 0, "invalid " + param, env.commandStr);
              } else {
                isStatic2 = false;
              }
              if ("height" in box) {
                h6 = box.height | 0;
                check$1.command(h6 >= 0, "invalid " + param, env.commandStr);
              } else {
                isStatic2 = false;
              }
              return new Declaration(
                !isStatic2 && framebuffer && framebuffer.thisDep,
                !isStatic2 && framebuffer && framebuffer.contextDep,
                !isStatic2 && framebuffer && framebuffer.propDep,
                function(env2, scope) {
                  var CONTEXT = env2.shared.context;
                  var BOX_W = w3;
                  if (!("width" in box)) {
                    BOX_W = scope.def(CONTEXT, ".", S_FRAMEBUFFER_WIDTH, "-", x3);
                  }
                  var BOX_H = h6;
                  if (!("height" in box)) {
                    BOX_H = scope.def(CONTEXT, ".", S_FRAMEBUFFER_HEIGHT, "-", y3);
                  }
                  return [x3, y3, BOX_W, BOX_H];
                }
              );
            } else if (param in dynamicOptions) {
              var dynBox = dynamicOptions[param];
              var result = createDynamicDecl(dynBox, function(env2, scope) {
                var BOX = env2.invoke(scope, dynBox);
                check$1.optional(function() {
                  env2.assert(
                    scope,
                    BOX + "&&typeof " + BOX + '==="object"',
                    "invalid " + param
                  );
                });
                var CONTEXT = env2.shared.context;
                var BOX_X = scope.def(BOX, ".x|0");
                var BOX_Y = scope.def(BOX, ".y|0");
                var BOX_W = scope.def(
                  '"width" in ',
                  BOX,
                  "?",
                  BOX,
                  ".width|0:",
                  "(",
                  CONTEXT,
                  ".",
                  S_FRAMEBUFFER_WIDTH,
                  "-",
                  BOX_X,
                  ")"
                );
                var BOX_H = scope.def(
                  '"height" in ',
                  BOX,
                  "?",
                  BOX,
                  ".height|0:",
                  "(",
                  CONTEXT,
                  ".",
                  S_FRAMEBUFFER_HEIGHT,
                  "-",
                  BOX_Y,
                  ")"
                );
                check$1.optional(function() {
                  env2.assert(
                    scope,
                    BOX_W + ">=0&&" + BOX_H + ">=0",
                    "invalid " + param
                  );
                });
                return [BOX_X, BOX_Y, BOX_W, BOX_H];
              });
              if (framebuffer) {
                result.thisDep = result.thisDep || framebuffer.thisDep;
                result.contextDep = result.contextDep || framebuffer.contextDep;
                result.propDep = result.propDep || framebuffer.propDep;
              }
              return result;
            } else if (framebuffer) {
              return new Declaration(
                framebuffer.thisDep,
                framebuffer.contextDep,
                framebuffer.propDep,
                function(env2, scope) {
                  var CONTEXT = env2.shared.context;
                  return [
                    0,
                    0,
                    scope.def(CONTEXT, ".", S_FRAMEBUFFER_WIDTH),
                    scope.def(CONTEXT, ".", S_FRAMEBUFFER_HEIGHT)
                  ];
                }
              );
            } else {
              return null;
            }
          }
          var viewport = parseBox(S_VIEWPORT);
          if (viewport) {
            var prevViewport = viewport;
            viewport = new Declaration(
              viewport.thisDep,
              viewport.contextDep,
              viewport.propDep,
              function(env2, scope) {
                var VIEWPORT = prevViewport.append(env2, scope);
                var CONTEXT = env2.shared.context;
                scope.set(
                  CONTEXT,
                  "." + S_VIEWPORT_WIDTH,
                  VIEWPORT[2]
                );
                scope.set(
                  CONTEXT,
                  "." + S_VIEWPORT_HEIGHT,
                  VIEWPORT[3]
                );
                return VIEWPORT;
              }
            );
          }
          return {
            viewport,
            scissor_box: parseBox(S_SCISSOR_BOX)
          };
        }
        function parseAttribLocations(options, attributes) {
          var staticOptions = options.static;
          var staticProgram = typeof staticOptions[S_FRAG] === "string" && typeof staticOptions[S_VERT] === "string";
          if (staticProgram) {
            if (Object.keys(attributes.dynamic).length > 0) {
              return null;
            }
            var staticAttributes = attributes.static;
            var sAttributes = Object.keys(staticAttributes);
            if (sAttributes.length > 0 && typeof staticAttributes[sAttributes[0]] === "number") {
              var bindings = [];
              for (var i11 = 0; i11 < sAttributes.length; ++i11) {
                check$1(typeof staticAttributes[sAttributes[i11]] === "number", "must specify all vertex attribute locations when using vaos");
                bindings.push([staticAttributes[sAttributes[i11]] | 0, sAttributes[i11]]);
              }
              return bindings;
            }
          }
          return null;
        }
        function parseProgram(options, env, attribLocations) {
          var staticOptions = options.static;
          var dynamicOptions = options.dynamic;
          function parseShader(name) {
            if (name in staticOptions) {
              var id = stringStore.id(staticOptions[name]);
              check$1.optional(function() {
                shaderState.shader(shaderType[name], id, check$1.guessCommand());
              });
              var result = createStaticDecl(function() {
                return id;
              });
              result.id = id;
              return result;
            } else if (name in dynamicOptions) {
              var dyn = dynamicOptions[name];
              return createDynamicDecl(dyn, function(env2, scope) {
                var str2 = env2.invoke(scope, dyn);
                var id2 = scope.def(env2.shared.strings, ".id(", str2, ")");
                check$1.optional(function() {
                  scope(
                    env2.shared.shader,
                    ".shader(",
                    shaderType[name],
                    ",",
                    id2,
                    ",",
                    env2.command,
                    ");"
                  );
                });
                return id2;
              });
            }
            return null;
          }
          var frag = parseShader(S_FRAG);
          var vert = parseShader(S_VERT);
          var program = null;
          var progVar;
          if (isStatic(frag) && isStatic(vert)) {
            program = shaderState.program(vert.id, frag.id, null, attribLocations);
            progVar = createStaticDecl(function(env2, scope) {
              return env2.link(program);
            });
          } else {
            progVar = new Declaration(
              frag && frag.thisDep || vert && vert.thisDep,
              frag && frag.contextDep || vert && vert.contextDep,
              frag && frag.propDep || vert && vert.propDep,
              function(env2, scope) {
                var SHADER_STATE = env2.shared.shader;
                var fragId;
                if (frag) {
                  fragId = frag.append(env2, scope);
                } else {
                  fragId = scope.def(SHADER_STATE, ".", S_FRAG);
                }
                var vertId;
                if (vert) {
                  vertId = vert.append(env2, scope);
                } else {
                  vertId = scope.def(SHADER_STATE, ".", S_VERT);
                }
                var progDef = SHADER_STATE + ".program(" + vertId + "," + fragId;
                check$1.optional(function() {
                  progDef += "," + env2.command;
                });
                return scope.def(progDef + ")");
              }
            );
          }
          return {
            frag,
            vert,
            progVar,
            program
          };
        }
        function parseDraw(options, env) {
          var staticOptions = options.static;
          var dynamicOptions = options.dynamic;
          var staticDraw = {};
          var vaoActive = false;
          function parseVAO() {
            if (S_VAO in staticOptions) {
              var vao2 = staticOptions[S_VAO];
              if (vao2 !== null && attributeState.getVAO(vao2) === null) {
                vao2 = attributeState.createVAO(vao2);
              }
              vaoActive = true;
              staticDraw.vao = vao2;
              return createStaticDecl(function(env2) {
                var vaoRef = attributeState.getVAO(vao2);
                if (vaoRef) {
                  return env2.link(vaoRef);
                } else {
                  return "null";
                }
              });
            } else if (S_VAO in dynamicOptions) {
              vaoActive = true;
              var dyn = dynamicOptions[S_VAO];
              return createDynamicDecl(dyn, function(env2, scope) {
                var vaoRef = env2.invoke(scope, dyn);
                return scope.def(env2.shared.vao + ".getVAO(" + vaoRef + ")");
              });
            }
            return null;
          }
          var vao = parseVAO();
          var elementsActive = false;
          function parseElements() {
            if (S_ELEMENTS in staticOptions) {
              var elements2 = staticOptions[S_ELEMENTS];
              staticDraw.elements = elements2;
              if (isBufferArgs(elements2)) {
                var e36 = staticDraw.elements = elementState.create(elements2, true);
                elements2 = elementState.getElements(e36);
                elementsActive = true;
              } else if (elements2) {
                elements2 = elementState.getElements(elements2);
                elementsActive = true;
                check$1.command(elements2, "invalid elements", env.commandStr);
              }
              var result = createStaticDecl(function(env2, scope) {
                if (elements2) {
                  var result2 = env2.link(elements2);
                  env2.ELEMENTS = result2;
                  return result2;
                }
                env2.ELEMENTS = null;
                return null;
              });
              result.value = elements2;
              return result;
            } else if (S_ELEMENTS in dynamicOptions) {
              elementsActive = true;
              var dyn = dynamicOptions[S_ELEMENTS];
              return createDynamicDecl(dyn, function(env2, scope) {
                var shared = env2.shared;
                var IS_BUFFER_ARGS = shared.isBufferArgs;
                var ELEMENT_STATE = shared.elements;
                var elementDefn = env2.invoke(scope, dyn);
                var elements3 = scope.def("null");
                var elementStream = scope.def(IS_BUFFER_ARGS, "(", elementDefn, ")");
                var ifte = env2.cond(elementStream).then(elements3, "=", ELEMENT_STATE, ".createStream(", elementDefn, ");").else(elements3, "=", ELEMENT_STATE, ".getElements(", elementDefn, ");");
                check$1.optional(function() {
                  env2.assert(
                    ifte.else,
                    "!" + elementDefn + "||" + elements3,
                    "invalid elements"
                  );
                });
                scope.entry(ifte);
                scope.exit(
                  env2.cond(elementStream).then(ELEMENT_STATE, ".destroyStream(", elements3, ");")
                );
                env2.ELEMENTS = elements3;
                return elements3;
              });
            } else if (vaoActive) {
              return new Declaration(
                vao.thisDep,
                vao.contextDep,
                vao.propDep,
                function(env2, scope) {
                  return scope.def(env2.shared.vao + ".currentVAO?" + env2.shared.elements + ".getElements(" + env2.shared.vao + ".currentVAO.elements):null");
                }
              );
            }
            return null;
          }
          var elements = parseElements();
          function parsePrimitive() {
            if (S_PRIMITIVE in staticOptions) {
              var primitive2 = staticOptions[S_PRIMITIVE];
              staticDraw.primitive = primitive2;
              check$1.commandParameter(primitive2, primTypes, "invalid primitve", env.commandStr);
              return createStaticDecl(function(env2, scope) {
                return primTypes[primitive2];
              });
            } else if (S_PRIMITIVE in dynamicOptions) {
              var dynPrimitive = dynamicOptions[S_PRIMITIVE];
              return createDynamicDecl(dynPrimitive, function(env2, scope) {
                var PRIM_TYPES = env2.constants.primTypes;
                var prim = env2.invoke(scope, dynPrimitive);
                check$1.optional(function() {
                  env2.assert(
                    scope,
                    prim + " in " + PRIM_TYPES,
                    "invalid primitive, must be one of " + Object.keys(primTypes)
                  );
                });
                return scope.def(PRIM_TYPES, "[", prim, "]");
              });
            } else if (elementsActive) {
              if (isStatic(elements)) {
                if (elements.value) {
                  return createStaticDecl(function(env2, scope) {
                    return scope.def(env2.ELEMENTS, ".primType");
                  });
                } else {
                  return createStaticDecl(function() {
                    return GL_TRIANGLES$1;
                  });
                }
              } else {
                return new Declaration(
                  elements.thisDep,
                  elements.contextDep,
                  elements.propDep,
                  function(env2, scope) {
                    var elements2 = env2.ELEMENTS;
                    return scope.def(elements2, "?", elements2, ".primType:", GL_TRIANGLES$1);
                  }
                );
              }
            } else if (vaoActive) {
              return new Declaration(
                vao.thisDep,
                vao.contextDep,
                vao.propDep,
                function(env2, scope) {
                  return scope.def(env2.shared.vao + ".currentVAO?" + env2.shared.vao + ".currentVAO.primitive:" + GL_TRIANGLES$1);
                }
              );
            }
            return null;
          }
          function parseParam(param, isOffset) {
            if (param in staticOptions) {
              var value = staticOptions[param] | 0;
              if (isOffset) {
                staticDraw.offset = value;
              } else {
                staticDraw.instances = value;
              }
              check$1.command(!isOffset || value >= 0, "invalid " + param, env.commandStr);
              return createStaticDecl(function(env2, scope) {
                if (isOffset) {
                  env2.OFFSET = value;
                }
                return value;
              });
            } else if (param in dynamicOptions) {
              var dynValue = dynamicOptions[param];
              return createDynamicDecl(dynValue, function(env2, scope) {
                var result = env2.invoke(scope, dynValue);
                if (isOffset) {
                  env2.OFFSET = result;
                  check$1.optional(function() {
                    env2.assert(
                      scope,
                      result + ">=0",
                      "invalid " + param
                    );
                  });
                }
                return result;
              });
            } else if (isOffset) {
              if (elementsActive) {
                return createStaticDecl(function(env2, scope) {
                  env2.OFFSET = 0;
                  return 0;
                });
              } else if (vaoActive) {
                return new Declaration(
                  vao.thisDep,
                  vao.contextDep,
                  vao.propDep,
                  function(env2, scope) {
                    return scope.def(env2.shared.vao + ".currentVAO?" + env2.shared.vao + ".currentVAO.offset:0");
                  }
                );
              }
            } else if (vaoActive) {
              return new Declaration(
                vao.thisDep,
                vao.contextDep,
                vao.propDep,
                function(env2, scope) {
                  return scope.def(env2.shared.vao + ".currentVAO?" + env2.shared.vao + ".currentVAO.instances:-1");
                }
              );
            }
            return null;
          }
          var OFFSET = parseParam(S_OFFSET, true);
          function parseVertCount() {
            if (S_COUNT in staticOptions) {
              var count2 = staticOptions[S_COUNT] | 0;
              staticDraw.count = count2;
              check$1.command(
                typeof count2 === "number" && count2 >= 0,
                "invalid vertex count",
                env.commandStr
              );
              return createStaticDecl(function() {
                return count2;
              });
            } else if (S_COUNT in dynamicOptions) {
              var dynCount = dynamicOptions[S_COUNT];
              return createDynamicDecl(dynCount, function(env2, scope) {
                var result2 = env2.invoke(scope, dynCount);
                check$1.optional(function() {
                  env2.assert(
                    scope,
                    "typeof " + result2 + '==="number"&&' + result2 + ">=0&&" + result2 + "===(" + result2 + "|0)",
                    "invalid vertex count"
                  );
                });
                return result2;
              });
            } else if (elementsActive) {
              if (isStatic(elements)) {
                if (elements) {
                  if (OFFSET) {
                    return new Declaration(
                      OFFSET.thisDep,
                      OFFSET.contextDep,
                      OFFSET.propDep,
                      function(env2, scope) {
                        var result2 = scope.def(
                          env2.ELEMENTS,
                          ".vertCount-",
                          env2.OFFSET
                        );
                        check$1.optional(function() {
                          env2.assert(
                            scope,
                            result2 + ">=0",
                            "invalid vertex offset/element buffer too small"
                          );
                        });
                        return result2;
                      }
                    );
                  } else {
                    return createStaticDecl(function(env2, scope) {
                      return scope.def(env2.ELEMENTS, ".vertCount");
                    });
                  }
                } else {
                  var result = createStaticDecl(function() {
                    return -1;
                  });
                  check$1.optional(function() {
                    result.MISSING = true;
                  });
                  return result;
                }
              } else {
                var variable = new Declaration(
                  elements.thisDep || OFFSET.thisDep,
                  elements.contextDep || OFFSET.contextDep,
                  elements.propDep || OFFSET.propDep,
                  function(env2, scope) {
                    var elements2 = env2.ELEMENTS;
                    if (env2.OFFSET) {
                      return scope.def(
                        elements2,
                        "?",
                        elements2,
                        ".vertCount-",
                        env2.OFFSET,
                        ":-1"
                      );
                    }
                    return scope.def(elements2, "?", elements2, ".vertCount:-1");
                  }
                );
                check$1.optional(function() {
                  variable.DYNAMIC = true;
                });
                return variable;
              }
            } else if (vaoActive) {
              var countVariable = new Declaration(
                vao.thisDep,
                vao.contextDep,
                vao.propDep,
                function(env2, scope) {
                  return scope.def(env2.shared.vao, ".currentVAO?", env2.shared.vao, ".currentVAO.count:-1");
                }
              );
              return countVariable;
            }
            return null;
          }
          var primitive = parsePrimitive();
          var count = parseVertCount();
          var instances = parseParam(S_INSTANCES, false);
          return {
            elements,
            primitive,
            count,
            instances,
            offset: OFFSET,
            vao,
            vaoActive,
            elementsActive,
            // static draw props
            static: staticDraw
          };
        }
        function parseGLState(options, env) {
          var staticOptions = options.static;
          var dynamicOptions = options.dynamic;
          var STATE = {};
          GL_STATE_NAMES.forEach(function(prop) {
            var param = propName(prop);
            function parseParam(parseStatic, parseDynamic) {
              if (prop in staticOptions) {
                var value = parseStatic(staticOptions[prop]);
                STATE[param] = createStaticDecl(function() {
                  return value;
                });
              } else if (prop in dynamicOptions) {
                var dyn = dynamicOptions[prop];
                STATE[param] = createDynamicDecl(dyn, function(env2, scope) {
                  return parseDynamic(env2, scope, env2.invoke(scope, dyn));
                });
              }
            }
            switch (prop) {
              case S_CULL_ENABLE:
              case S_BLEND_ENABLE:
              case S_DITHER:
              case S_STENCIL_ENABLE:
              case S_DEPTH_ENABLE:
              case S_SCISSOR_ENABLE:
              case S_POLYGON_OFFSET_ENABLE:
              case S_SAMPLE_ALPHA:
              case S_SAMPLE_ENABLE:
              case S_DEPTH_MASK:
                return parseParam(
                  function(value) {
                    check$1.commandType(value, "boolean", prop, env.commandStr);
                    return value;
                  },
                  function(env2, scope, value) {
                    check$1.optional(function() {
                      env2.assert(
                        scope,
                        "typeof " + value + '==="boolean"',
                        "invalid flag " + prop,
                        env2.commandStr
                      );
                    });
                    return value;
                  }
                );
              case S_DEPTH_FUNC:
                return parseParam(
                  function(value) {
                    check$1.commandParameter(value, compareFuncs, "invalid " + prop, env.commandStr);
                    return compareFuncs[value];
                  },
                  function(env2, scope, value) {
                    var COMPARE_FUNCS = env2.constants.compareFuncs;
                    check$1.optional(function() {
                      env2.assert(
                        scope,
                        value + " in " + COMPARE_FUNCS,
                        "invalid " + prop + ", must be one of " + Object.keys(compareFuncs)
                      );
                    });
                    return scope.def(COMPARE_FUNCS, "[", value, "]");
                  }
                );
              case S_DEPTH_RANGE:
                return parseParam(
                  function(value) {
                    check$1.command(
                      isArrayLike(value) && value.length === 2 && typeof value[0] === "number" && typeof value[1] === "number" && value[0] <= value[1],
                      "depth range is 2d array",
                      env.commandStr
                    );
                    return value;
                  },
                  function(env2, scope, value) {
                    check$1.optional(function() {
                      env2.assert(
                        scope,
                        env2.shared.isArrayLike + "(" + value + ")&&" + value + ".length===2&&typeof " + value + '[0]==="number"&&typeof ' + value + '[1]==="number"&&' + value + "[0]<=" + value + "[1]",
                        "depth range must be a 2d array"
                      );
                    });
                    var Z_NEAR = scope.def("+", value, "[0]");
                    var Z_FAR = scope.def("+", value, "[1]");
                    return [Z_NEAR, Z_FAR];
                  }
                );
              case S_BLEND_FUNC:
                return parseParam(
                  function(value) {
                    check$1.commandType(value, "object", "blend.func", env.commandStr);
                    var srcRGB = "srcRGB" in value ? value.srcRGB : value.src;
                    var srcAlpha = "srcAlpha" in value ? value.srcAlpha : value.src;
                    var dstRGB = "dstRGB" in value ? value.dstRGB : value.dst;
                    var dstAlpha = "dstAlpha" in value ? value.dstAlpha : value.dst;
                    check$1.commandParameter(srcRGB, blendFuncs, param + ".srcRGB", env.commandStr);
                    check$1.commandParameter(srcAlpha, blendFuncs, param + ".srcAlpha", env.commandStr);
                    check$1.commandParameter(dstRGB, blendFuncs, param + ".dstRGB", env.commandStr);
                    check$1.commandParameter(dstAlpha, blendFuncs, param + ".dstAlpha", env.commandStr);
                    check$1.command(
                      invalidBlendCombinations.indexOf(srcRGB + ", " + dstRGB) === -1,
                      "unallowed blending combination (srcRGB, dstRGB) = (" + srcRGB + ", " + dstRGB + ")",
                      env.commandStr
                    );
                    return [
                      blendFuncs[srcRGB],
                      blendFuncs[dstRGB],
                      blendFuncs[srcAlpha],
                      blendFuncs[dstAlpha]
                    ];
                  },
                  function(env2, scope, value) {
                    var BLEND_FUNCS = env2.constants.blendFuncs;
                    check$1.optional(function() {
                      env2.assert(
                        scope,
                        value + "&&typeof " + value + '==="object"',
                        "invalid blend func, must be an object"
                      );
                    });
                    function read(prefix, suffix) {
                      var func = scope.def(
                        '"',
                        prefix,
                        suffix,
                        '" in ',
                        value,
                        "?",
                        value,
                        ".",
                        prefix,
                        suffix,
                        ":",
                        value,
                        ".",
                        prefix
                      );
                      check$1.optional(function() {
                        env2.assert(
                          scope,
                          func + " in " + BLEND_FUNCS,
                          "invalid " + prop + "." + prefix + suffix + ", must be one of " + Object.keys(blendFuncs)
                        );
                      });
                      return func;
                    }
                    var srcRGB = read("src", "RGB");
                    var dstRGB = read("dst", "RGB");
                    check$1.optional(function() {
                      var INVALID_BLEND_COMBINATIONS = env2.constants.invalidBlendCombinations;
                      env2.assert(
                        scope,
                        INVALID_BLEND_COMBINATIONS + ".indexOf(" + srcRGB + '+", "+' + dstRGB + ") === -1 ",
                        "unallowed blending combination for (srcRGB, dstRGB)"
                      );
                    });
                    var SRC_RGB = scope.def(BLEND_FUNCS, "[", srcRGB, "]");
                    var SRC_ALPHA = scope.def(BLEND_FUNCS, "[", read("src", "Alpha"), "]");
                    var DST_RGB = scope.def(BLEND_FUNCS, "[", dstRGB, "]");
                    var DST_ALPHA = scope.def(BLEND_FUNCS, "[", read("dst", "Alpha"), "]");
                    return [SRC_RGB, DST_RGB, SRC_ALPHA, DST_ALPHA];
                  }
                );
              case S_BLEND_EQUATION:
                return parseParam(
                  function(value) {
                    if (typeof value === "string") {
                      check$1.commandParameter(value, blendEquations, "invalid " + prop, env.commandStr);
                      return [
                        blendEquations[value],
                        blendEquations[value]
                      ];
                    } else if (typeof value === "object") {
                      check$1.commandParameter(
                        value.rgb,
                        blendEquations,
                        prop + ".rgb",
                        env.commandStr
                      );
                      check$1.commandParameter(
                        value.alpha,
                        blendEquations,
                        prop + ".alpha",
                        env.commandStr
                      );
                      return [
                        blendEquations[value.rgb],
                        blendEquations[value.alpha]
                      ];
                    } else {
                      check$1.commandRaise("invalid blend.equation", env.commandStr);
                    }
                  },
                  function(env2, scope, value) {
                    var BLEND_EQUATIONS = env2.constants.blendEquations;
                    var RGB = scope.def();
                    var ALPHA = scope.def();
                    var ifte = env2.cond("typeof ", value, '==="string"');
                    check$1.optional(function() {
                      function checkProp(block, name, value2) {
                        env2.assert(
                          block,
                          value2 + " in " + BLEND_EQUATIONS,
                          "invalid " + name + ", must be one of " + Object.keys(blendEquations)
                        );
                      }
                      checkProp(ifte.then, prop, value);
                      env2.assert(
                        ifte.else,
                        value + "&&typeof " + value + '==="object"',
                        "invalid " + prop
                      );
                      checkProp(ifte.else, prop + ".rgb", value + ".rgb");
                      checkProp(ifte.else, prop + ".alpha", value + ".alpha");
                    });
                    ifte.then(
                      RGB,
                      "=",
                      ALPHA,
                      "=",
                      BLEND_EQUATIONS,
                      "[",
                      value,
                      "];"
                    );
                    ifte.else(
                      RGB,
                      "=",
                      BLEND_EQUATIONS,
                      "[",
                      value,
                      ".rgb];",
                      ALPHA,
                      "=",
                      BLEND_EQUATIONS,
                      "[",
                      value,
                      ".alpha];"
                    );
                    scope(ifte);
                    return [RGB, ALPHA];
                  }
                );
              case S_BLEND_COLOR:
                return parseParam(
                  function(value) {
                    check$1.command(
                      isArrayLike(value) && value.length === 4,
                      "blend.color must be a 4d array",
                      env.commandStr
                    );
                    return loop(4, function(i11) {
                      return +value[i11];
                    });
                  },
                  function(env2, scope, value) {
                    check$1.optional(function() {
                      env2.assert(
                        scope,
                        env2.shared.isArrayLike + "(" + value + ")&&" + value + ".length===4",
                        "blend.color must be a 4d array"
                      );
                    });
                    return loop(4, function(i11) {
                      return scope.def("+", value, "[", i11, "]");
                    });
                  }
                );
              case S_STENCIL_MASK:
                return parseParam(
                  function(value) {
                    check$1.commandType(value, "number", param, env.commandStr);
                    return value | 0;
                  },
                  function(env2, scope, value) {
                    check$1.optional(function() {
                      env2.assert(
                        scope,
                        "typeof " + value + '==="number"',
                        "invalid stencil.mask"
                      );
                    });
                    return scope.def(value, "|0");
                  }
                );
              case S_STENCIL_FUNC:
                return parseParam(
                  function(value) {
                    check$1.commandType(value, "object", param, env.commandStr);
                    var cmp = value.cmp || "keep";
                    var ref = value.ref || 0;
                    var mask = "mask" in value ? value.mask : -1;
                    check$1.commandParameter(cmp, compareFuncs, prop + ".cmp", env.commandStr);
                    check$1.commandType(ref, "number", prop + ".ref", env.commandStr);
                    check$1.commandType(mask, "number", prop + ".mask", env.commandStr);
                    return [
                      compareFuncs[cmp],
                      ref,
                      mask
                    ];
                  },
                  function(env2, scope, value) {
                    var COMPARE_FUNCS = env2.constants.compareFuncs;
                    check$1.optional(function() {
                      function assert() {
                        env2.assert(
                          scope,
                          Array.prototype.join.call(arguments, ""),
                          "invalid stencil.func"
                        );
                      }
                      assert(value + "&&typeof ", value, '==="object"');
                      assert(
                        '!("cmp" in ',
                        value,
                        ")||(",
                        value,
                        ".cmp in ",
                        COMPARE_FUNCS,
                        ")"
                      );
                    });
                    var cmp = scope.def(
                      '"cmp" in ',
                      value,
                      "?",
                      COMPARE_FUNCS,
                      "[",
                      value,
                      ".cmp]",
                      ":",
                      GL_KEEP
                    );
                    var ref = scope.def(value, ".ref|0");
                    var mask = scope.def(
                      '"mask" in ',
                      value,
                      "?",
                      value,
                      ".mask|0:-1"
                    );
                    return [cmp, ref, mask];
                  }
                );
              case S_STENCIL_OPFRONT:
              case S_STENCIL_OPBACK:
                return parseParam(
                  function(value) {
                    check$1.commandType(value, "object", param, env.commandStr);
                    var fail = value.fail || "keep";
                    var zfail = value.zfail || "keep";
                    var zpass = value.zpass || "keep";
                    check$1.commandParameter(fail, stencilOps, prop + ".fail", env.commandStr);
                    check$1.commandParameter(zfail, stencilOps, prop + ".zfail", env.commandStr);
                    check$1.commandParameter(zpass, stencilOps, prop + ".zpass", env.commandStr);
                    return [
                      prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT,
                      stencilOps[fail],
                      stencilOps[zfail],
                      stencilOps[zpass]
                    ];
                  },
                  function(env2, scope, value) {
                    var STENCIL_OPS = env2.constants.stencilOps;
                    check$1.optional(function() {
                      env2.assert(
                        scope,
                        value + "&&typeof " + value + '==="object"',
                        "invalid " + prop
                      );
                    });
                    function read(name) {
                      check$1.optional(function() {
                        env2.assert(
                          scope,
                          '!("' + name + '" in ' + value + ")||(" + value + "." + name + " in " + STENCIL_OPS + ")",
                          "invalid " + prop + "." + name + ", must be one of " + Object.keys(stencilOps)
                        );
                      });
                      return scope.def(
                        '"',
                        name,
                        '" in ',
                        value,
                        "?",
                        STENCIL_OPS,
                        "[",
                        value,
                        ".",
                        name,
                        "]:",
                        GL_KEEP
                      );
                    }
                    return [
                      prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT,
                      read("fail"),
                      read("zfail"),
                      read("zpass")
                    ];
                  }
                );
              case S_POLYGON_OFFSET_OFFSET:
                return parseParam(
                  function(value) {
                    check$1.commandType(value, "object", param, env.commandStr);
                    var factor = value.factor | 0;
                    var units = value.units | 0;
                    check$1.commandType(factor, "number", param + ".factor", env.commandStr);
                    check$1.commandType(units, "number", param + ".units", env.commandStr);
                    return [factor, units];
                  },
                  function(env2, scope, value) {
                    check$1.optional(function() {
                      env2.assert(
                        scope,
                        value + "&&typeof " + value + '==="object"',
                        "invalid " + prop
                      );
                    });
                    var FACTOR = scope.def(value, ".factor|0");
                    var UNITS = scope.def(value, ".units|0");
                    return [FACTOR, UNITS];
                  }
                );
              case S_CULL_FACE:
                return parseParam(
                  function(value) {
                    var face = 0;
                    if (value === "front") {
                      face = GL_FRONT;
                    } else if (value === "back") {
                      face = GL_BACK;
                    }
                    check$1.command(!!face, param, env.commandStr);
                    return face;
                  },
                  function(env2, scope, value) {
                    check$1.optional(function() {
                      env2.assert(
                        scope,
                        value + '==="front"||' + value + '==="back"',
                        "invalid cull.face"
                      );
                    });
                    return scope.def(value, '==="front"?', GL_FRONT, ":", GL_BACK);
                  }
                );
              case S_LINE_WIDTH:
                return parseParam(
                  function(value) {
                    check$1.command(
                      typeof value === "number" && value >= limits.lineWidthDims[0] && value <= limits.lineWidthDims[1],
                      "invalid line width, must be a positive number between " + limits.lineWidthDims[0] + " and " + limits.lineWidthDims[1],
                      env.commandStr
                    );
                    return value;
                  },
                  function(env2, scope, value) {
                    check$1.optional(function() {
                      env2.assert(
                        scope,
                        "typeof " + value + '==="number"&&' + value + ">=" + limits.lineWidthDims[0] + "&&" + value + "<=" + limits.lineWidthDims[1],
                        "invalid line width"
                      );
                    });
                    return value;
                  }
                );
              case S_FRONT_FACE:
                return parseParam(
                  function(value) {
                    check$1.commandParameter(value, orientationType, param, env.commandStr);
                    return orientationType[value];
                  },
                  function(env2, scope, value) {
                    check$1.optional(function() {
                      env2.assert(
                        scope,
                        value + '==="cw"||' + value + '==="ccw"',
                        "invalid frontFace, must be one of cw,ccw"
                      );
                    });
                    return scope.def(value + '==="cw"?' + GL_CW + ":" + GL_CCW);
                  }
                );
              case S_COLOR_MASK:
                return parseParam(
                  function(value) {
                    check$1.command(
                      isArrayLike(value) && value.length === 4,
                      "color.mask must be length 4 array",
                      env.commandStr
                    );
                    return value.map(function(v3) {
                      return !!v3;
                    });
                  },
                  function(env2, scope, value) {
                    check$1.optional(function() {
                      env2.assert(
                        scope,
                        env2.shared.isArrayLike + "(" + value + ")&&" + value + ".length===4",
                        "invalid color.mask"
                      );
                    });
                    return loop(4, function(i11) {
                      return "!!" + value + "[" + i11 + "]";
                    });
                  }
                );
              case S_SAMPLE_COVERAGE:
                return parseParam(
                  function(value) {
                    check$1.command(typeof value === "object" && value, param, env.commandStr);
                    var sampleValue = "value" in value ? value.value : 1;
                    var sampleInvert = !!value.invert;
                    check$1.command(
                      typeof sampleValue === "number" && sampleValue >= 0 && sampleValue <= 1,
                      "sample.coverage.value must be a number between 0 and 1",
                      env.commandStr
                    );
                    return [sampleValue, sampleInvert];
                  },
                  function(env2, scope, value) {
                    check$1.optional(function() {
                      env2.assert(
                        scope,
                        value + "&&typeof " + value + '==="object"',
                        "invalid sample.coverage"
                      );
                    });
                    var VALUE = scope.def(
                      '"value" in ',
                      value,
                      "?+",
                      value,
                      ".value:1"
                    );
                    var INVERT = scope.def("!!", value, ".invert");
                    return [VALUE, INVERT];
                  }
                );
            }
          });
          return STATE;
        }
        function parseUniforms(uniforms, env) {
          var staticUniforms = uniforms.static;
          var dynamicUniforms = uniforms.dynamic;
          var UNIFORMS = {};
          Object.keys(staticUniforms).forEach(function(name) {
            var value = staticUniforms[name];
            var result;
            if (typeof value === "number" || typeof value === "boolean") {
              result = createStaticDecl(function() {
                return value;
              });
            } else if (typeof value === "function") {
              var reglType = value._reglType;
              if (reglType === "texture2d" || reglType === "textureCube") {
                result = createStaticDecl(function(env2) {
                  return env2.link(value);
                });
              } else if (reglType === "framebuffer" || reglType === "framebufferCube") {
                check$1.command(
                  value.color.length > 0,
                  'missing color attachment for framebuffer sent to uniform "' + name + '"',
                  env.commandStr
                );
                result = createStaticDecl(function(env2) {
                  return env2.link(value.color[0]);
                });
              } else {
                check$1.commandRaise('invalid data for uniform "' + name + '"', env.commandStr);
              }
            } else if (isArrayLike(value)) {
              result = createStaticDecl(function(env2) {
                var ITEM = env2.global.def(
                  "[",
                  loop(value.length, function(i11) {
                    check$1.command(
                      typeof value[i11] === "number" || typeof value[i11] === "boolean",
                      "invalid uniform " + name,
                      env2.commandStr
                    );
                    return value[i11];
                  }),
                  "]"
                );
                return ITEM;
              });
            } else {
              check$1.commandRaise('invalid or missing data for uniform "' + name + '"', env.commandStr);
            }
            result.value = value;
            UNIFORMS[name] = result;
          });
          Object.keys(dynamicUniforms).forEach(function(key) {
            var dyn = dynamicUniforms[key];
            UNIFORMS[key] = createDynamicDecl(dyn, function(env2, scope) {
              return env2.invoke(scope, dyn);
            });
          });
          return UNIFORMS;
        }
        function parseAttributes(attributes, env) {
          var staticAttributes = attributes.static;
          var dynamicAttributes = attributes.dynamic;
          var attributeDefs = {};
          Object.keys(staticAttributes).forEach(function(attribute) {
            var value = staticAttributes[attribute];
            var id = stringStore.id(attribute);
            var record = new AttributeRecord2();
            if (isBufferArgs(value)) {
              record.state = ATTRIB_STATE_POINTER;
              record.buffer = bufferState.getBuffer(
                bufferState.create(value, GL_ARRAY_BUFFER$2, false, true)
              );
              record.type = 0;
            } else {
              var buffer = bufferState.getBuffer(value);
              if (buffer) {
                record.state = ATTRIB_STATE_POINTER;
                record.buffer = buffer;
                record.type = 0;
              } else {
                check$1.command(
                  typeof value === "object" && value,
                  "invalid data for attribute " + attribute,
                  env.commandStr
                );
                if ("constant" in value) {
                  var constant = value.constant;
                  record.buffer = "null";
                  record.state = ATTRIB_STATE_CONSTANT;
                  if (typeof constant === "number") {
                    record.x = constant;
                  } else {
                    check$1.command(
                      isArrayLike(constant) && constant.length > 0 && constant.length <= 4,
                      "invalid constant for attribute " + attribute,
                      env.commandStr
                    );
                    CUTE_COMPONENTS.forEach(function(c11, i11) {
                      if (i11 < constant.length) {
                        record[c11] = constant[i11];
                      }
                    });
                  }
                } else {
                  if (isBufferArgs(value.buffer)) {
                    buffer = bufferState.getBuffer(
                      bufferState.create(value.buffer, GL_ARRAY_BUFFER$2, false, true)
                    );
                  } else {
                    buffer = bufferState.getBuffer(value.buffer);
                  }
                  check$1.command(!!buffer, 'missing buffer for attribute "' + attribute + '"', env.commandStr);
                  var offset = value.offset | 0;
                  check$1.command(
                    offset >= 0,
                    'invalid offset for attribute "' + attribute + '"',
                    env.commandStr
                  );
                  var stride = value.stride | 0;
                  check$1.command(
                    stride >= 0 && stride < 256,
                    'invalid stride for attribute "' + attribute + '", must be integer betweeen [0, 255]',
                    env.commandStr
                  );
                  var size2 = value.size | 0;
                  check$1.command(
                    !("size" in value) || size2 > 0 && size2 <= 4,
                    'invalid size for attribute "' + attribute + '", must be 1,2,3,4',
                    env.commandStr
                  );
                  var normalized = !!value.normalized;
                  var type = 0;
                  if ("type" in value) {
                    check$1.commandParameter(
                      value.type,
                      glTypes,
                      "invalid type for attribute " + attribute,
                      env.commandStr
                    );
                    type = glTypes[value.type];
                  }
                  var divisor = value.divisor | 0;
                  check$1.optional(function() {
                    if ("divisor" in value) {
                      check$1.command(
                        divisor === 0 || extInstancing,
                        'cannot specify divisor for attribute "' + attribute + '", instancing not supported',
                        env.commandStr
                      );
                      check$1.command(
                        divisor >= 0,
                        'invalid divisor for attribute "' + attribute + '"',
                        env.commandStr
                      );
                    }
                    var command = env.commandStr;
                    var VALID_KEYS = [
                      "buffer",
                      "offset",
                      "divisor",
                      "normalized",
                      "type",
                      "size",
                      "stride"
                    ];
                    Object.keys(value).forEach(function(prop) {
                      check$1.command(
                        VALID_KEYS.indexOf(prop) >= 0,
                        'unknown parameter "' + prop + '" for attribute pointer "' + attribute + '" (valid parameters are ' + VALID_KEYS + ")",
                        command
                      );
                    });
                  });
                  record.buffer = buffer;
                  record.state = ATTRIB_STATE_POINTER;
                  record.size = size2;
                  record.normalized = normalized;
                  record.type = type || buffer.dtype;
                  record.offset = offset;
                  record.stride = stride;
                  record.divisor = divisor;
                }
              }
            }
            attributeDefs[attribute] = createStaticDecl(function(env2, scope) {
              var cache2 = env2.attribCache;
              if (id in cache2) {
                return cache2[id];
              }
              var result = {
                isStream: false
              };
              Object.keys(record).forEach(function(key) {
                result[key] = record[key];
              });
              if (record.buffer) {
                result.buffer = env2.link(record.buffer);
                result.type = result.type || result.buffer + ".dtype";
              }
              cache2[id] = result;
              return result;
            });
          });
          Object.keys(dynamicAttributes).forEach(function(attribute) {
            var dyn = dynamicAttributes[attribute];
            function appendAttributeCode(env2, block) {
              var VALUE = env2.invoke(block, dyn);
              var shared = env2.shared;
              var constants = env2.constants;
              var IS_BUFFER_ARGS = shared.isBufferArgs;
              var BUFFER_STATE = shared.buffer;
              check$1.optional(function() {
                env2.assert(
                  block,
                  VALUE + "&&(typeof " + VALUE + '==="object"||typeof ' + VALUE + '==="function")&&(' + IS_BUFFER_ARGS + "(" + VALUE + ")||" + BUFFER_STATE + ".getBuffer(" + VALUE + ")||" + BUFFER_STATE + ".getBuffer(" + VALUE + ".buffer)||" + IS_BUFFER_ARGS + "(" + VALUE + '.buffer)||("constant" in ' + VALUE + "&&(typeof " + VALUE + '.constant==="number"||' + shared.isArrayLike + "(" + VALUE + ".constant))))",
                  'invalid dynamic attribute "' + attribute + '"'
                );
              });
              var result = {
                isStream: block.def(false)
              };
              var defaultRecord = new AttributeRecord2();
              defaultRecord.state = ATTRIB_STATE_POINTER;
              Object.keys(defaultRecord).forEach(function(key) {
                result[key] = block.def("" + defaultRecord[key]);
              });
              var BUFFER = result.buffer;
              var TYPE = result.type;
              block(
                "if(",
                IS_BUFFER_ARGS,
                "(",
                VALUE,
                ")){",
                result.isStream,
                "=true;",
                BUFFER,
                "=",
                BUFFER_STATE,
                ".createStream(",
                GL_ARRAY_BUFFER$2,
                ",",
                VALUE,
                ");",
                TYPE,
                "=",
                BUFFER,
                ".dtype;",
                "}else{",
                BUFFER,
                "=",
                BUFFER_STATE,
                ".getBuffer(",
                VALUE,
                ");",
                "if(",
                BUFFER,
                "){",
                TYPE,
                "=",
                BUFFER,
                ".dtype;",
                '}else if("constant" in ',
                VALUE,
                "){",
                result.state,
                "=",
                ATTRIB_STATE_CONSTANT,
                ";",
                "if(typeof " + VALUE + '.constant === "number"){',
                result[CUTE_COMPONENTS[0]],
                "=",
                VALUE,
                ".constant;",
                CUTE_COMPONENTS.slice(1).map(function(n17) {
                  return result[n17];
                }).join("="),
                "=0;",
                "}else{",
                CUTE_COMPONENTS.map(function(name, i11) {
                  return result[name] + "=" + VALUE + ".constant.length>" + i11 + "?" + VALUE + ".constant[" + i11 + "]:0;";
                }).join(""),
                "}}else{",
                "if(",
                IS_BUFFER_ARGS,
                "(",
                VALUE,
                ".buffer)){",
                BUFFER,
                "=",
                BUFFER_STATE,
                ".createStream(",
                GL_ARRAY_BUFFER$2,
                ",",
                VALUE,
                ".buffer);",
                "}else{",
                BUFFER,
                "=",
                BUFFER_STATE,
                ".getBuffer(",
                VALUE,
                ".buffer);",
                "}",
                TYPE,
                '="type" in ',
                VALUE,
                "?",
                constants.glTypes,
                "[",
                VALUE,
                ".type]:",
                BUFFER,
                ".dtype;",
                result.normalized,
                "=!!",
                VALUE,
                ".normalized;"
              );
              function emitReadRecord(name) {
                block(result[name], "=", VALUE, ".", name, "|0;");
              }
              emitReadRecord("size");
              emitReadRecord("offset");
              emitReadRecord("stride");
              emitReadRecord("divisor");
              block("}}");
              block.exit(
                "if(",
                result.isStream,
                "){",
                BUFFER_STATE,
                ".destroyStream(",
                BUFFER,
                ");",
                "}"
              );
              return result;
            }
            attributeDefs[attribute] = createDynamicDecl(dyn, appendAttributeCode);
          });
          return attributeDefs;
        }
        function parseContext(context) {
          var staticContext = context.static;
          var dynamicContext = context.dynamic;
          var result = {};
          Object.keys(staticContext).forEach(function(name) {
            var value = staticContext[name];
            result[name] = createStaticDecl(function(env, scope) {
              if (typeof value === "number" || typeof value === "boolean") {
                return "" + value;
              } else {
                return env.link(value);
              }
            });
          });
          Object.keys(dynamicContext).forEach(function(name) {
            var dyn = dynamicContext[name];
            result[name] = createDynamicDecl(dyn, function(env, scope) {
              return env.invoke(scope, dyn);
            });
          });
          return result;
        }
        function parseArguments(options, attributes, uniforms, context, env) {
          var staticOptions = options.static;
          var dynamicOptions = options.dynamic;
          check$1.optional(function() {
            var KEY_NAMES = [
              S_FRAMEBUFFER,
              S_VERT,
              S_FRAG,
              S_ELEMENTS,
              S_PRIMITIVE,
              S_OFFSET,
              S_COUNT,
              S_INSTANCES,
              S_PROFILE,
              S_VAO
            ].concat(GL_STATE_NAMES);
            function checkKeys(dict) {
              Object.keys(dict).forEach(function(key) {
                check$1.command(
                  KEY_NAMES.indexOf(key) >= 0,
                  'unknown parameter "' + key + '"',
                  env.commandStr
                );
              });
            }
            checkKeys(staticOptions);
            checkKeys(dynamicOptions);
          });
          var attribLocations = parseAttribLocations(options, attributes);
          var framebuffer = parseFramebuffer(options, env);
          var viewportAndScissor = parseViewportScissor(options, framebuffer, env);
          var draw = parseDraw(options, env);
          var state = parseGLState(options, env);
          var shader = parseProgram(options, env, attribLocations);
          function copyBox(name) {
            var defn = viewportAndScissor[name];
            if (defn) {
              state[name] = defn;
            }
          }
          copyBox(S_VIEWPORT);
          copyBox(propName(S_SCISSOR_BOX));
          var dirty = Object.keys(state).length > 0;
          var result = {
            framebuffer,
            draw,
            shader,
            state,
            dirty,
            scopeVAO: null,
            drawVAO: null,
            useVAO: false,
            attributes: {}
          };
          result.profile = parseProfile(options, env);
          result.uniforms = parseUniforms(uniforms, env);
          result.drawVAO = result.scopeVAO = draw.vao;
          if (!result.drawVAO && shader.program && !attribLocations && extensions.angle_instanced_arrays && draw.static.elements) {
            var useVAO = true;
            var staticBindings = shader.program.attributes.map(function(attr) {
              var binding = attributes.static[attr];
              useVAO = useVAO && !!binding;
              return binding;
            });
            if (useVAO && staticBindings.length > 0) {
              var vao = attributeState.getVAO(attributeState.createVAO({
                attributes: staticBindings,
                elements: draw.static.elements
              }));
              result.drawVAO = new Declaration(null, null, null, function(env2, scope) {
                return env2.link(vao);
              });
              result.useVAO = true;
            }
          }
          if (attribLocations) {
            result.useVAO = true;
          } else {
            result.attributes = parseAttributes(attributes, env);
          }
          result.context = parseContext(context, env);
          return result;
        }
        function emitContext(env, scope, context) {
          var shared = env.shared;
          var CONTEXT = shared.context;
          var contextEnter = env.scope();
          Object.keys(context).forEach(function(name) {
            scope.save(CONTEXT, "." + name);
            var defn = context[name];
            var value = defn.append(env, scope);
            if (Array.isArray(value)) {
              contextEnter(CONTEXT, ".", name, "=[", value.join(), "];");
            } else {
              contextEnter(CONTEXT, ".", name, "=", value, ";");
            }
          });
          scope(contextEnter);
        }
        function emitPollFramebuffer(env, scope, framebuffer, skipCheck) {
          var shared = env.shared;
          var GL = shared.gl;
          var FRAMEBUFFER_STATE = shared.framebuffer;
          var EXT_DRAW_BUFFERS;
          if (extDrawBuffers) {
            EXT_DRAW_BUFFERS = scope.def(shared.extensions, ".webgl_draw_buffers");
          }
          var constants = env.constants;
          var DRAW_BUFFERS = constants.drawBuffer;
          var BACK_BUFFER = constants.backBuffer;
          var NEXT;
          if (framebuffer) {
            NEXT = framebuffer.append(env, scope);
          } else {
            NEXT = scope.def(FRAMEBUFFER_STATE, ".next");
          }
          if (!skipCheck) {
            scope("if(", NEXT, "!==", FRAMEBUFFER_STATE, ".cur){");
          }
          scope(
            "if(",
            NEXT,
            "){",
            GL,
            ".bindFramebuffer(",
            GL_FRAMEBUFFER$2,
            ",",
            NEXT,
            ".framebuffer);"
          );
          if (extDrawBuffers) {
            scope(
              EXT_DRAW_BUFFERS,
              ".drawBuffersWEBGL(",
              DRAW_BUFFERS,
              "[",
              NEXT,
              ".colorAttachments.length]);"
            );
          }
          scope(
            "}else{",
            GL,
            ".bindFramebuffer(",
            GL_FRAMEBUFFER$2,
            ",null);"
          );
          if (extDrawBuffers) {
            scope(EXT_DRAW_BUFFERS, ".drawBuffersWEBGL(", BACK_BUFFER, ");");
          }
          scope(
            "}",
            FRAMEBUFFER_STATE,
            ".cur=",
            NEXT,
            ";"
          );
          if (!skipCheck) {
            scope("}");
          }
        }
        function emitPollState(env, scope, args) {
          var shared = env.shared;
          var GL = shared.gl;
          var CURRENT_VARS = env.current;
          var NEXT_VARS = env.next;
          var CURRENT_STATE = shared.current;
          var NEXT_STATE = shared.next;
          var block = env.cond(CURRENT_STATE, ".dirty");
          GL_STATE_NAMES.forEach(function(prop) {
            var param = propName(prop);
            if (param in args.state) {
              return;
            }
            var NEXT, CURRENT;
            if (param in NEXT_VARS) {
              NEXT = NEXT_VARS[param];
              CURRENT = CURRENT_VARS[param];
              var parts = loop(currentState[param].length, function(i11) {
                return block.def(NEXT, "[", i11, "]");
              });
              block(env.cond(parts.map(function(p5, i11) {
                return p5 + "!==" + CURRENT + "[" + i11 + "]";
              }).join("||")).then(
                GL,
                ".",
                GL_VARIABLES[param],
                "(",
                parts,
                ");",
                parts.map(function(p5, i11) {
                  return CURRENT + "[" + i11 + "]=" + p5;
                }).join(";"),
                ";"
              ));
            } else {
              NEXT = block.def(NEXT_STATE, ".", param);
              var ifte = env.cond(NEXT, "!==", CURRENT_STATE, ".", param);
              block(ifte);
              if (param in GL_FLAGS) {
                ifte(
                  env.cond(NEXT).then(GL, ".enable(", GL_FLAGS[param], ");").else(GL, ".disable(", GL_FLAGS[param], ");"),
                  CURRENT_STATE,
                  ".",
                  param,
                  "=",
                  NEXT,
                  ";"
                );
              } else {
                ifte(
                  GL,
                  ".",
                  GL_VARIABLES[param],
                  "(",
                  NEXT,
                  ");",
                  CURRENT_STATE,
                  ".",
                  param,
                  "=",
                  NEXT,
                  ";"
                );
              }
            }
          });
          if (Object.keys(args.state).length === 0) {
            block(CURRENT_STATE, ".dirty=false;");
          }
          scope(block);
        }
        function emitSetOptions(env, scope, options, filter) {
          var shared = env.shared;
          var CURRENT_VARS = env.current;
          var CURRENT_STATE = shared.current;
          var GL = shared.gl;
          sortState(Object.keys(options)).forEach(function(param) {
            var defn = options[param];
            if (filter && !filter(defn)) {
              return;
            }
            var variable = defn.append(env, scope);
            if (GL_FLAGS[param]) {
              var flag = GL_FLAGS[param];
              if (isStatic(defn)) {
                if (variable) {
                  scope(GL, ".enable(", flag, ");");
                } else {
                  scope(GL, ".disable(", flag, ");");
                }
              } else {
                scope(env.cond(variable).then(GL, ".enable(", flag, ");").else(GL, ".disable(", flag, ");"));
              }
              scope(CURRENT_STATE, ".", param, "=", variable, ";");
            } else if (isArrayLike(variable)) {
              var CURRENT = CURRENT_VARS[param];
              scope(
                GL,
                ".",
                GL_VARIABLES[param],
                "(",
                variable,
                ");",
                variable.map(function(v3, i11) {
                  return CURRENT + "[" + i11 + "]=" + v3;
                }).join(";"),
                ";"
              );
            } else {
              scope(
                GL,
                ".",
                GL_VARIABLES[param],
                "(",
                variable,
                ");",
                CURRENT_STATE,
                ".",
                param,
                "=",
                variable,
                ";"
              );
            }
          });
        }
        function injectExtensions(env, scope) {
          if (extInstancing) {
            env.instancing = scope.def(
              env.shared.extensions,
              ".angle_instanced_arrays"
            );
          }
        }
        function emitProfile(env, scope, args, useScope, incrementCounter) {
          var shared = env.shared;
          var STATS = env.stats;
          var CURRENT_STATE = shared.current;
          var TIMER = shared.timer;
          var profileArg = args.profile;
          function perfCounter() {
            if (typeof performance === "undefined") {
              return "Date.now()";
            } else {
              return "performance.now()";
            }
          }
          var CPU_START, QUERY_COUNTER;
          function emitProfileStart(block) {
            CPU_START = scope.def();
            block(CPU_START, "=", perfCounter(), ";");
            if (typeof incrementCounter === "string") {
              block(STATS, ".count+=", incrementCounter, ";");
            } else {
              block(STATS, ".count++;");
            }
            if (timer) {
              if (useScope) {
                QUERY_COUNTER = scope.def();
                block(QUERY_COUNTER, "=", TIMER, ".getNumPendingQueries();");
              } else {
                block(TIMER, ".beginQuery(", STATS, ");");
              }
            }
          }
          function emitProfileEnd(block) {
            block(STATS, ".cpuTime+=", perfCounter(), "-", CPU_START, ";");
            if (timer) {
              if (useScope) {
                block(
                  TIMER,
                  ".pushScopeStats(",
                  QUERY_COUNTER,
                  ",",
                  TIMER,
                  ".getNumPendingQueries(),",
                  STATS,
                  ");"
                );
              } else {
                block(TIMER, ".endQuery();");
              }
            }
          }
          function scopeProfile(value) {
            var prev = scope.def(CURRENT_STATE, ".profile");
            scope(CURRENT_STATE, ".profile=", value, ";");
            scope.exit(CURRENT_STATE, ".profile=", prev, ";");
          }
          var USE_PROFILE;
          if (profileArg) {
            if (isStatic(profileArg)) {
              if (profileArg.enable) {
                emitProfileStart(scope);
                emitProfileEnd(scope.exit);
                scopeProfile("true");
              } else {
                scopeProfile("false");
              }
              return;
            }
            USE_PROFILE = profileArg.append(env, scope);
            scopeProfile(USE_PROFILE);
          } else {
            USE_PROFILE = scope.def(CURRENT_STATE, ".profile");
          }
          var start = env.block();
          emitProfileStart(start);
          scope("if(", USE_PROFILE, "){", start, "}");
          var end = env.block();
          emitProfileEnd(end);
          scope.exit("if(", USE_PROFILE, "){", end, "}");
        }
        function emitAttributes(env, scope, args, attributes, filter) {
          var shared = env.shared;
          function typeLength(x3) {
            switch (x3) {
              case GL_FLOAT_VEC2:
              case GL_INT_VEC2:
              case GL_BOOL_VEC2:
                return 2;
              case GL_FLOAT_VEC3:
              case GL_INT_VEC3:
              case GL_BOOL_VEC3:
                return 3;
              case GL_FLOAT_VEC4:
              case GL_INT_VEC4:
              case GL_BOOL_VEC4:
                return 4;
              default:
                return 1;
            }
          }
          function emitBindAttribute(ATTRIBUTE, size2, record) {
            var GL = shared.gl;
            var LOCATION = scope.def(ATTRIBUTE, ".location");
            var BINDING = scope.def(shared.attributes, "[", LOCATION, "]");
            var STATE = record.state;
            var BUFFER = record.buffer;
            var CONST_COMPONENTS = [
              record.x,
              record.y,
              record.z,
              record.w
            ];
            var COMMON_KEYS = [
              "buffer",
              "normalized",
              "offset",
              "stride"
            ];
            function emitBuffer() {
              scope(
                "if(!",
                BINDING,
                ".buffer){",
                GL,
                ".enableVertexAttribArray(",
                LOCATION,
                ");}"
              );
              var TYPE = record.type;
              var SIZE;
              if (!record.size) {
                SIZE = size2;
              } else {
                SIZE = scope.def(record.size, "||", size2);
              }
              scope(
                "if(",
                BINDING,
                ".type!==",
                TYPE,
                "||",
                BINDING,
                ".size!==",
                SIZE,
                "||",
                COMMON_KEYS.map(function(key) {
                  return BINDING + "." + key + "!==" + record[key];
                }).join("||"),
                "){",
                GL,
                ".bindBuffer(",
                GL_ARRAY_BUFFER$2,
                ",",
                BUFFER,
                ".buffer);",
                GL,
                ".vertexAttribPointer(",
                [
                  LOCATION,
                  SIZE,
                  TYPE,
                  record.normalized,
                  record.stride,
                  record.offset
                ],
                ");",
                BINDING,
                ".type=",
                TYPE,
                ";",
                BINDING,
                ".size=",
                SIZE,
                ";",
                COMMON_KEYS.map(function(key) {
                  return BINDING + "." + key + "=" + record[key] + ";";
                }).join(""),
                "}"
              );
              if (extInstancing) {
                var DIVISOR = record.divisor;
                scope(
                  "if(",
                  BINDING,
                  ".divisor!==",
                  DIVISOR,
                  "){",
                  env.instancing,
                  ".vertexAttribDivisorANGLE(",
                  [LOCATION, DIVISOR],
                  ");",
                  BINDING,
                  ".divisor=",
                  DIVISOR,
                  ";}"
                );
              }
            }
            function emitConstant() {
              scope(
                "if(",
                BINDING,
                ".buffer){",
                GL,
                ".disableVertexAttribArray(",
                LOCATION,
                ");",
                BINDING,
                ".buffer=null;",
                "}if(",
                CUTE_COMPONENTS.map(function(c11, i11) {
                  return BINDING + "." + c11 + "!==" + CONST_COMPONENTS[i11];
                }).join("||"),
                "){",
                GL,
                ".vertexAttrib4f(",
                LOCATION,
                ",",
                CONST_COMPONENTS,
                ");",
                CUTE_COMPONENTS.map(function(c11, i11) {
                  return BINDING + "." + c11 + "=" + CONST_COMPONENTS[i11] + ";";
                }).join(""),
                "}"
              );
            }
            if (STATE === ATTRIB_STATE_POINTER) {
              emitBuffer();
            } else if (STATE === ATTRIB_STATE_CONSTANT) {
              emitConstant();
            } else {
              scope("if(", STATE, "===", ATTRIB_STATE_POINTER, "){");
              emitBuffer();
              scope("}else{");
              emitConstant();
              scope("}");
            }
          }
          attributes.forEach(function(attribute) {
            var name = attribute.name;
            var arg = args.attributes[name];
            var record;
            if (arg) {
              if (!filter(arg)) {
                return;
              }
              record = arg.append(env, scope);
            } else {
              if (!filter(SCOPE_DECL)) {
                return;
              }
              var scopeAttrib = env.scopeAttrib(name);
              check$1.optional(function() {
                env.assert(
                  scope,
                  scopeAttrib + ".state",
                  "missing attribute " + name
                );
              });
              record = {};
              Object.keys(new AttributeRecord2()).forEach(function(key) {
                record[key] = scope.def(scopeAttrib, ".", key);
              });
            }
            emitBindAttribute(
              env.link(attribute),
              typeLength(attribute.info.type),
              record
            );
          });
        }
        function emitUniforms(env, scope, args, uniforms, filter, isBatchInnerLoop) {
          var shared = env.shared;
          var GL = shared.gl;
          var definedArrUniforms = {};
          var infix;
          for (var i11 = 0; i11 < uniforms.length; ++i11) {
            var uniform2 = uniforms[i11];
            var name = uniform2.name;
            var type = uniform2.info.type;
            var size2 = uniform2.info.size;
            var arg = args.uniforms[name];
            if (size2 > 1) {
              if (!arg) {
                continue;
              }
              var arrUniformName = name.replace("[0]", "");
              if (definedArrUniforms[arrUniformName]) {
                continue;
              }
              definedArrUniforms[arrUniformName] = 1;
            }
            var UNIFORM = env.link(uniform2);
            var LOCATION = UNIFORM + ".location";
            var VALUE;
            if (arg) {
              if (!filter(arg)) {
                continue;
              }
              if (isStatic(arg)) {
                var value = arg.value;
                check$1.command(
                  value !== null && typeof value !== "undefined",
                  'missing uniform "' + name + '"',
                  env.commandStr
                );
                if (type === GL_SAMPLER_2D || type === GL_SAMPLER_CUBE) {
                  check$1.command(
                    typeof value === "function" && (type === GL_SAMPLER_2D && (value._reglType === "texture2d" || value._reglType === "framebuffer") || type === GL_SAMPLER_CUBE && (value._reglType === "textureCube" || value._reglType === "framebufferCube")),
                    "invalid texture for uniform " + name,
                    env.commandStr
                  );
                  var TEX_VALUE = env.link(value._texture || value.color[0]._texture);
                  scope(GL, ".uniform1i(", LOCATION, ",", TEX_VALUE + ".bind());");
                  scope.exit(TEX_VALUE, ".unbind();");
                } else if (type === GL_FLOAT_MAT2 || type === GL_FLOAT_MAT3 || type === GL_FLOAT_MAT4) {
                  check$1.optional(function() {
                    check$1.command(
                      isArrayLike(value),
                      "invalid matrix for uniform " + name,
                      env.commandStr
                    );
                    check$1.command(
                      type === GL_FLOAT_MAT2 && value.length === 4 || type === GL_FLOAT_MAT3 && value.length === 9 || type === GL_FLOAT_MAT4 && value.length === 16,
                      "invalid length for matrix uniform " + name,
                      env.commandStr
                    );
                  });
                  var MAT_VALUE = env.global.def("new Float32Array([" + Array.prototype.slice.call(value) + "])");
                  var dim = 2;
                  if (type === GL_FLOAT_MAT3) {
                    dim = 3;
                  } else if (type === GL_FLOAT_MAT4) {
                    dim = 4;
                  }
                  scope(
                    GL,
                    ".uniformMatrix",
                    dim,
                    "fv(",
                    LOCATION,
                    ",false,",
                    MAT_VALUE,
                    ");"
                  );
                } else {
                  switch (type) {
                    case GL_FLOAT$8:
                      if (size2 === 1) {
                        check$1.commandType(value, "number", "uniform " + name, env.commandStr);
                      } else {
                        check$1.command(
                          isArrayLike(value) && value.length === size2,
                          "uniform " + name,
                          env.commandStr
                        );
                      }
                      infix = "1f";
                      break;
                    case GL_FLOAT_VEC2:
                      check$1.command(
                        isArrayLike(value) && (value.length && value.length % 2 === 0 && value.length <= size2 * 2),
                        "uniform " + name,
                        env.commandStr
                      );
                      infix = "2f";
                      break;
                    case GL_FLOAT_VEC3:
                      check$1.command(
                        isArrayLike(value) && (value.length && value.length % 3 === 0 && value.length <= size2 * 3),
                        "uniform " + name,
                        env.commandStr
                      );
                      infix = "3f";
                      break;
                    case GL_FLOAT_VEC4:
                      check$1.command(
                        isArrayLike(value) && (value.length && value.length % 4 === 0 && value.length <= size2 * 4),
                        "uniform " + name,
                        env.commandStr
                      );
                      infix = "4f";
                      break;
                    case GL_BOOL:
                      if (size2 === 1) {
                        check$1.commandType(value, "boolean", "uniform " + name, env.commandStr);
                      } else {
                        check$1.command(
                          isArrayLike(value) && value.length === size2,
                          "uniform " + name,
                          env.commandStr
                        );
                      }
                      infix = "1i";
                      break;
                    case GL_INT$3:
                      if (size2 === 1) {
                        check$1.commandType(value, "number", "uniform " + name, env.commandStr);
                      } else {
                        check$1.command(
                          isArrayLike(value) && value.length === size2,
                          "uniform " + name,
                          env.commandStr
                        );
                      }
                      infix = "1i";
                      break;
                    case GL_BOOL_VEC2:
                      check$1.command(
                        isArrayLike(value) && (value.length && value.length % 2 === 0 && value.length <= size2 * 2),
                        "uniform " + name,
                        env.commandStr
                      );
                      infix = "2i";
                      break;
                    case GL_INT_VEC2:
                      check$1.command(
                        isArrayLike(value) && (value.length && value.length % 2 === 0 && value.length <= size2 * 2),
                        "uniform " + name,
                        env.commandStr
                      );
                      infix = "2i";
                      break;
                    case GL_BOOL_VEC3:
                      check$1.command(
                        isArrayLike(value) && (value.length && value.length % 3 === 0 && value.length <= size2 * 3),
                        "uniform " + name,
                        env.commandStr
                      );
                      infix = "3i";
                      break;
                    case GL_INT_VEC3:
                      check$1.command(
                        isArrayLike(value) && (value.length && value.length % 3 === 0 && value.length <= size2 * 3),
                        "uniform " + name,
                        env.commandStr
                      );
                      infix = "3i";
                      break;
                    case GL_BOOL_VEC4:
                      check$1.command(
                        isArrayLike(value) && (value.length && value.length % 4 === 0 && value.length <= size2 * 4),
                        "uniform " + name,
                        env.commandStr
                      );
                      infix = "4i";
                      break;
                    case GL_INT_VEC4:
                      check$1.command(
                        isArrayLike(value) && (value.length && value.length % 4 === 0 && value.length <= size2 * 4),
                        "uniform " + name,
                        env.commandStr
                      );
                      infix = "4i";
                      break;
                  }
                  if (size2 > 1) {
                    infix += "v";
                    value = env.global.def("[" + Array.prototype.slice.call(value) + "]");
                  } else {
                    value = isArrayLike(value) ? Array.prototype.slice.call(value) : value;
                  }
                  scope(
                    GL,
                    ".uniform",
                    infix,
                    "(",
                    LOCATION,
                    ",",
                    value,
                    ");"
                  );
                }
                continue;
              } else {
                VALUE = arg.append(env, scope);
              }
            } else {
              if (!filter(SCOPE_DECL)) {
                continue;
              }
              VALUE = scope.def(shared.uniforms, "[", stringStore.id(name), "]");
            }
            if (type === GL_SAMPLER_2D) {
              check$1(!Array.isArray(VALUE), "must specify a scalar prop for textures");
              scope(
                "if(",
                VALUE,
                "&&",
                VALUE,
                '._reglType==="framebuffer"){',
                VALUE,
                "=",
                VALUE,
                ".color[0];",
                "}"
              );
            } else if (type === GL_SAMPLER_CUBE) {
              check$1(!Array.isArray(VALUE), "must specify a scalar prop for cube maps");
              scope(
                "if(",
                VALUE,
                "&&",
                VALUE,
                '._reglType==="framebufferCube"){',
                VALUE,
                "=",
                VALUE,
                ".color[0];",
                "}"
              );
            }
            check$1.optional(function() {
              function emitCheck(pred, message) {
                env.assert(
                  scope,
                  pred,
                  'bad data or missing for uniform "' + name + '".  ' + message
                );
              }
              function checkType(type2, size3) {
                if (size3 === 1) {
                  check$1(!Array.isArray(VALUE), "must not specify an array type for uniform");
                }
                emitCheck(
                  "Array.isArray(" + VALUE + ") && typeof " + VALUE + '[0]===" ' + type2 + '" || typeof ' + VALUE + '==="' + type2 + '"',
                  "invalid type, expected " + type2
                );
              }
              function checkVector(n17, type2, size3) {
                if (Array.isArray(VALUE)) {
                  check$1(VALUE.length && VALUE.length % n17 === 0 && VALUE.length <= n17 * size3, "must have length of " + (size3 === 1 ? "" : "n * ") + n17);
                } else {
                  emitCheck(
                    shared.isArrayLike + "(" + VALUE + ")&&" + VALUE + ".length && " + VALUE + ".length % " + n17 + " === 0 && " + VALUE + ".length<=" + n17 * size3,
                    "invalid vector, should have length of " + (size3 === 1 ? "" : "n * ") + n17,
                    env.commandStr
                  );
                }
              }
              function checkTexture(target) {
                check$1(!Array.isArray(VALUE), "must not specify a value type");
                emitCheck(
                  "typeof " + VALUE + '==="function"&&' + VALUE + '._reglType==="texture' + (target === GL_TEXTURE_2D$3 ? "2d" : "Cube") + '"',
                  "invalid texture type",
                  env.commandStr
                );
              }
              switch (type) {
                case GL_INT$3:
                  checkType("number", size2);
                  break;
                case GL_INT_VEC2:
                  checkVector(2, "number", size2);
                  break;
                case GL_INT_VEC3:
                  checkVector(3, "number", size2);
                  break;
                case GL_INT_VEC4:
                  checkVector(4, "number", size2);
                  break;
                case GL_FLOAT$8:
                  checkType("number", size2);
                  break;
                case GL_FLOAT_VEC2:
                  checkVector(2, "number", size2);
                  break;
                case GL_FLOAT_VEC3:
                  checkVector(3, "number", size2);
                  break;
                case GL_FLOAT_VEC4:
                  checkVector(4, "number", size2);
                  break;
                case GL_BOOL:
                  checkType("boolean", size2);
                  break;
                case GL_BOOL_VEC2:
                  checkVector(2, "boolean", size2);
                  break;
                case GL_BOOL_VEC3:
                  checkVector(3, "boolean", size2);
                  break;
                case GL_BOOL_VEC4:
                  checkVector(4, "boolean", size2);
                  break;
                case GL_FLOAT_MAT2:
                  checkVector(4, "number", size2);
                  break;
                case GL_FLOAT_MAT3:
                  checkVector(9, "number", size2);
                  break;
                case GL_FLOAT_MAT4:
                  checkVector(16, "number", size2);
                  break;
                case GL_SAMPLER_2D:
                  checkTexture(GL_TEXTURE_2D$3);
                  break;
                case GL_SAMPLER_CUBE:
                  checkTexture(GL_TEXTURE_CUBE_MAP$2);
                  break;
              }
            });
            var unroll = 1;
            switch (type) {
              case GL_SAMPLER_2D:
              case GL_SAMPLER_CUBE:
                var TEX = scope.def(VALUE, "._texture");
                scope(GL, ".uniform1i(", LOCATION, ",", TEX, ".bind());");
                scope.exit(TEX, ".unbind();");
                continue;
              case GL_INT$3:
              case GL_BOOL:
                infix = "1i";
                break;
              case GL_INT_VEC2:
              case GL_BOOL_VEC2:
                infix = "2i";
                unroll = 2;
                break;
              case GL_INT_VEC3:
              case GL_BOOL_VEC3:
                infix = "3i";
                unroll = 3;
                break;
              case GL_INT_VEC4:
              case GL_BOOL_VEC4:
                infix = "4i";
                unroll = 4;
                break;
              case GL_FLOAT$8:
                infix = "1f";
                break;
              case GL_FLOAT_VEC2:
                infix = "2f";
                unroll = 2;
                break;
              case GL_FLOAT_VEC3:
                infix = "3f";
                unroll = 3;
                break;
              case GL_FLOAT_VEC4:
                infix = "4f";
                unroll = 4;
                break;
              case GL_FLOAT_MAT2:
                infix = "Matrix2fv";
                break;
              case GL_FLOAT_MAT3:
                infix = "Matrix3fv";
                break;
              case GL_FLOAT_MAT4:
                infix = "Matrix4fv";
                break;
            }
            if (infix.indexOf("Matrix") === -1 && size2 > 1) {
              infix += "v";
              unroll = 1;
            }
            if (infix.charAt(0) === "M") {
              scope(GL, ".uniform", infix, "(", LOCATION, ",");
              var matSize = Math.pow(type - GL_FLOAT_MAT2 + 2, 2);
              var STORAGE = env.global.def("new Float32Array(", matSize, ")");
              if (Array.isArray(VALUE)) {
                scope(
                  "false,(",
                  loop(matSize, function(i12) {
                    return STORAGE + "[" + i12 + "]=" + VALUE[i12];
                  }),
                  ",",
                  STORAGE,
                  ")"
                );
              } else {
                scope(
                  "false,(Array.isArray(",
                  VALUE,
                  ")||",
                  VALUE,
                  " instanceof Float32Array)?",
                  VALUE,
                  ":(",
                  loop(matSize, function(i12) {
                    return STORAGE + "[" + i12 + "]=" + VALUE + "[" + i12 + "]";
                  }),
                  ",",
                  STORAGE,
                  ")"
                );
              }
              scope(");");
            } else if (unroll > 1) {
              var prev = [];
              var cur = [];
              for (var j6 = 0; j6 < unroll; ++j6) {
                if (Array.isArray(VALUE)) {
                  cur.push(VALUE[j6]);
                } else {
                  cur.push(scope.def(VALUE + "[" + j6 + "]"));
                }
                if (isBatchInnerLoop) {
                  prev.push(scope.def());
                }
              }
              if (isBatchInnerLoop) {
                scope("if(!", env.batchId, "||", prev.map(function(p5, i12) {
                  return p5 + "!==" + cur[i12];
                }).join("||"), "){", prev.map(function(p5, i12) {
                  return p5 + "=" + cur[i12] + ";";
                }).join(""));
              }
              scope(GL, ".uniform", infix, "(", LOCATION, ",", cur.join(","), ");");
              if (isBatchInnerLoop) {
                scope("}");
              }
            } else {
              check$1(!Array.isArray(VALUE), "uniform value must not be an array");
              if (isBatchInnerLoop) {
                var prevS = scope.def();
                scope(
                  "if(!",
                  env.batchId,
                  "||",
                  prevS,
                  "!==",
                  VALUE,
                  "){",
                  prevS,
                  "=",
                  VALUE,
                  ";"
                );
              }
              scope(GL, ".uniform", infix, "(", LOCATION, ",", VALUE, ");");
              if (isBatchInnerLoop) {
                scope("}");
              }
            }
          }
        }
        function emitDraw(env, outer, inner, args) {
          var shared = env.shared;
          var GL = shared.gl;
          var DRAW_STATE = shared.draw;
          var drawOptions = args.draw;
          function emitElements() {
            var defn = drawOptions.elements;
            var ELEMENTS2;
            var scope = outer;
            if (defn) {
              if (defn.contextDep && args.contextDynamic || defn.propDep) {
                scope = inner;
              }
              ELEMENTS2 = defn.append(env, scope);
              if (drawOptions.elementsActive) {
                scope(
                  "if(" + ELEMENTS2 + ")" + GL + ".bindBuffer(" + GL_ELEMENT_ARRAY_BUFFER$2 + "," + ELEMENTS2 + ".buffer.buffer);"
                );
              }
            } else {
              ELEMENTS2 = scope.def();
              scope(
                ELEMENTS2,
                "=",
                DRAW_STATE,
                ".",
                S_ELEMENTS,
                ";",
                "if(",
                ELEMENTS2,
                "){",
                GL,
                ".bindBuffer(",
                GL_ELEMENT_ARRAY_BUFFER$2,
                ",",
                ELEMENTS2,
                ".buffer.buffer);}",
                "else if(",
                shared.vao,
                ".currentVAO){",
                ELEMENTS2,
                "=",
                env.shared.elements + ".getElements(" + shared.vao,
                ".currentVAO.elements);",
                !extVertexArrays ? "if(" + ELEMENTS2 + ")" + GL + ".bindBuffer(" + GL_ELEMENT_ARRAY_BUFFER$2 + "," + ELEMENTS2 + ".buffer.buffer);" : "",
                "}"
              );
            }
            return ELEMENTS2;
          }
          function emitCount() {
            var defn = drawOptions.count;
            var COUNT2;
            var scope = outer;
            if (defn) {
              if (defn.contextDep && args.contextDynamic || defn.propDep) {
                scope = inner;
              }
              COUNT2 = defn.append(env, scope);
              check$1.optional(function() {
                if (defn.MISSING) {
                  env.assert(outer, "false", "missing vertex count");
                }
                if (defn.DYNAMIC) {
                  env.assert(scope, COUNT2 + ">=0", "missing vertex count");
                }
              });
            } else {
              COUNT2 = scope.def(DRAW_STATE, ".", S_COUNT);
              check$1.optional(function() {
                env.assert(scope, COUNT2 + ">=0", "missing vertex count");
              });
            }
            return COUNT2;
          }
          var ELEMENTS = emitElements();
          function emitValue(name) {
            var defn = drawOptions[name];
            if (defn) {
              if (defn.contextDep && args.contextDynamic || defn.propDep) {
                return defn.append(env, inner);
              } else {
                return defn.append(env, outer);
              }
            } else {
              return outer.def(DRAW_STATE, ".", name);
            }
          }
          var PRIMITIVE = emitValue(S_PRIMITIVE);
          var OFFSET = emitValue(S_OFFSET);
          var COUNT = emitCount();
          if (typeof COUNT === "number") {
            if (COUNT === 0) {
              return;
            }
          } else {
            inner("if(", COUNT, "){");
            inner.exit("}");
          }
          var INSTANCES, EXT_INSTANCING;
          if (extInstancing) {
            INSTANCES = emitValue(S_INSTANCES);
            EXT_INSTANCING = env.instancing;
          }
          var ELEMENT_TYPE = ELEMENTS + ".type";
          var elementsStatic = drawOptions.elements && isStatic(drawOptions.elements) && !drawOptions.vaoActive;
          function emitInstancing() {
            function drawElements() {
              inner(EXT_INSTANCING, ".drawElementsInstancedANGLE(", [
                PRIMITIVE,
                COUNT,
                ELEMENT_TYPE,
                OFFSET + "<<((" + ELEMENT_TYPE + "-" + GL_UNSIGNED_BYTE$8 + ")>>1)",
                INSTANCES
              ], ");");
            }
            function drawArrays() {
              inner(
                EXT_INSTANCING,
                ".drawArraysInstancedANGLE(",
                [PRIMITIVE, OFFSET, COUNT, INSTANCES],
                ");"
              );
            }
            if (ELEMENTS && ELEMENTS !== "null") {
              if (!elementsStatic) {
                inner("if(", ELEMENTS, "){");
                drawElements();
                inner("}else{");
                drawArrays();
                inner("}");
              } else {
                drawElements();
              }
            } else {
              drawArrays();
            }
          }
          function emitRegular() {
            function drawElements() {
              inner(GL + ".drawElements(" + [
                PRIMITIVE,
                COUNT,
                ELEMENT_TYPE,
                OFFSET + "<<((" + ELEMENT_TYPE + "-" + GL_UNSIGNED_BYTE$8 + ")>>1)"
              ] + ");");
            }
            function drawArrays() {
              inner(GL + ".drawArrays(" + [PRIMITIVE, OFFSET, COUNT] + ");");
            }
            if (ELEMENTS && ELEMENTS !== "null") {
              if (!elementsStatic) {
                inner("if(", ELEMENTS, "){");
                drawElements();
                inner("}else{");
                drawArrays();
                inner("}");
              } else {
                drawElements();
              }
            } else {
              drawArrays();
            }
          }
          if (extInstancing && (typeof INSTANCES !== "number" || INSTANCES >= 0)) {
            if (typeof INSTANCES === "string") {
              inner("if(", INSTANCES, ">0){");
              emitInstancing();
              inner("}else if(", INSTANCES, "<0){");
              emitRegular();
              inner("}");
            } else {
              emitInstancing();
            }
          } else {
            emitRegular();
          }
        }
        function createBody(emitBody, parentEnv, args, program, count) {
          var env = createREGLEnvironment();
          var scope = env.proc("body", count);
          check$1.optional(function() {
            env.commandStr = parentEnv.commandStr;
            env.command = env.link(parentEnv.commandStr);
          });
          if (extInstancing) {
            env.instancing = scope.def(
              env.shared.extensions,
              ".angle_instanced_arrays"
            );
          }
          emitBody(env, scope, args, program);
          return env.compile().body;
        }
        function emitDrawBody(env, draw, args, program) {
          injectExtensions(env, draw);
          if (args.useVAO) {
            if (args.drawVAO) {
              draw(env.shared.vao, ".setVAO(", args.drawVAO.append(env, draw), ");");
            } else {
              draw(env.shared.vao, ".setVAO(", env.shared.vao, ".targetVAO);");
            }
          } else {
            draw(env.shared.vao, ".setVAO(null);");
            emitAttributes(env, draw, args, program.attributes, function() {
              return true;
            });
          }
          emitUniforms(env, draw, args, program.uniforms, function() {
            return true;
          }, false);
          emitDraw(env, draw, draw, args);
        }
        function emitDrawProc(env, args) {
          var draw = env.proc("draw", 1);
          injectExtensions(env, draw);
          emitContext(env, draw, args.context);
          emitPollFramebuffer(env, draw, args.framebuffer);
          emitPollState(env, draw, args);
          emitSetOptions(env, draw, args.state);
          emitProfile(env, draw, args, false, true);
          var program = args.shader.progVar.append(env, draw);
          draw(env.shared.gl, ".useProgram(", program, ".program);");
          if (args.shader.program) {
            emitDrawBody(env, draw, args, args.shader.program);
          } else {
            draw(env.shared.vao, ".setVAO(null);");
            var drawCache = env.global.def("{}");
            var PROG_ID = draw.def(program, ".id");
            var CACHED_PROC = draw.def(drawCache, "[", PROG_ID, "]");
            draw(
              env.cond(CACHED_PROC).then(CACHED_PROC, ".call(this,a0);").else(
                CACHED_PROC,
                "=",
                drawCache,
                "[",
                PROG_ID,
                "]=",
                env.link(function(program2) {
                  return createBody(emitDrawBody, env, args, program2, 1);
                }),
                "(",
                program,
                ");",
                CACHED_PROC,
                ".call(this,a0);"
              )
            );
          }
          if (Object.keys(args.state).length > 0) {
            draw(env.shared.current, ".dirty=true;");
          }
          if (env.shared.vao) {
            draw(env.shared.vao, ".setVAO(null);");
          }
        }
        function emitBatchDynamicShaderBody(env, scope, args, program) {
          env.batchId = "a1";
          injectExtensions(env, scope);
          function all() {
            return true;
          }
          emitAttributes(env, scope, args, program.attributes, all);
          emitUniforms(env, scope, args, program.uniforms, all, false);
          emitDraw(env, scope, scope, args);
        }
        function emitBatchBody(env, scope, args, program) {
          injectExtensions(env, scope);
          var contextDynamic = args.contextDep;
          var BATCH_ID = scope.def();
          var PROP_LIST = "a0";
          var NUM_PROPS = "a1";
          var PROPS = scope.def();
          env.shared.props = PROPS;
          env.batchId = BATCH_ID;
          var outer = env.scope();
          var inner = env.scope();
          scope(
            outer.entry,
            "for(",
            BATCH_ID,
            "=0;",
            BATCH_ID,
            "<",
            NUM_PROPS,
            ";++",
            BATCH_ID,
            "){",
            PROPS,
            "=",
            PROP_LIST,
            "[",
            BATCH_ID,
            "];",
            inner,
            "}",
            outer.exit
          );
          function isInnerDefn(defn) {
            return defn.contextDep && contextDynamic || defn.propDep;
          }
          function isOuterDefn(defn) {
            return !isInnerDefn(defn);
          }
          if (args.needsContext) {
            emitContext(env, inner, args.context);
          }
          if (args.needsFramebuffer) {
            emitPollFramebuffer(env, inner, args.framebuffer);
          }
          emitSetOptions(env, inner, args.state, isInnerDefn);
          if (args.profile && isInnerDefn(args.profile)) {
            emitProfile(env, inner, args, false, true);
          }
          if (!program) {
            var progCache = env.global.def("{}");
            var PROGRAM = args.shader.progVar.append(env, inner);
            var PROG_ID = inner.def(PROGRAM, ".id");
            var CACHED_PROC = inner.def(progCache, "[", PROG_ID, "]");
            inner(
              env.shared.gl,
              ".useProgram(",
              PROGRAM,
              ".program);",
              "if(!",
              CACHED_PROC,
              "){",
              CACHED_PROC,
              "=",
              progCache,
              "[",
              PROG_ID,
              "]=",
              env.link(function(program2) {
                return createBody(
                  emitBatchDynamicShaderBody,
                  env,
                  args,
                  program2,
                  2
                );
              }),
              "(",
              PROGRAM,
              ");}",
              CACHED_PROC,
              ".call(this,a0[",
              BATCH_ID,
              "],",
              BATCH_ID,
              ");"
            );
          } else {
            if (args.useVAO) {
              if (args.drawVAO) {
                if (isInnerDefn(args.drawVAO)) {
                  inner(env.shared.vao, ".setVAO(", args.drawVAO.append(env, inner), ");");
                } else {
                  outer(env.shared.vao, ".setVAO(", args.drawVAO.append(env, outer), ");");
                }
              } else {
                outer(env.shared.vao, ".setVAO(", env.shared.vao, ".targetVAO);");
              }
            } else {
              outer(env.shared.vao, ".setVAO(null);");
              emitAttributes(env, outer, args, program.attributes, isOuterDefn);
              emitAttributes(env, inner, args, program.attributes, isInnerDefn);
            }
            emitUniforms(env, outer, args, program.uniforms, isOuterDefn, false);
            emitUniforms(env, inner, args, program.uniforms, isInnerDefn, true);
            emitDraw(env, outer, inner, args);
          }
        }
        function emitBatchProc(env, args) {
          var batch = env.proc("batch", 2);
          env.batchId = "0";
          injectExtensions(env, batch);
          var contextDynamic = false;
          var needsContext = true;
          Object.keys(args.context).forEach(function(name) {
            contextDynamic = contextDynamic || args.context[name].propDep;
          });
          if (!contextDynamic) {
            emitContext(env, batch, args.context);
            needsContext = false;
          }
          var framebuffer = args.framebuffer;
          var needsFramebuffer = false;
          if (framebuffer) {
            if (framebuffer.propDep) {
              contextDynamic = needsFramebuffer = true;
            } else if (framebuffer.contextDep && contextDynamic) {
              needsFramebuffer = true;
            }
            if (!needsFramebuffer) {
              emitPollFramebuffer(env, batch, framebuffer);
            }
          } else {
            emitPollFramebuffer(env, batch, null);
          }
          if (args.state.viewport && args.state.viewport.propDep) {
            contextDynamic = true;
          }
          function isInnerDefn(defn) {
            return defn.contextDep && contextDynamic || defn.propDep;
          }
          emitPollState(env, batch, args);
          emitSetOptions(env, batch, args.state, function(defn) {
            return !isInnerDefn(defn);
          });
          if (!args.profile || !isInnerDefn(args.profile)) {
            emitProfile(env, batch, args, false, "a1");
          }
          args.contextDep = contextDynamic;
          args.needsContext = needsContext;
          args.needsFramebuffer = needsFramebuffer;
          var progDefn = args.shader.progVar;
          if (progDefn.contextDep && contextDynamic || progDefn.propDep) {
            emitBatchBody(
              env,
              batch,
              args,
              null
            );
          } else {
            var PROGRAM = progDefn.append(env, batch);
            batch(env.shared.gl, ".useProgram(", PROGRAM, ".program);");
            if (args.shader.program) {
              emitBatchBody(
                env,
                batch,
                args,
                args.shader.program
              );
            } else {
              batch(env.shared.vao, ".setVAO(null);");
              var batchCache = env.global.def("{}");
              var PROG_ID = batch.def(PROGRAM, ".id");
              var CACHED_PROC = batch.def(batchCache, "[", PROG_ID, "]");
              batch(
                env.cond(CACHED_PROC).then(CACHED_PROC, ".call(this,a0,a1);").else(
                  CACHED_PROC,
                  "=",
                  batchCache,
                  "[",
                  PROG_ID,
                  "]=",
                  env.link(function(program) {
                    return createBody(emitBatchBody, env, args, program, 2);
                  }),
                  "(",
                  PROGRAM,
                  ");",
                  CACHED_PROC,
                  ".call(this,a0,a1);"
                )
              );
            }
          }
          if (Object.keys(args.state).length > 0) {
            batch(env.shared.current, ".dirty=true;");
          }
          if (env.shared.vao) {
            batch(env.shared.vao, ".setVAO(null);");
          }
        }
        function emitScopeProc(env, args) {
          var scope = env.proc("scope", 3);
          env.batchId = "a2";
          var shared = env.shared;
          var CURRENT_STATE = shared.current;
          emitContext(env, scope, args.context);
          if (args.framebuffer) {
            args.framebuffer.append(env, scope);
          }
          sortState(Object.keys(args.state)).forEach(function(name) {
            var defn = args.state[name];
            var value = defn.append(env, scope);
            if (isArrayLike(value)) {
              value.forEach(function(v3, i11) {
                scope.set(env.next[name], "[" + i11 + "]", v3);
              });
            } else {
              scope.set(shared.next, "." + name, value);
            }
          });
          emitProfile(env, scope, args, true, true);
          [S_ELEMENTS, S_OFFSET, S_COUNT, S_INSTANCES, S_PRIMITIVE].forEach(
            function(opt) {
              var variable = args.draw[opt];
              if (!variable) {
                return;
              }
              scope.set(shared.draw, "." + opt, "" + variable.append(env, scope));
            }
          );
          Object.keys(args.uniforms).forEach(function(opt) {
            var value = args.uniforms[opt].append(env, scope);
            if (Array.isArray(value)) {
              value = "[" + value.join() + "]";
            }
            scope.set(
              shared.uniforms,
              "[" + stringStore.id(opt) + "]",
              value
            );
          });
          Object.keys(args.attributes).forEach(function(name) {
            var record = args.attributes[name].append(env, scope);
            var scopeAttrib = env.scopeAttrib(name);
            Object.keys(new AttributeRecord2()).forEach(function(prop) {
              scope.set(scopeAttrib, "." + prop, record[prop]);
            });
          });
          if (args.scopeVAO) {
            scope.set(shared.vao, ".targetVAO", args.scopeVAO.append(env, scope));
          }
          function saveShader(name) {
            var shader = args.shader[name];
            if (shader) {
              scope.set(shared.shader, "." + name, shader.append(env, scope));
            }
          }
          saveShader(S_VERT);
          saveShader(S_FRAG);
          if (Object.keys(args.state).length > 0) {
            scope(CURRENT_STATE, ".dirty=true;");
            scope.exit(CURRENT_STATE, ".dirty=true;");
          }
          scope("a1(", env.shared.context, ",a0,", env.batchId, ");");
        }
        function isDynamicObject(object) {
          if (typeof object !== "object" || isArrayLike(object)) {
            return;
          }
          var props = Object.keys(object);
          for (var i11 = 0; i11 < props.length; ++i11) {
            if (dynamic.isDynamic(object[props[i11]])) {
              return true;
            }
          }
          return false;
        }
        function splatObject(env, options, name) {
          var object = options.static[name];
          if (!object || !isDynamicObject(object)) {
            return;
          }
          var globals = env.global;
          var keys = Object.keys(object);
          var thisDep = false;
          var contextDep = false;
          var propDep = false;
          var objectRef = env.global.def("{}");
          keys.forEach(function(key) {
            var value = object[key];
            if (dynamic.isDynamic(value)) {
              if (typeof value === "function") {
                value = object[key] = dynamic.unbox(value);
              }
              var deps = createDynamicDecl(value, null);
              thisDep = thisDep || deps.thisDep;
              propDep = propDep || deps.propDep;
              contextDep = contextDep || deps.contextDep;
            } else {
              globals(objectRef, ".", key, "=");
              switch (typeof value) {
                case "number":
                  globals(value);
                  break;
                case "string":
                  globals('"', value, '"');
                  break;
                case "object":
                  if (Array.isArray(value)) {
                    globals("[", value.join(), "]");
                  }
                  break;
                default:
                  globals(env.link(value));
                  break;
              }
              globals(";");
            }
          });
          function appendBlock(env2, block) {
            keys.forEach(function(key) {
              var value = object[key];
              if (!dynamic.isDynamic(value)) {
                return;
              }
              var ref = env2.invoke(block, value);
              block(objectRef, ".", key, "=", ref, ";");
            });
          }
          options.dynamic[name] = new dynamic.DynamicVariable(DYN_THUNK, {
            thisDep,
            contextDep,
            propDep,
            ref: objectRef,
            append: appendBlock
          });
          delete options.static[name];
        }
        function compileCommand(options, attributes, uniforms, context, stats2) {
          var env = createREGLEnvironment();
          env.stats = env.link(stats2);
          Object.keys(attributes.static).forEach(function(key) {
            splatObject(env, attributes, key);
          });
          NESTED_OPTIONS.forEach(function(name) {
            splatObject(env, options, name);
          });
          var args = parseArguments(options, attributes, uniforms, context, env);
          emitDrawProc(env, args);
          emitScopeProc(env, args);
          emitBatchProc(env, args);
          return extend(env.compile(), {
            destroy: function() {
              args.shader.program.destroy();
            }
          });
        }
        return {
          next: nextState,
          current: currentState,
          procs: function() {
            var env = createREGLEnvironment();
            var poll = env.proc("poll");
            var refresh = env.proc("refresh");
            var common = env.block();
            poll(common);
            refresh(common);
            var shared = env.shared;
            var GL = shared.gl;
            var NEXT_STATE = shared.next;
            var CURRENT_STATE = shared.current;
            common(CURRENT_STATE, ".dirty=false;");
            emitPollFramebuffer(env, poll);
            emitPollFramebuffer(env, refresh, null, true);
            var INSTANCING;
            if (extInstancing) {
              INSTANCING = env.link(extInstancing);
            }
            if (extensions.oes_vertex_array_object) {
              refresh(env.link(extensions.oes_vertex_array_object), ".bindVertexArrayOES(null);");
            }
            for (var i11 = 0; i11 < limits.maxAttributes; ++i11) {
              var BINDING = refresh.def(shared.attributes, "[", i11, "]");
              var ifte = env.cond(BINDING, ".buffer");
              ifte.then(
                GL,
                ".enableVertexAttribArray(",
                i11,
                ");",
                GL,
                ".bindBuffer(",
                GL_ARRAY_BUFFER$2,
                ",",
                BINDING,
                ".buffer.buffer);",
                GL,
                ".vertexAttribPointer(",
                i11,
                ",",
                BINDING,
                ".size,",
                BINDING,
                ".type,",
                BINDING,
                ".normalized,",
                BINDING,
                ".stride,",
                BINDING,
                ".offset);"
              ).else(
                GL,
                ".disableVertexAttribArray(",
                i11,
                ");",
                GL,
                ".vertexAttrib4f(",
                i11,
                ",",
                BINDING,
                ".x,",
                BINDING,
                ".y,",
                BINDING,
                ".z,",
                BINDING,
                ".w);",
                BINDING,
                ".buffer=null;"
              );
              refresh(ifte);
              if (extInstancing) {
                refresh(
                  INSTANCING,
                  ".vertexAttribDivisorANGLE(",
                  i11,
                  ",",
                  BINDING,
                  ".divisor);"
                );
              }
            }
            refresh(
              env.shared.vao,
              ".currentVAO=null;",
              env.shared.vao,
              ".setVAO(",
              env.shared.vao,
              ".targetVAO);"
            );
            Object.keys(GL_FLAGS).forEach(function(flag) {
              var cap = GL_FLAGS[flag];
              var NEXT = common.def(NEXT_STATE, ".", flag);
              var block = env.block();
              block(
                "if(",
                NEXT,
                "){",
                GL,
                ".enable(",
                cap,
                ")}else{",
                GL,
                ".disable(",
                cap,
                ")}",
                CURRENT_STATE,
                ".",
                flag,
                "=",
                NEXT,
                ";"
              );
              refresh(block);
              poll(
                "if(",
                NEXT,
                "!==",
                CURRENT_STATE,
                ".",
                flag,
                "){",
                block,
                "}"
              );
            });
            Object.keys(GL_VARIABLES).forEach(function(name) {
              var func = GL_VARIABLES[name];
              var init = currentState[name];
              var NEXT, CURRENT;
              var block = env.block();
              block(GL, ".", func, "(");
              if (isArrayLike(init)) {
                var n17 = init.length;
                NEXT = env.global.def(NEXT_STATE, ".", name);
                CURRENT = env.global.def(CURRENT_STATE, ".", name);
                block(
                  loop(n17, function(i12) {
                    return NEXT + "[" + i12 + "]";
                  }),
                  ");",
                  loop(n17, function(i12) {
                    return CURRENT + "[" + i12 + "]=" + NEXT + "[" + i12 + "];";
                  }).join("")
                );
                poll(
                  "if(",
                  loop(n17, function(i12) {
                    return NEXT + "[" + i12 + "]!==" + CURRENT + "[" + i12 + "]";
                  }).join("||"),
                  "){",
                  block,
                  "}"
                );
              } else {
                NEXT = common.def(NEXT_STATE, ".", name);
                CURRENT = common.def(CURRENT_STATE, ".", name);
                block(
                  NEXT,
                  ");",
                  CURRENT_STATE,
                  ".",
                  name,
                  "=",
                  NEXT,
                  ";"
                );
                poll(
                  "if(",
                  NEXT,
                  "!==",
                  CURRENT,
                  "){",
                  block,
                  "}"
                );
              }
              refresh(block);
            });
            return env.compile();
          }(),
          compile: compileCommand
        };
      }
      function stats() {
        return {
          vaoCount: 0,
          bufferCount: 0,
          elementsCount: 0,
          framebufferCount: 0,
          shaderCount: 0,
          textureCount: 0,
          cubeCount: 0,
          renderbufferCount: 0,
          maxTextureUnits: 0
        };
      }
      var GL_QUERY_RESULT_EXT = 34918;
      var GL_QUERY_RESULT_AVAILABLE_EXT = 34919;
      var GL_TIME_ELAPSED_EXT = 35007;
      var createTimer = function(gl, extensions) {
        if (!extensions.ext_disjoint_timer_query) {
          return null;
        }
        var queryPool = [];
        function allocQuery() {
          return queryPool.pop() || extensions.ext_disjoint_timer_query.createQueryEXT();
        }
        function freeQuery(query) {
          queryPool.push(query);
        }
        var pendingQueries = [];
        function beginQuery(stats2) {
          var query = allocQuery();
          extensions.ext_disjoint_timer_query.beginQueryEXT(GL_TIME_ELAPSED_EXT, query);
          pendingQueries.push(query);
          pushScopeStats(pendingQueries.length - 1, pendingQueries.length, stats2);
        }
        function endQuery() {
          extensions.ext_disjoint_timer_query.endQueryEXT(GL_TIME_ELAPSED_EXT);
        }
        function PendingStats() {
          this.startQueryIndex = -1;
          this.endQueryIndex = -1;
          this.sum = 0;
          this.stats = null;
        }
        var pendingStatsPool = [];
        function allocPendingStats() {
          return pendingStatsPool.pop() || new PendingStats();
        }
        function freePendingStats(pendingStats2) {
          pendingStatsPool.push(pendingStats2);
        }
        var pendingStats = [];
        function pushScopeStats(start, end, stats2) {
          var ps = allocPendingStats();
          ps.startQueryIndex = start;
          ps.endQueryIndex = end;
          ps.sum = 0;
          ps.stats = stats2;
          pendingStats.push(ps);
        }
        var timeSum = [];
        var queryPtr = [];
        function update() {
          var ptr, i11;
          var n17 = pendingQueries.length;
          if (n17 === 0) {
            return;
          }
          queryPtr.length = Math.max(queryPtr.length, n17 + 1);
          timeSum.length = Math.max(timeSum.length, n17 + 1);
          timeSum[0] = 0;
          queryPtr[0] = 0;
          var queryTime = 0;
          ptr = 0;
          for (i11 = 0; i11 < pendingQueries.length; ++i11) {
            var query = pendingQueries[i11];
            if (extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_AVAILABLE_EXT)) {
              queryTime += extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_EXT);
              freeQuery(query);
            } else {
              pendingQueries[ptr++] = query;
            }
            timeSum[i11 + 1] = queryTime;
            queryPtr[i11 + 1] = ptr;
          }
          pendingQueries.length = ptr;
          ptr = 0;
          for (i11 = 0; i11 < pendingStats.length; ++i11) {
            var stats2 = pendingStats[i11];
            var start = stats2.startQueryIndex;
            var end = stats2.endQueryIndex;
            stats2.sum += timeSum[end] - timeSum[start];
            var startPtr = queryPtr[start];
            var endPtr = queryPtr[end];
            if (endPtr === startPtr) {
              stats2.stats.gpuTime += stats2.sum / 1e6;
              freePendingStats(stats2);
            } else {
              stats2.startQueryIndex = startPtr;
              stats2.endQueryIndex = endPtr;
              pendingStats[ptr++] = stats2;
            }
          }
          pendingStats.length = ptr;
        }
        return {
          beginQuery,
          endQuery,
          pushScopeStats,
          update,
          getNumPendingQueries: function() {
            return pendingQueries.length;
          },
          clear: function() {
            queryPool.push.apply(queryPool, pendingQueries);
            for (var i11 = 0; i11 < queryPool.length; i11++) {
              extensions.ext_disjoint_timer_query.deleteQueryEXT(queryPool[i11]);
            }
            pendingQueries.length = 0;
            queryPool.length = 0;
          },
          restore: function() {
            pendingQueries.length = 0;
            queryPool.length = 0;
          }
        };
      };
      var GL_COLOR_BUFFER_BIT = 16384;
      var GL_DEPTH_BUFFER_BIT = 256;
      var GL_STENCIL_BUFFER_BIT = 1024;
      var GL_ARRAY_BUFFER = 34962;
      var CONTEXT_LOST_EVENT = "webglcontextlost";
      var CONTEXT_RESTORED_EVENT = "webglcontextrestored";
      var DYN_PROP = 1;
      var DYN_CONTEXT = 2;
      var DYN_STATE = 3;
      function find(haystack, needle) {
        for (var i11 = 0; i11 < haystack.length; ++i11) {
          if (haystack[i11] === needle) {
            return i11;
          }
        }
        return -1;
      }
      function wrapREGL(args) {
        var config = parseArgs(args);
        if (!config) {
          return null;
        }
        var gl = config.gl;
        var glAttributes = gl.getContextAttributes();
        var contextLost = gl.isContextLost();
        var extensionState = createExtensionCache(gl, config);
        if (!extensionState) {
          return null;
        }
        var stringStore = createStringStore();
        var stats$$1 = stats();
        var extensions = extensionState.extensions;
        var timer = createTimer(gl, extensions);
        var START_TIME = clock();
        var WIDTH = gl.drawingBufferWidth;
        var HEIGHT = gl.drawingBufferHeight;
        var contextState = {
          tick: 0,
          time: 0,
          viewportWidth: WIDTH,
          viewportHeight: HEIGHT,
          framebufferWidth: WIDTH,
          framebufferHeight: HEIGHT,
          drawingBufferWidth: WIDTH,
          drawingBufferHeight: HEIGHT,
          pixelRatio: config.pixelRatio
        };
        var uniformState = {};
        var drawState = {
          elements: null,
          primitive: 4,
          // GL_TRIANGLES
          count: -1,
          offset: 0,
          instances: -1
        };
        var limits = wrapLimits(gl, extensions);
        var bufferState = wrapBufferState(
          gl,
          stats$$1,
          config,
          destroyBuffer2
        );
        var elementState = wrapElementsState(gl, extensions, bufferState, stats$$1);
        var attributeState = wrapAttributeState(
          gl,
          extensions,
          limits,
          stats$$1,
          bufferState,
          elementState,
          drawState
        );
        function destroyBuffer2(buffer) {
          return attributeState.destroyBuffer(buffer);
        }
        var shaderState = wrapShaderState(gl, stringStore, stats$$1, config);
        var textureState = createTextureSet(
          gl,
          extensions,
          limits,
          function() {
            core.procs.poll();
          },
          contextState,
          stats$$1,
          config
        );
        var renderbufferState = wrapRenderbuffers(gl, extensions, limits, stats$$1, config);
        var framebufferState = wrapFBOState(
          gl,
          extensions,
          limits,
          textureState,
          renderbufferState,
          stats$$1
        );
        var core = reglCore(
          gl,
          stringStore,
          extensions,
          limits,
          bufferState,
          elementState,
          textureState,
          framebufferState,
          uniformState,
          attributeState,
          shaderState,
          drawState,
          contextState,
          timer,
          config
        );
        var readPixels2 = wrapReadPixels(
          gl,
          framebufferState,
          core.procs.poll,
          contextState,
          glAttributes,
          extensions,
          limits
        );
        var nextState = core.next;
        var canvas = gl.canvas;
        var rafCallbacks = [];
        var lossCallbacks = [];
        var restoreCallbacks = [];
        var destroyCallbacks = [config.onDestroy];
        var activeRAF = null;
        function handleRAF() {
          if (rafCallbacks.length === 0) {
            if (timer) {
              timer.update();
            }
            activeRAF = null;
            return;
          }
          activeRAF = raf.next(handleRAF);
          poll();
          for (var i11 = rafCallbacks.length - 1; i11 >= 0; --i11) {
            var cb = rafCallbacks[i11];
            if (cb) {
              cb(contextState, null, 0);
            }
          }
          gl.flush();
          if (timer) {
            timer.update();
          }
        }
        function startRAF() {
          if (!activeRAF && rafCallbacks.length > 0) {
            activeRAF = raf.next(handleRAF);
          }
        }
        function stopRAF() {
          if (activeRAF) {
            raf.cancel(handleRAF);
            activeRAF = null;
          }
        }
        function handleContextLoss(event) {
          event.preventDefault();
          contextLost = true;
          stopRAF();
          lossCallbacks.forEach(function(cb) {
            cb();
          });
        }
        function handleContextRestored(event) {
          gl.getError();
          contextLost = false;
          extensionState.restore();
          shaderState.restore();
          bufferState.restore();
          textureState.restore();
          renderbufferState.restore();
          framebufferState.restore();
          attributeState.restore();
          if (timer) {
            timer.restore();
          }
          core.procs.refresh();
          startRAF();
          restoreCallbacks.forEach(function(cb) {
            cb();
          });
        }
        if (canvas) {
          canvas.addEventListener(CONTEXT_LOST_EVENT, handleContextLoss, false);
          canvas.addEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored, false);
        }
        function destroy() {
          rafCallbacks.length = 0;
          stopRAF();
          if (canvas) {
            canvas.removeEventListener(CONTEXT_LOST_EVENT, handleContextLoss);
            canvas.removeEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored);
          }
          shaderState.clear();
          framebufferState.clear();
          renderbufferState.clear();
          attributeState.clear();
          textureState.clear();
          elementState.clear();
          bufferState.clear();
          if (timer) {
            timer.clear();
          }
          destroyCallbacks.forEach(function(cb) {
            cb();
          });
        }
        function compileProcedure(options) {
          check$1(!!options, "invalid args to regl({...})");
          check$1.type(options, "object", "invalid args to regl({...})");
          function flattenNestedOptions(options2) {
            var result = extend({}, options2);
            delete result.uniforms;
            delete result.attributes;
            delete result.context;
            delete result.vao;
            if ("stencil" in result && result.stencil.op) {
              result.stencil.opBack = result.stencil.opFront = result.stencil.op;
              delete result.stencil.op;
            }
            function merge(name) {
              if (name in result) {
                var child = result[name];
                delete result[name];
                Object.keys(child).forEach(function(prop) {
                  result[name + "." + prop] = child[prop];
                });
              }
            }
            merge("blend");
            merge("depth");
            merge("cull");
            merge("stencil");
            merge("polygonOffset");
            merge("scissor");
            merge("sample");
            if ("vao" in options2) {
              result.vao = options2.vao;
            }
            return result;
          }
          function separateDynamic(object, useArrays) {
            var staticItems = {};
            var dynamicItems = {};
            Object.keys(object).forEach(function(option) {
              var value = object[option];
              if (dynamic.isDynamic(value)) {
                dynamicItems[option] = dynamic.unbox(value, option);
                return;
              } else if (useArrays && Array.isArray(value)) {
                for (var i11 = 0; i11 < value.length; ++i11) {
                  if (dynamic.isDynamic(value[i11])) {
                    dynamicItems[option] = dynamic.unbox(value, option);
                    return;
                  }
                }
              }
              staticItems[option] = value;
            });
            return {
              dynamic: dynamicItems,
              static: staticItems
            };
          }
          var context = separateDynamic(options.context || {}, true);
          var uniforms = separateDynamic(options.uniforms || {}, true);
          var attributes = separateDynamic(options.attributes || {}, false);
          var opts = separateDynamic(flattenNestedOptions(options), false);
          var stats$$12 = {
            gpuTime: 0,
            cpuTime: 0,
            count: 0
          };
          var compiled = core.compile(opts, attributes, uniforms, context, stats$$12);
          var draw = compiled.draw;
          var batch = compiled.batch;
          var scope = compiled.scope;
          var EMPTY_ARRAY = [];
          function reserve(count) {
            while (EMPTY_ARRAY.length < count) {
              EMPTY_ARRAY.push(null);
            }
            return EMPTY_ARRAY;
          }
          function REGLCommand(args2, body) {
            var i11;
            if (contextLost) {
              check$1.raise("context lost");
            }
            if (typeof args2 === "function") {
              return scope.call(this, null, args2, 0);
            } else if (typeof body === "function") {
              if (typeof args2 === "number") {
                for (i11 = 0; i11 < args2; ++i11) {
                  scope.call(this, null, body, i11);
                }
              } else if (Array.isArray(args2)) {
                for (i11 = 0; i11 < args2.length; ++i11) {
                  scope.call(this, args2[i11], body, i11);
                }
              } else {
                return scope.call(this, args2, body, 0);
              }
            } else if (typeof args2 === "number") {
              if (args2 > 0) {
                return batch.call(this, reserve(args2 | 0), args2 | 0);
              }
            } else if (Array.isArray(args2)) {
              if (args2.length) {
                return batch.call(this, args2, args2.length);
              }
            } else {
              return draw.call(this, args2);
            }
          }
          return extend(REGLCommand, {
            stats: stats$$12,
            destroy: function() {
              compiled.destroy();
            }
          });
        }
        var setFBO = framebufferState.setFBO = compileProcedure({
          framebuffer: dynamic.define.call(null, DYN_PROP, "framebuffer")
        });
        function clearImpl(_7, options) {
          var clearFlags = 0;
          core.procs.poll();
          var c11 = options.color;
          if (c11) {
            gl.clearColor(+c11[0] || 0, +c11[1] || 0, +c11[2] || 0, +c11[3] || 0);
            clearFlags |= GL_COLOR_BUFFER_BIT;
          }
          if ("depth" in options) {
            gl.clearDepth(+options.depth);
            clearFlags |= GL_DEPTH_BUFFER_BIT;
          }
          if ("stencil" in options) {
            gl.clearStencil(options.stencil | 0);
            clearFlags |= GL_STENCIL_BUFFER_BIT;
          }
          check$1(!!clearFlags, "called regl.clear with no buffer specified");
          gl.clear(clearFlags);
        }
        function clear(options) {
          check$1(
            typeof options === "object" && options,
            "regl.clear() takes an object as input"
          );
          if ("framebuffer" in options) {
            if (options.framebuffer && options.framebuffer_reglType === "framebufferCube") {
              for (var i11 = 0; i11 < 6; ++i11) {
                setFBO(extend({
                  framebuffer: options.framebuffer.faces[i11]
                }, options), clearImpl);
              }
            } else {
              setFBO(options, clearImpl);
            }
          } else {
            clearImpl(null, options);
          }
        }
        function frame(cb) {
          check$1.type(cb, "function", "regl.frame() callback must be a function");
          rafCallbacks.push(cb);
          function cancel() {
            var i11 = find(rafCallbacks, cb);
            check$1(i11 >= 0, "cannot cancel a frame twice");
            function pendingCancel() {
              var index2 = find(rafCallbacks, pendingCancel);
              rafCallbacks[index2] = rafCallbacks[rafCallbacks.length - 1];
              rafCallbacks.length -= 1;
              if (rafCallbacks.length <= 0) {
                stopRAF();
              }
            }
            rafCallbacks[i11] = pendingCancel;
          }
          startRAF();
          return {
            cancel
          };
        }
        function pollViewport() {
          var viewport = nextState.viewport;
          var scissorBox = nextState.scissor_box;
          viewport[0] = viewport[1] = scissorBox[0] = scissorBox[1] = 0;
          contextState.viewportWidth = contextState.framebufferWidth = contextState.drawingBufferWidth = viewport[2] = scissorBox[2] = gl.drawingBufferWidth;
          contextState.viewportHeight = contextState.framebufferHeight = contextState.drawingBufferHeight = viewport[3] = scissorBox[3] = gl.drawingBufferHeight;
        }
        function poll() {
          contextState.tick += 1;
          contextState.time = now();
          pollViewport();
          core.procs.poll();
        }
        function refresh() {
          textureState.refresh();
          pollViewport();
          core.procs.refresh();
          if (timer) {
            timer.update();
          }
        }
        function now() {
          return (clock() - START_TIME) / 1e3;
        }
        refresh();
        function addListener(event, callback) {
          check$1.type(callback, "function", "listener callback must be a function");
          var callbacks2;
          switch (event) {
            case "frame":
              return frame(callback);
            case "lost":
              callbacks2 = lossCallbacks;
              break;
            case "restore":
              callbacks2 = restoreCallbacks;
              break;
            case "destroy":
              callbacks2 = destroyCallbacks;
              break;
            default:
              check$1.raise("invalid event, must be one of frame,lost,restore,destroy");
          }
          callbacks2.push(callback);
          return {
            cancel: function() {
              for (var i11 = 0; i11 < callbacks2.length; ++i11) {
                if (callbacks2[i11] === callback) {
                  callbacks2[i11] = callbacks2[callbacks2.length - 1];
                  callbacks2.pop();
                  return;
                }
              }
            }
          };
        }
        var regl2 = extend(compileProcedure, {
          // Clear current FBO
          clear,
          // Short cuts for dynamic variables
          prop: dynamic.define.bind(null, DYN_PROP),
          context: dynamic.define.bind(null, DYN_CONTEXT),
          this: dynamic.define.bind(null, DYN_STATE),
          // executes an empty draw command
          draw: compileProcedure({}),
          // Resources
          buffer: function(options) {
            return bufferState.create(options, GL_ARRAY_BUFFER, false, false);
          },
          elements: function(options) {
            return elementState.create(options, false);
          },
          texture: textureState.create2D,
          cube: textureState.createCube,
          renderbuffer: renderbufferState.create,
          framebuffer: framebufferState.create,
          framebufferCube: framebufferState.createCube,
          vao: attributeState.createVAO,
          // Expose context attributes
          attributes: glAttributes,
          // Frame rendering
          frame,
          on: addListener,
          // System limits
          limits,
          hasExtension: function(name) {
            return limits.extensions.indexOf(name.toLowerCase()) >= 0;
          },
          // Read pixels
          read: readPixels2,
          // Destroy regl and all associated resources
          destroy,
          // Direct GL state manipulation
          _gl: gl,
          _refresh: refresh,
          poll: function() {
            poll();
            if (timer) {
              timer.update();
            }
          },
          // Current time
          now,
          // regl Statistics Information
          stats: stats$$1
        });
        config.onDone(null, regl2);
        return regl2;
      }
      return wrapREGL;
    });
  }
});

// node_modules/seedrandom/lib/alea.js
var require_alea = __commonJS({
  "node_modules/seedrandom/lib/alea.js"(exports, module) {
    (function(global3, module2, define2) {
      function Alea(seed) {
        var me2 = this, mash = Mash();
        me2.next = function() {
          var t23 = 2091639 * me2.s0 + me2.c * 23283064365386963e-26;
          me2.s0 = me2.s1;
          me2.s1 = me2.s2;
          return me2.s2 = t23 - (me2.c = t23 | 0);
        };
        me2.c = 1;
        me2.s0 = mash(" ");
        me2.s1 = mash(" ");
        me2.s2 = mash(" ");
        me2.s0 -= mash(seed);
        if (me2.s0 < 0) {
          me2.s0 += 1;
        }
        me2.s1 -= mash(seed);
        if (me2.s1 < 0) {
          me2.s1 += 1;
        }
        me2.s2 -= mash(seed);
        if (me2.s2 < 0) {
          me2.s2 += 1;
        }
        mash = null;
      }
      function copy4(f6, t23) {
        t23.c = f6.c;
        t23.s0 = f6.s0;
        t23.s1 = f6.s1;
        t23.s2 = f6.s2;
        return t23;
      }
      function impl(seed, opts) {
        var xg = new Alea(seed), state = opts && opts.state, prng = xg.next;
        prng.int32 = function() {
          return xg.next() * 4294967296 | 0;
        };
        prng.double = function() {
          return prng() + (prng() * 2097152 | 0) * 11102230246251565e-32;
        };
        prng.quick = prng;
        if (state) {
          if (typeof state == "object") copy4(state, xg);
          prng.state = function() {
            return copy4(xg, {});
          };
        }
        return prng;
      }
      function Mash() {
        var n17 = 4022871197;
        var mash = function(data) {
          data = String(data);
          for (var i11 = 0; i11 < data.length; i11++) {
            n17 += data.charCodeAt(i11);
            var h6 = 0.02519603282416938 * n17;
            n17 = h6 >>> 0;
            h6 -= n17;
            h6 *= n17;
            n17 = h6 >>> 0;
            h6 -= n17;
            n17 += h6 * 4294967296;
          }
          return (n17 >>> 0) * 23283064365386963e-26;
        };
        return mash;
      }
      if (module2 && module2.exports) {
        module2.exports = impl;
      } else if (define2 && define2.amd) {
        define2(function() {
          return impl;
        });
      } else {
        this.alea = impl;
      }
    })(
      exports,
      typeof module == "object" && module,
      // present in node.js
      typeof define == "function" && define
      // present with an AMD loader
    );
  }
});

// node_modules/seedrandom/lib/xor128.js
var require_xor128 = __commonJS({
  "node_modules/seedrandom/lib/xor128.js"(exports, module) {
    (function(global3, module2, define2) {
      function XorGen(seed) {
        var me2 = this, strseed = "";
        me2.x = 0;
        me2.y = 0;
        me2.z = 0;
        me2.w = 0;
        me2.next = function() {
          var t23 = me2.x ^ me2.x << 11;
          me2.x = me2.y;
          me2.y = me2.z;
          me2.z = me2.w;
          return me2.w ^= me2.w >>> 19 ^ t23 ^ t23 >>> 8;
        };
        if (seed === (seed | 0)) {
          me2.x = seed;
        } else {
          strseed += seed;
        }
        for (var k5 = 0; k5 < strseed.length + 64; k5++) {
          me2.x ^= strseed.charCodeAt(k5) | 0;
          me2.next();
        }
      }
      function copy4(f6, t23) {
        t23.x = f6.x;
        t23.y = f6.y;
        t23.z = f6.z;
        t23.w = f6.w;
        return t23;
      }
      function impl(seed, opts) {
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
          return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
          do {
            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
          } while (result === 0);
          return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
          if (typeof state == "object") copy4(state, xg);
          prng.state = function() {
            return copy4(xg, {});
          };
        }
        return prng;
      }
      if (module2 && module2.exports) {
        module2.exports = impl;
      } else if (define2 && define2.amd) {
        define2(function() {
          return impl;
        });
      } else {
        this.xor128 = impl;
      }
    })(
      exports,
      typeof module == "object" && module,
      // present in node.js
      typeof define == "function" && define
      // present with an AMD loader
    );
  }
});

// node_modules/seedrandom/lib/xorwow.js
var require_xorwow = __commonJS({
  "node_modules/seedrandom/lib/xorwow.js"(exports, module) {
    (function(global3, module2, define2) {
      function XorGen(seed) {
        var me2 = this, strseed = "";
        me2.next = function() {
          var t23 = me2.x ^ me2.x >>> 2;
          me2.x = me2.y;
          me2.y = me2.z;
          me2.z = me2.w;
          me2.w = me2.v;
          return (me2.d = me2.d + 362437 | 0) + (me2.v = me2.v ^ me2.v << 4 ^ (t23 ^ t23 << 1)) | 0;
        };
        me2.x = 0;
        me2.y = 0;
        me2.z = 0;
        me2.w = 0;
        me2.v = 0;
        if (seed === (seed | 0)) {
          me2.x = seed;
        } else {
          strseed += seed;
        }
        for (var k5 = 0; k5 < strseed.length + 64; k5++) {
          me2.x ^= strseed.charCodeAt(k5) | 0;
          if (k5 == strseed.length) {
            me2.d = me2.x << 10 ^ me2.x >>> 4;
          }
          me2.next();
        }
      }
      function copy4(f6, t23) {
        t23.x = f6.x;
        t23.y = f6.y;
        t23.z = f6.z;
        t23.w = f6.w;
        t23.v = f6.v;
        t23.d = f6.d;
        return t23;
      }
      function impl(seed, opts) {
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
          return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
          do {
            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
          } while (result === 0);
          return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
          if (typeof state == "object") copy4(state, xg);
          prng.state = function() {
            return copy4(xg, {});
          };
        }
        return prng;
      }
      if (module2 && module2.exports) {
        module2.exports = impl;
      } else if (define2 && define2.amd) {
        define2(function() {
          return impl;
        });
      } else {
        this.xorwow = impl;
      }
    })(
      exports,
      typeof module == "object" && module,
      // present in node.js
      typeof define == "function" && define
      // present with an AMD loader
    );
  }
});

// node_modules/seedrandom/lib/xorshift7.js
var require_xorshift7 = __commonJS({
  "node_modules/seedrandom/lib/xorshift7.js"(exports, module) {
    (function(global3, module2, define2) {
      function XorGen(seed) {
        var me2 = this;
        me2.next = function() {
          var X3 = me2.x, i11 = me2.i, t23, v3, w3;
          t23 = X3[i11];
          t23 ^= t23 >>> 7;
          v3 = t23 ^ t23 << 24;
          t23 = X3[i11 + 1 & 7];
          v3 ^= t23 ^ t23 >>> 10;
          t23 = X3[i11 + 3 & 7];
          v3 ^= t23 ^ t23 >>> 3;
          t23 = X3[i11 + 4 & 7];
          v3 ^= t23 ^ t23 << 7;
          t23 = X3[i11 + 7 & 7];
          t23 = t23 ^ t23 << 13;
          v3 ^= t23 ^ t23 << 9;
          X3[i11] = v3;
          me2.i = i11 + 1 & 7;
          return v3;
        };
        function init(me3, seed2) {
          var j6, w3, X3 = [];
          if (seed2 === (seed2 | 0)) {
            w3 = X3[0] = seed2;
          } else {
            seed2 = "" + seed2;
            for (j6 = 0; j6 < seed2.length; ++j6) {
              X3[j6 & 7] = X3[j6 & 7] << 15 ^ seed2.charCodeAt(j6) + X3[j6 + 1 & 7] << 13;
            }
          }
          while (X3.length < 8) X3.push(0);
          for (j6 = 0; j6 < 8 && X3[j6] === 0; ++j6) ;
          if (j6 == 8) w3 = X3[7] = -1;
          else w3 = X3[j6];
          me3.x = X3;
          me3.i = 0;
          for (j6 = 256; j6 > 0; --j6) {
            me3.next();
          }
        }
        init(me2, seed);
      }
      function copy4(f6, t23) {
        t23.x = f6.x.slice();
        t23.i = f6.i;
        return t23;
      }
      function impl(seed, opts) {
        if (seed == null) seed = +/* @__PURE__ */ new Date();
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
          return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
          do {
            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
          } while (result === 0);
          return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
          if (state.x) copy4(state, xg);
          prng.state = function() {
            return copy4(xg, {});
          };
        }
        return prng;
      }
      if (module2 && module2.exports) {
        module2.exports = impl;
      } else if (define2 && define2.amd) {
        define2(function() {
          return impl;
        });
      } else {
        this.xorshift7 = impl;
      }
    })(
      exports,
      typeof module == "object" && module,
      // present in node.js
      typeof define == "function" && define
      // present with an AMD loader
    );
  }
});

// node_modules/seedrandom/lib/xor4096.js
var require_xor4096 = __commonJS({
  "node_modules/seedrandom/lib/xor4096.js"(exports, module) {
    (function(global3, module2, define2) {
      function XorGen(seed) {
        var me2 = this;
        me2.next = function() {
          var w3 = me2.w, X3 = me2.X, i11 = me2.i, t23, v3;
          me2.w = w3 = w3 + 1640531527 | 0;
          v3 = X3[i11 + 34 & 127];
          t23 = X3[i11 = i11 + 1 & 127];
          v3 ^= v3 << 13;
          t23 ^= t23 << 17;
          v3 ^= v3 >>> 15;
          t23 ^= t23 >>> 12;
          v3 = X3[i11] = v3 ^ t23;
          me2.i = i11;
          return v3 + (w3 ^ w3 >>> 16) | 0;
        };
        function init(me3, seed2) {
          var t23, v3, i11, j6, w3, X3 = [], limit = 128;
          if (seed2 === (seed2 | 0)) {
            v3 = seed2;
            seed2 = null;
          } else {
            seed2 = seed2 + "\0";
            v3 = 0;
            limit = Math.max(limit, seed2.length);
          }
          for (i11 = 0, j6 = -32; j6 < limit; ++j6) {
            if (seed2) v3 ^= seed2.charCodeAt((j6 + 32) % seed2.length);
            if (j6 === 0) w3 = v3;
            v3 ^= v3 << 10;
            v3 ^= v3 >>> 15;
            v3 ^= v3 << 4;
            v3 ^= v3 >>> 13;
            if (j6 >= 0) {
              w3 = w3 + 1640531527 | 0;
              t23 = X3[j6 & 127] ^= v3 + w3;
              i11 = 0 == t23 ? i11 + 1 : 0;
            }
          }
          if (i11 >= 128) {
            X3[(seed2 && seed2.length || 0) & 127] = -1;
          }
          i11 = 127;
          for (j6 = 4 * 128; j6 > 0; --j6) {
            v3 = X3[i11 + 34 & 127];
            t23 = X3[i11 = i11 + 1 & 127];
            v3 ^= v3 << 13;
            t23 ^= t23 << 17;
            v3 ^= v3 >>> 15;
            t23 ^= t23 >>> 12;
            X3[i11] = v3 ^ t23;
          }
          me3.w = w3;
          me3.X = X3;
          me3.i = i11;
        }
        init(me2, seed);
      }
      function copy4(f6, t23) {
        t23.i = f6.i;
        t23.w = f6.w;
        t23.X = f6.X.slice();
        return t23;
      }
      ;
      function impl(seed, opts) {
        if (seed == null) seed = +/* @__PURE__ */ new Date();
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
          return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
          do {
            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
          } while (result === 0);
          return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
          if (state.X) copy4(state, xg);
          prng.state = function() {
            return copy4(xg, {});
          };
        }
        return prng;
      }
      if (module2 && module2.exports) {
        module2.exports = impl;
      } else if (define2 && define2.amd) {
        define2(function() {
          return impl;
        });
      } else {
        this.xor4096 = impl;
      }
    })(
      exports,
      // window object or global
      typeof module == "object" && module,
      // present in node.js
      typeof define == "function" && define
      // present with an AMD loader
    );
  }
});

// node_modules/seedrandom/lib/tychei.js
var require_tychei = __commonJS({
  "node_modules/seedrandom/lib/tychei.js"(exports, module) {
    (function(global3, module2, define2) {
      function XorGen(seed) {
        var me2 = this, strseed = "";
        me2.next = function() {
          var b5 = me2.b, c11 = me2.c, d13 = me2.d, a13 = me2.a;
          b5 = b5 << 25 ^ b5 >>> 7 ^ c11;
          c11 = c11 - d13 | 0;
          d13 = d13 << 24 ^ d13 >>> 8 ^ a13;
          a13 = a13 - b5 | 0;
          me2.b = b5 = b5 << 20 ^ b5 >>> 12 ^ c11;
          me2.c = c11 = c11 - d13 | 0;
          me2.d = d13 << 16 ^ c11 >>> 16 ^ a13;
          return me2.a = a13 - b5 | 0;
        };
        me2.a = 0;
        me2.b = 0;
        me2.c = 2654435769 | 0;
        me2.d = 1367130551;
        if (seed === Math.floor(seed)) {
          me2.a = seed / 4294967296 | 0;
          me2.b = seed | 0;
        } else {
          strseed += seed;
        }
        for (var k5 = 0; k5 < strseed.length + 20; k5++) {
          me2.b ^= strseed.charCodeAt(k5) | 0;
          me2.next();
        }
      }
      function copy4(f6, t23) {
        t23.a = f6.a;
        t23.b = f6.b;
        t23.c = f6.c;
        t23.d = f6.d;
        return t23;
      }
      ;
      function impl(seed, opts) {
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
          return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
          do {
            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
          } while (result === 0);
          return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
          if (typeof state == "object") copy4(state, xg);
          prng.state = function() {
            return copy4(xg, {});
          };
        }
        return prng;
      }
      if (module2 && module2.exports) {
        module2.exports = impl;
      } else if (define2 && define2.amd) {
        define2(function() {
          return impl;
        });
      } else {
        this.tychei = impl;
      }
    })(
      exports,
      typeof module == "object" && module,
      // present in node.js
      typeof define == "function" && define
      // present with an AMD loader
    );
  }
});

// browser-external:crypto
var require_crypto = __commonJS({
  "browser-external:crypto"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_7, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "crypto" has been externalized for browser compatibility. Cannot access "crypto.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/seedrandom/seedrandom.js
var require_seedrandom = __commonJS({
  "node_modules/seedrandom/seedrandom.js"(exports, module) {
    (function(global3, pool, math) {
      var width = 256, chunks = 6, digits = 52, rngname = "random", startdenom = math.pow(width, chunks), significance = math.pow(2, digits), overflow = significance * 2, mask = width - 1, nodecrypto;
      function seedrandom2(seed, options, callback) {
        var key = [];
        options = options == true ? { entropy: true } : options || {};
        var shortseed = mixkey(flatten(
          options.entropy ? [seed, tostring(pool)] : seed == null ? autoseed() : seed,
          3
        ), key);
        var arc4 = new ARC4(key);
        var prng = function() {
          var n17 = arc4.g(chunks), d13 = startdenom, x3 = 0;
          while (n17 < significance) {
            n17 = (n17 + x3) * width;
            d13 *= width;
            x3 = arc4.g(1);
          }
          while (n17 >= overflow) {
            n17 /= 2;
            d13 /= 2;
            x3 >>>= 1;
          }
          return (n17 + x3) / d13;
        };
        prng.int32 = function() {
          return arc4.g(4) | 0;
        };
        prng.quick = function() {
          return arc4.g(4) / 4294967296;
        };
        prng.double = prng;
        mixkey(tostring(arc4.S), pool);
        return (options.pass || callback || function(prng2, seed2, is_math_call, state) {
          if (state) {
            if (state.S) {
              copy4(state, arc4);
            }
            prng2.state = function() {
              return copy4(arc4, {});
            };
          }
          if (is_math_call) {
            math[rngname] = prng2;
            return seed2;
          } else return prng2;
        })(
          prng,
          shortseed,
          "global" in options ? options.global : this == math,
          options.state
        );
      }
      function ARC4(key) {
        var t23, keylen = key.length, me2 = this, i11 = 0, j6 = me2.i = me2.j = 0, s15 = me2.S = [];
        if (!keylen) {
          key = [keylen++];
        }
        while (i11 < width) {
          s15[i11] = i11++;
        }
        for (i11 = 0; i11 < width; i11++) {
          s15[i11] = s15[j6 = mask & j6 + key[i11 % keylen] + (t23 = s15[i11])];
          s15[j6] = t23;
        }
        (me2.g = function(count) {
          var t24, r14 = 0, i12 = me2.i, j7 = me2.j, s16 = me2.S;
          while (count--) {
            t24 = s16[i12 = mask & i12 + 1];
            r14 = r14 * width + s16[mask & (s16[i12] = s16[j7 = mask & j7 + t24]) + (s16[j7] = t24)];
          }
          me2.i = i12;
          me2.j = j7;
          return r14;
        })(width);
      }
      function copy4(f6, t23) {
        t23.i = f6.i;
        t23.j = f6.j;
        t23.S = f6.S.slice();
        return t23;
      }
      ;
      function flatten(obj, depth) {
        var result = [], typ = typeof obj, prop;
        if (depth && typ == "object") {
          for (prop in obj) {
            try {
              result.push(flatten(obj[prop], depth - 1));
            } catch (e36) {
            }
          }
        }
        return result.length ? result : typ == "string" ? obj : obj + "\0";
      }
      function mixkey(seed, key) {
        var stringseed = seed + "", smear, j6 = 0;
        while (j6 < stringseed.length) {
          key[mask & j6] = mask & (smear ^= key[mask & j6] * 19) + stringseed.charCodeAt(j6++);
        }
        return tostring(key);
      }
      function autoseed() {
        try {
          var out;
          if (nodecrypto && (out = nodecrypto.randomBytes)) {
            out = out(width);
          } else {
            out = new Uint8Array(width);
            (global3.crypto || global3.msCrypto).getRandomValues(out);
          }
          return tostring(out);
        } catch (e36) {
          var browser = global3.navigator, plugins = browser && browser.plugins;
          return [+/* @__PURE__ */ new Date(), global3, plugins, global3.screen, tostring(pool)];
        }
      }
      function tostring(a13) {
        return String.fromCharCode.apply(0, a13);
      }
      mixkey(math.random(), pool);
      if (typeof module == "object" && module.exports) {
        module.exports = seedrandom2;
        try {
          nodecrypto = require_crypto();
        } catch (ex) {
        }
      } else if (typeof define == "function" && define.amd) {
        define(function() {
          return seedrandom2;
        });
      } else {
        math["seed" + rngname] = seedrandom2;
      }
    })(
      // global: `self` in browsers (including strict mode and web workers),
      // otherwise `this` in Node and other environments
      typeof self !== "undefined" ? self : exports,
      [],
      // pool: entropy pool starts empty
      Math
      // math: package containing random, pow, and seedrandom
    );
  }
});

// node_modules/seedrandom/index.js
var require_seedrandom2 = __commonJS({
  "node_modules/seedrandom/index.js"(exports, module) {
    var alea = require_alea();
    var xor128 = require_xor128();
    var xorwow = require_xorwow();
    var xorshift7 = require_xorshift7();
    var xor4096 = require_xor4096();
    var tychei = require_tychei();
    var sr = require_seedrandom();
    sr.alea = alea;
    sr.xor128 = xor128;
    sr.xorwow = xorwow;
    sr.xorshift7 = xorshift7;
    sr.xor4096 = xor4096;
    sr.tychei = tychei;
    module.exports = sr;
  }
});

// node_modules/@supabase/postgrest-js/dist/cjs/PostgrestError.js
var require_PostgrestError = __commonJS({
  "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostgrestError = class extends Error {
      constructor(context) {
        super(context.message);
        this.name = "PostgrestError";
        this.details = context.details;
        this.hint = context.hint;
        this.code = context.code;
      }
    };
    exports.default = PostgrestError;
  }
});

// node_modules/@supabase/postgrest-js/dist/cjs/PostgrestBuilder.js
var require_PostgrestBuilder = __commonJS({
  "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestBuilder.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var node_fetch_1 = __importDefault((init_browser(), __toCommonJS(browser_exports)));
    var PostgrestError_1 = __importDefault(require_PostgrestError());
    var PostgrestBuilder2 = class {
      constructor(builder) {
        this.shouldThrowOnError = false;
        this.method = builder.method;
        this.url = builder.url;
        this.headers = builder.headers;
        this.schema = builder.schema;
        this.body = builder.body;
        this.shouldThrowOnError = builder.shouldThrowOnError;
        this.signal = builder.signal;
        this.isMaybeSingle = builder.isMaybeSingle;
        if (builder.fetch) {
          this.fetch = builder.fetch;
        } else if (typeof fetch === "undefined") {
          this.fetch = node_fetch_1.default;
        } else {
          this.fetch = fetch;
        }
      }
      /**
       * If there's an error with the query, throwOnError will reject the promise by
       * throwing the error instead of returning it as part of a successful response.
       *
       * {@link https://github.com/supabase/supabase-js/issues/92}
       */
      throwOnError() {
        this.shouldThrowOnError = true;
        return this;
      }
      /**
       * Set an HTTP header for the request.
       */
      setHeader(name, value) {
        this.headers = Object.assign({}, this.headers);
        this.headers[name] = value;
        return this;
      }
      then(onfulfilled, onrejected) {
        if (this.schema === void 0) {
        } else if (["GET", "HEAD"].includes(this.method)) {
          this.headers["Accept-Profile"] = this.schema;
        } else {
          this.headers["Content-Profile"] = this.schema;
        }
        if (this.method !== "GET" && this.method !== "HEAD") {
          this.headers["Content-Type"] = "application/json";
        }
        const _fetch = this.fetch;
        let res = _fetch(this.url.toString(), {
          method: this.method,
          headers: this.headers,
          body: JSON.stringify(this.body),
          signal: this.signal
        }).then(async (res2) => {
          var _a, _b, _c;
          let error = null;
          let data = null;
          let count = null;
          let status = res2.status;
          let statusText = res2.statusText;
          if (res2.ok) {
            if (this.method !== "HEAD") {
              const body = await res2.text();
              if (body === "") {
              } else if (this.headers["Accept"] === "text/csv") {
                data = body;
              } else if (this.headers["Accept"] && this.headers["Accept"].includes("application/vnd.pgrst.plan+text")) {
                data = body;
              } else {
                data = JSON.parse(body);
              }
            }
            const countHeader = (_a = this.headers["Prefer"]) === null || _a === void 0 ? void 0 : _a.match(/count=(exact|planned|estimated)/);
            const contentRange = (_b = res2.headers.get("content-range")) === null || _b === void 0 ? void 0 : _b.split("/");
            if (countHeader && contentRange && contentRange.length > 1) {
              count = parseInt(contentRange[1]);
            }
            if (this.isMaybeSingle && this.method === "GET" && Array.isArray(data)) {
              if (data.length > 1) {
                error = {
                  // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553
                  code: "PGRST116",
                  details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,
                  hint: null,
                  message: "JSON object requested, multiple (or no) rows returned"
                };
                data = null;
                count = null;
                status = 406;
                statusText = "Not Acceptable";
              } else if (data.length === 1) {
                data = data[0];
              } else {
                data = null;
              }
            }
          } else {
            const body = await res2.text();
            try {
              error = JSON.parse(body);
              if (Array.isArray(error) && res2.status === 404) {
                data = [];
                error = null;
                status = 200;
                statusText = "OK";
              }
            } catch (_d) {
              if (res2.status === 404 && body === "") {
                status = 204;
                statusText = "No Content";
              } else {
                error = {
                  message: body
                };
              }
            }
            if (error && this.isMaybeSingle && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes("0 rows"))) {
              error = null;
              status = 200;
              statusText = "OK";
            }
            if (error && this.shouldThrowOnError) {
              throw new PostgrestError_1.default(error);
            }
          }
          const postgrestResponse = {
            error,
            data,
            count,
            status,
            statusText
          };
          return postgrestResponse;
        });
        if (!this.shouldThrowOnError) {
          res = res.catch((fetchError) => {
            var _a, _b, _c;
            return {
              error: {
                message: `${(_a = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a !== void 0 ? _a : "FetchError"}: ${fetchError === null || fetchError === void 0 ? void 0 : fetchError.message}`,
                details: `${(_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ""}`,
                hint: "",
                code: `${(_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : ""}`
              },
              data: null,
              count: null,
              status: 0,
              statusText: ""
            };
          });
        }
        return res.then(onfulfilled, onrejected);
      }
    };
    exports.default = PostgrestBuilder2;
  }
});

// node_modules/@supabase/postgrest-js/dist/cjs/PostgrestTransformBuilder.js
var require_PostgrestTransformBuilder = __commonJS({
  "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestTransformBuilder.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostgrestBuilder_1 = __importDefault(require_PostgrestBuilder());
    var PostgrestTransformBuilder2 = class extends PostgrestBuilder_1.default {
      /**
       * Perform a SELECT on the query result.
       *
       * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not
       * return modified rows. By calling this method, modified rows are returned in
       * `data`.
       *
       * @param columns - The columns to retrieve, separated by commas
       */
      select(columns) {
        let quoted = false;
        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : "*").split("").map((c11) => {
          if (/\s/.test(c11) && !quoted) {
            return "";
          }
          if (c11 === '"') {
            quoted = !quoted;
          }
          return c11;
        }).join("");
        this.url.searchParams.set("select", cleanedColumns);
        if (this.headers["Prefer"]) {
          this.headers["Prefer"] += ",";
        }
        this.headers["Prefer"] += "return=representation";
        return this;
      }
      /**
       * Order the query result by `column`.
       *
       * You can call this method multiple times to order by multiple columns.
       *
       * You can order referenced tables, but it only affects the ordering of the
       * parent table if you use `!inner` in the query.
       *
       * @param column - The column to order by
       * @param options - Named parameters
       * @param options.ascending - If `true`, the result will be in ascending order
       * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,
       * `null`s appear last.
       * @param options.referencedTable - Set this to order a referenced table by
       * its columns
       * @param options.foreignTable - Deprecated, use `options.referencedTable`
       * instead
       */
      order(column, { ascending = true, nullsFirst, foreignTable, referencedTable = foreignTable } = {}) {
        const key = referencedTable ? `${referencedTable}.order` : "order";
        const existingOrder = this.url.searchParams.get(key);
        this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ""}${column}.${ascending ? "asc" : "desc"}${nullsFirst === void 0 ? "" : nullsFirst ? ".nullsfirst" : ".nullslast"}`);
        return this;
      }
      /**
       * Limit the query result by `count`.
       *
       * @param count - The maximum number of rows to return
       * @param options - Named parameters
       * @param options.referencedTable - Set this to limit rows of referenced
       * tables instead of the parent table
       * @param options.foreignTable - Deprecated, use `options.referencedTable`
       * instead
       */
      limit(count, { foreignTable, referencedTable = foreignTable } = {}) {
        const key = typeof referencedTable === "undefined" ? "limit" : `${referencedTable}.limit`;
        this.url.searchParams.set(key, `${count}`);
        return this;
      }
      /**
       * Limit the query result by starting at an offset `from` and ending at the offset `to`.
       * Only records within this range are returned.
       * This respects the query order and if there is no order clause the range could behave unexpectedly.
       * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third
       * and fourth rows of the query.
       *
       * @param from - The starting index from which to limit the result
       * @param to - The last index to which to limit the result
       * @param options - Named parameters
       * @param options.referencedTable - Set this to limit rows of referenced
       * tables instead of the parent table
       * @param options.foreignTable - Deprecated, use `options.referencedTable`
       * instead
       */
      range(from, to, { foreignTable, referencedTable = foreignTable } = {}) {
        const keyOffset = typeof referencedTable === "undefined" ? "offset" : `${referencedTable}.offset`;
        const keyLimit = typeof referencedTable === "undefined" ? "limit" : `${referencedTable}.limit`;
        this.url.searchParams.set(keyOffset, `${from}`);
        this.url.searchParams.set(keyLimit, `${to - from + 1}`);
        return this;
      }
      /**
       * Set the AbortSignal for the fetch request.
       *
       * @param signal - The AbortSignal to use for the fetch request
       */
      abortSignal(signal) {
        this.signal = signal;
        return this;
      }
      /**
       * Return `data` as a single object instead of an array of objects.
       *
       * Query result must be one row (e.g. using `.limit(1)`), otherwise this
       * returns an error.
       */
      single() {
        this.headers["Accept"] = "application/vnd.pgrst.object+json";
        return this;
      }
      /**
       * Return `data` as a single object instead of an array of objects.
       *
       * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise
       * this returns an error.
       */
      maybeSingle() {
        if (this.method === "GET") {
          this.headers["Accept"] = "application/json";
        } else {
          this.headers["Accept"] = "application/vnd.pgrst.object+json";
        }
        this.isMaybeSingle = true;
        return this;
      }
      /**
       * Return `data` as a string in CSV format.
       */
      csv() {
        this.headers["Accept"] = "text/csv";
        return this;
      }
      /**
       * Return `data` as an object in [GeoJSON](https://geojson.org) format.
       */
      geojson() {
        this.headers["Accept"] = "application/geo+json";
        return this;
      }
      /**
       * Return `data` as the EXPLAIN plan for the query.
       *
       * You need to enable the
       * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)
       * setting before using this method.
       *
       * @param options - Named parameters
       *
       * @param options.analyze - If `true`, the query will be executed and the
       * actual run time will be returned
       *
       * @param options.verbose - If `true`, the query identifier will be returned
       * and `data` will include the output columns of the query
       *
       * @param options.settings - If `true`, include information on configuration
       * parameters that affect query planning
       *
       * @param options.buffers - If `true`, include information on buffer usage
       *
       * @param options.wal - If `true`, include information on WAL record generation
       *
       * @param options.format - The format of the output, can be `"text"` (default)
       * or `"json"`
       */
      explain({ analyze = false, verbose = false, settings = false, buffers = false, wal = false, format = "text" } = {}) {
        var _a;
        const options = [
          analyze ? "analyze" : null,
          verbose ? "verbose" : null,
          settings ? "settings" : null,
          buffers ? "buffers" : null,
          wal ? "wal" : null
        ].filter(Boolean).join("|");
        const forMediatype = (_a = this.headers["Accept"]) !== null && _a !== void 0 ? _a : "application/json";
        this.headers["Accept"] = `application/vnd.pgrst.plan+${format}; for="${forMediatype}"; options=${options};`;
        if (format === "json")
          return this;
        else
          return this;
      }
      /**
       * Rollback the query.
       *
       * `data` will still be returned, but the query is not committed.
       */
      rollback() {
        var _a;
        if (((_a = this.headers["Prefer"]) !== null && _a !== void 0 ? _a : "").trim().length > 0) {
          this.headers["Prefer"] += ",tx=rollback";
        } else {
          this.headers["Prefer"] = "tx=rollback";
        }
        return this;
      }
      /**
       * Override the type of the returned `data`.
       *
       * @typeParam NewResult - The new result type to override with
       */
      returns() {
        return this;
      }
    };
    exports.default = PostgrestTransformBuilder2;
  }
});

// node_modules/@supabase/postgrest-js/dist/cjs/PostgrestFilterBuilder.js
var require_PostgrestFilterBuilder = __commonJS({
  "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestFilterBuilder.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostgrestTransformBuilder_1 = __importDefault(require_PostgrestTransformBuilder());
    var PostgrestFilterBuilder2 = class extends PostgrestTransformBuilder_1.default {
      /**
       * Match only rows where `column` is equal to `value`.
       *
       * To check if the value of `column` is NULL, you should use `.is()` instead.
       *
       * @param column - The column to filter on
       * @param value - The value to filter with
       */
      eq(column, value) {
        this.url.searchParams.append(column, `eq.${value}`);
        return this;
      }
      /**
       * Match only rows where `column` is not equal to `value`.
       *
       * @param column - The column to filter on
       * @param value - The value to filter with
       */
      neq(column, value) {
        this.url.searchParams.append(column, `neq.${value}`);
        return this;
      }
      /**
       * Match only rows where `column` is greater than `value`.
       *
       * @param column - The column to filter on
       * @param value - The value to filter with
       */
      gt(column, value) {
        this.url.searchParams.append(column, `gt.${value}`);
        return this;
      }
      /**
       * Match only rows where `column` is greater than or equal to `value`.
       *
       * @param column - The column to filter on
       * @param value - The value to filter with
       */
      gte(column, value) {
        this.url.searchParams.append(column, `gte.${value}`);
        return this;
      }
      /**
       * Match only rows where `column` is less than `value`.
       *
       * @param column - The column to filter on
       * @param value - The value to filter with
       */
      lt(column, value) {
        this.url.searchParams.append(column, `lt.${value}`);
        return this;
      }
      /**
       * Match only rows where `column` is less than or equal to `value`.
       *
       * @param column - The column to filter on
       * @param value - The value to filter with
       */
      lte(column, value) {
        this.url.searchParams.append(column, `lte.${value}`);
        return this;
      }
      /**
       * Match only rows where `column` matches `pattern` case-sensitively.
       *
       * @param column - The column to filter on
       * @param pattern - The pattern to match with
       */
      like(column, pattern) {
        this.url.searchParams.append(column, `like.${pattern}`);
        return this;
      }
      /**
       * Match only rows where `column` matches all of `patterns` case-sensitively.
       *
       * @param column - The column to filter on
       * @param patterns - The patterns to match with
       */
      likeAllOf(column, patterns) {
        this.url.searchParams.append(column, `like(all).{${patterns.join(",")}}`);
        return this;
      }
      /**
       * Match only rows where `column` matches any of `patterns` case-sensitively.
       *
       * @param column - The column to filter on
       * @param patterns - The patterns to match with
       */
      likeAnyOf(column, patterns) {
        this.url.searchParams.append(column, `like(any).{${patterns.join(",")}}`);
        return this;
      }
      /**
       * Match only rows where `column` matches `pattern` case-insensitively.
       *
       * @param column - The column to filter on
       * @param pattern - The pattern to match with
       */
      ilike(column, pattern) {
        this.url.searchParams.append(column, `ilike.${pattern}`);
        return this;
      }
      /**
       * Match only rows where `column` matches all of `patterns` case-insensitively.
       *
       * @param column - The column to filter on
       * @param patterns - The patterns to match with
       */
      ilikeAllOf(column, patterns) {
        this.url.searchParams.append(column, `ilike(all).{${patterns.join(",")}}`);
        return this;
      }
      /**
       * Match only rows where `column` matches any of `patterns` case-insensitively.
       *
       * @param column - The column to filter on
       * @param patterns - The patterns to match with
       */
      ilikeAnyOf(column, patterns) {
        this.url.searchParams.append(column, `ilike(any).{${patterns.join(",")}}`);
        return this;
      }
      /**
       * Match only rows where `column` IS `value`.
       *
       * For non-boolean columns, this is only relevant for checking if the value of
       * `column` is NULL by setting `value` to `null`.
       *
       * For boolean columns, you can also set `value` to `true` or `false` and it
       * will behave the same way as `.eq()`.
       *
       * @param column - The column to filter on
       * @param value - The value to filter with
       */
      is(column, value) {
        this.url.searchParams.append(column, `is.${value}`);
        return this;
      }
      /**
       * Match only rows where `column` is included in the `values` array.
       *
       * @param column - The column to filter on
       * @param values - The values array to filter with
       */
      in(column, values) {
        const cleanedValues = Array.from(new Set(values)).map((s15) => {
          if (typeof s15 === "string" && new RegExp("[,()]").test(s15))
            return `"${s15}"`;
          else
            return `${s15}`;
        }).join(",");
        this.url.searchParams.append(column, `in.(${cleanedValues})`);
        return this;
      }
      /**
       * Only relevant for jsonb, array, and range columns. Match only rows where
       * `column` contains every element appearing in `value`.
       *
       * @param column - The jsonb, array, or range column to filter on
       * @param value - The jsonb, array, or range value to filter with
       */
      contains(column, value) {
        if (typeof value === "string") {
          this.url.searchParams.append(column, `cs.${value}`);
        } else if (Array.isArray(value)) {
          this.url.searchParams.append(column, `cs.{${value.join(",")}}`);
        } else {
          this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`);
        }
        return this;
      }
      /**
       * Only relevant for jsonb, array, and range columns. Match only rows where
       * every element appearing in `column` is contained by `value`.
       *
       * @param column - The jsonb, array, or range column to filter on
       * @param value - The jsonb, array, or range value to filter with
       */
      containedBy(column, value) {
        if (typeof value === "string") {
          this.url.searchParams.append(column, `cd.${value}`);
        } else if (Array.isArray(value)) {
          this.url.searchParams.append(column, `cd.{${value.join(",")}}`);
        } else {
          this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`);
        }
        return this;
      }
      /**
       * Only relevant for range columns. Match only rows where every element in
       * `column` is greater than any element in `range`.
       *
       * @param column - The range column to filter on
       * @param range - The range to filter with
       */
      rangeGt(column, range2) {
        this.url.searchParams.append(column, `sr.${range2}`);
        return this;
      }
      /**
       * Only relevant for range columns. Match only rows where every element in
       * `column` is either contained in `range` or greater than any element in
       * `range`.
       *
       * @param column - The range column to filter on
       * @param range - The range to filter with
       */
      rangeGte(column, range2) {
        this.url.searchParams.append(column, `nxl.${range2}`);
        return this;
      }
      /**
       * Only relevant for range columns. Match only rows where every element in
       * `column` is less than any element in `range`.
       *
       * @param column - The range column to filter on
       * @param range - The range to filter with
       */
      rangeLt(column, range2) {
        this.url.searchParams.append(column, `sl.${range2}`);
        return this;
      }
      /**
       * Only relevant for range columns. Match only rows where every element in
       * `column` is either contained in `range` or less than any element in
       * `range`.
       *
       * @param column - The range column to filter on
       * @param range - The range to filter with
       */
      rangeLte(column, range2) {
        this.url.searchParams.append(column, `nxr.${range2}`);
        return this;
      }
      /**
       * Only relevant for range columns. Match only rows where `column` is
       * mutually exclusive to `range` and there can be no element between the two
       * ranges.
       *
       * @param column - The range column to filter on
       * @param range - The range to filter with
       */
      rangeAdjacent(column, range2) {
        this.url.searchParams.append(column, `adj.${range2}`);
        return this;
      }
      /**
       * Only relevant for array and range columns. Match only rows where
       * `column` and `value` have an element in common.
       *
       * @param column - The array or range column to filter on
       * @param value - The array or range value to filter with
       */
      overlaps(column, value) {
        if (typeof value === "string") {
          this.url.searchParams.append(column, `ov.${value}`);
        } else {
          this.url.searchParams.append(column, `ov.{${value.join(",")}}`);
        }
        return this;
      }
      /**
       * Only relevant for text and tsvector columns. Match only rows where
       * `column` matches the query string in `query`.
       *
       * @param column - The text or tsvector column to filter on
       * @param query - The query text to match with
       * @param options - Named parameters
       * @param options.config - The text search configuration to use
       * @param options.type - Change how the `query` text is interpreted
       */
      textSearch(column, query, { config, type } = {}) {
        let typePart = "";
        if (type === "plain") {
          typePart = "pl";
        } else if (type === "phrase") {
          typePart = "ph";
        } else if (type === "websearch") {
          typePart = "w";
        }
        const configPart = config === void 0 ? "" : `(${config})`;
        this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`);
        return this;
      }
      /**
       * Match only rows where each column in `query` keys is equal to its
       * associated value. Shorthand for multiple `.eq()`s.
       *
       * @param query - The object to filter with, with column names as keys mapped
       * to their filter values
       */
      match(query) {
        Object.entries(query).forEach(([column, value]) => {
          this.url.searchParams.append(column, `eq.${value}`);
        });
        return this;
      }
      /**
       * Match only rows which doesn't satisfy the filter.
       *
       * Unlike most filters, `opearator` and `value` are used as-is and need to
       * follow [PostgREST
       * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
       * to make sure they are properly sanitized.
       *
       * @param column - The column to filter on
       * @param operator - The operator to be negated to filter with, following
       * PostgREST syntax
       * @param value - The value to filter with, following PostgREST syntax
       */
      not(column, operator, value) {
        this.url.searchParams.append(column, `not.${operator}.${value}`);
        return this;
      }
      /**
       * Match only rows which satisfy at least one of the filters.
       *
       * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST
       * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
       * to make sure it's properly sanitized.
       *
       * It's currently not possible to do an `.or()` filter across multiple tables.
       *
       * @param filters - The filters to use, following PostgREST syntax
       * @param options - Named parameters
       * @param options.referencedTable - Set this to filter on referenced tables
       * instead of the parent table
       * @param options.foreignTable - Deprecated, use `referencedTable` instead
       */
      or(filters, { foreignTable, referencedTable = foreignTable } = {}) {
        const key = referencedTable ? `${referencedTable}.or` : "or";
        this.url.searchParams.append(key, `(${filters})`);
        return this;
      }
      /**
       * Match only rows which satisfy the filter. This is an escape hatch - you
       * should use the specific filter methods wherever possible.
       *
       * Unlike most filters, `opearator` and `value` are used as-is and need to
       * follow [PostgREST
       * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
       * to make sure they are properly sanitized.
       *
       * @param column - The column to filter on
       * @param operator - The operator to filter with, following PostgREST syntax
       * @param value - The value to filter with, following PostgREST syntax
       */
      filter(column, operator, value) {
        this.url.searchParams.append(column, `${operator}.${value}`);
        return this;
      }
    };
    exports.default = PostgrestFilterBuilder2;
  }
});

// node_modules/@supabase/postgrest-js/dist/cjs/PostgrestQueryBuilder.js
var require_PostgrestQueryBuilder = __commonJS({
  "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestQueryBuilder.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostgrestFilterBuilder_1 = __importDefault(require_PostgrestFilterBuilder());
    var PostgrestQueryBuilder2 = class {
      constructor(url, { headers = {}, schema, fetch: fetch2 }) {
        this.url = url;
        this.headers = headers;
        this.schema = schema;
        this.fetch = fetch2;
      }
      /**
       * Perform a SELECT query on the table or view.
       *
       * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`
       *
       * @param options - Named parameters
       *
       * @param options.head - When set to `true`, `data` will not be returned.
       * Useful if you only need the count.
       *
       * @param options.count - Count algorithm to use to count rows in the table or view.
       *
       * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
       * hood.
       *
       * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
       * statistics under the hood.
       *
       * `"estimated"`: Uses exact count for low numbers and planned count for high
       * numbers.
       */
      select(columns, { head: head2 = false, count } = {}) {
        const method = head2 ? "HEAD" : "GET";
        let quoted = false;
        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : "*").split("").map((c11) => {
          if (/\s/.test(c11) && !quoted) {
            return "";
          }
          if (c11 === '"') {
            quoted = !quoted;
          }
          return c11;
        }).join("");
        this.url.searchParams.set("select", cleanedColumns);
        if (count) {
          this.headers["Prefer"] = `count=${count}`;
        }
        return new PostgrestFilterBuilder_1.default({
          method,
          url: this.url,
          headers: this.headers,
          schema: this.schema,
          fetch: this.fetch,
          allowEmpty: false
        });
      }
      /**
       * Perform an INSERT into the table or view.
       *
       * By default, inserted rows are not returned. To return it, chain the call
       * with `.select()`.
       *
       * @param values - The values to insert. Pass an object to insert a single row
       * or an array to insert multiple rows.
       *
       * @param options - Named parameters
       *
       * @param options.count - Count algorithm to use to count inserted rows.
       *
       * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
       * hood.
       *
       * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
       * statistics under the hood.
       *
       * `"estimated"`: Uses exact count for low numbers and planned count for high
       * numbers.
       *
       * @param options.defaultToNull - Make missing fields default to `null`.
       * Otherwise, use the default value for the column. Only applies for bulk
       * inserts.
       */
      insert(values, { count, defaultToNull = true } = {}) {
        const method = "POST";
        const prefersHeaders = [];
        if (this.headers["Prefer"]) {
          prefersHeaders.push(this.headers["Prefer"]);
        }
        if (count) {
          prefersHeaders.push(`count=${count}`);
        }
        if (!defaultToNull) {
          prefersHeaders.push("missing=default");
        }
        this.headers["Prefer"] = prefersHeaders.join(",");
        if (Array.isArray(values)) {
          const columns = values.reduce((acc, x3) => acc.concat(Object.keys(x3)), []);
          if (columns.length > 0) {
            const uniqueColumns = [...new Set(columns)].map((column) => `"${column}"`);
            this.url.searchParams.set("columns", uniqueColumns.join(","));
          }
        }
        return new PostgrestFilterBuilder_1.default({
          method,
          url: this.url,
          headers: this.headers,
          schema: this.schema,
          body: values,
          fetch: this.fetch,
          allowEmpty: false
        });
      }
      /**
       * Perform an UPSERT on the table or view. Depending on the column(s) passed
       * to `onConflict`, `.upsert()` allows you to perform the equivalent of
       * `.insert()` if a row with the corresponding `onConflict` columns doesn't
       * exist, or if it does exist, perform an alternative action depending on
       * `ignoreDuplicates`.
       *
       * By default, upserted rows are not returned. To return it, chain the call
       * with `.select()`.
       *
       * @param values - The values to upsert with. Pass an object to upsert a
       * single row or an array to upsert multiple rows.
       *
       * @param options - Named parameters
       *
       * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how
       * duplicate rows are determined. Two rows are duplicates if all the
       * `onConflict` columns are equal.
       *
       * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If
       * `false`, duplicate rows are merged with existing rows.
       *
       * @param options.count - Count algorithm to use to count upserted rows.
       *
       * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
       * hood.
       *
       * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
       * statistics under the hood.
       *
       * `"estimated"`: Uses exact count for low numbers and planned count for high
       * numbers.
       *
       * @param options.defaultToNull - Make missing fields default to `null`.
       * Otherwise, use the default value for the column. This only applies when
       * inserting new rows, not when merging with existing rows under
       * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.
       */
      upsert(values, { onConflict, ignoreDuplicates = false, count, defaultToNull = true } = {}) {
        const method = "POST";
        const prefersHeaders = [`resolution=${ignoreDuplicates ? "ignore" : "merge"}-duplicates`];
        if (onConflict !== void 0)
          this.url.searchParams.set("on_conflict", onConflict);
        if (this.headers["Prefer"]) {
          prefersHeaders.push(this.headers["Prefer"]);
        }
        if (count) {
          prefersHeaders.push(`count=${count}`);
        }
        if (!defaultToNull) {
          prefersHeaders.push("missing=default");
        }
        this.headers["Prefer"] = prefersHeaders.join(",");
        if (Array.isArray(values)) {
          const columns = values.reduce((acc, x3) => acc.concat(Object.keys(x3)), []);
          if (columns.length > 0) {
            const uniqueColumns = [...new Set(columns)].map((column) => `"${column}"`);
            this.url.searchParams.set("columns", uniqueColumns.join(","));
          }
        }
        return new PostgrestFilterBuilder_1.default({
          method,
          url: this.url,
          headers: this.headers,
          schema: this.schema,
          body: values,
          fetch: this.fetch,
          allowEmpty: false
        });
      }
      /**
       * Perform an UPDATE on the table or view.
       *
       * By default, updated rows are not returned. To return it, chain the call
       * with `.select()` after filters.
       *
       * @param values - The values to update with
       *
       * @param options - Named parameters
       *
       * @param options.count - Count algorithm to use to count updated rows.
       *
       * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
       * hood.
       *
       * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
       * statistics under the hood.
       *
       * `"estimated"`: Uses exact count for low numbers and planned count for high
       * numbers.
       */
      update(values, { count } = {}) {
        const method = "PATCH";
        const prefersHeaders = [];
        if (this.headers["Prefer"]) {
          prefersHeaders.push(this.headers["Prefer"]);
        }
        if (count) {
          prefersHeaders.push(`count=${count}`);
        }
        this.headers["Prefer"] = prefersHeaders.join(",");
        return new PostgrestFilterBuilder_1.default({
          method,
          url: this.url,
          headers: this.headers,
          schema: this.schema,
          body: values,
          fetch: this.fetch,
          allowEmpty: false
        });
      }
      /**
       * Perform a DELETE on the table or view.
       *
       * By default, deleted rows are not returned. To return it, chain the call
       * with `.select()` after filters.
       *
       * @param options - Named parameters
       *
       * @param options.count - Count algorithm to use to count deleted rows.
       *
       * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
       * hood.
       *
       * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
       * statistics under the hood.
       *
       * `"estimated"`: Uses exact count for low numbers and planned count for high
       * numbers.
       */
      delete({ count } = {}) {
        const method = "DELETE";
        const prefersHeaders = [];
        if (count) {
          prefersHeaders.push(`count=${count}`);
        }
        if (this.headers["Prefer"]) {
          prefersHeaders.unshift(this.headers["Prefer"]);
        }
        this.headers["Prefer"] = prefersHeaders.join(",");
        return new PostgrestFilterBuilder_1.default({
          method,
          url: this.url,
          headers: this.headers,
          schema: this.schema,
          fetch: this.fetch,
          allowEmpty: false
        });
      }
    };
    exports.default = PostgrestQueryBuilder2;
  }
});

// node_modules/@supabase/postgrest-js/dist/cjs/version.js
var require_version = __commonJS({
  "node_modules/@supabase/postgrest-js/dist/cjs/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "0.0.0-automated";
  }
});

// node_modules/@supabase/postgrest-js/dist/cjs/constants.js
var require_constants = __commonJS({
  "node_modules/@supabase/postgrest-js/dist/cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_HEADERS = void 0;
    var version_1 = require_version();
    exports.DEFAULT_HEADERS = { "X-Client-Info": `postgrest-js/${version_1.version}` };
  }
});

// node_modules/@supabase/postgrest-js/dist/cjs/PostgrestClient.js
var require_PostgrestClient = __commonJS({
  "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestClient.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostgrestQueryBuilder_1 = __importDefault(require_PostgrestQueryBuilder());
    var PostgrestFilterBuilder_1 = __importDefault(require_PostgrestFilterBuilder());
    var constants_1 = require_constants();
    var PostgrestClient2 = class _PostgrestClient {
      // TODO: Add back shouldThrowOnError once we figure out the typings
      /**
       * Creates a PostgREST client.
       *
       * @param url - URL of the PostgREST endpoint
       * @param options - Named parameters
       * @param options.headers - Custom headers
       * @param options.schema - Postgres schema to switch to
       * @param options.fetch - Custom fetch
       */
      constructor(url, { headers = {}, schema, fetch: fetch2 } = {}) {
        this.url = url;
        this.headers = Object.assign(Object.assign({}, constants_1.DEFAULT_HEADERS), headers);
        this.schemaName = schema;
        this.fetch = fetch2;
      }
      /**
       * Perform a query on a table or a view.
       *
       * @param relation - The table or view name to query
       */
      from(relation) {
        const url = new URL(`${this.url}/${relation}`);
        return new PostgrestQueryBuilder_1.default(url, {
          headers: Object.assign({}, this.headers),
          schema: this.schemaName,
          fetch: this.fetch
        });
      }
      /**
       * Select a schema to query or perform an function (rpc) call.
       *
       * The schema needs to be on the list of exposed schemas inside Supabase.
       *
       * @param schema - The schema to query
       */
      schema(schema) {
        return new _PostgrestClient(this.url, {
          headers: this.headers,
          schema,
          fetch: this.fetch
        });
      }
      /**
       * Perform a function call.
       *
       * @param fn - The function name to call
       * @param args - The arguments to pass to the function call
       * @param options - Named parameters
       * @param options.head - When set to `true`, `data` will not be returned.
       * Useful if you only need the count.
       * @param options.get - When set to `true`, the function will be called with
       * read-only access mode.
       * @param options.count - Count algorithm to use to count rows returned by the
       * function. Only applicable for [set-returning
       * functions](https://www.postgresql.org/docs/current/functions-srf.html).
       *
       * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
       * hood.
       *
       * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
       * statistics under the hood.
       *
       * `"estimated"`: Uses exact count for low numbers and planned count for high
       * numbers.
       */
      rpc(fn, args = {}, { head: head2 = false, get: get3 = false, count } = {}) {
        let method;
        const url = new URL(`${this.url}/rpc/${fn}`);
        let body;
        if (head2 || get3) {
          method = head2 ? "HEAD" : "GET";
          Object.entries(args).filter(([_7, value]) => value !== void 0).map(([name, value]) => [name, Array.isArray(value) ? `{${value.join(",")}}` : `${value}`]).forEach(([name, value]) => {
            url.searchParams.append(name, value);
          });
        } else {
          method = "POST";
          body = args;
        }
        const headers = Object.assign({}, this.headers);
        if (count) {
          headers["Prefer"] = `count=${count}`;
        }
        return new PostgrestFilterBuilder_1.default({
          method,
          url,
          headers,
          schema: this.schemaName,
          body,
          fetch: this.fetch,
          allowEmpty: false
        });
      }
    };
    exports.default = PostgrestClient2;
  }
});

// node_modules/@supabase/postgrest-js/dist/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/@supabase/postgrest-js/dist/cjs/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PostgrestError = exports.PostgrestBuilder = exports.PostgrestTransformBuilder = exports.PostgrestFilterBuilder = exports.PostgrestQueryBuilder = exports.PostgrestClient = void 0;
    var PostgrestClient_1 = __importDefault(require_PostgrestClient());
    exports.PostgrestClient = PostgrestClient_1.default;
    var PostgrestQueryBuilder_1 = __importDefault(require_PostgrestQueryBuilder());
    exports.PostgrestQueryBuilder = PostgrestQueryBuilder_1.default;
    var PostgrestFilterBuilder_1 = __importDefault(require_PostgrestFilterBuilder());
    exports.PostgrestFilterBuilder = PostgrestFilterBuilder_1.default;
    var PostgrestTransformBuilder_1 = __importDefault(require_PostgrestTransformBuilder());
    exports.PostgrestTransformBuilder = PostgrestTransformBuilder_1.default;
    var PostgrestBuilder_1 = __importDefault(require_PostgrestBuilder());
    exports.PostgrestBuilder = PostgrestBuilder_1.default;
    var PostgrestError_1 = __importDefault(require_PostgrestError());
    exports.PostgrestError = PostgrestError_1.default;
    exports.default = {
      PostgrestClient: PostgrestClient_1.default,
      PostgrestQueryBuilder: PostgrestQueryBuilder_1.default,
      PostgrestFilterBuilder: PostgrestFilterBuilder_1.default,
      PostgrestTransformBuilder: PostgrestTransformBuilder_1.default,
      PostgrestBuilder: PostgrestBuilder_1.default,
      PostgrestError: PostgrestError_1.default
    };
  }
});

// node_modules/@cosmograph/react/context.js
var import_react = __toESM(require_react(), 1);
var s = (0, import_react.createContext)(null);
function t({ children: n17, nodes: e36, links: t23 }) {
  const [c11, i11] = (0, import_react.useState)();
  return import_react.default.createElement(s.Provider, { value: { cosmograph: c11, nodes: e36, links: t23, initCosmograph: (o22) => {
    i11(o22);
  } } }, n17);
}
function c() {
  const o22 = (0, import_react.useContext)(s);
  return o22 || console.warn("useCosmograph must be used under CosmographProvider"), o22;
}

// node_modules/@cosmograph/react/components/timeline/index.js
var import_react2 = __toESM(require_react(), 1);

// node_modules/@cosmograph/cosmos/dist/index.js
var import_regl = __toESM(require_regl());

// node_modules/gl-matrix/esm/common.js
var EPSILON = 1e-6;
var ARRAY_TYPE = typeof Float32Array !== "undefined" ? Float32Array : Array;
var degree = Math.PI / 180;
if (!Math.hypot) Math.hypot = function() {
  var y3 = 0, i11 = arguments.length;
  while (i11--) {
    y3 += arguments[i11] * arguments[i11];
  }
  return Math.sqrt(y3);
};

// node_modules/gl-matrix/esm/mat3.js
var mat3_exports = {};
__export(mat3_exports, {
  add: () => add,
  adjoint: () => adjoint,
  clone: () => clone,
  copy: () => copy,
  create: () => create,
  determinant: () => determinant,
  equals: () => equals,
  exactEquals: () => exactEquals,
  frob: () => frob,
  fromMat2d: () => fromMat2d,
  fromMat4: () => fromMat4,
  fromQuat: () => fromQuat,
  fromRotation: () => fromRotation,
  fromScaling: () => fromScaling,
  fromTranslation: () => fromTranslation,
  fromValues: () => fromValues,
  identity: () => identity2,
  invert: () => invert,
  mul: () => mul,
  multiply: () => multiply,
  multiplyScalar: () => multiplyScalar,
  multiplyScalarAndAdd: () => multiplyScalarAndAdd,
  normalFromMat4: () => normalFromMat4,
  projection: () => projection,
  rotate: () => rotate,
  scale: () => scale,
  set: () => set,
  str: () => str,
  sub: () => sub,
  subtract: () => subtract,
  translate: () => translate,
  transpose: () => transpose
});
function create() {
  var out = new ARRAY_TYPE(9);
  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
  }
  out[0] = 1;
  out[4] = 1;
  out[8] = 1;
  return out;
}
function fromMat4(out, a13) {
  out[0] = a13[0];
  out[1] = a13[1];
  out[2] = a13[2];
  out[3] = a13[4];
  out[4] = a13[5];
  out[5] = a13[6];
  out[6] = a13[8];
  out[7] = a13[9];
  out[8] = a13[10];
  return out;
}
function clone(a13) {
  var out = new ARRAY_TYPE(9);
  out[0] = a13[0];
  out[1] = a13[1];
  out[2] = a13[2];
  out[3] = a13[3];
  out[4] = a13[4];
  out[5] = a13[5];
  out[6] = a13[6];
  out[7] = a13[7];
  out[8] = a13[8];
  return out;
}
function copy(out, a13) {
  out[0] = a13[0];
  out[1] = a13[1];
  out[2] = a13[2];
  out[3] = a13[3];
  out[4] = a13[4];
  out[5] = a13[5];
  out[6] = a13[6];
  out[7] = a13[7];
  out[8] = a13[8];
  return out;
}
function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  var out = new ARRAY_TYPE(9);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
function identity2(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
function transpose(out, a13) {
  if (out === a13) {
    var a01 = a13[1], a02 = a13[2], a122 = a13[5];
    out[1] = a13[3];
    out[2] = a13[6];
    out[3] = a01;
    out[5] = a13[7];
    out[6] = a02;
    out[7] = a122;
  } else {
    out[0] = a13[0];
    out[1] = a13[3];
    out[2] = a13[6];
    out[3] = a13[1];
    out[4] = a13[4];
    out[5] = a13[7];
    out[6] = a13[2];
    out[7] = a13[5];
    out[8] = a13[8];
  }
  return out;
}
function invert(out, a13) {
  var a00 = a13[0], a01 = a13[1], a02 = a13[2];
  var a102 = a13[3], a112 = a13[4], a122 = a13[5];
  var a20 = a13[6], a21 = a13[7], a22 = a13[8];
  var b01 = a22 * a112 - a122 * a21;
  var b11 = -a22 * a102 + a122 * a20;
  var b21 = a21 * a102 - a112 * a20;
  var det = a00 * b01 + a01 * b11 + a02 * b21;
  if (!det) {
    return null;
  }
  det = 1 / det;
  out[0] = b01 * det;
  out[1] = (-a22 * a01 + a02 * a21) * det;
  out[2] = (a122 * a01 - a02 * a112) * det;
  out[3] = b11 * det;
  out[4] = (a22 * a00 - a02 * a20) * det;
  out[5] = (-a122 * a00 + a02 * a102) * det;
  out[6] = b21 * det;
  out[7] = (-a21 * a00 + a01 * a20) * det;
  out[8] = (a112 * a00 - a01 * a102) * det;
  return out;
}
function adjoint(out, a13) {
  var a00 = a13[0], a01 = a13[1], a02 = a13[2];
  var a102 = a13[3], a112 = a13[4], a122 = a13[5];
  var a20 = a13[6], a21 = a13[7], a22 = a13[8];
  out[0] = a112 * a22 - a122 * a21;
  out[1] = a02 * a21 - a01 * a22;
  out[2] = a01 * a122 - a02 * a112;
  out[3] = a122 * a20 - a102 * a22;
  out[4] = a00 * a22 - a02 * a20;
  out[5] = a02 * a102 - a00 * a122;
  out[6] = a102 * a21 - a112 * a20;
  out[7] = a01 * a20 - a00 * a21;
  out[8] = a00 * a112 - a01 * a102;
  return out;
}
function determinant(a13) {
  var a00 = a13[0], a01 = a13[1], a02 = a13[2];
  var a102 = a13[3], a112 = a13[4], a122 = a13[5];
  var a20 = a13[6], a21 = a13[7], a22 = a13[8];
  return a00 * (a22 * a112 - a122 * a21) + a01 * (-a22 * a102 + a122 * a20) + a02 * (a21 * a102 - a112 * a20);
}
function multiply(out, a13, b5) {
  var a00 = a13[0], a01 = a13[1], a02 = a13[2];
  var a102 = a13[3], a112 = a13[4], a122 = a13[5];
  var a20 = a13[6], a21 = a13[7], a22 = a13[8];
  var b00 = b5[0], b01 = b5[1], b02 = b5[2];
  var b10 = b5[3], b11 = b5[4], b12 = b5[5];
  var b20 = b5[6], b21 = b5[7], b22 = b5[8];
  out[0] = b00 * a00 + b01 * a102 + b02 * a20;
  out[1] = b00 * a01 + b01 * a112 + b02 * a21;
  out[2] = b00 * a02 + b01 * a122 + b02 * a22;
  out[3] = b10 * a00 + b11 * a102 + b12 * a20;
  out[4] = b10 * a01 + b11 * a112 + b12 * a21;
  out[5] = b10 * a02 + b11 * a122 + b12 * a22;
  out[6] = b20 * a00 + b21 * a102 + b22 * a20;
  out[7] = b20 * a01 + b21 * a112 + b22 * a21;
  out[8] = b20 * a02 + b21 * a122 + b22 * a22;
  return out;
}
function translate(out, a13, v3) {
  var a00 = a13[0], a01 = a13[1], a02 = a13[2], a102 = a13[3], a112 = a13[4], a122 = a13[5], a20 = a13[6], a21 = a13[7], a22 = a13[8], x3 = v3[0], y3 = v3[1];
  out[0] = a00;
  out[1] = a01;
  out[2] = a02;
  out[3] = a102;
  out[4] = a112;
  out[5] = a122;
  out[6] = x3 * a00 + y3 * a102 + a20;
  out[7] = x3 * a01 + y3 * a112 + a21;
  out[8] = x3 * a02 + y3 * a122 + a22;
  return out;
}
function rotate(out, a13, rad) {
  var a00 = a13[0], a01 = a13[1], a02 = a13[2], a102 = a13[3], a112 = a13[4], a122 = a13[5], a20 = a13[6], a21 = a13[7], a22 = a13[8], s15 = Math.sin(rad), c11 = Math.cos(rad);
  out[0] = c11 * a00 + s15 * a102;
  out[1] = c11 * a01 + s15 * a112;
  out[2] = c11 * a02 + s15 * a122;
  out[3] = c11 * a102 - s15 * a00;
  out[4] = c11 * a112 - s15 * a01;
  out[5] = c11 * a122 - s15 * a02;
  out[6] = a20;
  out[7] = a21;
  out[8] = a22;
  return out;
}
function scale(out, a13, v3) {
  var x3 = v3[0], y3 = v3[1];
  out[0] = x3 * a13[0];
  out[1] = x3 * a13[1];
  out[2] = x3 * a13[2];
  out[3] = y3 * a13[3];
  out[4] = y3 * a13[4];
  out[5] = y3 * a13[5];
  out[6] = a13[6];
  out[7] = a13[7];
  out[8] = a13[8];
  return out;
}
function fromTranslation(out, v3) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = v3[0];
  out[7] = v3[1];
  out[8] = 1;
  return out;
}
function fromRotation(out, rad) {
  var s15 = Math.sin(rad), c11 = Math.cos(rad);
  out[0] = c11;
  out[1] = s15;
  out[2] = 0;
  out[3] = -s15;
  out[4] = c11;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
function fromScaling(out, v3) {
  out[0] = v3[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = v3[1];
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
function fromMat2d(out, a13) {
  out[0] = a13[0];
  out[1] = a13[1];
  out[2] = 0;
  out[3] = a13[2];
  out[4] = a13[3];
  out[5] = 0;
  out[6] = a13[4];
  out[7] = a13[5];
  out[8] = 1;
  return out;
}
function fromQuat(out, q6) {
  var x3 = q6[0], y3 = q6[1], z5 = q6[2], w3 = q6[3];
  var x22 = x3 + x3;
  var y22 = y3 + y3;
  var z22 = z5 + z5;
  var xx = x3 * x22;
  var yx = y3 * x22;
  var yy = y3 * y22;
  var zx = z5 * x22;
  var zy = z5 * y22;
  var zz = z5 * z22;
  var wx = w3 * x22;
  var wy = w3 * y22;
  var wz = w3 * z22;
  out[0] = 1 - yy - zz;
  out[3] = yx - wz;
  out[6] = zx + wy;
  out[1] = yx + wz;
  out[4] = 1 - xx - zz;
  out[7] = zy - wx;
  out[2] = zx - wy;
  out[5] = zy + wx;
  out[8] = 1 - xx - yy;
  return out;
}
function normalFromMat4(out, a13) {
  var a00 = a13[0], a01 = a13[1], a02 = a13[2], a03 = a13[3];
  var a102 = a13[4], a112 = a13[5], a122 = a13[6], a132 = a13[7];
  var a20 = a13[8], a21 = a13[9], a22 = a13[10], a23 = a13[11];
  var a30 = a13[12], a31 = a13[13], a32 = a13[14], a33 = a13[15];
  var b00 = a00 * a112 - a01 * a102;
  var b01 = a00 * a122 - a02 * a102;
  var b02 = a00 * a132 - a03 * a102;
  var b03 = a01 * a122 - a02 * a112;
  var b04 = a01 * a132 - a03 * a112;
  var b05 = a02 * a132 - a03 * a122;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32;
  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
  if (!det) {
    return null;
  }
  det = 1 / det;
  out[0] = (a112 * b11 - a122 * b10 + a132 * b09) * det;
  out[1] = (a122 * b08 - a102 * b11 - a132 * b07) * det;
  out[2] = (a102 * b10 - a112 * b08 + a132 * b06) * det;
  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  return out;
}
function projection(out, width, height) {
  out[0] = 2 / width;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = -2 / height;
  out[5] = 0;
  out[6] = -1;
  out[7] = 1;
  out[8] = 1;
  return out;
}
function str(a13) {
  return "mat3(" + a13[0] + ", " + a13[1] + ", " + a13[2] + ", " + a13[3] + ", " + a13[4] + ", " + a13[5] + ", " + a13[6] + ", " + a13[7] + ", " + a13[8] + ")";
}
function frob(a13) {
  return Math.hypot(a13[0], a13[1], a13[2], a13[3], a13[4], a13[5], a13[6], a13[7], a13[8]);
}
function add(out, a13, b5) {
  out[0] = a13[0] + b5[0];
  out[1] = a13[1] + b5[1];
  out[2] = a13[2] + b5[2];
  out[3] = a13[3] + b5[3];
  out[4] = a13[4] + b5[4];
  out[5] = a13[5] + b5[5];
  out[6] = a13[6] + b5[6];
  out[7] = a13[7] + b5[7];
  out[8] = a13[8] + b5[8];
  return out;
}
function subtract(out, a13, b5) {
  out[0] = a13[0] - b5[0];
  out[1] = a13[1] - b5[1];
  out[2] = a13[2] - b5[2];
  out[3] = a13[3] - b5[3];
  out[4] = a13[4] - b5[4];
  out[5] = a13[5] - b5[5];
  out[6] = a13[6] - b5[6];
  out[7] = a13[7] - b5[7];
  out[8] = a13[8] - b5[8];
  return out;
}
function multiplyScalar(out, a13, b5) {
  out[0] = a13[0] * b5;
  out[1] = a13[1] * b5;
  out[2] = a13[2] * b5;
  out[3] = a13[3] * b5;
  out[4] = a13[4] * b5;
  out[5] = a13[5] * b5;
  out[6] = a13[6] * b5;
  out[7] = a13[7] * b5;
  out[8] = a13[8] * b5;
  return out;
}
function multiplyScalarAndAdd(out, a13, b5, scale3) {
  out[0] = a13[0] + b5[0] * scale3;
  out[1] = a13[1] + b5[1] * scale3;
  out[2] = a13[2] + b5[2] * scale3;
  out[3] = a13[3] + b5[3] * scale3;
  out[4] = a13[4] + b5[4] * scale3;
  out[5] = a13[5] + b5[5] * scale3;
  out[6] = a13[6] + b5[6] * scale3;
  out[7] = a13[7] + b5[7] * scale3;
  out[8] = a13[8] + b5[8] * scale3;
  return out;
}
function exactEquals(a13, b5) {
  return a13[0] === b5[0] && a13[1] === b5[1] && a13[2] === b5[2] && a13[3] === b5[3] && a13[4] === b5[4] && a13[5] === b5[5] && a13[6] === b5[6] && a13[7] === b5[7] && a13[8] === b5[8];
}
function equals(a13, b5) {
  var a0 = a13[0], a1 = a13[1], a22 = a13[2], a32 = a13[3], a42 = a13[4], a52 = a13[5], a62 = a13[6], a72 = a13[7], a82 = a13[8];
  var b0 = b5[0], b1 = b5[1], b22 = b5[2], b32 = b5[3], b42 = b5[4], b52 = b5[5], b6 = b5[6], b7 = b5[7], b8 = b5[8];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a22 - b22) <= EPSILON * Math.max(1, Math.abs(a22), Math.abs(b22)) && Math.abs(a32 - b32) <= EPSILON * Math.max(1, Math.abs(a32), Math.abs(b32)) && Math.abs(a42 - b42) <= EPSILON * Math.max(1, Math.abs(a42), Math.abs(b42)) && Math.abs(a52 - b52) <= EPSILON * Math.max(1, Math.abs(a52), Math.abs(b52)) && Math.abs(a62 - b6) <= EPSILON * Math.max(1, Math.abs(a62), Math.abs(b6)) && Math.abs(a72 - b7) <= EPSILON * Math.max(1, Math.abs(a72), Math.abs(b7)) && Math.abs(a82 - b8) <= EPSILON * Math.max(1, Math.abs(a82), Math.abs(b8));
}
var mul = multiply;
var sub = subtract;

// node_modules/gl-matrix/esm/vec3.js
function create2() {
  var out = new ARRAY_TYPE(3);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }
  return out;
}
function length(a13) {
  var x3 = a13[0];
  var y3 = a13[1];
  var z5 = a13[2];
  return Math.hypot(x3, y3, z5);
}
function fromValues2(x3, y3, z5) {
  var out = new ARRAY_TYPE(3);
  out[0] = x3;
  out[1] = y3;
  out[2] = z5;
  return out;
}
function normalize(out, a13) {
  var x3 = a13[0];
  var y3 = a13[1];
  var z5 = a13[2];
  var len2 = x3 * x3 + y3 * y3 + z5 * z5;
  if (len2 > 0) {
    len2 = 1 / Math.sqrt(len2);
  }
  out[0] = a13[0] * len2;
  out[1] = a13[1] * len2;
  out[2] = a13[2] * len2;
  return out;
}
function dot(a13, b5) {
  return a13[0] * b5[0] + a13[1] * b5[1] + a13[2] * b5[2];
}
function cross(out, a13, b5) {
  var ax = a13[0], ay = a13[1], az = a13[2];
  var bx = b5[0], by = b5[1], bz = b5[2];
  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}
var len = length;
var forEach = function() {
  var vec = create2();
  return function(a13, stride, offset, count, fn, arg) {
    var i11, l6;
    if (!stride) {
      stride = 3;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l6 = Math.min(count * stride + offset, a13.length);
    } else {
      l6 = a13.length;
    }
    for (i11 = offset; i11 < l6; i11 += stride) {
      vec[0] = a13[i11];
      vec[1] = a13[i11 + 1];
      vec[2] = a13[i11 + 2];
      fn(vec, vec, arg);
      a13[i11] = vec[0];
      a13[i11 + 1] = vec[1];
      a13[i11 + 2] = vec[2];
    }
    return a13;
  };
}();

// node_modules/gl-matrix/esm/vec4.js
function create3() {
  var out = new ARRAY_TYPE(4);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
  }
  return out;
}
function normalize2(out, a13) {
  var x3 = a13[0];
  var y3 = a13[1];
  var z5 = a13[2];
  var w3 = a13[3];
  var len2 = x3 * x3 + y3 * y3 + z5 * z5 + w3 * w3;
  if (len2 > 0) {
    len2 = 1 / Math.sqrt(len2);
  }
  out[0] = x3 * len2;
  out[1] = y3 * len2;
  out[2] = z5 * len2;
  out[3] = w3 * len2;
  return out;
}
var forEach2 = function() {
  var vec = create3();
  return function(a13, stride, offset, count, fn, arg) {
    var i11, l6;
    if (!stride) {
      stride = 4;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l6 = Math.min(count * stride + offset, a13.length);
    } else {
      l6 = a13.length;
    }
    for (i11 = offset; i11 < l6; i11 += stride) {
      vec[0] = a13[i11];
      vec[1] = a13[i11 + 1];
      vec[2] = a13[i11 + 2];
      vec[3] = a13[i11 + 3];
      fn(vec, vec, arg);
      a13[i11] = vec[0];
      a13[i11 + 1] = vec[1];
      a13[i11 + 2] = vec[2];
      a13[i11 + 3] = vec[3];
    }
    return a13;
  };
}();

// node_modules/gl-matrix/esm/quat.js
function create4() {
  var out = new ARRAY_TYPE(4);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }
  out[3] = 1;
  return out;
}
function setAxisAngle(out, axis, rad) {
  rad = rad * 0.5;
  var s15 = Math.sin(rad);
  out[0] = s15 * axis[0];
  out[1] = s15 * axis[1];
  out[2] = s15 * axis[2];
  out[3] = Math.cos(rad);
  return out;
}
function slerp(out, a13, b5, t23) {
  var ax = a13[0], ay = a13[1], az = a13[2], aw = a13[3];
  var bx = b5[0], by = b5[1], bz = b5[2], bw = b5[3];
  var omega, cosom, sinom, scale0, scale1;
  cosom = ax * bx + ay * by + az * bz + aw * bw;
  if (cosom < 0) {
    cosom = -cosom;
    bx = -bx;
    by = -by;
    bz = -bz;
    bw = -bw;
  }
  if (1 - cosom > EPSILON) {
    omega = Math.acos(cosom);
    sinom = Math.sin(omega);
    scale0 = Math.sin((1 - t23) * omega) / sinom;
    scale1 = Math.sin(t23 * omega) / sinom;
  } else {
    scale0 = 1 - t23;
    scale1 = t23;
  }
  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;
  return out;
}
function fromMat3(out, m6) {
  var fTrace = m6[0] + m6[4] + m6[8];
  var fRoot;
  if (fTrace > 0) {
    fRoot = Math.sqrt(fTrace + 1);
    out[3] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[0] = (m6[5] - m6[7]) * fRoot;
    out[1] = (m6[6] - m6[2]) * fRoot;
    out[2] = (m6[1] - m6[3]) * fRoot;
  } else {
    var i11 = 0;
    if (m6[4] > m6[0]) i11 = 1;
    if (m6[8] > m6[i11 * 3 + i11]) i11 = 2;
    var j6 = (i11 + 1) % 3;
    var k5 = (i11 + 2) % 3;
    fRoot = Math.sqrt(m6[i11 * 3 + i11] - m6[j6 * 3 + j6] - m6[k5 * 3 + k5] + 1);
    out[i11] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m6[j6 * 3 + k5] - m6[k5 * 3 + j6]) * fRoot;
    out[j6] = (m6[j6 * 3 + i11] + m6[i11 * 3 + j6]) * fRoot;
    out[k5] = (m6[k5 * 3 + i11] + m6[i11 * 3 + k5]) * fRoot;
  }
  return out;
}
var normalize3 = normalize2;
var rotationTo = function() {
  var tmpvec3 = create2();
  var xUnitVec3 = fromValues2(1, 0, 0);
  var yUnitVec3 = fromValues2(0, 1, 0);
  return function(out, a13, b5) {
    var dot4 = dot(a13, b5);
    if (dot4 < -0.999999) {
      cross(tmpvec3, xUnitVec3, a13);
      if (len(tmpvec3) < 1e-6) cross(tmpvec3, yUnitVec3, a13);
      normalize(tmpvec3, tmpvec3);
      setAxisAngle(out, tmpvec3, Math.PI);
      return out;
    } else if (dot4 > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    } else {
      cross(tmpvec3, a13, b5);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot4;
      return normalize3(out, out);
    }
  };
}();
var sqlerp = function() {
  var temp1 = create4();
  var temp2 = create4();
  return function(out, a13, b5, c11, d13, t23) {
    slerp(temp1, a13, d13, t23);
    slerp(temp2, b5, c11, t23);
    slerp(out, temp1, temp2, 2 * t23 * (1 - t23));
    return out;
  };
}();
var setAxes = function() {
  var matr = create();
  return function(out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];
    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];
    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];
    return normalize3(out, fromMat3(out, matr));
  };
}();

// node_modules/gl-matrix/esm/vec2.js
function create5() {
  var out = new ARRAY_TYPE(2);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
  }
  return out;
}
var forEach3 = function() {
  var vec = create5();
  return function(a13, stride, offset, count, fn, arg) {
    var i11, l6;
    if (!stride) {
      stride = 2;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l6 = Math.min(count * stride + offset, a13.length);
    } else {
      l6 = a13.length;
    }
    for (i11 = offset; i11 < l6; i11 += stride) {
      vec[0] = a13[i11];
      vec[1] = a13[i11 + 1];
      fn(vec, vec, arg);
      a13[i11] = vec[0];
      a13[i11 + 1] = vec[1];
    }
    return a13;
  };
}();

// node_modules/random/dist/random.module.js
var import_seedrandom = __toESM(require_seedrandom2());
function _defineProperties(target, props) {
  for (var i11 = 0; i11 < props.length; i11++) {
    var descriptor = props[i11];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o22, p5) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o23, p6) {
    o23.__proto__ = p6;
    return o23;
  };
  return _setPrototypeOf(o22, p5);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
var RNG = function() {
  function RNG2() {
  }
  var _proto = RNG2.prototype;
  _proto._seed = function _seed(seed, _opts) {
    if (seed === (seed || 0)) {
      return seed;
    } else {
      var strSeed = "" + seed;
      var s15 = 0;
      for (var k5 = 0; k5 < strSeed.length; ++k5) {
        s15 ^= strSeed.charCodeAt(k5) | 0;
      }
      return s15;
    }
  };
  return RNG2;
}();
var RNGFunction = function(_RNG) {
  _inheritsLoose(RNGFunction2, _RNG);
  function RNGFunction2(thunk, opts) {
    var _this;
    _this = _RNG.call(this) || this;
    _this._rng = void 0;
    _this.seed(thunk, opts);
    return _this;
  }
  var _proto = RNGFunction2.prototype;
  _proto.next = function next() {
    return this._rng();
  };
  _proto.seed = function seed(thunk, _opts) {
    this._rng = thunk;
  };
  _proto.clone = function clone3(_7, opts) {
    return new RNGFunction2(this._rng, opts);
  };
  _createClass(RNGFunction2, [{
    key: "name",
    get: function get3() {
      return "function";
    }
  }]);
  return RNGFunction2;
}(RNG);
var RNGFactory = function() {
  var args = [].slice.call(arguments);
  var _args = args, _args$ = _args[0], arg0 = _args$ === void 0 ? "default" : _args$;
  switch (typeof arg0) {
    case "object":
      if (arg0 instanceof RNG) {
        return arg0;
      }
      break;
    case "function":
      return new RNGFunction(arg0);
    case "number":
    case "string":
    default:
      return new RNGFunction(import_seedrandom.default.apply(void 0, args));
  }
  throw new Error('invalid RNG "' + arg0 + '"');
};
var uniform = function(random2, min, max) {
  if (min === void 0) {
    min = 0;
  }
  if (max === void 0) {
    max = 1;
  }
  return function() {
    return random2.next() * (max - min) + min;
  };
};
function numberValidator(num) {
  return new NumberValidator(num);
}
var NumberValidator = function NumberValidator2(num) {
  var _this = this;
  this.n = void 0;
  this.isInt = function() {
    if (Number.isInteger(_this.n)) {
      return _this;
    }
    throw new Error("Expected number to be an integer, got " + _this.n);
  };
  this.isPositive = function() {
    if (_this.n > 0) {
      return _this;
    }
    throw new Error("Expected number to be positive, got " + _this.n);
  };
  this.lessThan = function(v3) {
    if (_this.n < v3) {
      return _this;
    }
    throw new Error("Expected number to be less than " + v3 + ", got " + _this.n);
  };
  this.greaterThanOrEqual = function(v3) {
    if (_this.n >= v3) {
      return _this;
    }
    throw new Error("Expected number to be greater than or equal to " + v3 + ", got " + _this.n);
  };
  this.greaterThan = function(v3) {
    if (_this.n > v3) {
      return _this;
    }
    throw new Error("Expected number to be greater than " + v3 + ", got " + _this.n);
  };
  this.n = num;
};
var uniformInt = function(random2, min, max) {
  if (min === void 0) {
    min = 0;
  }
  if (max === void 0) {
    max = 1;
  }
  if (max === void 0) {
    max = min === void 0 ? 1 : min;
    min = 0;
  }
  numberValidator(min).isInt();
  numberValidator(max).isInt();
  return function() {
    return Math.floor(random2.next() * (max - min + 1) + min);
  };
};
var uniformBoolean = function(random2) {
  return function() {
    return random2.next() >= 0.5;
  };
};
var normal = function(random2, mu, sigma) {
  if (mu === void 0) {
    mu = 0;
  }
  if (sigma === void 0) {
    sigma = 1;
  }
  return function() {
    var x3, y3, r14;
    do {
      x3 = random2.next() * 2 - 1;
      y3 = random2.next() * 2 - 1;
      r14 = x3 * x3 + y3 * y3;
    } while (!r14 || r14 > 1);
    return mu + sigma * y3 * Math.sqrt(-2 * Math.log(r14) / r14);
  };
};
var logNormal = function(random2, mu, sigma) {
  if (mu === void 0) {
    mu = 0;
  }
  if (sigma === void 0) {
    sigma = 1;
  }
  var normal2 = random2.normal(mu, sigma);
  return function() {
    return Math.exp(normal2());
  };
};
var bernoulli = function(random2, p5) {
  if (p5 === void 0) {
    p5 = 0.5;
  }
  numberValidator(p5).greaterThanOrEqual(0).lessThan(1);
  return function() {
    return Math.floor(random2.next() + p5);
  };
};
var binomial = function(random2, n17, p5) {
  if (n17 === void 0) {
    n17 = 1;
  }
  if (p5 === void 0) {
    p5 = 0.5;
  }
  numberValidator(n17).isInt().isPositive();
  numberValidator(p5).greaterThanOrEqual(0).lessThan(1);
  return function() {
    var i11 = 0;
    var x3 = 0;
    while (i11++ < n17) {
      if (random2.next() < p5) {
        x3++;
      }
    }
    return x3;
  };
};
var geometric = function(random2, p5) {
  if (p5 === void 0) {
    p5 = 0.5;
  }
  numberValidator(p5).greaterThan(0).lessThan(1);
  var invLogP = 1 / Math.log(1 - p5);
  return function() {
    return Math.floor(1 + Math.log(random2.next()) * invLogP);
  };
};
var logFactorialTable = [0, 0, 0.6931471805599453, 1.791759469228055, 3.1780538303479458, 4.787491742782046, 6.579251212010101, 8.525161361065415, 10.60460290274525, 12.801827480081469];
var logFactorial = function logFactorial2(k5) {
  return logFactorialTable[k5];
};
var logSqrt2PI = 0.9189385332046727;
var poisson = function(random2, lambda) {
  if (lambda === void 0) {
    lambda = 1;
  }
  numberValidator(lambda).isPositive();
  if (lambda < 10) {
    var expMean = Math.exp(-lambda);
    return function() {
      var p5 = expMean;
      var x3 = 0;
      var u8 = random2.next();
      while (u8 > p5) {
        u8 = u8 - p5;
        p5 = lambda * p5 / ++x3;
      }
      return x3;
    };
  } else {
    var smu = Math.sqrt(lambda);
    var b5 = 0.931 + 2.53 * smu;
    var a13 = -0.059 + 0.02483 * b5;
    var invAlpha = 1.1239 + 1.1328 / (b5 - 3.4);
    var vR = 0.9277 - 3.6224 / (b5 - 2);
    return function() {
      while (true) {
        var u8 = void 0;
        var v3 = random2.next();
        if (v3 <= 0.86 * vR) {
          u8 = v3 / vR - 0.43;
          return Math.floor((2 * a13 / (0.5 - Math.abs(u8)) + b5) * u8 + lambda + 0.445);
        }
        if (v3 >= vR) {
          u8 = random2.next() - 0.5;
        } else {
          u8 = v3 / vR - 0.93;
          u8 = (u8 < 0 ? -0.5 : 0.5) - u8;
          v3 = random2.next() * vR;
        }
        var us = 0.5 - Math.abs(u8);
        if (us < 0.013 && v3 > us) {
          continue;
        }
        var k5 = Math.floor((2 * a13 / us + b5) * u8 + lambda + 0.445);
        v3 = v3 * invAlpha / (a13 / (us * us) + b5);
        if (k5 >= 10) {
          var t23 = (k5 + 0.5) * Math.log(lambda / k5) - lambda - logSqrt2PI + k5 - (1 / 12 - (1 / 360 - 1 / (1260 * k5 * k5)) / (k5 * k5)) / k5;
          if (Math.log(v3 * smu) <= t23) {
            return k5;
          }
        } else if (k5 >= 0) {
          var _logFactorial;
          var f6 = (_logFactorial = logFactorial(k5)) != null ? _logFactorial : 0;
          if (Math.log(v3) <= k5 * Math.log(lambda) - lambda - f6) {
            return k5;
          }
        }
      }
    };
  }
};
var exponential = function(random2, lambda) {
  if (lambda === void 0) {
    lambda = 1;
  }
  numberValidator(lambda).isPositive();
  return function() {
    return -Math.log(1 - random2.next()) / lambda;
  };
};
var irwinHall = function(random2, n17) {
  if (n17 === void 0) {
    n17 = 1;
  }
  numberValidator(n17).isInt().greaterThanOrEqual(0);
  return function() {
    var sum = 0;
    for (var i11 = 0; i11 < n17; ++i11) {
      sum += random2.next();
    }
    return sum;
  };
};
var bates = function(random2, n17) {
  if (n17 === void 0) {
    n17 = 1;
  }
  numberValidator(n17).isInt().isPositive();
  var irwinHall2 = random2.irwinHall(n17);
  return function() {
    return irwinHall2() / n17;
  };
};
var pareto = function(random2, alpha) {
  if (alpha === void 0) {
    alpha = 1;
  }
  numberValidator(alpha).greaterThanOrEqual(0);
  var invAlpha = 1 / alpha;
  return function() {
    return 1 / Math.pow(1 - random2.next(), invAlpha);
  };
};
var RNGMathRandom = function(_RNG) {
  _inheritsLoose(RNGMathRandom2, _RNG);
  function RNGMathRandom2() {
    return _RNG.apply(this, arguments) || this;
  }
  var _proto = RNGMathRandom2.prototype;
  _proto.next = function next() {
    return Math.random();
  };
  _proto.seed = function seed(_seed, _opts) {
  };
  _proto.clone = function clone3() {
    return new RNGMathRandom2();
  };
  _createClass(RNGMathRandom2, [{
    key: "name",
    get: function get3() {
      return "default";
    }
  }]);
  return RNGMathRandom2;
}(RNG);
var Random = function() {
  function Random2(rng) {
    var _this = this;
    this._rng = void 0;
    this._patch = void 0;
    this._cache = {};
    this.next = function() {
      return _this._rng.next();
    };
    this["float"] = function(min, max) {
      return _this.uniform(min, max)();
    };
    this["int"] = function(min, max) {
      return _this.uniformInt(min, max)();
    };
    this.integer = function(min, max) {
      return _this.uniformInt(min, max)();
    };
    this.bool = function() {
      return _this.uniformBoolean()();
    };
    this["boolean"] = function() {
      return _this.uniformBoolean()();
    };
    this.uniform = function(min, max) {
      return _this._memoize("uniform", uniform, min, max);
    };
    this.uniformInt = function(min, max) {
      return _this._memoize("uniformInt", uniformInt, min, max);
    };
    this.uniformBoolean = function() {
      return _this._memoize("uniformBoolean", uniformBoolean);
    };
    this.normal = function(mu, sigma) {
      return normal(_this, mu, sigma);
    };
    this.logNormal = function(mu, sigma) {
      return logNormal(_this, mu, sigma);
    };
    this.bernoulli = function(p5) {
      return bernoulli(_this, p5);
    };
    this.binomial = function(n17, p5) {
      return binomial(_this, n17, p5);
    };
    this.geometric = function(p5) {
      return geometric(_this, p5);
    };
    this.poisson = function(lambda) {
      return poisson(_this, lambda);
    };
    this.exponential = function(lambda) {
      return exponential(_this, lambda);
    };
    this.irwinHall = function(n17) {
      return irwinHall(_this, n17);
    };
    this.bates = function(n17) {
      return bates(_this, n17);
    };
    this.pareto = function(alpha) {
      return pareto(_this, alpha);
    };
    if (rng && rng instanceof RNG) {
      this.use(rng);
    } else {
      this.use(new RNGMathRandom());
    }
    this._cache = {};
  }
  var _proto = Random2.prototype;
  _proto.clone = function clone3() {
    var args = [].slice.call(arguments);
    if (args.length) {
      return new Random2(RNGFactory.apply(void 0, args));
    } else {
      return new Random2(this.rng.clone());
    }
  };
  _proto.use = function use() {
    this._rng = RNGFactory.apply(void 0, [].slice.call(arguments));
  };
  _proto.patch = function patch() {
    if (this._patch) {
      throw new Error("Math.random already patched");
    }
    this._patch = Math.random;
    Math.random = this.uniform();
  };
  _proto.unpatch = function unpatch() {
    if (this._patch) {
      Math.random = this._patch;
      delete this._patch;
    }
  };
  _proto.choice = function choice(array) {
    if (!Array.isArray(array)) {
      throw new Error("Random.choice expected input to be an array, got " + typeof array);
    }
    var length4 = array == null ? void 0 : array.length;
    if (length4 > 0) {
      var index2 = this.uniformInt(0, length4 - 1)();
      return array[index2];
    } else {
      return void 0;
    }
  };
  _proto._memoize = function _memoize(label2, getter) {
    var args = [].slice.call(arguments, 2);
    var key = "" + args.join(";");
    var value = this._cache[label2];
    if (value === void 0 || value.key !== key) {
      value = {
        key,
        distribution: getter.apply(void 0, [this].concat(args))
      };
      this._cache[label2] = value;
    }
    return value.distribution;
  };
  _createClass(Random2, [{
    key: "rng",
    get: function get3() {
      return this._rng;
    }
  }]);
  return Random2;
}();
var random = new Random();

// node_modules/@cosmograph/cosmos/dist/index.js
var defaultNodeColor = "#b3b3b3";
var defaultGreyoutNodeOpacity = 0.1;
var defaultNodeSize = 4;
var defaultLinkColor = "#666666";
var defaultGreyoutLinkOpacity = 0.1;
var defaultLinkWidth = 1;
var defaultBackgroundColor = "#222222";
var defaultConfigValues = {
  disableSimulation: false,
  spaceSize: 4096,
  nodeSizeScale: 1,
  linkWidthScale: 1,
  arrowSizeScale: 1,
  renderLinks: true,
  curvedLinks: false,
  curvedLinkSegments: 19,
  curvedLinkWeight: 0.8,
  curvedLinkControlPointDistance: 0.5,
  arrowLinks: true,
  linkVisibilityDistanceRange: [50, 150],
  linkVisibilityMinTransparency: 0.25,
  hoveredNodeRingColor: "white",
  focusedNodeRingColor: "white",
  useQuadtree: false,
  simulation: {
    decay: 1e3,
    gravity: 0,
    center: 0,
    repulsion: 0.1,
    repulsionTheta: 1.7,
    repulsionQuadtreeLevels: 12,
    linkSpring: 1,
    linkDistance: 2,
    linkDistRandomVariationRange: [1, 1.2],
    repulsionFromMouse: 2,
    friction: 0.85
  },
  showFPSMonitor: false,
  pixelRatio: 2,
  scaleNodesOnZoom: true,
  disableZoom: false,
  fitViewOnInit: true,
  fitViewDelay: 250,
  nodeSamplingDistance: 150
};
var hoveredNodeRingOpacity = 0.7;
var focusedNodeRingOpacity = 0.95;
var defaultScaleToZoom = 3;
var isFunction = (a13) => typeof a13 === "function";
var isArray = (a13) => Array.isArray(a13);
var isObject = (a13) => a13 instanceof Object;
var isAClassInstance = (a13) => {
  if (a13 instanceof Object) {
    return a13.constructor.name !== "Function" && a13.constructor.name !== "Object";
  } else
    return false;
};
var isPlainObject = (a13) => isObject(a13) && !isArray(a13) && !isFunction(a13) && !isAClassInstance(a13);
function getValue(d13, accessor, index2) {
  if (isFunction(accessor))
    return accessor(d13, index2);
  else
    return accessor;
}
function getRgbaColor(value) {
  var _a;
  let rgba;
  if (isArray(value)) {
    rgba = value;
  } else {
    const color$1 = color(value);
    const rgb = color$1 === null || color$1 === void 0 ? void 0 : color$1.rgb();
    rgba = [(rgb === null || rgb === void 0 ? void 0 : rgb.r) || 0, (rgb === null || rgb === void 0 ? void 0 : rgb.g) || 0, (rgb === null || rgb === void 0 ? void 0 : rgb.b) || 0, (_a = color$1 === null || color$1 === void 0 ? void 0 : color$1.opacity) !== null && _a !== void 0 ? _a : 1];
  }
  return [
    rgba[0] / 255,
    rgba[1] / 255,
    rgba[2] / 255,
    rgba[3]
  ];
}
function readPixels(reglInstance, fbo) {
  let resultPixels = new Float32Array();
  reglInstance({ framebuffer: fbo })(() => {
    resultPixels = reglInstance.read();
  });
  return resultPixels;
}
function clamp(num, min, max) {
  return Math.min(Math.max(num, min), max);
}
var GraphConfig = class {
  constructor() {
    this.disableSimulation = defaultConfigValues.disableSimulation;
    this.backgroundColor = defaultBackgroundColor;
    this.spaceSize = defaultConfigValues.spaceSize;
    this.nodeColor = defaultNodeColor;
    this.nodeGreyoutOpacity = defaultGreyoutNodeOpacity;
    this.nodeSize = defaultNodeSize;
    this.nodeSizeScale = defaultConfigValues.nodeSizeScale;
    this.renderHighlightedNodeRing = true;
    this.highlightedNodeRingColor = void 0;
    this.renderHoveredNodeRing = true;
    this.hoveredNodeRingColor = defaultConfigValues.hoveredNodeRingColor;
    this.focusedNodeRingColor = defaultConfigValues.focusedNodeRingColor;
    this.linkColor = defaultLinkColor;
    this.linkGreyoutOpacity = defaultGreyoutLinkOpacity;
    this.linkWidth = defaultLinkWidth;
    this.linkWidthScale = defaultConfigValues.linkWidthScale;
    this.renderLinks = defaultConfigValues.renderLinks;
    this.curvedLinks = defaultConfigValues.curvedLinks;
    this.curvedLinkSegments = defaultConfigValues.curvedLinkSegments;
    this.curvedLinkWeight = defaultConfigValues.curvedLinkWeight;
    this.curvedLinkControlPointDistance = defaultConfigValues.curvedLinkControlPointDistance;
    this.linkArrows = defaultConfigValues.arrowLinks;
    this.linkArrowsSizeScale = defaultConfigValues.arrowSizeScale;
    this.linkVisibilityDistanceRange = defaultConfigValues.linkVisibilityDistanceRange;
    this.linkVisibilityMinTransparency = defaultConfigValues.linkVisibilityMinTransparency;
    this.useQuadtree = defaultConfigValues.useQuadtree;
    this.simulation = {
      decay: defaultConfigValues.simulation.decay,
      gravity: defaultConfigValues.simulation.gravity,
      center: defaultConfigValues.simulation.center,
      repulsion: defaultConfigValues.simulation.repulsion,
      repulsionTheta: defaultConfigValues.simulation.repulsionTheta,
      repulsionQuadtreeLevels: defaultConfigValues.simulation.repulsionQuadtreeLevels,
      linkSpring: defaultConfigValues.simulation.linkSpring,
      linkDistance: defaultConfigValues.simulation.linkDistance,
      linkDistRandomVariationRange: defaultConfigValues.simulation.linkDistRandomVariationRange,
      repulsionFromMouse: defaultConfigValues.simulation.repulsionFromMouse,
      friction: defaultConfigValues.simulation.friction,
      onStart: void 0,
      onTick: void 0,
      onEnd: void 0,
      onPause: void 0,
      onRestart: void 0
    };
    this.events = {
      onClick: void 0,
      onMouseMove: void 0,
      onNodeMouseOver: void 0,
      onNodeMouseOut: void 0,
      onZoomStart: void 0,
      onZoom: void 0,
      onZoomEnd: void 0
    };
    this.showFPSMonitor = defaultConfigValues.showFPSMonitor;
    this.pixelRatio = defaultConfigValues.pixelRatio;
    this.scaleNodesOnZoom = defaultConfigValues.scaleNodesOnZoom;
    this.initialZoomLevel = void 0;
    this.disableZoom = defaultConfigValues.disableZoom;
    this.fitViewOnInit = defaultConfigValues.fitViewOnInit;
    this.fitViewDelay = defaultConfigValues.fitViewDelay;
    this.fitViewByNodesInRect = void 0;
    this.randomSeed = void 0;
    this.nodeSamplingDistance = defaultConfigValues.nodeSamplingDistance;
  }
  init(config) {
    Object.keys(config).forEach((configParameter) => {
      this.deepMergeConfig(this.getConfig(), config, configParameter);
    });
  }
  deepMergeConfig(current, next, key) {
    if (isPlainObject(current[key]) && isPlainObject(next[key])) {
      Object.keys(next[key]).forEach((configParameter) => {
        this.deepMergeConfig(current[key], next[key], configParameter);
      });
    } else
      current[key] = next[key];
  }
  getConfig() {
    return this;
  }
};
var CoreModule = class {
  constructor(reglInstance, config, store, data, points) {
    this.reglInstance = reglInstance;
    this.config = config;
    this.store = store;
    this.data = data;
    if (points)
      this.points = points;
  }
};
var calculateCentermassFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nvarying vec4 rgba;void main(){gl_FragColor=rgba;}";
var calculateCentermassVert = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform float pointsTextureSize;attribute vec2 indexes;varying vec4 rgba;void main(){vec4 pointPosition=texture2D(position,indexes/pointsTextureSize);rgba=vec4(pointPosition.xy,1.0,0.0);gl_Position=vec4(0.0,0.0,0.0,1.0);gl_PointSize=1.0;}";
var forceFrag$5 = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform sampler2D centermass;uniform float center;uniform float alpha;varying vec2 index;void main(){vec4 pointPosition=texture2D(position,index);vec4 velocity=vec4(0.0);vec4 centermassValues=texture2D(centermass,vec2(0.0));vec2 centermassPosition=centermassValues.xy/centermassValues.b;vec2 distVector=centermassPosition-pointPosition.xy;float dist=sqrt(dot(distVector,distVector));if(dist>0.0){float angle=atan(distVector.y,distVector.x);float addV=alpha*center*dist*0.01;velocity.rg+=addV*vec2(cos(angle),sin(angle));}gl_FragColor=velocity;}";
function createQuadBuffer(reglInstance) {
  const quadBuffer = reglInstance.buffer(new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]));
  return {
    buffer: quadBuffer,
    size: 2
  };
}
function createIndexesBuffer(reglInstance, textureSize) {
  const indexes = new Float32Array(textureSize * textureSize * 2);
  for (let y3 = 0; y3 < textureSize; y3++) {
    for (let x3 = 0; x3 < textureSize; x3++) {
      const i11 = y3 * textureSize * 2 + x3 * 2;
      indexes[i11 + 0] = x3;
      indexes[i11 + 1] = y3;
    }
  }
  const indexBuffer = reglInstance.buffer(indexes);
  return {
    buffer: indexBuffer,
    size: 2
  };
}
function destroyFramebuffer(fbo) {
  var _a;
  if (!fbo)
    return;
  if ((_a = fbo === null || fbo === void 0 ? void 0 : fbo._framebuffer) === null || _a === void 0 ? void 0 : _a.framebuffer) {
    fbo.destroy();
  }
}
function destroyBuffer(fbo) {
  var _a;
  if (!fbo)
    return;
  if ((_a = fbo === null || fbo === void 0 ? void 0 : fbo._buffer) === null || _a === void 0 ? void 0 : _a.buffer) {
    fbo.destroy();
  }
}
var clearFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nvarying vec2 index;void main(){gl_FragColor=vec4(0.0);}";
var updateVert = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nattribute vec2 quad;varying vec2 index;void main(){index=(quad+1.0)/2.0;gl_Position=vec4(quad,0,1);}";
var ForceCenter = class extends CoreModule {
  create() {
    const { reglInstance } = this;
    this.centermassFbo = reglInstance.framebuffer({
      color: reglInstance.texture({
        data: new Float32Array(4).fill(0),
        shape: [1, 1, 4],
        type: "float"
      }),
      depth: false,
      stencil: false
    });
  }
  initPrograms() {
    const { reglInstance, config, store, data, points } = this;
    this.clearCentermassCommand = reglInstance({
      frag: clearFrag,
      vert: updateVert,
      framebuffer: this.centermassFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) }
    });
    this.calculateCentermassCommand = reglInstance({
      frag: calculateCentermassFrag,
      vert: calculateCentermassVert,
      framebuffer: () => this.centermassFbo,
      primitive: "points",
      count: () => data.nodes.length,
      attributes: { indexes: createIndexesBuffer(reglInstance, store.pointsTextureSize) },
      uniforms: {
        position: () => points === null || points === void 0 ? void 0 : points.previousPositionFbo,
        pointsTextureSize: () => store.pointsTextureSize
      },
      blend: {
        enable: true,
        func: {
          src: "one",
          dst: "one"
        },
        equation: {
          rgb: "add",
          alpha: "add"
        }
      },
      depth: { enable: false, mask: false },
      stencil: { enable: false }
    });
    this.runCommand = reglInstance({
      frag: forceFrag$5,
      vert: updateVert,
      framebuffer: () => points === null || points === void 0 ? void 0 : points.velocityFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) },
      uniforms: {
        position: () => points === null || points === void 0 ? void 0 : points.previousPositionFbo,
        centermass: () => this.centermassFbo,
        center: () => {
          var _a;
          return (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.center;
        },
        alpha: () => store.alpha
      }
    });
  }
  run() {
    var _a, _b, _c;
    (_a = this.clearCentermassCommand) === null || _a === void 0 ? void 0 : _a.call(this);
    (_b = this.calculateCentermassCommand) === null || _b === void 0 ? void 0 : _b.call(this);
    (_c = this.runCommand) === null || _c === void 0 ? void 0 : _c.call(this);
  }
  destroy() {
    destroyFramebuffer(this.centermassFbo);
  }
};
var forceFrag$4 = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform float gravity;uniform float spaceSize;uniform float alpha;varying vec2 index;void main(){vec4 pointPosition=texture2D(position,index);vec4 velocity=vec4(0.0);vec2 centerPosition=vec2(spaceSize/2.0);vec2 distVector=centerPosition-pointPosition.rg;float dist=sqrt(dot(distVector,distVector));if(dist>0.0){float angle=atan(distVector.y,distVector.x);float addV=alpha*gravity*dist*0.1;velocity.rg+=addV*vec2(cos(angle),sin(angle));}gl_FragColor=velocity;}";
var ForceGravity = class extends CoreModule {
  initPrograms() {
    const { reglInstance, config, store, points } = this;
    this.runCommand = reglInstance({
      frag: forceFrag$4,
      vert: updateVert,
      framebuffer: () => points === null || points === void 0 ? void 0 : points.velocityFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) },
      uniforms: {
        position: () => points === null || points === void 0 ? void 0 : points.previousPositionFbo,
        gravity: () => {
          var _a;
          return (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.gravity;
        },
        spaceSize: () => store.adjustedSpaceSize,
        alpha: () => store.alpha
      }
    });
  }
  run() {
    var _a;
    (_a = this.runCommand) === null || _a === void 0 ? void 0 : _a.call(this);
  }
};
function forceFrag$3(maxLinks) {
  return `
#ifdef GL_ES
precision highp float;
#endif

uniform sampler2D position;
uniform float linkSpring;
uniform float linkDistance;
uniform vec2 linkDistRandomVariationRange;

uniform sampler2D linkFirstIndicesAndAmount;
uniform sampler2D linkIndices;
uniform sampler2D linkBiasAndStrength;
uniform sampler2D linkRandomDistanceFbo;

uniform float pointsTextureSize;
uniform float linksTextureSize;
uniform float alpha;

varying vec2 index;

const float MAX_LINKS = ${maxLinks}.0;

void main() {
  vec4 pointPosition = texture2D(position, index);
  vec4 velocity = vec4(0.0);

  vec4 linkFirstIJAndAmount = texture2D(linkFirstIndicesAndAmount, index);
  float iCount = linkFirstIJAndAmount.r;
  float jCount = linkFirstIJAndAmount.g;
  float linkAmount = linkFirstIJAndAmount.b;
  if (linkAmount > 0.0) {
    for (float i = 0.0; i < MAX_LINKS; i += 1.0) {
      if (i < linkAmount) {
        if (iCount >= linksTextureSize) {
          iCount = 0.0;
          jCount += 1.0;
        }
        vec2 linkTextureIndex = (vec2(iCount, jCount) + 0.5) / linksTextureSize;
        vec4 connectedPointIndex = texture2D(linkIndices, linkTextureIndex);
        vec4 biasAndStrength = texture2D(linkBiasAndStrength, linkTextureIndex);
        vec4 randomMinDistance = texture2D(linkRandomDistanceFbo, linkTextureIndex);
        float bias = biasAndStrength.r;
        float strength = biasAndStrength.g;
        float randomMinLinkDist = randomMinDistance.r * (linkDistRandomVariationRange.g - linkDistRandomVariationRange.r) + linkDistRandomVariationRange.r;
        randomMinLinkDist *= linkDistance;

        iCount += 1.0;

        vec4 connectedPointPosition = texture2D(position, (connectedPointIndex.rg + 0.5) / pointsTextureSize);
        float x = connectedPointPosition.x - (pointPosition.x + velocity.x);
        float y = connectedPointPosition.y - (pointPosition.y + velocity.y);
        float l = sqrt(x * x + y * y);
        l = max(l, randomMinLinkDist * 0.99);
        l = (l - randomMinLinkDist) / l;
        l *= linkSpring * alpha;
        l *= strength;
        l *= bias;
        x *= l;
        y *= l;
        velocity.x += x;
        velocity.y += y;
      }
    }
  }

  gl_FragColor = vec4(velocity.rg, 0.0, 0.0);
}
  `;
}
var LinkDirection;
(function(LinkDirection2) {
  LinkDirection2["OUTGOING"] = "outgoing";
  LinkDirection2["INCOMING"] = "incoming";
})(LinkDirection || (LinkDirection = {}));
var ForceLink = class extends CoreModule {
  constructor() {
    super(...arguments);
    this.linkFirstIndicesAndAmount = new Float32Array();
    this.indices = new Float32Array();
    this.maxPointDegree = 0;
  }
  create(direction) {
    const { reglInstance, store: { pointsTextureSize, linksTextureSize }, data } = this;
    if (!pointsTextureSize || !linksTextureSize)
      return;
    this.linkFirstIndicesAndAmount = new Float32Array(pointsTextureSize * pointsTextureSize * 4);
    this.indices = new Float32Array(linksTextureSize * linksTextureSize * 4);
    const linkBiasAndStrengthState = new Float32Array(linksTextureSize * linksTextureSize * 4);
    const linkDistanceState = new Float32Array(linksTextureSize * linksTextureSize * 4);
    const grouped = direction === LinkDirection.INCOMING ? data.groupedSourceToTargetLinks : data.groupedTargetToSourceLinks;
    this.maxPointDegree = 0;
    let linkIndex = 0;
    grouped.forEach((connectedNodeIndices, nodeIndex) => {
      this.linkFirstIndicesAndAmount[nodeIndex * 4 + 0] = linkIndex % linksTextureSize;
      this.linkFirstIndicesAndAmount[nodeIndex * 4 + 1] = Math.floor(linkIndex / linksTextureSize);
      this.linkFirstIndicesAndAmount[nodeIndex * 4 + 2] = connectedNodeIndices.size;
      connectedNodeIndices.forEach((connectedNodeIndex) => {
        var _a, _b;
        this.indices[linkIndex * 4 + 0] = connectedNodeIndex % pointsTextureSize;
        this.indices[linkIndex * 4 + 1] = Math.floor(connectedNodeIndex / pointsTextureSize);
        const degree2 = (_a = data.degree[data.getInputIndexBySortedIndex(connectedNodeIndex)]) !== null && _a !== void 0 ? _a : 0;
        const connectedDegree = (_b = data.degree[data.getInputIndexBySortedIndex(nodeIndex)]) !== null && _b !== void 0 ? _b : 0;
        const bias = degree2 / (degree2 + connectedDegree);
        let strength = 1 / Math.min(degree2, connectedDegree);
        strength = Math.sqrt(strength);
        linkBiasAndStrengthState[linkIndex * 4 + 0] = bias;
        linkBiasAndStrengthState[linkIndex * 4 + 1] = strength;
        linkDistanceState[linkIndex * 4] = this.store.getRandomFloat(0, 1);
        linkIndex += 1;
      });
      this.maxPointDegree = Math.max(this.maxPointDegree, connectedNodeIndices.size);
    });
    this.linkFirstIndicesAndAmountFbo = reglInstance.framebuffer({
      color: reglInstance.texture({
        data: this.linkFirstIndicesAndAmount,
        shape: [pointsTextureSize, pointsTextureSize, 4],
        type: "float"
      }),
      depth: false,
      stencil: false
    });
    this.indicesFbo = reglInstance.framebuffer({
      color: reglInstance.texture({
        data: this.indices,
        shape: [linksTextureSize, linksTextureSize, 4],
        type: "float"
      }),
      depth: false,
      stencil: false
    });
    this.biasAndStrengthFbo = reglInstance.framebuffer({
      color: reglInstance.texture({
        data: linkBiasAndStrengthState,
        shape: [linksTextureSize, linksTextureSize, 4],
        type: "float"
      }),
      depth: false,
      stencil: false
    });
    this.randomDistanceFbo = reglInstance.framebuffer({
      color: reglInstance.texture({
        data: linkDistanceState,
        shape: [linksTextureSize, linksTextureSize, 4],
        type: "float"
      }),
      depth: false,
      stencil: false
    });
  }
  initPrograms() {
    const { reglInstance, config, store, points } = this;
    this.runCommand = reglInstance({
      frag: () => forceFrag$3(this.maxPointDegree),
      vert: updateVert,
      framebuffer: () => points === null || points === void 0 ? void 0 : points.velocityFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) },
      uniforms: {
        position: () => points === null || points === void 0 ? void 0 : points.previousPositionFbo,
        linkSpring: () => {
          var _a;
          return (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.linkSpring;
        },
        linkDistance: () => {
          var _a;
          return (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.linkDistance;
        },
        linkDistRandomVariationRange: () => {
          var _a;
          return (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.linkDistRandomVariationRange;
        },
        linkFirstIndicesAndAmount: () => this.linkFirstIndicesAndAmountFbo,
        linkIndices: () => this.indicesFbo,
        linkBiasAndStrength: () => this.biasAndStrengthFbo,
        linkRandomDistanceFbo: () => this.randomDistanceFbo,
        pointsTextureSize: () => store.pointsTextureSize,
        linksTextureSize: () => store.linksTextureSize,
        alpha: () => store.alpha
      }
    });
  }
  run() {
    var _a;
    (_a = this.runCommand) === null || _a === void 0 ? void 0 : _a.call(this);
  }
  destroy() {
    destroyFramebuffer(this.linkFirstIndicesAndAmountFbo);
    destroyFramebuffer(this.indicesFbo);
    destroyFramebuffer(this.biasAndStrengthFbo);
    destroyFramebuffer(this.randomDistanceFbo);
  }
};
var calculateLevelFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nvarying vec4 rgba;void main(){gl_FragColor=rgba;}";
var calculateLevelVert = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform float pointsTextureSize;uniform float levelTextureSize;uniform float cellSize;attribute vec2 indexes;varying vec4 rgba;void main(){vec4 pointPosition=texture2D(position,indexes/pointsTextureSize);rgba=vec4(pointPosition.rg,1.0,0.0);float n=floor(pointPosition.x/cellSize);float m=floor(pointPosition.y/cellSize);vec2 levelPosition=2.0*(vec2(n,m)+0.5)/levelTextureSize-1.0;gl_Position=vec4(levelPosition,0.0,1.0);gl_PointSize=1.0;}";
var forceFrag$2 = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform sampler2D levelFbo;uniform float level;uniform float levels;uniform float levelTextureSize;uniform float repulsion;uniform float alpha;uniform float spaceSize;uniform float theta;varying vec2 index;const float MAX_LEVELS_NUM=14.0;vec2 calcAdd(vec2 ij,vec2 pp){vec2 add=vec2(0.0);vec4 centermass=texture2D(levelFbo,ij);if(centermass.r>0.0&&centermass.g>0.0&&centermass.b>0.0){vec2 centermassPosition=vec2(centermass.rg/centermass.b);vec2 distVector=pp-centermassPosition;float l=dot(distVector,distVector);float dist=sqrt(l);if(l>0.0){float angle=atan(distVector.y,distVector.x);float c=alpha*repulsion*centermass.b;float distanceMin2=1.0;if(l<distanceMin2)l=sqrt(distanceMin2*l);float addV=c/sqrt(l);add=addV*vec2(cos(angle),sin(angle));}}return add;}void main(){vec4 pointPosition=texture2D(position,index);float x=pointPosition.x;float y=pointPosition.y;float left=0.0;float top=0.0;float right=spaceSize;float bottom=spaceSize;float n_left=0.0;float n_top=0.0;float n_right=0.0;float n_bottom=0.0;float cellSize=0.0;for(float i=0.0;i<MAX_LEVELS_NUM;i+=1.0){if(i<=level){left+=cellSize*n_left;top+=cellSize*n_top;right-=cellSize*n_right;bottom-=cellSize*n_bottom;cellSize=pow(2.0,levels-i-1.0);float dist_left=x-left;n_left=max(0.0,floor(dist_left/cellSize-theta));float dist_top=y-top;n_top=max(0.0,floor(dist_top/cellSize-theta));float dist_right=right-x;n_right=max(0.0,floor(dist_right/cellSize-theta));float dist_bottom=bottom-y;n_bottom=max(0.0,floor(dist_bottom/cellSize-theta));}}vec4 velocity=vec4(vec2(0.0),1.0,0.0);for(float i=0.0;i<12.0;i+=1.0){for(float j=0.0;j<4.0;j+=1.0){float n=left+cellSize*j;float m=top+cellSize*n_top+cellSize*i;if(n<(left+n_left*cellSize)&&m<bottom){velocity.xy+=calcAdd(vec2(n/cellSize,m/cellSize)/levelTextureSize,pointPosition.xy);}n=left+cellSize*i;m=top+cellSize*j;if(n<(right-n_right*cellSize)&&m<(top+n_top*cellSize)){velocity.xy+=calcAdd(vec2(n/cellSize,m/cellSize)/levelTextureSize,pointPosition.xy);}n=right-n_right*cellSize+cellSize*j;m=top+cellSize*i;if(n<right&&m<(bottom-n_bottom*cellSize)){velocity.xy+=calcAdd(vec2(n/cellSize,m/cellSize)/levelTextureSize,pointPosition.xy);}n=left+n_left*cellSize+cellSize*i;m=bottom-n_bottom*cellSize+cellSize*j;if(n<right&&m<bottom){velocity.xy+=calcAdd(vec2(n/cellSize,m/cellSize)/levelTextureSize,pointPosition.xy);}}}gl_FragColor=velocity;}";
var forceCenterFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform sampler2D levelFbo;uniform sampler2D randomValues;uniform float levelTextureSize;uniform float repulsion;uniform float alpha;varying vec2 index;vec2 calcAdd(vec2 ij,vec2 pp){vec2 add=vec2(0.0);vec4 centermass=texture2D(levelFbo,ij);if(centermass.r>0.0&&centermass.g>0.0&&centermass.b>0.0){vec2 centermassPosition=vec2(centermass.rg/centermass.b);vec2 distVector=pp-centermassPosition;float l=dot(distVector,distVector);float dist=sqrt(l);if(l>0.0){float angle=atan(distVector.y,distVector.x);float c=alpha*repulsion*centermass.b;float distanceMin2=1.0;if(l<distanceMin2)l=sqrt(distanceMin2*l);float addV=c/sqrt(l);add=addV*vec2(cos(angle),sin(angle));}}return add;}void main(){vec4 pointPosition=texture2D(position,index);vec4 random=texture2D(randomValues,index);vec4 velocity=vec4(0.0);velocity.xy+=calcAdd(pointPosition.xy/levelTextureSize,pointPosition.xy);velocity.xy+=velocity.xy*random.rg;gl_FragColor=velocity;}";
var ForceManyBody = class extends CoreModule {
  constructor() {
    super(...arguments);
    this.levelsFbos = /* @__PURE__ */ new Map();
    this.quadtreeLevels = 0;
  }
  create() {
    const { reglInstance, store } = this;
    if (!store.pointsTextureSize)
      return;
    this.quadtreeLevels = Math.log2(store.adjustedSpaceSize);
    for (let i11 = 0; i11 < this.quadtreeLevels; i11 += 1) {
      const levelTextureSize = Math.pow(2, i11 + 1);
      this.levelsFbos.set(`level[${i11}]`, reglInstance.framebuffer({
        shape: [levelTextureSize, levelTextureSize],
        colorType: "float",
        depth: false,
        stencil: false
      }));
    }
    const randomValuesState = new Float32Array(store.pointsTextureSize * store.pointsTextureSize * 4);
    for (let i11 = 0; i11 < store.pointsTextureSize * store.pointsTextureSize; ++i11) {
      randomValuesState[i11 * 4] = store.getRandomFloat(-1, 1) * 1e-5;
      randomValuesState[i11 * 4 + 1] = store.getRandomFloat(-1, 1) * 1e-5;
    }
    this.randomValuesFbo = reglInstance.framebuffer({
      color: reglInstance.texture({
        data: randomValuesState,
        shape: [store.pointsTextureSize, store.pointsTextureSize, 4],
        type: "float"
      }),
      depth: false,
      stencil: false
    });
  }
  initPrograms() {
    const { reglInstance, config, store, data, points } = this;
    this.clearLevelsCommand = reglInstance({
      frag: clearFrag,
      vert: updateVert,
      framebuffer: (_7, props) => props.levelFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) }
    });
    this.calculateLevelsCommand = reglInstance({
      frag: calculateLevelFrag,
      vert: calculateLevelVert,
      framebuffer: (_7, props) => props.levelFbo,
      primitive: "points",
      count: () => data.nodes.length,
      attributes: { indexes: createIndexesBuffer(reglInstance, store.pointsTextureSize) },
      uniforms: {
        position: () => points === null || points === void 0 ? void 0 : points.previousPositionFbo,
        pointsTextureSize: () => store.pointsTextureSize,
        levelTextureSize: (_7, props) => props.levelTextureSize,
        cellSize: (_7, props) => props.cellSize
      },
      blend: {
        enable: true,
        func: {
          src: "one",
          dst: "one"
        },
        equation: {
          rgb: "add",
          alpha: "add"
        }
      },
      depth: { enable: false, mask: false },
      stencil: { enable: false }
    });
    this.forceCommand = reglInstance({
      frag: forceFrag$2,
      vert: updateVert,
      framebuffer: () => points === null || points === void 0 ? void 0 : points.velocityFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) },
      uniforms: {
        position: () => points === null || points === void 0 ? void 0 : points.previousPositionFbo,
        level: (_7, props) => props.level,
        levels: this.quadtreeLevels,
        levelFbo: (_7, props) => props.levelFbo,
        levelTextureSize: (_7, props) => props.levelTextureSize,
        alpha: () => store.alpha,
        repulsion: () => {
          var _a;
          return (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.repulsion;
        },
        spaceSize: () => store.adjustedSpaceSize,
        theta: () => {
          var _a;
          return (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.repulsionTheta;
        }
      },
      blend: {
        enable: true,
        func: {
          src: "one",
          dst: "one"
        },
        equation: {
          rgb: "add",
          alpha: "add"
        }
      },
      depth: { enable: false, mask: false },
      stencil: { enable: false }
    });
    this.forceFromItsOwnCentermassCommand = reglInstance({
      frag: forceCenterFrag,
      vert: updateVert,
      framebuffer: () => points === null || points === void 0 ? void 0 : points.velocityFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) },
      uniforms: {
        position: () => points === null || points === void 0 ? void 0 : points.previousPositionFbo,
        randomValues: () => this.randomValuesFbo,
        levelFbo: (_7, props) => props.levelFbo,
        levelTextureSize: (_7, props) => props.levelTextureSize,
        alpha: () => store.alpha,
        repulsion: () => {
          var _a;
          return (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.repulsion;
        },
        spaceSize: () => store.adjustedSpaceSize
      },
      blend: {
        enable: true,
        func: {
          src: "one",
          dst: "one"
        },
        equation: {
          rgb: "add",
          alpha: "add"
        }
      },
      depth: { enable: false, mask: false },
      stencil: { enable: false }
    });
    this.clearVelocityCommand = reglInstance({
      frag: clearFrag,
      vert: updateVert,
      framebuffer: () => points === null || points === void 0 ? void 0 : points.velocityFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) }
    });
  }
  run() {
    var _a, _b, _c, _d, _e2;
    const { store } = this;
    for (let i11 = 0; i11 < this.quadtreeLevels; i11 += 1) {
      (_a = this.clearLevelsCommand) === null || _a === void 0 ? void 0 : _a.call(this, { levelFbo: this.levelsFbos.get(`level[${i11}]`) });
      const levelTextureSize = Math.pow(2, i11 + 1);
      const cellSize = store.adjustedSpaceSize / levelTextureSize;
      (_b = this.calculateLevelsCommand) === null || _b === void 0 ? void 0 : _b.call(this, {
        levelFbo: this.levelsFbos.get(`level[${i11}]`),
        levelTextureSize,
        cellSize
      });
    }
    (_c = this.clearVelocityCommand) === null || _c === void 0 ? void 0 : _c.call(this);
    for (let i11 = 0; i11 < this.quadtreeLevels; i11 += 1) {
      const levelTextureSize = Math.pow(2, i11 + 1);
      (_d = this.forceCommand) === null || _d === void 0 ? void 0 : _d.call(this, {
        levelFbo: this.levelsFbos.get(`level[${i11}]`),
        levelTextureSize,
        level: i11
      });
      if (i11 === this.quadtreeLevels - 1) {
        (_e2 = this.forceFromItsOwnCentermassCommand) === null || _e2 === void 0 ? void 0 : _e2.call(this, {
          levelFbo: this.levelsFbos.get(`level[${i11}]`),
          levelTextureSize,
          level: i11
        });
      }
    }
  }
  destroy() {
    destroyFramebuffer(this.randomValuesFbo);
    this.levelsFbos.forEach((fbo) => {
      destroyFramebuffer(fbo);
    });
    this.levelsFbos.clear();
  }
};
function forceFrag$1(startLevel, maxLevels) {
  startLevel = Math.min(startLevel, maxLevels);
  const delta = maxLevels - startLevel;
  const calcAdd = `
    float dist = sqrt(l);
    if (dist > 0.0) {
      float c = alpha * repulsion * centermass.b;
      addVelocity += calcAdd(vec2(x, y), l, c);
      addVelocity += addVelocity * random.rg;
    }
  `;
  function quad(level) {
    if (level >= maxLevels) {
      return calcAdd;
    } else {
      const groupSize = Math.pow(2, level + 1);
      const iEnding = new Array(level + 1 - delta).fill(0).map((_7, l6) => `pow(2.0, ${level - (l6 + delta)}.0) * i${l6 + delta}`).join("+");
      const jEnding = new Array(level + 1 - delta).fill(0).map((_7, l6) => `pow(2.0, ${level - (l6 + delta)}.0) * j${l6 + delta}`).join("+");
      return `
      for (float ij${level} = 0.0; ij${level} < 4.0; ij${level} += 1.0) {
        float i${level} = 0.0;
        float j${level} = 0.0;
        if (ij${level} == 1.0 || ij${level} == 3.0) i${level} = 1.0;
        if (ij${level} == 2.0 || ij${level} == 3.0) j${level} = 1.0;
        float i = pow(2.0, ${startLevel}.0) * n / width${level + 1} + ${iEnding};
        float j = pow(2.0, ${startLevel}.0) * m / width${level + 1} + ${jEnding};
        float groupPosX = (i + 0.5) / ${groupSize}.0;
        float groupPosY = (j + 0.5) / ${groupSize}.0;
        
        vec4 centermass = texture2D(level[${level}], vec2(groupPosX, groupPosY));
        if (centermass.r > 0.0 && centermass.g > 0.0 && centermass.b > 0.0) {
          float x = centermass.r / centermass.b - pointPosition.r;
          float y = centermass.g / centermass.b - pointPosition.g;
          float l = x * x + y * y;
          if ((width${level + 1} * width${level + 1}) / theta < l) {
            ${calcAdd}
          } else {
            ${quad(level + 1)}
          }
        }
      }
      `;
    }
  }
  return `
#ifdef GL_ES
precision highp float;
#endif

uniform sampler2D position;
uniform sampler2D randomValues;
uniform float spaceSize;
uniform float repulsion;
uniform float theta;
uniform float alpha;
uniform sampler2D level[${maxLevels}];
varying vec2 index;

vec2 calcAdd(vec2 xy, float l, float c) {
  float distanceMin2 = 1.0;
  if (l < distanceMin2) l = sqrt(distanceMin2 * l);
  float add = c / l;
  return add * xy;
}

void main() {
  vec4 pointPosition = texture2D(position, index);
  vec4 random = texture2D(randomValues, index);

  float width0 = spaceSize;

  vec2 velocity = vec2(0.0);
  vec2 addVelocity = vec2(0.0);

  ${new Array(maxLevels).fill(0).map((_7, i11) => `float width${i11 + 1} = width${i11} / 2.0;`).join("\n")}

  for (float n = 0.0; n < pow(2.0, ${delta}.0); n += 1.0) {
    for (float m = 0.0; m < pow(2.0, ${delta}.0); m += 1.0) {
      ${quad(delta)}
    }
  }

  velocity -= addVelocity;

  gl_FragColor = vec4(velocity, 0.0, 0.0);
}
`;
}
var ForceManyBodyQuadtree = class extends CoreModule {
  constructor() {
    super(...arguments);
    this.levelsFbos = /* @__PURE__ */ new Map();
    this.quadtreeLevels = 0;
  }
  create() {
    const { reglInstance, store } = this;
    if (!store.pointsTextureSize)
      return;
    this.quadtreeLevels = Math.log2(store.adjustedSpaceSize);
    for (let i11 = 0; i11 < this.quadtreeLevels; i11 += 1) {
      const levelTextureSize = Math.pow(2, i11 + 1);
      this.levelsFbos.set(`level[${i11}]`, reglInstance.framebuffer({
        color: reglInstance.texture({
          data: new Float32Array(levelTextureSize * levelTextureSize * 4),
          shape: [levelTextureSize, levelTextureSize, 4],
          type: "float"
        }),
        depth: false,
        stencil: false
      }));
    }
    const randomValuesState = new Float32Array(store.pointsTextureSize * store.pointsTextureSize * 4);
    for (let i11 = 0; i11 < store.pointsTextureSize * store.pointsTextureSize; ++i11) {
      randomValuesState[i11 * 4] = store.getRandomFloat(-1, 1) * 1e-5;
      randomValuesState[i11 * 4 + 1] = store.getRandomFloat(-1, 1) * 1e-5;
    }
    this.randomValuesFbo = reglInstance.framebuffer({
      color: reglInstance.texture({
        data: randomValuesState,
        shape: [store.pointsTextureSize, store.pointsTextureSize, 4],
        type: "float"
      }),
      depth: false,
      stencil: false
    });
  }
  initPrograms() {
    var _a, _b;
    const { reglInstance, config, store, data, points } = this;
    this.clearLevelsCommand = reglInstance({
      frag: clearFrag,
      vert: updateVert,
      framebuffer: (_7, props) => props.levelFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) }
    });
    this.calculateLevelsCommand = reglInstance({
      frag: calculateLevelFrag,
      vert: calculateLevelVert,
      framebuffer: (_7, props) => props.levelFbo,
      primitive: "points",
      count: () => data.nodes.length,
      attributes: { indexes: createIndexesBuffer(reglInstance, store.pointsTextureSize) },
      uniforms: {
        position: () => points === null || points === void 0 ? void 0 : points.previousPositionFbo,
        pointsTextureSize: () => store.pointsTextureSize,
        levelTextureSize: (_7, props) => props.levelTextureSize,
        cellSize: (_7, props) => props.cellSize
      },
      blend: {
        enable: true,
        func: {
          src: "one",
          dst: "one"
        },
        equation: {
          rgb: "add",
          alpha: "add"
        }
      },
      depth: { enable: false, mask: false },
      stencil: { enable: false }
    });
    this.quadtreeCommand = reglInstance({
      frag: forceFrag$1((_b = (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.repulsionQuadtreeLevels) !== null && _b !== void 0 ? _b : this.quadtreeLevels, this.quadtreeLevels),
      vert: updateVert,
      framebuffer: () => points === null || points === void 0 ? void 0 : points.velocityFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) },
      uniforms: {
        position: () => points === null || points === void 0 ? void 0 : points.previousPositionFbo,
        randomValues: () => this.randomValuesFbo,
        spaceSize: () => store.adjustedSpaceSize,
        repulsion: () => {
          var _a2;
          return (_a2 = config.simulation) === null || _a2 === void 0 ? void 0 : _a2.repulsion;
        },
        theta: () => {
          var _a2;
          return (_a2 = config.simulation) === null || _a2 === void 0 ? void 0 : _a2.repulsionTheta;
        },
        alpha: () => store.alpha,
        ...Object.fromEntries(this.levelsFbos)
      }
    });
  }
  run() {
    var _a, _b, _c;
    const { store } = this;
    for (let i11 = 0; i11 < this.quadtreeLevels; i11 += 1) {
      (_a = this.clearLevelsCommand) === null || _a === void 0 ? void 0 : _a.call(this, { levelFbo: this.levelsFbos.get(`level[${i11}]`) });
      const levelTextureSize = Math.pow(2, i11 + 1);
      const cellSize = store.adjustedSpaceSize / levelTextureSize;
      (_b = this.calculateLevelsCommand) === null || _b === void 0 ? void 0 : _b.call(this, {
        levelFbo: this.levelsFbos.get(`level[${i11}]`),
        levelTextureSize,
        cellSize
      });
    }
    (_c = this.quadtreeCommand) === null || _c === void 0 ? void 0 : _c.call(this);
  }
  destroy() {
    destroyFramebuffer(this.randomValuesFbo);
    this.levelsFbos.forEach((fbo) => {
      destroyFramebuffer(fbo);
    });
    this.levelsFbos.clear();
  }
};
var forceFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform float repulsion;uniform vec2 mousePos;varying vec2 index;void main(){vec4 pointPosition=texture2D(position,index);vec4 velocity=vec4(0.0);vec2 mouse=mousePos;vec2 distVector=mouse-pointPosition.rg;float dist=sqrt(dot(distVector,distVector));dist=max(dist,10.0);float angle=atan(distVector.y,distVector.x);float addV=100.0*repulsion/(dist*dist);velocity.rg-=addV*vec2(cos(angle),sin(angle));gl_FragColor=velocity;}";
var ForceMouse = class extends CoreModule {
  initPrograms() {
    const { reglInstance, config, store, points } = this;
    this.runCommand = reglInstance({
      frag: forceFrag,
      vert: updateVert,
      framebuffer: () => points === null || points === void 0 ? void 0 : points.velocityFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) },
      uniforms: {
        position: () => points === null || points === void 0 ? void 0 : points.previousPositionFbo,
        mousePos: () => store.mousePosition,
        repulsion: () => {
          var _a;
          return (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.repulsionFromMouse;
        }
      }
    });
  }
  run() {
    var _a;
    (_a = this.runCommand) === null || _a === void 0 ? void 0 : _a.call(this);
  }
};
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var glBench = { exports: {} };
(function(module, exports) {
  (function(global3, factory) {
    module.exports = factory();
  })(commonjsGlobal, function() {
    var UISVG = '<div class="gl-box">\n  <svg viewBox="0 0 55 60">\n    <text x="27" y="56" class="gl-fps">00 FPS</text>\n    <text x="28" y="8" class="gl-mem"></text>\n    <rect x="0" y="14" rx="4" ry="4" width="55" height="32"></rect>\n    <polyline class="gl-chart"></polyline>\n  </svg>\n  <svg viewBox="0 0 14 60" class="gl-cpu-svg">\n    <line x1="7" y1="38" x2="7" y2="11" class="opacity"/>\n    <line x1="7" y1="38" x2="7" y2="11" class="gl-cpu" stroke-dasharray="0 27"/>\n    <path d="M5.35 43c-.464 0-.812.377-.812.812v1.16c-.783.1972-1.421.812-1.595 1.624h-1.16c-.435 0-.812.348-.812.812s.348.812.812.812h1.102v1.653H1.812c-.464 0-.812.377-.812.812 0 .464.377.812.812.812h1.131c.1943.783.812 1.392 1.595 1.595v1.131c0 .464.377.812.812.812.464 0 .812-.377.812-.812V53.15h1.653v1.073c0 .464.377.812.812.812.464 0 .812-.377.812-.812v-1.131c.783-.1943 1.392-.812 1.595-1.595h1.131c.464 0 .812-.377.812-.812 0-.464-.377-.812-.812-.812h-1.073V48.22h1.102c.435 0 .812-.348.812-.812s-.348-.812-.812-.812h-1.16c-.1885-.783-.812-1.421-1.595-1.624v-1.131c0-.464-.377-.812-.812-.812-.464 0-.812.377-.812.812v1.073H6.162v-1.073c0-.464-.377-.812-.812-.812zm.58 3.48h2.088c.754 0 1.363.609 1.363 1.363v2.088c0 .754-.609 1.363-1.363 1.363H5.93c-.754 0-1.363-.609-1.363-1.363v-2.088c0-.754.609-1.363 1.363-1.363z"/>\n  </svg>\n  <svg viewBox="0 0 14 60" class="gl-gpu-svg">\n    <line x1="7" y1="38" x2="7" y2="11" class="opacity"/>\n    <line x1="7" y1="38" x2="7" y2="11" class="gl-gpu" stroke-dasharray="0 27"/>\n    <path d="M1.94775 43.3772a.736.736 0 10-.00416 1.472c.58535.00231.56465.1288.6348.3197.07015.18975.04933.43585.04933.43585l-.00653.05405v8.671a.736.736 0 101.472 0v-1.4145c.253.09522.52785.1495.81765.1495h5.267c1.2535 0 2.254-.9752 2.254-2.185v-3.105c0-1.2075-1.00625-2.185-2.254-2.185h-5.267c-.28865 0-.5635.05405-.8165.1495.01806-.16445.04209-.598-.1357-1.0787-.22425-.6072-.9499-1.2765-2.0125-1.2765zm2.9095 3.6455c.42435 0 .7659.36225.7659.8119v2.9785c0 .44965-.34155.8119-.7659.8119s-.7659-.36225-.7659-.8119v-2.9785c0-.44965.34155-.8119.7659-.8119zm4.117 0a2.3 2.3 0 012.3 2.3 2.3 2.3 0 01-2.3 2.3 2.3 2.3 0 01-2.3-2.3 2.3 2.3 0 012.3-2.3z"/>\n  </svg>\n</div>';
    var UICSS = "#gl-bench {\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:1000;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n}\n\n#gl-bench div {\n  position: relative;\n  display: block;\n  margin: 4px;\n  padding: 0 7px 0 10px;\n  background: #6c6;\n  border-radius: 15px;\n  cursor: pointer;\n  opacity: 0.9;\n}\n\n#gl-bench svg {\n  height: 60px;\n  margin: 0 -1px;\n}\n\n#gl-bench text {\n  font-size: 12px;\n  font-family: Helvetica,Arial,sans-serif;\n  font-weight: 700;\n  dominant-baseline: middle;\n  text-anchor: middle;\n}\n\n#gl-bench .gl-mem {\n  font-size: 9px;\n}\n\n#gl-bench line {\n  stroke-width: 5;\n  stroke: #112211;\n  stroke-linecap: round;\n}\n\n#gl-bench polyline {\n  fill: none;\n  stroke: #112211;\n  stroke-linecap: round;\n  stroke-linejoin: round;\n  stroke-width: 3.5;\n}\n\n#gl-bench rect {\n  fill: #448844;\n}\n\n#gl-bench .opacity {\n  stroke: #448844;\n}\n";
    class GLBench2 {
      /** GLBench constructor
       * @param { WebGLRenderingContext | WebGL2RenderingContext } gl context
       * @param { Object | undefined } settings additional settings
       */
      constructor(gl, settings = {}) {
        this.css = UICSS;
        this.svg = UISVG;
        this.paramLogger = () => {
        };
        this.chartLogger = () => {
        };
        this.chartLen = 20;
        this.chartHz = 20;
        this.names = [];
        this.cpuAccums = [];
        this.gpuAccums = [];
        this.activeAccums = [];
        this.chart = new Array(this.chartLen);
        this.now = () => performance && performance.now ? performance.now() : Date.now();
        this.updateUI = () => {
          [].forEach.call(this.nodes["gl-gpu-svg"], (node) => {
            node.style.display = this.trackGPU ? "inline" : "none";
          });
        };
        Object.assign(this, settings);
        this.detected = 0;
        this.finished = [];
        this.isFramebuffer = 0;
        this.frameId = 0;
        let rafId, n17 = 0, t0;
        let loop = (t23) => {
          if (++n17 < 20) {
            rafId = requestAnimationFrame(loop);
          } else {
            this.detected = Math.ceil(1e3 * n17 / (t23 - t0) / 70);
            cancelAnimationFrame(rafId);
          }
          if (!t0) t0 = t23;
        };
        requestAnimationFrame(loop);
        if (gl) {
          const glFinish = async (t23, activeAccums) => Promise.resolve(setTimeout(() => {
            gl.getError();
            const dt3 = this.now() - t23;
            activeAccums.forEach((active, i11) => {
              if (active) this.gpuAccums[i11] += dt3;
            });
          }, 0));
          const addProfiler = (fn, self2, target) => function() {
            const t23 = self2.now();
            fn.apply(target, arguments);
            if (self2.trackGPU) self2.finished.push(glFinish(t23, self2.activeAccums.slice(0)));
          };
          [
            "drawArrays",
            "drawElements",
            "drawArraysInstanced",
            "drawBuffers",
            "drawElementsInstanced",
            "drawRangeElements"
          ].forEach((fn) => {
            if (gl[fn]) gl[fn] = addProfiler(gl[fn], this, gl);
          });
          gl.getExtension = /* @__PURE__ */ ((fn, self2) => function() {
            let ext = fn.apply(gl, arguments);
            if (ext) {
              ["drawElementsInstancedANGLE", "drawBuffersWEBGL"].forEach((fn2) => {
                if (ext[fn2]) ext[fn2] = addProfiler(ext[fn2], self2, ext);
              });
            }
            return ext;
          })(gl.getExtension, this);
        }
        if (!this.withoutUI) {
          if (!this.dom) this.dom = document.body;
          let elm = document.createElement("div");
          elm.id = "gl-bench";
          this.dom.appendChild(elm);
          this.dom.insertAdjacentHTML("afterbegin", '<style id="gl-bench-style">' + this.css + "</style>");
          this.dom = elm;
          this.dom.addEventListener("click", () => {
            this.trackGPU = !this.trackGPU;
            this.updateUI();
          });
          this.paramLogger = ((logger, dom, names) => {
            const classes = ["gl-cpu", "gl-gpu", "gl-mem", "gl-fps", "gl-gpu-svg", "gl-chart"];
            const nodes = Object.assign({}, classes);
            classes.forEach((c11) => nodes[c11] = dom.getElementsByClassName(c11));
            this.nodes = nodes;
            return (i11, cpu, gpu, mem, fps, totalTime, frameId) => {
              nodes["gl-cpu"][i11].style.strokeDasharray = (cpu * 0.27).toFixed(0) + " 100";
              nodes["gl-gpu"][i11].style.strokeDasharray = (gpu * 0.27).toFixed(0) + " 100";
              nodes["gl-mem"][i11].innerHTML = names[i11] ? names[i11] : mem ? "mem: " + mem.toFixed(0) + "mb" : "";
              nodes["gl-fps"][i11].innerHTML = fps.toFixed(0) + " FPS";
              logger(names[i11], cpu, gpu, mem, fps, totalTime, frameId);
            };
          })(this.paramLogger, this.dom, this.names);
          this.chartLogger = ((logger, dom) => {
            let nodes = { "gl-chart": dom.getElementsByClassName("gl-chart") };
            return (i11, chart, circularId) => {
              let points = "";
              let len2 = chart.length;
              for (let i12 = 0; i12 < len2; i12++) {
                let id = (circularId + i12 + 1) % len2;
                if (chart[id] != void 0) {
                  points = points + " " + (55 * i12 / (len2 - 1)).toFixed(1) + "," + (45 - chart[id] * 22 / 60 / this.detected).toFixed(1);
                }
              }
              nodes["gl-chart"][i11].setAttribute("points", points);
              logger(this.names[i11], chart, circularId);
            };
          })(this.chartLogger, this.dom);
        }
      }
      /**
       * Explicit UI add
       * @param { string | undefined } name 
       */
      addUI(name) {
        if (this.names.indexOf(name) == -1) {
          this.names.push(name);
          if (this.dom) {
            this.dom.insertAdjacentHTML("beforeend", this.svg);
            this.updateUI();
          }
          this.cpuAccums.push(0);
          this.gpuAccums.push(0);
          this.activeAccums.push(false);
        }
      }
      /**
       * Increase frameID
       * @param { number | undefined } now
       */
      nextFrame(now) {
        this.frameId++;
        const t23 = now ? now : this.now();
        if (this.frameId <= 1) {
          this.paramFrame = this.frameId;
          this.paramTime = t23;
        } else {
          let duration = t23 - this.paramTime;
          if (duration >= 1e3) {
            const frameCount = this.frameId - this.paramFrame;
            const fps = frameCount / duration * 1e3;
            for (let i11 = 0; i11 < this.names.length; i11++) {
              const cpu = this.cpuAccums[i11] / duration * 100, gpu = this.gpuAccums[i11] / duration * 100, mem = performance && performance.memory ? performance.memory.usedJSHeapSize / (1 << 20) : 0;
              this.paramLogger(i11, cpu, gpu, mem, fps, duration, frameCount);
              this.cpuAccums[i11] = 0;
              Promise.all(this.finished).then(() => {
                this.gpuAccums[i11] = 0;
                this.finished = [];
              });
            }
            this.paramFrame = this.frameId;
            this.paramTime = t23;
          }
        }
        if (!this.detected || !this.chartFrame) {
          this.chartFrame = this.frameId;
          this.chartTime = t23;
          this.circularId = 0;
        } else {
          let timespan = t23 - this.chartTime;
          let hz = this.chartHz * timespan / 1e3;
          while (--hz > 0 && this.detected) {
            const frameCount = this.frameId - this.chartFrame;
            const fps = frameCount / timespan * 1e3;
            this.chart[this.circularId % this.chartLen] = fps;
            for (let i11 = 0; i11 < this.names.length; i11++) {
              this.chartLogger(i11, this.chart, this.circularId);
            }
            this.circularId++;
            this.chartFrame = this.frameId;
            this.chartTime = t23;
          }
        }
      }
      /**
       * Begin named measurement
       * @param { string | undefined } name
       */
      begin(name) {
        this.updateAccums(name);
      }
      /**
       * End named measure
       * @param { string | undefined } name
       */
      end(name) {
        this.updateAccums(name);
      }
      updateAccums(name) {
        let nameId = this.names.indexOf(name);
        if (nameId == -1) {
          nameId = this.names.length;
          this.addUI(name);
        }
        const t23 = this.now();
        const dt3 = t23 - this.t0;
        for (let i11 = 0; i11 < nameId + 1; i11++) {
          if (this.activeAccums[i11]) {
            this.cpuAccums[i11] += dt3;
          }
        }
        this.activeAccums[nameId] = !this.activeAccums[nameId];
        this.t0 = t23;
      }
    }
    return GLBench2;
  });
})(glBench);
var GLBench = glBench.exports;
var benchCSS = `
  #gl-bench {
    position:absolute;
    right:0;
    top:0;
    z-index:1000;
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
  }
  #gl-bench div {
    position: relative;
    display: block;
    margin: 4px;
    padding: 0 7px 0 10px;
    background: #5f69de;
    border-radius: 15px;
    cursor: pointer;
    opacity: 0.9;
  }
  #gl-bench svg {
    height: 60px;
    margin: 0 -1px;
  }
  #gl-bench text {
    font-size: 12px;
    font-family: Helvetica,Arial,sans-serif;
    font-weight: 700;
    dominant-baseline: middle;
    text-anchor: middle;
  }
  #gl-bench .gl-mem {
    font-size: 9px;
  }
  #gl-bench line {
    stroke-width: 5;
    stroke: #112211;
    stroke-linecap: round;
  }
  #gl-bench polyline {
    fill: none;
    stroke: #112211;
    stroke-linecap: round;
    stroke-linejoin: round;
    stroke-width: 3.5;
  }
  #gl-bench rect {
    fill: #8288e4;
  }
  #gl-bench .opacity {
    stroke: #8288e4;
  }
`;
var FPSMonitor = class {
  constructor(canvas) {
    this.destroy();
    const gl = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
    this.bench = new GLBench(gl, { css: benchCSS });
  }
  begin() {
    var _a;
    (_a = this.bench) === null || _a === void 0 ? void 0 : _a.begin("frame");
  }
  end(now) {
    var _a, _b;
    (_a = this.bench) === null || _a === void 0 ? void 0 : _a.end("frame");
    (_b = this.bench) === null || _b === void 0 ? void 0 : _b.nextFrame(now);
  }
  destroy() {
    this.bench = void 0;
    select_default("#gl-bench").remove();
  }
};
var GraphData = class {
  constructor() {
    this.completeLinks = /* @__PURE__ */ new Set();
    this.degree = [];
    this.groupedSourceToTargetLinks = /* @__PURE__ */ new Map();
    this.groupedTargetToSourceLinks = /* @__PURE__ */ new Map();
    this._nodes = [];
    this._links = [];
    this.idToNodeMap = /* @__PURE__ */ new Map();
    this.sortedIndexToInputIndexMap = /* @__PURE__ */ new Map();
    this.inputIndexToSortedIndexMap = /* @__PURE__ */ new Map();
    this.idToSortedIndexMap = /* @__PURE__ */ new Map();
    this.inputIndexToIdMap = /* @__PURE__ */ new Map();
    this.idToIndegreeMap = /* @__PURE__ */ new Map();
    this.idToOutdegreeMap = /* @__PURE__ */ new Map();
  }
  get nodes() {
    return this._nodes;
  }
  get links() {
    return this._links;
  }
  get linksNumber() {
    return this.completeLinks.size;
  }
  setData(inputNodes, inputLinks) {
    this.idToNodeMap.clear();
    this.idToSortedIndexMap.clear();
    this.inputIndexToIdMap.clear();
    this.idToIndegreeMap.clear();
    this.idToOutdegreeMap.clear();
    inputNodes.forEach((n17, i11) => {
      this.idToNodeMap.set(n17.id, n17);
      this.inputIndexToIdMap.set(i11, n17.id);
      this.idToIndegreeMap.set(n17.id, 0);
      this.idToOutdegreeMap.set(n17.id, 0);
    });
    this.completeLinks.clear();
    inputLinks.forEach((l6) => {
      const sourceNode = this.idToNodeMap.get(l6.source);
      const targetNode = this.idToNodeMap.get(l6.target);
      if (sourceNode !== void 0 && targetNode !== void 0) {
        this.completeLinks.add(l6);
        const outdegree = this.idToOutdegreeMap.get(sourceNode.id);
        if (outdegree !== void 0)
          this.idToOutdegreeMap.set(sourceNode.id, outdegree + 1);
        const indegree = this.idToIndegreeMap.get(targetNode.id);
        if (indegree !== void 0)
          this.idToIndegreeMap.set(targetNode.id, indegree + 1);
      }
    });
    this.degree = new Array(inputNodes.length);
    inputNodes.forEach((n17, i11) => {
      const outdegree = this.idToOutdegreeMap.get(n17.id);
      const indegree = this.idToIndegreeMap.get(n17.id);
      this.degree[i11] = (outdegree !== null && outdegree !== void 0 ? outdegree : 0) + (indegree !== null && indegree !== void 0 ? indegree : 0);
    });
    this.sortedIndexToInputIndexMap.clear();
    this.inputIndexToSortedIndexMap.clear();
    const sortedDegrees = Object.entries(this.degree).sort((a13, b5) => a13[1] - b5[1]);
    sortedDegrees.forEach(([inputStringedIndex], sortedIndex) => {
      const inputIndex = +inputStringedIndex;
      this.sortedIndexToInputIndexMap.set(sortedIndex, inputIndex);
      this.inputIndexToSortedIndexMap.set(inputIndex, sortedIndex);
      this.idToSortedIndexMap.set(this.inputIndexToIdMap.get(inputIndex), sortedIndex);
    });
    this.groupedSourceToTargetLinks.clear();
    this.groupedTargetToSourceLinks.clear();
    inputLinks.forEach((l6) => {
      const sourceIndex = this.idToSortedIndexMap.get(l6.source);
      const targetIndex = this.idToSortedIndexMap.get(l6.target);
      if (sourceIndex !== void 0 && targetIndex !== void 0) {
        if (this.groupedSourceToTargetLinks.get(sourceIndex) === void 0)
          this.groupedSourceToTargetLinks.set(sourceIndex, /* @__PURE__ */ new Set());
        const targets = this.groupedSourceToTargetLinks.get(sourceIndex);
        targets === null || targets === void 0 ? void 0 : targets.add(targetIndex);
        if (this.groupedTargetToSourceLinks.get(targetIndex) === void 0)
          this.groupedTargetToSourceLinks.set(targetIndex, /* @__PURE__ */ new Set());
        const sources = this.groupedTargetToSourceLinks.get(targetIndex);
        sources === null || sources === void 0 ? void 0 : sources.add(sourceIndex);
      }
    });
    this._nodes = inputNodes;
    this._links = inputLinks;
  }
  getNodeById(id) {
    return this.idToNodeMap.get(id);
  }
  getNodeByIndex(index2) {
    return this._nodes[index2];
  }
  getSortedIndexByInputIndex(index2) {
    return this.inputIndexToSortedIndexMap.get(index2);
  }
  getInputIndexBySortedIndex(index2) {
    return this.sortedIndexToInputIndexMap.get(index2);
  }
  getSortedIndexById(id) {
    return id !== void 0 ? this.idToSortedIndexMap.get(id) : void 0;
  }
  getInputIndexById(id) {
    if (id === void 0)
      return void 0;
    const sortedIndex = this.getSortedIndexById(id);
    if (sortedIndex === void 0)
      return void 0;
    return this.getInputIndexBySortedIndex(sortedIndex);
  }
  getAdjacentNodes(id) {
    var _a, _b;
    const index2 = this.getSortedIndexById(id);
    if (index2 === void 0)
      return void 0;
    const outgoingSet = (_a = this.groupedSourceToTargetLinks.get(index2)) !== null && _a !== void 0 ? _a : [];
    const incomingSet = (_b = this.groupedTargetToSourceLinks.get(index2)) !== null && _b !== void 0 ? _b : [];
    return [.../* @__PURE__ */ new Set([...outgoingSet, ...incomingSet])].map((index3) => this.getNodeByIndex(this.getInputIndexBySortedIndex(index3)));
  }
};
var drawLineFrag = "precision highp float;\n#define GLSLIFY 1\nvarying vec4 rgbaColor;varying vec2 pos;varying float arrowLength;varying float linkWidthArrowWidthRatio;varying float smoothWidthRatio;varying float useArrow;float map(float value,float min1,float max1,float min2,float max2){return min2+(value-min1)*(max2-min2)/(max1-min1);}void main(){float opacity=1.0;vec3 color=rgbaColor.rgb;float smoothDelta=smoothWidthRatio/2.0;if(useArrow>0.5){float end_arrow=0.5+arrowLength/2.0;float start_arrow=end_arrow-arrowLength;float arrowWidthDelta=linkWidthArrowWidthRatio/2.0;float linkOpacity=rgbaColor.a*smoothstep(0.5-arrowWidthDelta,0.5-arrowWidthDelta-smoothDelta,abs(pos.y));float arrowOpacity=1.0;if(pos.x>start_arrow&&pos.x<start_arrow+arrowLength){float xmapped=map(pos.x,start_arrow,end_arrow,0.0,1.0);arrowOpacity=rgbaColor.a*smoothstep(xmapped-smoothDelta,xmapped,map(abs(pos.y),0.5,0.0,0.0,1.0));if(linkOpacity!=arrowOpacity){linkOpacity+=arrowOpacity;}}opacity=linkOpacity;}else opacity=rgbaColor.a*smoothstep(0.5,0.5-smoothDelta,abs(pos.y));gl_FragColor=vec4(color,opacity);}";
var drawLineVert = "precision highp float;\n#define GLSLIFY 1\nattribute vec2 position,pointA,pointB;attribute vec4 color;attribute float width;attribute float arrow;uniform sampler2D positions;uniform sampler2D particleGreyoutStatus;uniform mat3 transform;uniform float pointsTextureSize;uniform float widthScale;uniform float nodeSizeScale;uniform float arrowSizeScale;uniform float spaceSize;uniform vec2 screenSize;uniform float ratio;uniform vec2 linkVisibilityDistanceRange;uniform float linkVisibilityMinTransparency;uniform float greyoutOpacity;uniform bool scaleNodesOnZoom;uniform float curvedWeight;uniform float curvedLinkControlPointDistance;uniform float curvedLinkSegments;varying vec4 rgbaColor;varying vec2 pos;varying float arrowLength;varying float linkWidthArrowWidthRatio;varying float smoothWidthRatio;varying float useArrow;float map(float value,float min1,float max1,float min2,float max2){return min2+(value-min1)*(max2-min2)/(max1-min1);}vec2 conicParametricCurve(vec2 A,vec2 B,vec2 ControlPoint,float t,float w){vec2 divident=(1.0-t)*(1.0-t)*A+2.0*(1.0-t)*t*w*ControlPoint+t*t*B;float divisor=(1.0-t)*(1.0-t)+2.0*(1.0-t)*t*w+t*t;return divident/divisor;}void main(){pos=position;vec2 pointTexturePosA=(pointA+0.5)/pointsTextureSize;vec2 pointTexturePosB=(pointB+0.5)/pointsTextureSize;vec4 greyoutStatusA=texture2D(particleGreyoutStatus,pointTexturePosA);vec4 greyoutStatusB=texture2D(particleGreyoutStatus,pointTexturePosB);vec4 pointPositionA=texture2D(positions,pointTexturePosA);vec4 pointPositionB=texture2D(positions,pointTexturePosB);vec2 a=pointPositionA.xy;vec2 b=pointPositionB.xy;vec2 xBasis=b-a;vec2 yBasis=normalize(vec2(-xBasis.y,xBasis.x));float linkDist=length(xBasis);float h=curvedLinkControlPointDistance;vec2 controlPoint=(a+b)/2.0+yBasis*linkDist*h;float linkDistPx=linkDist*transform[0][0];float linkWidth=width*widthScale;float k=2.0;float arrowWidth=max(5.0,linkWidth*k);arrowWidth*=arrowSizeScale;float arrowWidthPx=arrowWidth/transform[0][0];arrowLength=min(0.3,(0.866*arrowWidthPx*2.0)/linkDist);float smoothWidth=2.0;float arrowExtraWidth=arrowWidth-linkWidth;linkWidth+=smoothWidth/2.0;useArrow=arrow;if(useArrow>0.5){linkWidth+=arrowExtraWidth;}smoothWidthRatio=smoothWidth/linkWidth;linkWidthArrowWidthRatio=arrowExtraWidth/linkWidth;float linkWidthPx=linkWidth/transform[0][0];vec3 rgbColor=color.rgb;float opacity=color.a*max(linkVisibilityMinTransparency,map(linkDistPx,linkVisibilityDistanceRange.g,linkVisibilityDistanceRange.r,0.0,1.0));if(greyoutStatusA.r>0.0||greyoutStatusB.r>0.0){opacity*=greyoutOpacity;}rgbaColor=vec4(rgbColor,opacity);float t=position.x;float w=curvedWeight;float tPrev=t-1.0/curvedLinkSegments;float tNext=t+1.0/curvedLinkSegments;vec2 pointCurr=conicParametricCurve(a,b,controlPoint,t,w);vec2 pointPrev=conicParametricCurve(a,b,controlPoint,max(0.0,tPrev),w);vec2 pointNext=conicParametricCurve(a,b,controlPoint,min(tNext,1.0),w);vec2 xBasisCurved=pointNext-pointPrev;vec2 yBasisCurved=normalize(vec2(-xBasisCurved.y,xBasisCurved.x));pointCurr+=yBasisCurved*linkWidthPx*position.y;vec2 p=2.0*pointCurr/spaceSize-1.0;p*=spaceSize/screenSize;vec3 final=transform*vec3(p,1);gl_Position=vec4(final.rg,0,1);}";
var getCurveLineGeometry = (segments) => {
  const scale3 = pow().exponent(2).range([0, 1]).domain([-1, 1]);
  const hodographValues = range(0, segments).map((d13) => -0.5 + d13 / segments);
  hodographValues.push(0.5);
  const result = new Array(hodographValues.length * 2);
  hodographValues.forEach((d13, i11) => {
    result[i11 * 2] = [scale3(d13 * 2), 0.5];
    result[i11 * 2 + 1] = [scale3(d13 * 2), -0.5];
  });
  return result;
};
var Lines = class extends CoreModule {
  create() {
    this.updateColor();
    this.updateWidth();
    this.updateArrow();
    this.updateCurveLineGeometry();
  }
  initPrograms() {
    const { reglInstance, config, store, data, points } = this;
    const { pointsTextureSize } = store;
    const instancePoints = [];
    data.completeLinks.forEach((l6) => {
      const toIndex = data.getSortedIndexById(l6.target);
      const fromIndex = data.getSortedIndexById(l6.source);
      const fromX = fromIndex % pointsTextureSize;
      const fromY = Math.floor(fromIndex / pointsTextureSize);
      const toX = toIndex % pointsTextureSize;
      const toY = Math.floor(toIndex / pointsTextureSize);
      instancePoints.push([fromX, fromY]);
      instancePoints.push([toX, toY]);
    });
    const pointsBuffer = reglInstance.buffer(instancePoints);
    this.drawCurveCommand = reglInstance({
      vert: drawLineVert,
      frag: drawLineFrag,
      attributes: {
        position: {
          buffer: () => this.curveLineBuffer,
          divisor: 0
        },
        pointA: {
          buffer: () => pointsBuffer,
          divisor: 1,
          offset: Float32Array.BYTES_PER_ELEMENT * 0,
          stride: Float32Array.BYTES_PER_ELEMENT * 4
        },
        pointB: {
          buffer: () => pointsBuffer,
          divisor: 1,
          offset: Float32Array.BYTES_PER_ELEMENT * 2,
          stride: Float32Array.BYTES_PER_ELEMENT * 4
        },
        color: {
          buffer: () => this.colorBuffer,
          divisor: 1,
          offset: Float32Array.BYTES_PER_ELEMENT * 0,
          stride: Float32Array.BYTES_PER_ELEMENT * 4
        },
        width: {
          buffer: () => this.widthBuffer,
          divisor: 1,
          offset: Float32Array.BYTES_PER_ELEMENT * 0,
          stride: Float32Array.BYTES_PER_ELEMENT * 1
        },
        arrow: {
          buffer: () => this.arrowBuffer,
          divisor: 1,
          offset: Float32Array.BYTES_PER_ELEMENT * 0,
          stride: Float32Array.BYTES_PER_ELEMENT * 1
        }
      },
      uniforms: {
        positions: () => points === null || points === void 0 ? void 0 : points.currentPositionFbo,
        particleGreyoutStatus: () => points === null || points === void 0 ? void 0 : points.greyoutStatusFbo,
        transform: () => store.transform,
        pointsTextureSize: () => store.pointsTextureSize,
        nodeSizeScale: () => config.nodeSizeScale,
        widthScale: () => config.linkWidthScale,
        arrowSizeScale: () => config.linkArrowsSizeScale,
        spaceSize: () => store.adjustedSpaceSize,
        screenSize: () => store.screenSize,
        ratio: () => config.pixelRatio,
        linkVisibilityDistanceRange: () => config.linkVisibilityDistanceRange,
        linkVisibilityMinTransparency: () => config.linkVisibilityMinTransparency,
        greyoutOpacity: () => config.linkGreyoutOpacity,
        scaleNodesOnZoom: () => config.scaleNodesOnZoom,
        curvedWeight: () => config.curvedLinkWeight,
        curvedLinkControlPointDistance: () => config.curvedLinkControlPointDistance,
        curvedLinkSegments: () => {
          var _a;
          return config.curvedLinks ? (_a = config.curvedLinkSegments) !== null && _a !== void 0 ? _a : defaultConfigValues.curvedLinkSegments : 1;
        }
      },
      cull: {
        enable: true,
        face: "back"
      },
      blend: {
        enable: true,
        func: {
          dstRGB: "one minus src alpha",
          srcRGB: "src alpha",
          dstAlpha: "one minus src alpha",
          srcAlpha: "one"
        },
        equation: {
          rgb: "add",
          alpha: "add"
        }
      },
      depth: {
        enable: false,
        mask: false
      },
      count: () => {
        var _a, _b;
        return (_b = (_a = this.curveLineGeometry) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
      },
      instances: () => data.linksNumber,
      primitive: "triangle strip"
    });
  }
  draw() {
    var _a;
    if (!this.colorBuffer || !this.widthBuffer || !this.curveLineBuffer)
      return;
    (_a = this.drawCurveCommand) === null || _a === void 0 ? void 0 : _a.call(this);
  }
  updateColor() {
    const { reglInstance, config, data } = this;
    const instancePoints = [];
    data.completeLinks.forEach((l6) => {
      var _a;
      const c11 = (_a = getValue(l6, config.linkColor)) !== null && _a !== void 0 ? _a : defaultLinkColor;
      const rgba = getRgbaColor(c11);
      instancePoints.push(rgba);
    });
    this.colorBuffer = reglInstance.buffer(instancePoints);
  }
  updateWidth() {
    const { reglInstance, config, data } = this;
    const instancePoints = [];
    data.completeLinks.forEach((l6) => {
      const linkWidth = getValue(l6, config.linkWidth);
      instancePoints.push([linkWidth !== null && linkWidth !== void 0 ? linkWidth : defaultLinkWidth]);
    });
    this.widthBuffer = reglInstance.buffer(instancePoints);
  }
  updateArrow() {
    const { reglInstance, config, data } = this;
    const instancePoints = [];
    data.completeLinks.forEach((l6) => {
      var _a;
      const useArrow = (_a = getValue(l6, config.linkArrows)) !== null && _a !== void 0 ? _a : defaultConfigValues.arrowLinks;
      instancePoints.push([useArrow ? 1 : 0]);
    });
    this.arrowBuffer = reglInstance.buffer(instancePoints);
  }
  updateCurveLineGeometry() {
    const { reglInstance, config: { curvedLinks, curvedLinkSegments } } = this;
    this.curveLineGeometry = getCurveLineGeometry(curvedLinks ? curvedLinkSegments !== null && curvedLinkSegments !== void 0 ? curvedLinkSegments : defaultConfigValues.curvedLinkSegments : 1);
    this.curveLineBuffer = reglInstance.buffer(this.curveLineGeometry);
  }
  destroy() {
    destroyBuffer(this.colorBuffer);
    destroyBuffer(this.widthBuffer);
    destroyBuffer(this.arrowBuffer);
    destroyBuffer(this.curveLineBuffer);
  }
};
function createColorBuffer(data, reglInstance, textureSize, colorAccessor) {
  var _a;
  if (textureSize === 0)
    return void 0;
  const initialState = new Float32Array(textureSize * textureSize * 4);
  for (let i11 = 0; i11 < data.nodes.length; ++i11) {
    const sortedIndex = data.getSortedIndexByInputIndex(i11);
    const node = data.nodes[i11];
    if (node && sortedIndex !== void 0) {
      const c11 = (_a = getValue(node, colorAccessor, i11)) !== null && _a !== void 0 ? _a : defaultNodeColor;
      const rgba = getRgbaColor(c11);
      initialState[sortedIndex * 4 + 0] = rgba[0];
      initialState[sortedIndex * 4 + 1] = rgba[1];
      initialState[sortedIndex * 4 + 2] = rgba[2];
      initialState[sortedIndex * 4 + 3] = rgba[3];
    }
  }
  const initialTexture = reglInstance.texture({
    data: initialState,
    width: textureSize,
    height: textureSize,
    type: "float"
  });
  return reglInstance.framebuffer({
    color: initialTexture,
    depth: false,
    stencil: false
  });
}
function createGreyoutStatusBuffer(selectedIndices, reglInstance, textureSize) {
  if (textureSize === 0)
    return void 0;
  const initialState = new Float32Array(textureSize * textureSize * 4).fill(selectedIndices ? 1 : 0);
  if (selectedIndices) {
    for (const selectedIndex of selectedIndices) {
      initialState[selectedIndex * 4] = 0;
    }
  }
  const initialTexture = reglInstance.texture({
    data: initialState,
    width: textureSize,
    height: textureSize,
    type: "float"
  });
  return reglInstance.framebuffer({
    color: initialTexture,
    depth: false,
    stencil: false
  });
}
var drawPointsFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nvarying vec2 index;varying vec3 rgbColor;varying float alpha;const float smoothing=0.9;void main(){if(alpha==0.0){discard;}float r=0.0;float delta=0.0;vec2 cxy=2.0*gl_PointCoord-1.0;r=dot(cxy,cxy);float opacity=alpha*(1.0-smoothstep(smoothing,1.0,r));gl_FragColor=vec4(rgbColor,opacity);}";
var drawPointsVert = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nattribute vec2 indexes;uniform sampler2D positions;uniform sampler2D particleColor;uniform sampler2D particleGreyoutStatus;uniform sampler2D particleSize;uniform float ratio;uniform mat3 transform;uniform float pointsTextureSize;uniform float sizeScale;uniform float spaceSize;uniform vec2 screenSize;uniform float greyoutOpacity;uniform bool scaleNodesOnZoom;uniform float maxPointSize;varying vec2 index;varying vec3 rgbColor;varying float alpha;float pointSize(float size){float pSize;if(scaleNodesOnZoom){pSize=size*ratio*transform[0][0];}else{pSize=size*ratio*min(5.0,max(1.0,transform[0][0]*0.01));}return min(pSize,maxPointSize*ratio);}void main(){index=indexes;vec4 pointPosition=texture2D(positions,(index+0.5)/pointsTextureSize);vec2 point=pointPosition.rg;vec2 p=2.0*point/spaceSize-1.0;p*=spaceSize/screenSize;vec3 final=transform*vec3(p,1);gl_Position=vec4(final.rg,0,1);vec4 pSize=texture2D(particleSize,(index+0.5)/pointsTextureSize);float size=pSize.r*sizeScale;vec4 pColor=texture2D(particleColor,(index+0.5)/pointsTextureSize);rgbColor=pColor.rgb;gl_PointSize=pointSize(size);alpha=pColor.a;vec4 greyoutStatus=texture2D(particleGreyoutStatus,(index+0.5)/pointsTextureSize);if(greyoutStatus.r>0.0){alpha*=greyoutOpacity;}}";
var findPointsOnAreaSelectionFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform sampler2D particleSize;uniform float sizeScale;uniform float spaceSize;uniform vec2 screenSize;uniform float ratio;uniform mat3 transform;uniform vec2 selection[2];uniform bool scaleNodesOnZoom;uniform float maxPointSize;varying vec2 index;float pointSize(float size){float pSize;if(scaleNodesOnZoom){pSize=size*ratio*transform[0][0];}else{pSize=size*ratio*min(5.0,max(1.0,transform[0][0]*0.01));}return min(pSize,maxPointSize*ratio);}void main(){vec4 pointPosition=texture2D(position,index);vec2 p=2.0*pointPosition.rg/spaceSize-1.0;p*=spaceSize/screenSize;vec3 final=transform*vec3(p,1);vec4 pSize=texture2D(particleSize,index);float size=pSize.r*sizeScale;float left=2.0*(selection[0].x-0.5*pointSize(size))/screenSize.x-1.0;float right=2.0*(selection[1].x+0.5*pointSize(size))/screenSize.x-1.0;float top=2.0*(selection[0].y-0.5*pointSize(size))/screenSize.y-1.0;float bottom=2.0*(selection[1].y+0.5*pointSize(size))/screenSize.y-1.0;gl_FragColor=vec4(0.0,0.0,pointPosition.rg);if(final.x>=left&&final.x<=right&&final.y>=top&&final.y<=bottom){gl_FragColor.r=1.0;}}";
var drawHighlightedFrag = "precision mediump float;\n#define GLSLIFY 1\nuniform vec4 color;uniform float width;varying vec2 pos;varying float particleOpacity;const float smoothing=1.05;void main(){vec2 cxy=pos;float r=dot(cxy,cxy);float opacity=smoothstep(r,r*smoothing,1.0);float stroke=smoothstep(width,width*smoothing,r);gl_FragColor=vec4(color.rgb,opacity*stroke*color.a*particleOpacity);}";
var drawHighlightedVert = "precision mediump float;\n#define GLSLIFY 1\nattribute vec2 quad;uniform sampler2D positions;uniform sampler2D particleColor;uniform sampler2D particleGreyoutStatus;uniform sampler2D particleSize;uniform mat3 transform;uniform float pointsTextureSize;uniform float sizeScale;uniform float spaceSize;uniform vec2 screenSize;uniform bool scaleNodesOnZoom;uniform float pointIndex;uniform float maxPointSize;uniform vec4 color;uniform float greyoutOpacity;varying vec2 pos;varying float particleOpacity;float pointSize(float size){float pSize;if(scaleNodesOnZoom){pSize=size*transform[0][0];}else{pSize=size*min(5.0,max(1.0,transform[0][0]*0.01));}return min(pSize,maxPointSize);}const float relativeRingRadius=1.3;void main(){pos=quad;vec2 ij=vec2(mod(pointIndex,pointsTextureSize),floor(pointIndex/pointsTextureSize))+0.5;vec4 pointPosition=texture2D(positions,ij/pointsTextureSize);vec4 pSize=texture2D(particleSize,ij/pointsTextureSize);vec4 pColor=texture2D(particleColor,ij/pointsTextureSize);particleOpacity=pColor.a;vec4 greyoutStatus=texture2D(particleGreyoutStatus,ij/pointsTextureSize);if(greyoutStatus.r>0.0){particleOpacity*=greyoutOpacity;}float size=(pointSize(pSize.r*sizeScale)*relativeRingRadius)/transform[0][0];float radius=size*0.5;vec2 a=pointPosition.xy;vec2 b=pointPosition.xy+vec2(0.0,radius);vec2 xBasis=b-a;vec2 yBasis=normalize(vec2(-xBasis.y,xBasis.x));vec2 point=a+xBasis*quad.x+yBasis*radius*quad.y;vec2 p=2.0*point/spaceSize-1.0;p*=spaceSize/screenSize;vec3 final=transform*vec3(p,1);gl_Position=vec4(final.rg,0,1);}";
var findHoveredPointFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nvarying vec4 rgba;void main(){gl_FragColor=rgba;}";
var findHoveredPointVert = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform float pointsTextureSize;uniform sampler2D particleSize;uniform float sizeScale;uniform float spaceSize;uniform vec2 screenSize;uniform float ratio;uniform mat3 transform;uniform vec2 mousePosition;uniform bool scaleNodesOnZoom;uniform float maxPointSize;attribute vec2 indexes;varying vec4 rgba;float pointSize(float size){float pSize;if(scaleNodesOnZoom){pSize=size*ratio*transform[0][0];}else{pSize=size*ratio*min(5.0,max(1.0,transform[0][0]*0.01));}return min(pSize,maxPointSize*ratio);}float euclideanDistance(float x1,float x2,float y1,float y2){return sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));}void main(){vec4 pointPosition=texture2D(position,(indexes+0.5)/pointsTextureSize);vec2 p=2.0*pointPosition.rg/spaceSize-1.0;p*=spaceSize/screenSize;vec3 final=transform*vec3(p,1);vec4 pSize=texture2D(particleSize,indexes/pointsTextureSize);float size=pSize.r*sizeScale;float pointRadius=0.5*pointSize(size);vec2 pointScreenPosition=(final.xy+1.0)*screenSize/2.0;rgba=vec4(0.0);gl_Position=vec4(0.5,0.5,0.0,1.0);if(euclideanDistance(pointScreenPosition.x,mousePosition.x,pointScreenPosition.y,mousePosition.y)<pointRadius/ratio){float index=indexes.g*pointsTextureSize+indexes.r;rgba=vec4(index,pSize.r,pointPosition.xy);gl_Position=vec4(-0.5,-0.5,0.0,1.0);}gl_PointSize=1.0;}";
var fillGridWithSampledNodesFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nvarying vec4 rgba;void main(){gl_FragColor=rgba;}";
var fillGridWithSampledNodesVert = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform float pointsTextureSize;uniform float spaceSize;uniform vec2 screenSize;uniform mat3 transform;attribute vec2 indexes;varying vec4 rgba;void main(){vec4 pointPosition=texture2D(position,(indexes+0.5)/pointsTextureSize);vec2 p=2.0*pointPosition.rg/spaceSize-1.0;p*=spaceSize/screenSize;vec3 final=transform*vec3(p,1);vec2 pointScreenPosition=(final.xy+1.0)*screenSize/2.0;float index=indexes.g*pointsTextureSize+indexes.r;rgba=vec4(index,1.0,pointPosition.xy);float i=(pointScreenPosition.x+0.5)/screenSize.x;float j=(pointScreenPosition.y+0.5)/screenSize.y;gl_Position=vec4(2.0*vec2(i,j)-1.0,0.0,1.0);gl_PointSize=1.0;}";
function getNodeSize(node, sizeAccessor, index2) {
  const size2 = getValue(node, sizeAccessor, index2);
  return size2 !== null && size2 !== void 0 ? size2 : defaultNodeSize;
}
function createSizeBufferAndFillSizeStore(data, reglInstance, pointTextureSize, sizeAccessor, sizeStore) {
  if (pointTextureSize === 0)
    return void 0;
  const numParticles = data.nodes.length;
  const initialState = new Float32Array(pointTextureSize * pointTextureSize * 4);
  for (let i11 = 0; i11 < numParticles; ++i11) {
    const sortedIndex = data.getSortedIndexByInputIndex(i11);
    const node = data.nodes[i11];
    if (node && sortedIndex !== void 0) {
      const nodeSize = getNodeSize(node, sizeAccessor, i11);
      initialState[sortedIndex * 4] = nodeSize;
      sizeStore[i11] = nodeSize;
    }
  }
  const initialTexture = reglInstance.texture({
    data: initialState,
    width: pointTextureSize,
    height: pointTextureSize,
    type: "float"
  });
  return reglInstance.framebuffer({
    color: initialTexture,
    depth: false,
    stencil: false
  });
}
var updatePositionFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform sampler2D velocity;uniform float friction;uniform float spaceSize;varying vec2 index;void main(){vec4 pointPosition=texture2D(position,index);vec4 pointVelocity=texture2D(velocity,index);pointVelocity.rg*=friction;pointPosition.rg+=pointVelocity.rg;pointPosition.r=clamp(pointPosition.r,0.0,spaceSize);pointPosition.g=clamp(pointPosition.g,0.0,spaceSize);gl_FragColor=pointPosition;}";
function createTrackedPositionsBuffer(indices, reglInstance) {
  const size2 = Math.ceil(Math.sqrt(indices.length));
  return reglInstance.framebuffer({
    shape: [size2, size2],
    depth: false,
    stencil: false,
    colorType: "float"
  });
}
function createTrackedIndicesBuffer(indices, pointsTextureSize, reglInstance) {
  const size2 = Math.ceil(Math.sqrt(indices.length));
  if (size2 === 0)
    return void 0;
  const initialState = new Float32Array(size2 * size2 * 4).fill(-1);
  for (const [i11, sortedIndex] of indices.entries()) {
    if (sortedIndex !== void 0) {
      initialState[i11 * 4] = sortedIndex % pointsTextureSize;
      initialState[i11 * 4 + 1] = Math.floor(sortedIndex / pointsTextureSize);
      initialState[i11 * 4 + 2] = 0;
      initialState[i11 * 4 + 3] = 0;
    }
  }
  const initialTexture = reglInstance.texture({
    data: initialState,
    width: size2,
    height: size2,
    type: "float"
  });
  return reglInstance.framebuffer({
    color: initialTexture,
    depth: false,
    stencil: false
  });
}
var trackPositionsFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform sampler2D trackedIndices;uniform float pointsTextureSize;varying vec2 index;void main(){vec4 trackedPointIndicies=texture2D(trackedIndices,index);if(trackedPointIndicies.r<0.0)discard;vec4 pointPosition=texture2D(position,(trackedPointIndicies.rg+0.5)/pointsTextureSize);gl_FragColor=vec4(pointPosition.rg,1.0,1.0);}";
var Points = class extends CoreModule {
  constructor() {
    super(...arguments);
    this.trackedPositionsById = /* @__PURE__ */ new Map();
  }
  create() {
    var _a, _b;
    const { reglInstance, store, data, config } = this;
    const { pointsTextureSize, adjustedSpaceSize } = store;
    if (!pointsTextureSize)
      return;
    const numParticles = data.nodes.length;
    const initialState = new Float32Array(pointsTextureSize * pointsTextureSize * 4);
    if (!config.disableSimulation)
      this.rescaleInitialNodePositions();
    for (let i11 = 0; i11 < numParticles; ++i11) {
      const sortedIndex = this.data.getSortedIndexByInputIndex(i11);
      const node = data.nodes[i11];
      if (node && sortedIndex !== void 0) {
        initialState[sortedIndex * 4 + 0] = (_a = node.x) !== null && _a !== void 0 ? _a : adjustedSpaceSize * store.getRandomFloat(0.495, 0.505);
        initialState[sortedIndex * 4 + 1] = (_b = node.y) !== null && _b !== void 0 ? _b : adjustedSpaceSize * store.getRandomFloat(0.495, 0.505);
      }
    }
    this.currentPositionFbo = reglInstance.framebuffer({
      color: reglInstance.texture({
        data: initialState,
        shape: [pointsTextureSize, pointsTextureSize, 4],
        type: "float"
      }),
      depth: false,
      stencil: false
    });
    if (!this.config.disableSimulation) {
      this.previousPositionFbo = reglInstance.framebuffer({
        color: reglInstance.texture({
          data: initialState,
          shape: [pointsTextureSize, pointsTextureSize, 4],
          type: "float"
        }),
        depth: false,
        stencil: false
      });
      this.velocityFbo = reglInstance.framebuffer({
        color: reglInstance.texture({
          data: new Float32Array(pointsTextureSize * pointsTextureSize * 4).fill(0),
          shape: [pointsTextureSize, pointsTextureSize, 4],
          type: "float"
        }),
        depth: false,
        stencil: false
      });
    }
    this.selectedFbo = reglInstance.framebuffer({
      color: reglInstance.texture({
        data: initialState,
        shape: [pointsTextureSize, pointsTextureSize, 4],
        type: "float"
      }),
      depth: false,
      stencil: false
    });
    this.hoveredFbo = reglInstance.framebuffer({
      shape: [2, 2],
      colorType: "float",
      depth: false,
      stencil: false
    });
    this.updateSize();
    this.updateColor();
    this.updateGreyoutStatus();
    this.updateSampledNodesGrid();
  }
  initPrograms() {
    const { reglInstance, config, store, data } = this;
    if (!config.disableSimulation) {
      this.updatePositionCommand = reglInstance({
        frag: updatePositionFrag,
        vert: updateVert,
        framebuffer: () => this.currentPositionFbo,
        primitive: "triangle strip",
        count: 4,
        attributes: { quad: createQuadBuffer(reglInstance) },
        uniforms: {
          position: () => this.previousPositionFbo,
          velocity: () => this.velocityFbo,
          friction: () => {
            var _a;
            return (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.friction;
          },
          spaceSize: () => store.adjustedSpaceSize
        }
      });
    }
    this.drawCommand = reglInstance({
      frag: drawPointsFrag,
      vert: drawPointsVert,
      primitive: "points",
      count: () => data.nodes.length,
      attributes: { indexes: createIndexesBuffer(reglInstance, store.pointsTextureSize) },
      uniforms: {
        positions: () => this.currentPositionFbo,
        particleColor: () => this.colorFbo,
        particleGreyoutStatus: () => this.greyoutStatusFbo,
        particleSize: () => this.sizeFbo,
        ratio: () => config.pixelRatio,
        sizeScale: () => config.nodeSizeScale,
        pointsTextureSize: () => store.pointsTextureSize,
        transform: () => store.transform,
        spaceSize: () => store.adjustedSpaceSize,
        screenSize: () => store.screenSize,
        greyoutOpacity: () => config.nodeGreyoutOpacity,
        scaleNodesOnZoom: () => config.scaleNodesOnZoom,
        maxPointSize: () => store.maxPointSize
      },
      blend: {
        enable: true,
        func: {
          dstRGB: "one minus src alpha",
          srcRGB: "src alpha",
          dstAlpha: "one minus src alpha",
          srcAlpha: "one"
        },
        equation: {
          rgb: "add",
          alpha: "add"
        }
      },
      depth: {
        enable: false,
        mask: false
      }
    });
    this.findPointsOnAreaSelectionCommand = reglInstance({
      frag: findPointsOnAreaSelectionFrag,
      vert: updateVert,
      framebuffer: () => this.selectedFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) },
      uniforms: {
        position: () => this.currentPositionFbo,
        particleSize: () => this.sizeFbo,
        spaceSize: () => store.adjustedSpaceSize,
        screenSize: () => store.screenSize,
        sizeScale: () => config.nodeSizeScale,
        transform: () => store.transform,
        ratio: () => config.pixelRatio,
        "selection[0]": () => store.selectedArea[0],
        "selection[1]": () => store.selectedArea[1],
        scaleNodesOnZoom: () => config.scaleNodesOnZoom,
        maxPointSize: () => store.maxPointSize
      }
    });
    this.clearHoveredFboCommand = reglInstance({
      frag: clearFrag,
      vert: updateVert,
      framebuffer: this.hoveredFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) }
    });
    this.findHoveredPointCommand = reglInstance({
      frag: findHoveredPointFrag,
      vert: findHoveredPointVert,
      primitive: "points",
      count: () => data.nodes.length,
      framebuffer: () => this.hoveredFbo,
      attributes: { indexes: createIndexesBuffer(reglInstance, store.pointsTextureSize) },
      uniforms: {
        position: () => this.currentPositionFbo,
        particleSize: () => this.sizeFbo,
        ratio: () => config.pixelRatio,
        sizeScale: () => config.nodeSizeScale,
        pointsTextureSize: () => store.pointsTextureSize,
        transform: () => store.transform,
        spaceSize: () => store.adjustedSpaceSize,
        screenSize: () => store.screenSize,
        scaleNodesOnZoom: () => config.scaleNodesOnZoom,
        mousePosition: () => store.screenMousePosition,
        maxPointSize: () => store.maxPointSize
      },
      depth: {
        enable: false,
        mask: false
      }
    });
    this.clearSampledNodesFboCommand = reglInstance({
      frag: clearFrag,
      vert: updateVert,
      framebuffer: () => this.sampledNodesFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) }
    });
    this.fillSampledNodesFboCommand = reglInstance({
      frag: fillGridWithSampledNodesFrag,
      vert: fillGridWithSampledNodesVert,
      primitive: "points",
      count: () => data.nodes.length,
      framebuffer: () => this.sampledNodesFbo,
      attributes: { indexes: createIndexesBuffer(reglInstance, store.pointsTextureSize) },
      uniforms: {
        position: () => this.currentPositionFbo,
        pointsTextureSize: () => store.pointsTextureSize,
        transform: () => store.transform,
        spaceSize: () => store.adjustedSpaceSize,
        screenSize: () => store.screenSize
      },
      depth: {
        enable: false,
        mask: false
      }
    });
    this.drawHighlightedCommand = reglInstance({
      frag: drawHighlightedFrag,
      vert: drawHighlightedVert,
      attributes: { quad: createQuadBuffer(reglInstance) },
      primitive: "triangle strip",
      count: 4,
      uniforms: {
        color: reglInstance.prop("color"),
        width: reglInstance.prop("width"),
        pointIndex: reglInstance.prop("pointIndex"),
        positions: () => this.currentPositionFbo,
        particleColor: () => this.colorFbo,
        particleSize: () => this.sizeFbo,
        sizeScale: () => config.nodeSizeScale,
        pointsTextureSize: () => store.pointsTextureSize,
        transform: () => store.transform,
        spaceSize: () => store.adjustedSpaceSize,
        screenSize: () => store.screenSize,
        scaleNodesOnZoom: () => config.scaleNodesOnZoom,
        maxPointSize: () => store.maxPointSize,
        particleGreyoutStatus: () => this.greyoutStatusFbo,
        greyoutOpacity: () => config.nodeGreyoutOpacity
      },
      blend: {
        enable: true,
        func: {
          dstRGB: "one minus src alpha",
          srcRGB: "src alpha",
          dstAlpha: "one minus src alpha",
          srcAlpha: "one"
        },
        equation: {
          rgb: "add",
          alpha: "add"
        }
      },
      depth: {
        enable: false,
        mask: false
      }
    });
    this.trackPointsCommand = reglInstance({
      frag: trackPositionsFrag,
      vert: updateVert,
      framebuffer: () => this.trackedPositionsFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) },
      uniforms: {
        position: () => this.currentPositionFbo,
        trackedIndices: () => this.trackedIndicesFbo,
        pointsTextureSize: () => store.pointsTextureSize
      }
    });
  }
  updateColor() {
    const { reglInstance, config, store: { pointsTextureSize }, data } = this;
    if (!pointsTextureSize)
      return;
    this.colorFbo = createColorBuffer(data, reglInstance, pointsTextureSize, config.nodeColor);
  }
  updateGreyoutStatus() {
    const { reglInstance, store } = this;
    this.greyoutStatusFbo = createGreyoutStatusBuffer(store.selectedIndices, reglInstance, store.pointsTextureSize);
  }
  updateSize() {
    const { reglInstance, config, store: { pointsTextureSize }, data } = this;
    if (!pointsTextureSize)
      return;
    this.sizeByIndex = new Float32Array(data.nodes.length);
    this.sizeFbo = createSizeBufferAndFillSizeStore(data, reglInstance, pointsTextureSize, config.nodeSize, this.sizeByIndex);
  }
  updateSampledNodesGrid() {
    const { store: { screenSize }, config: { nodeSamplingDistance }, reglInstance } = this;
    const dist = nodeSamplingDistance !== null && nodeSamplingDistance !== void 0 ? nodeSamplingDistance : Math.min(...screenSize) / 2;
    const w3 = Math.ceil(screenSize[0] / dist);
    const h6 = Math.ceil(screenSize[1] / dist);
    destroyFramebuffer(this.sampledNodesFbo);
    this.sampledNodesFbo = reglInstance.framebuffer({
      shape: [w3, h6],
      depth: false,
      stencil: false,
      colorType: "float"
    });
  }
  trackPoints() {
    var _a;
    if (!this.trackedIndicesFbo || !this.trackedPositionsFbo)
      return;
    (_a = this.trackPointsCommand) === null || _a === void 0 ? void 0 : _a.call(this);
  }
  draw() {
    var _a, _b, _c;
    const { config: { renderHoveredNodeRing, renderHighlightedNodeRing }, store } = this;
    (_a = this.drawCommand) === null || _a === void 0 ? void 0 : _a.call(this);
    if ((renderHoveredNodeRing !== null && renderHoveredNodeRing !== void 0 ? renderHoveredNodeRing : renderHighlightedNodeRing) && store.hoveredNode) {
      (_b = this.drawHighlightedCommand) === null || _b === void 0 ? void 0 : _b.call(this, {
        width: 0.85,
        color: store.hoveredNodeRingColor,
        pointIndex: store.hoveredNode.index
      });
    }
    if (store.focusedNode) {
      (_c = this.drawHighlightedCommand) === null || _c === void 0 ? void 0 : _c.call(this, {
        width: 0.75,
        color: store.focusedNodeRingColor,
        pointIndex: store.focusedNode.index
      });
    }
  }
  updatePosition() {
    var _a;
    (_a = this.updatePositionCommand) === null || _a === void 0 ? void 0 : _a.call(this);
    this.swapFbo();
  }
  findPointsOnAreaSelection() {
    var _a;
    (_a = this.findPointsOnAreaSelectionCommand) === null || _a === void 0 ? void 0 : _a.call(this);
  }
  findHoveredPoint() {
    var _a, _b;
    (_a = this.clearHoveredFboCommand) === null || _a === void 0 ? void 0 : _a.call(this);
    (_b = this.findHoveredPointCommand) === null || _b === void 0 ? void 0 : _b.call(this);
  }
  getNodeRadiusByIndex(index2) {
    var _a;
    return (_a = this.sizeByIndex) === null || _a === void 0 ? void 0 : _a[index2];
  }
  trackNodesByIds(ids) {
    this.trackedIds = ids.length ? ids : void 0;
    this.trackedPositionsById.clear();
    const indices = ids.map((id) => this.data.getSortedIndexById(id)).filter((d13) => d13 !== void 0);
    destroyFramebuffer(this.trackedIndicesFbo);
    this.trackedIndicesFbo = void 0;
    destroyFramebuffer(this.trackedPositionsFbo);
    this.trackedPositionsFbo = void 0;
    if (indices.length) {
      this.trackedIndicesFbo = createTrackedIndicesBuffer(indices, this.store.pointsTextureSize, this.reglInstance);
      this.trackedPositionsFbo = createTrackedPositionsBuffer(indices, this.reglInstance);
    }
    this.trackPoints();
  }
  getTrackedPositions() {
    if (!this.trackedIds)
      return this.trackedPositionsById;
    const pixels = readPixels(this.reglInstance, this.trackedPositionsFbo);
    this.trackedIds.forEach((id, i11) => {
      const x3 = pixels[i11 * 4];
      const y3 = pixels[i11 * 4 + 1];
      if (x3 !== void 0 && y3 !== void 0)
        this.trackedPositionsById.set(id, [x3, y3]);
    });
    return this.trackedPositionsById;
  }
  getSampledNodePositionsMap() {
    var _a, _b, _c;
    const positions = /* @__PURE__ */ new Map();
    if (!this.sampledNodesFbo)
      return positions;
    (_a = this.clearSampledNodesFboCommand) === null || _a === void 0 ? void 0 : _a.call(this);
    (_b = this.fillSampledNodesFboCommand) === null || _b === void 0 ? void 0 : _b.call(this);
    const pixels = readPixels(this.reglInstance, this.sampledNodesFbo);
    for (let i11 = 0; i11 < pixels.length / 4; i11++) {
      const index2 = pixels[i11 * 4];
      const isNotEmpty = !!pixels[i11 * 4 + 1];
      const x3 = pixels[i11 * 4 + 2];
      const y3 = pixels[i11 * 4 + 3];
      if (isNotEmpty && index2 !== void 0 && x3 !== void 0 && y3 !== void 0) {
        const inputIndex = this.data.getInputIndexBySortedIndex(index2);
        if (inputIndex !== void 0) {
          const id = (_c = this.data.getNodeByIndex(inputIndex)) === null || _c === void 0 ? void 0 : _c.id;
          if (id !== void 0)
            positions.set(id, [x3, y3]);
        }
      }
    }
    return positions;
  }
  destroy() {
    destroyFramebuffer(this.currentPositionFbo);
    destroyFramebuffer(this.previousPositionFbo);
    destroyFramebuffer(this.velocityFbo);
    destroyFramebuffer(this.selectedFbo);
    destroyFramebuffer(this.colorFbo);
    destroyFramebuffer(this.sizeFbo);
    destroyFramebuffer(this.greyoutStatusFbo);
    destroyFramebuffer(this.hoveredFbo);
    destroyFramebuffer(this.trackedIndicesFbo);
    destroyFramebuffer(this.trackedPositionsFbo);
  }
  swapFbo() {
    const temp = this.previousPositionFbo;
    this.previousPositionFbo = this.currentPositionFbo;
    this.currentPositionFbo = temp;
  }
  rescaleInitialNodePositions() {
    const { nodes } = this.data;
    const { spaceSize } = this.config;
    if (nodes.length === 0)
      return;
    const xs = nodes.map((n17) => n17.x).filter((n17) => n17 !== void 0);
    if (xs.length === 0)
      return;
    const ys = nodes.map((n17) => n17.y).filter((n17) => n17 !== void 0);
    if (ys.length === 0)
      return;
    const [minX, maxX] = extent(xs);
    if (minX === void 0 || maxX === void 0)
      return;
    const [minY, maxY] = extent(ys);
    if (minY === void 0 || maxY === void 0)
      return;
    const w3 = maxX - minX;
    const h6 = maxY - minY;
    const size2 = Math.max(w3, h6);
    const dw = (size2 - w3) / 2;
    const dh = (size2 - h6) / 2;
    const scaleX = linear().range([0, spaceSize !== null && spaceSize !== void 0 ? spaceSize : defaultConfigValues.spaceSize]).domain([minX - dw, maxX + dw]);
    const scaleY = linear().range([0, spaceSize !== null && spaceSize !== void 0 ? spaceSize : defaultConfigValues.spaceSize]).domain([minY - dh, maxY + dh]);
    nodes.forEach((n17) => {
      n17.x = scaleX(n17.x);
      n17.y = scaleY(n17.y);
    });
  }
};
var ALPHA_MIN = 1e-3;
var MAX_POINT_SIZE = 64;
var Store = class {
  constructor() {
    this.pointsTextureSize = 0;
    this.linksTextureSize = 0;
    this.alpha = 1;
    this.transform = mat3_exports.create();
    this.backgroundColor = [0, 0, 0, 0];
    this.screenSize = [0, 0];
    this.mousePosition = [0, 0];
    this.screenMousePosition = [0, 0];
    this.selectedArea = [[0, 0], [0, 0]];
    this.isSimulationRunning = false;
    this.simulationProgress = 0;
    this.selectedIndices = null;
    this.maxPointSize = MAX_POINT_SIZE;
    this.hoveredNode = void 0;
    this.focusedNode = void 0;
    this.adjustedSpaceSize = defaultConfigValues.spaceSize;
    this.hoveredNodeRingColor = [1, 1, 1, hoveredNodeRingOpacity];
    this.focusedNodeRingColor = [1, 1, 1, focusedNodeRingOpacity];
    this.alphaTarget = 0;
    this.scaleNodeX = linear();
    this.scaleNodeY = linear();
    this.random = new Random();
    this.alphaDecay = (decay) => 1 - Math.pow(ALPHA_MIN, 1 / decay);
  }
  addRandomSeed(seed) {
    this.random = this.random.clone(seed);
  }
  getRandomFloat(min, max) {
    return this.random.float(min, max);
  }
  /**
   * If the config parameter `spaceSize` exceeds the limits of WebGL,
   * it reduces the space size without changing the config parameter.
   */
  adjustSpaceSize(configSpaceSize, webglMaxTextureSize) {
    if (configSpaceSize >= webglMaxTextureSize) {
      this.adjustedSpaceSize = webglMaxTextureSize / 2;
      console.warn(`The \`spaceSize\` has been reduced to ${this.adjustedSpaceSize} due to WebGL limits`);
    } else
      this.adjustedSpaceSize = configSpaceSize;
  }
  updateScreenSize(width, height) {
    const { adjustedSpaceSize } = this;
    this.screenSize = [width, height];
    this.scaleNodeX.domain([0, adjustedSpaceSize]).range([(width - adjustedSpaceSize) / 2, (width + adjustedSpaceSize) / 2]);
    this.scaleNodeY.domain([adjustedSpaceSize, 0]).range([(height - adjustedSpaceSize) / 2, (height + adjustedSpaceSize) / 2]);
  }
  scaleX(x3) {
    return this.scaleNodeX(x3);
  }
  scaleY(y3) {
    return this.scaleNodeY(y3);
  }
  setHoveredNodeRingColor(color2) {
    const convertedRgba = getRgbaColor(color2);
    this.hoveredNodeRingColor[0] = convertedRgba[0];
    this.hoveredNodeRingColor[1] = convertedRgba[1];
    this.hoveredNodeRingColor[2] = convertedRgba[2];
  }
  setFocusedNodeRingColor(color2) {
    const convertedRgba = getRgbaColor(color2);
    this.focusedNodeRingColor[0] = convertedRgba[0];
    this.focusedNodeRingColor[1] = convertedRgba[1];
    this.focusedNodeRingColor[2] = convertedRgba[2];
  }
  setFocusedNode(node, index2) {
    if (node && index2 !== void 0) {
      this.focusedNode = { node, index: index2 };
    } else
      this.focusedNode = void 0;
  }
  addAlpha(decay) {
    return (this.alphaTarget - this.alpha) * this.alphaDecay(decay);
  }
};
var Zoom = class {
  constructor(store, config) {
    this.eventTransform = identity;
    this.behavior = zoom_default().scaleExtent([1e-3, Infinity]).on("start", (e36) => {
      var _a, _b, _c;
      this.isRunning = true;
      const userDriven = !!e36.sourceEvent;
      (_c = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.onZoomStart) === null || _c === void 0 ? void 0 : _c.call(_b, e36, userDriven);
    }).on("zoom", (e36) => {
      var _a, _b, _c;
      this.eventTransform = e36.transform;
      const { eventTransform: { x: x3, y: y3, k: k5 }, store: { transform, screenSize } } = this;
      const w3 = screenSize[0];
      const h6 = screenSize[1];
      mat3_exports.projection(transform, w3, h6);
      mat3_exports.translate(transform, transform, [x3, y3]);
      mat3_exports.scale(transform, transform, [k5, k5]);
      mat3_exports.translate(transform, transform, [w3 / 2, h6 / 2]);
      mat3_exports.scale(transform, transform, [w3 / 2, h6 / 2]);
      mat3_exports.scale(transform, transform, [1, -1]);
      const userDriven = !!e36.sourceEvent;
      (_c = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.onZoom) === null || _c === void 0 ? void 0 : _c.call(_b, e36, userDriven);
    }).on("end", (e36) => {
      var _a, _b, _c;
      this.isRunning = false;
      const userDriven = !!e36.sourceEvent;
      (_c = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.onZoomEnd) === null || _c === void 0 ? void 0 : _c.call(_b, e36, userDriven);
    });
    this.isRunning = false;
    this.store = store;
    this.config = config;
  }
  /**
   * Get the zoom transform that will fit the given node positions into the viewport
   *
   * @param positions An array of node positions in the form `[x, y]`
   * @param scale An optional scale factor to apply to the transform
   * @param padding Padding around the viewport in percentage
   */
  getTransform(positions, scale3, padding = 0.1) {
    if (positions.length === 0)
      return this.eventTransform;
    const { store: { screenSize } } = this;
    const width = screenSize[0];
    const height = screenSize[1];
    const xExtent = extent(positions.map((d13) => d13[0]));
    const yExtent = extent(positions.map((d13) => d13[1]));
    xExtent[0] = this.store.scaleX(xExtent[0]);
    xExtent[1] = this.store.scaleX(xExtent[1]);
    yExtent[0] = this.store.scaleY(yExtent[0]);
    yExtent[1] = this.store.scaleY(yExtent[1]);
    const xScale = width * (1 - padding * 2) / (xExtent[1] - xExtent[0]);
    const yScale = height * (1 - padding * 2) / (yExtent[0] - yExtent[1]);
    const clampedScale = clamp(scale3 !== null && scale3 !== void 0 ? scale3 : Math.min(xScale, yScale), ...this.behavior.scaleExtent());
    const xCenter = (xExtent[1] + xExtent[0]) / 2;
    const yCenter = (yExtent[1] + yExtent[0]) / 2;
    const translateX = width / 2 - xCenter * clampedScale;
    const translateY = height / 2 - yCenter * clampedScale;
    const transform = identity.translate(translateX, translateY).scale(clampedScale);
    return transform;
  }
  getDistanceToPoint(position) {
    const { x: x3, y: y3, k: k5 } = this.eventTransform;
    const point = this.getTransform([position], k5);
    const dx = x3 - point.x;
    const dy = y3 - point.y;
    return Math.sqrt(dx * dx + dy * dy);
  }
  getMiddlePointTransform(position) {
    const { store: { screenSize }, eventTransform: { x: x3, y: y3, k: k5 } } = this;
    const width = screenSize[0];
    const height = screenSize[1];
    const currX = (width / 2 - x3) / k5;
    const currY = (height / 2 - y3) / k5;
    const pointX = this.store.scaleX(position[0]);
    const pointY = this.store.scaleY(position[1]);
    const centerX = (currX + pointX) / 2;
    const centerY = (currY + pointY) / 2;
    const scale3 = 1;
    const translateX = width / 2 - centerX * scale3;
    const translateY = height / 2 - centerY * scale3;
    return identity.translate(translateX, translateY).scale(scale3);
  }
  convertScreenToSpacePosition(screenPosition) {
    const { eventTransform: { x: x3, y: y3, k: k5 }, store: { screenSize } } = this;
    const w3 = screenSize[0];
    const h6 = screenSize[1];
    const invertedX = (screenPosition[0] - x3) / k5;
    const invertedY = (screenPosition[1] - y3) / k5;
    const spacePosition = [invertedX, h6 - invertedY];
    spacePosition[0] -= (w3 - this.store.adjustedSpaceSize) / 2;
    spacePosition[1] -= (h6 - this.store.adjustedSpaceSize) / 2;
    return spacePosition;
  }
  convertSpaceToScreenPosition(spacePosition) {
    const screenPointX = this.eventTransform.applyX(this.store.scaleX(spacePosition[0]));
    const screenPointY = this.eventTransform.applyY(this.store.scaleY(spacePosition[1]));
    return [screenPointX, screenPointY];
  }
  convertSpaceToScreenRadius(spaceRadius) {
    const { config: { scaleNodesOnZoom }, store: { maxPointSize }, eventTransform: { k: k5 } } = this;
    let size2 = spaceRadius * 2;
    if (scaleNodesOnZoom) {
      size2 *= k5;
    } else {
      size2 *= Math.min(5, Math.max(1, k5 * 0.01));
    }
    return Math.min(size2, maxPointSize) / 2;
  }
};
var Graph = class {
  constructor(canvas, config) {
    var _a, _b;
    this.config = new GraphConfig();
    this.graph = new GraphData();
    this.requestAnimationFrameId = 0;
    this.isRightClickMouse = false;
    this.store = new Store();
    this.zoomInstance = new Zoom(this.store, this.config);
    this.hasParticleSystemDestroyed = false;
    this._findHoveredPointExecutionCount = 0;
    this._isMouseOnCanvas = false;
    this._isFirstDataAfterInit = true;
    if (config)
      this.config.init(config);
    const w3 = canvas.clientWidth;
    const h6 = canvas.clientHeight;
    canvas.width = w3 * this.config.pixelRatio;
    canvas.height = h6 * this.config.pixelRatio;
    if (canvas.style.width === "" && canvas.style.height === "") {
      select_default(canvas).style("width", "100%").style("height", "100%");
    }
    this.canvas = canvas;
    this.canvasD3Selection = select_default(canvas);
    this.canvasD3Selection.on("mouseenter.cosmos", () => {
      this._isMouseOnCanvas = true;
    }).on("mouseleave.cosmos", () => {
      this._isMouseOnCanvas = false;
    });
    this.zoomInstance.behavior.on("start.detect", (e36) => {
      this.currentEvent = e36;
    }).on("zoom.detect", (e36) => {
      const userDriven = !!e36.sourceEvent;
      if (userDriven)
        this.updateMousePosition(e36.sourceEvent);
      this.currentEvent = e36;
    }).on("end.detect", (e36) => {
      this.currentEvent = e36;
    });
    this.canvasD3Selection.call(this.zoomInstance.behavior).on("click", this.onClick.bind(this)).on("mousemove", this.onMouseMove.bind(this)).on("contextmenu", this.onRightClickMouse.bind(this));
    if (this.config.disableZoom)
      this.disableZoom();
    this.setZoomLevel((_a = this.config.initialZoomLevel) !== null && _a !== void 0 ? _a : 1);
    this.reglInstance = (0, import_regl.default)({
      canvas: this.canvas,
      attributes: {
        antialias: false,
        preserveDrawingBuffer: true
      },
      extensions: ["OES_texture_float", "ANGLE_instanced_arrays"]
    });
    this.store.maxPointSize = ((_b = this.reglInstance.limits.pointSizeDims[1]) !== null && _b !== void 0 ? _b : MAX_POINT_SIZE) / this.config.pixelRatio;
    this.store.adjustSpaceSize(this.config.spaceSize, this.reglInstance.limits.maxTextureSize);
    this.store.updateScreenSize(w3, h6);
    this.points = new Points(this.reglInstance, this.config, this.store, this.graph);
    this.lines = new Lines(this.reglInstance, this.config, this.store, this.graph, this.points);
    if (!this.config.disableSimulation) {
      this.forceGravity = new ForceGravity(this.reglInstance, this.config, this.store, this.graph, this.points);
      this.forceCenter = new ForceCenter(this.reglInstance, this.config, this.store, this.graph, this.points);
      this.forceManyBody = this.config.useQuadtree ? new ForceManyBodyQuadtree(this.reglInstance, this.config, this.store, this.graph, this.points) : new ForceManyBody(this.reglInstance, this.config, this.store, this.graph, this.points);
      this.forceLinkIncoming = new ForceLink(this.reglInstance, this.config, this.store, this.graph, this.points);
      this.forceLinkOutgoing = new ForceLink(this.reglInstance, this.config, this.store, this.graph, this.points);
      this.forceMouse = new ForceMouse(this.reglInstance, this.config, this.store, this.graph, this.points);
    }
    this.store.backgroundColor = getRgbaColor(this.config.backgroundColor);
    if (this.config.highlightedNodeRingColor) {
      this.store.setHoveredNodeRingColor(this.config.highlightedNodeRingColor);
      this.store.setFocusedNodeRingColor(this.config.highlightedNodeRingColor);
    } else {
      if (this.config.hoveredNodeRingColor) {
        this.store.setHoveredNodeRingColor(this.config.hoveredNodeRingColor);
      }
      if (this.config.focusedNodeRingColor) {
        this.store.setFocusedNodeRingColor(this.config.focusedNodeRingColor);
      }
    }
    if (this.config.showFPSMonitor)
      this.fpsMonitor = new FPSMonitor(this.canvas);
    if (this.config.randomSeed !== void 0)
      this.store.addRandomSeed(this.config.randomSeed);
  }
  get progress() {
    return this.store.simulationProgress;
  }
  /**
   * A value that gives information about the running simulation status.
   */
  get isSimulationRunning() {
    return this.store.isSimulationRunning;
  }
  /**
   * The maximum point size.
   * This value is the maximum size of the `gl.POINTS` primitive that WebGL can render on the user's hardware.
   */
  get maxPointSize() {
    return this.store.maxPointSize;
  }
  /**
   * Set or update Cosmos configuration. The changes will be applied in real time.
   * @param config Cosmos configuration object.
   */
  setConfig(config) {
    var _a, _b;
    const prevConfig = { ...this.config };
    this.config.init(config);
    if (prevConfig.linkColor !== this.config.linkColor)
      this.lines.updateColor();
    if (prevConfig.nodeColor !== this.config.nodeColor)
      this.points.updateColor();
    if (prevConfig.nodeSize !== this.config.nodeSize)
      this.points.updateSize();
    if (prevConfig.linkWidth !== this.config.linkWidth)
      this.lines.updateWidth();
    if (prevConfig.linkArrows !== this.config.linkArrows)
      this.lines.updateArrow();
    if (prevConfig.curvedLinkSegments !== this.config.curvedLinkSegments || prevConfig.curvedLinks !== this.config.curvedLinks) {
      this.lines.updateCurveLineGeometry();
    }
    if (prevConfig.backgroundColor !== this.config.backgroundColor)
      this.store.backgroundColor = getRgbaColor(this.config.backgroundColor);
    if (prevConfig.highlightedNodeRingColor !== this.config.highlightedNodeRingColor) {
      this.store.setHoveredNodeRingColor(this.config.highlightedNodeRingColor);
      this.store.setFocusedNodeRingColor(this.config.highlightedNodeRingColor);
    }
    if (prevConfig.hoveredNodeRingColor !== this.config.hoveredNodeRingColor) {
      this.store.setHoveredNodeRingColor(this.config.hoveredNodeRingColor);
    }
    if (prevConfig.focusedNodeRingColor !== this.config.focusedNodeRingColor) {
      this.store.setFocusedNodeRingColor(this.config.focusedNodeRingColor);
    }
    if (prevConfig.spaceSize !== this.config.spaceSize || prevConfig.simulation.repulsionQuadtreeLevels !== this.config.simulation.repulsionQuadtreeLevels) {
      this.store.adjustSpaceSize(this.config.spaceSize, this.reglInstance.limits.maxTextureSize);
      this.resizeCanvas(true);
      this.update(this.store.isSimulationRunning);
    }
    if (prevConfig.showFPSMonitor !== this.config.showFPSMonitor) {
      if (this.config.showFPSMonitor) {
        this.fpsMonitor = new FPSMonitor(this.canvas);
      } else {
        (_a = this.fpsMonitor) === null || _a === void 0 ? void 0 : _a.destroy();
        this.fpsMonitor = void 0;
      }
    }
    if (prevConfig.pixelRatio !== this.config.pixelRatio) {
      this.store.maxPointSize = ((_b = this.reglInstance.limits.pointSizeDims[1]) !== null && _b !== void 0 ? _b : MAX_POINT_SIZE) / this.config.pixelRatio;
    }
    if (prevConfig.disableZoom !== this.config.disableZoom) {
      if (this.config.disableZoom)
        this.disableZoom();
      else
        this.enableZoom();
    }
  }
  /**
   * Pass data to Cosmos.
   * @param nodes Array of nodes.
   * @param links Array of links.
   * @param runSimulation When set to `false`, the simulation won't be started automatically (`true` by default).
   */
  setData(nodes, links, runSimulation = true) {
    const { fitViewOnInit, fitViewDelay, fitViewByNodesInRect, initialZoomLevel } = this.config;
    if (!nodes.length && !links.length) {
      this.destroyParticleSystem();
      this.reglInstance.clear({
        color: this.store.backgroundColor,
        depth: 1,
        stencil: 0
      });
      return;
    }
    this.graph.setData(nodes, links);
    if (this._isFirstDataAfterInit && fitViewOnInit && initialZoomLevel === void 0) {
      this._fitViewOnInitTimeoutID = window.setTimeout(() => {
        if (fitViewByNodesInRect)
          this.setZoomTransformByNodePositions(fitViewByNodesInRect, void 0, void 0, 0);
        else
          this.fitView();
      }, fitViewDelay);
    }
    this._isFirstDataAfterInit = false;
    this.update(runSimulation);
  }
  /**
   * Center the view on a node and zoom in, by node id.
   * @param id Id of the node.
   * @param duration Duration of the animation transition in milliseconds (`700` by default).
   * @param scale Scale value to zoom in or out (`3` by default).
   * @param canZoomOut Set to `false` to prevent zooming out from the node (`true` by default).
   */
  zoomToNodeById(id, duration = 700, scale3 = defaultScaleToZoom, canZoomOut = true) {
    const node = this.graph.getNodeById(id);
    if (!node)
      return;
    this.zoomToNode(node, duration, scale3, canZoomOut);
  }
  /**
   * Center the view on a node and zoom in, by node index.
   * @param index The index of the node in the array of nodes.
   * @param duration Duration of the animation transition in milliseconds (`700` by default).
   * @param scale Scale value to zoom in or out (`3` by default).
   * @param canZoomOut Set to `false` to prevent zooming out from the node (`true` by default).
   */
  zoomToNodeByIndex(index2, duration = 700, scale3 = defaultScaleToZoom, canZoomOut = true) {
    const node = this.graph.getNodeByIndex(index2);
    if (!node)
      return;
    this.zoomToNode(node, duration, scale3, canZoomOut);
  }
  /**
   * Zoom the view in or out to the specified zoom level.
   * @param value Zoom level
   * @param duration Duration of the zoom in/out transition.
   */
  zoom(value, duration = 0) {
    this.setZoomLevel(value, duration);
  }
  /**
   * Zoom the view in or out to the specified zoom level.
   * @param value Zoom level
   * @param duration Duration of the zoom in/out transition.
   */
  setZoomLevel(value, duration = 0) {
    if (duration === 0) {
      this.canvasD3Selection.call(this.zoomInstance.behavior.scaleTo, value);
    } else {
      this.canvasD3Selection.transition().duration(duration).call(this.zoomInstance.behavior.scaleTo, value);
    }
  }
  /**
   * Get zoom level.
   * @returns Zoom level value of the view.
   */
  getZoomLevel() {
    return this.zoomInstance.eventTransform.k;
  }
  /**
   * Get current X and Y coordinates of the nodes.
   * @returns Object where keys are the ids of the nodes and values are corresponding `{ x: number; y: number }` objects.
   */
  getNodePositions() {
    if (this.hasParticleSystemDestroyed)
      return {};
    const particlePositionPixels = readPixels(this.reglInstance, this.points.currentPositionFbo);
    return this.graph.nodes.reduce((acc, curr) => {
      const index2 = this.graph.getSortedIndexById(curr.id);
      const posX = particlePositionPixels[index2 * 4 + 0];
      const posY = particlePositionPixels[index2 * 4 + 1];
      if (posX !== void 0 && posY !== void 0) {
        acc[curr.id] = {
          x: posX,
          y: posY
        };
      }
      return acc;
    }, {});
  }
  /**
   * Get current X and Y coordinates of the nodes.
   * @returns A Map object where keys are the ids of the nodes and values are their corresponding X and Y coordinates in the [number, number] format.
   */
  getNodePositionsMap() {
    const positionMap = /* @__PURE__ */ new Map();
    if (this.hasParticleSystemDestroyed)
      return positionMap;
    const particlePositionPixels = readPixels(this.reglInstance, this.points.currentPositionFbo);
    return this.graph.nodes.reduce((acc, curr) => {
      const index2 = this.graph.getSortedIndexById(curr.id);
      const posX = particlePositionPixels[index2 * 4 + 0];
      const posY = particlePositionPixels[index2 * 4 + 1];
      if (posX !== void 0 && posY !== void 0) {
        acc.set(curr.id, [posX, posY]);
      }
      return acc;
    }, positionMap);
  }
  /**
   * Get current X and Y coordinates of the nodes.
   * @returns Array of `[x: number, y: number]` arrays.
   */
  getNodePositionsArray() {
    const positions = [];
    if (this.hasParticleSystemDestroyed)
      return [];
    const particlePositionPixels = readPixels(this.reglInstance, this.points.currentPositionFbo);
    positions.length = this.graph.nodes.length;
    for (let i11 = 0; i11 < this.graph.nodes.length; i11 += 1) {
      const index2 = this.graph.getSortedIndexByInputIndex(i11);
      const posX = particlePositionPixels[index2 * 4 + 0];
      const posY = particlePositionPixels[index2 * 4 + 1];
      if (posX !== void 0 && posY !== void 0) {
        positions[i11] = [posX, posY];
      }
    }
    return positions;
  }
  /**
   * Center and zoom in/out the view to fit all nodes in the scene.
   * @param duration Duration of the center and zoom in/out animation in milliseconds (`250` by default).
   * @param padding Padding around the viewport in percentage
   */
  fitView(duration = 250, padding = 0.1) {
    this.setZoomTransformByNodePositions(this.getNodePositionsArray(), duration, void 0, padding);
  }
  /**
   * Center and zoom in/out the view to fit nodes by their ids in the scene.
   * @param duration Duration of the center and zoom in/out animation in milliseconds (`250` by default).
   * @param padding Padding around the viewport in percentage
   */
  fitViewByNodeIds(ids, duration = 250, padding = 0.1) {
    const positionsMap = this.getNodePositionsMap();
    const positions = ids.map((id) => positionsMap.get(id)).filter((d13) => d13 !== void 0);
    this.setZoomTransformByNodePositions(positions, duration, void 0, padding);
  }
  /** Select nodes inside a rectangular area.
   * @param selection - Array of two corner points `[[left, top], [right, bottom]]`.
   * The `left` and `right` coordinates should be from 0 to the width of the canvas.
   * The `top` and `bottom` coordinates should be from 0 to the height of the canvas. */
  selectNodesInRange(selection) {
    if (selection) {
      const h6 = this.store.screenSize[1];
      this.store.selectedArea = [[selection[0][0], h6 - selection[1][1]], [selection[1][0], h6 - selection[0][1]]];
      this.points.findPointsOnAreaSelection();
      const pixels = readPixels(this.reglInstance, this.points.selectedFbo);
      this.store.selectedIndices = pixels.map((pixel, i11) => {
        if (i11 % 4 === 0 && pixel !== 0)
          return i11 / 4;
        else
          return -1;
      }).filter((d13) => d13 !== -1);
    } else {
      this.store.selectedIndices = null;
    }
    this.points.updateGreyoutStatus();
  }
  /**
   * Select a node by id. If you want the adjacent nodes to get selected too, provide `true` as the second argument.
   * @param id Id of the node.
   * @param selectAdjacentNodes When set to `true`, selects adjacent nodes (`false` by default).
   */
  selectNodeById(id, selectAdjacentNodes = false) {
    var _a;
    if (selectAdjacentNodes) {
      const adjacentNodes = (_a = this.graph.getAdjacentNodes(id)) !== null && _a !== void 0 ? _a : [];
      this.selectNodesByIds([id, ...adjacentNodes.map((d13) => d13.id)]);
    } else
      this.selectNodesByIds([id]);
  }
  /**
   * Select a node by index. If you want the adjacent nodes to get selected too, provide `true` as the second argument.
   * @param index The index of the node in the array of nodes.
   * @param selectAdjacentNodes When set to `true`, selects adjacent nodes (`false` by default).
   */
  selectNodeByIndex(index2, selectAdjacentNodes = false) {
    const node = this.graph.getNodeByIndex(index2);
    if (node)
      this.selectNodeById(node.id, selectAdjacentNodes);
  }
  /**
   * Select multiples nodes by their ids.
   * @param ids Array of nodes ids.
   */
  selectNodesByIds(ids) {
    this.selectNodesByIndices(ids === null || ids === void 0 ? void 0 : ids.map((d13) => this.graph.getSortedIndexById(d13)));
  }
  /**
   * Select multiples nodes by their indices.
   * @param indices Array of nodes indices.
   */
  selectNodesByIndices(indices) {
    if (!indices) {
      this.store.selectedIndices = null;
    } else if (indices.length === 0) {
      this.store.selectedIndices = new Float32Array();
    } else {
      this.store.selectedIndices = new Float32Array(indices.filter((d13) => d13 !== void 0));
    }
    this.points.updateGreyoutStatus();
  }
  /**
   * Unselect all nodes.
   */
  unselectNodes() {
    this.store.selectedIndices = null;
    this.points.updateGreyoutStatus();
  }
  /**
   * Get nodes that are currently selected.
   * @returns Array of selected nodes.
   */
  getSelectedNodes() {
    const { selectedIndices } = this.store;
    if (!selectedIndices)
      return null;
    const points = new Array(selectedIndices.length);
    for (const [i11, selectedIndex] of selectedIndices.entries()) {
      if (selectedIndex !== void 0) {
        const index2 = this.graph.getInputIndexBySortedIndex(selectedIndex);
        if (index2 !== void 0)
          points[i11] = this.graph.nodes[index2];
      }
    }
    return points;
  }
  /**
   * Get nodes that are adjacent to a specific node by its id.
   * @param id Id of the node.
   * @returns Array of adjacent nodes.
   */
  getAdjacentNodes(id) {
    return this.graph.getAdjacentNodes(id);
  }
  /**
   * Set focus on a node by id. A ring will be highlighted around the focused node.
   * If no id is specified, the focus will be reset.
   * @param id Id of the node.
   */
  setFocusedNodeById(id) {
    if (id === void 0) {
      this.store.setFocusedNode();
    } else {
      this.store.setFocusedNode(this.graph.getNodeById(id), this.graph.getSortedIndexById(id));
    }
  }
  /**
   * Set focus on a node by index. A ring will be highlighted around the focused node.
   * If no index is specified, the focus will be reset.
   * @param index The index of the node in the array of nodes.
   */
  setFocusedNodeByIndex(index2) {
    if (index2 === void 0) {
      this.store.setFocusedNode();
    } else {
      this.store.setFocusedNode(this.graph.getNodeByIndex(index2), index2);
    }
  }
  /**
   * Converts the X and Y node coordinates from the space coordinate system to the screen coordinate system.
   * @param spacePosition Array of x and y coordinates in the space coordinate system.
   * @returns Array of x and y coordinates in the screen coordinate system.
   */
  spaceToScreenPosition(spacePosition) {
    return this.zoomInstance.convertSpaceToScreenPosition(spacePosition);
  }
  /**
   * Converts the node radius value from the space coordinate system to the screen coordinate system.
   * @param spaceRadius Radius of Node in the space coordinate system.
   * @returns Radius of Node in the screen coordinate system.
   */
  spaceToScreenRadius(spaceRadius) {
    return this.zoomInstance.convertSpaceToScreenRadius(spaceRadius);
  }
  /**
   * Get node radius by its index.
   * @param index Index of the node.
   * @returns Radius of the node.
   */
  getNodeRadiusByIndex(index2) {
    return this.points.getNodeRadiusByIndex(index2);
  }
  /**
   * Get node radius by its id.
   * @param id Id of the node.
   * @returns Radius of the node.
   */
  getNodeRadiusById(id) {
    const index2 = this.graph.getInputIndexById(id);
    if (index2 === void 0)
      return void 0;
    return this.points.getNodeRadiusByIndex(index2);
  }
  /**
   * Track multiple node positions by their ids on each Cosmos tick.
   * @param ids Array of nodes ids.
   */
  trackNodePositionsByIds(ids) {
    this.points.trackNodesByIds(ids);
  }
  /**
   * Track multiple node positions by their indices on each Cosmos tick.
   * @param ids Array of nodes indices.
   */
  trackNodePositionsByIndices(indices) {
    this.points.trackNodesByIds(indices.map((index2) => this.graph.getNodeByIndex(index2)).filter((d13) => d13 !== void 0).map((d13) => d13.id));
  }
  /**
   * Get current X and Y coordinates of the tracked nodes.
   * @returns A Map object where keys are the ids of the nodes and values are their corresponding X and Y coordinates in the [number, number] format.
   */
  getTrackedNodePositionsMap() {
    return this.points.getTrackedPositions();
  }
  /**
   * For the nodes that are currently visible on the screen, get a sample of node ids with their coordinates.
   * The resulting number of nodes will depend on the `nodeSamplingDistance` configuration property,
   * and the sampled nodes will be evenly distributed.
   * @returns A Map object where keys are the ids of the nodes and values are their corresponding X and Y coordinates in the [number, number] format.
   */
  getSampledNodePositionsMap() {
    return this.points.getSampledNodePositionsMap();
  }
  /**
   * Start the simulation.
   * @param alpha Value from 0 to 1. The higher the value, the more initial energy the simulation will get.
   */
  start(alpha = 1) {
    var _a, _b;
    if (!this.graph.nodes.length)
      return;
    this.store.isSimulationRunning = true;
    this.store.alpha = alpha;
    this.store.simulationProgress = 0;
    (_b = (_a = this.config.simulation).onStart) === null || _b === void 0 ? void 0 : _b.call(_a);
    this.stopFrames();
    this.frame();
  }
  /**
   * Pause the simulation.
   */
  pause() {
    var _a, _b;
    this.store.isSimulationRunning = false;
    (_b = (_a = this.config.simulation).onPause) === null || _b === void 0 ? void 0 : _b.call(_a);
  }
  /**
   * Restart the simulation.
   */
  restart() {
    var _a, _b;
    this.store.isSimulationRunning = true;
    (_b = (_a = this.config.simulation).onRestart) === null || _b === void 0 ? void 0 : _b.call(_a);
  }
  /**
   * Render only one frame of the simulation (stops the simulation if it was running).
   */
  step() {
    this.store.isSimulationRunning = false;
    this.stopFrames();
    this.frame();
  }
  /**
   * Destroy this Cosmos instance.
   */
  destroy() {
    var _a, _b;
    window.clearTimeout(this._fitViewOnInitTimeoutID);
    this.stopFrames();
    this.destroyParticleSystem();
    (_a = this.fpsMonitor) === null || _a === void 0 ? void 0 : _a.destroy();
    (_b = document.getElementById("gl-bench-style")) === null || _b === void 0 ? void 0 : _b.remove();
  }
  /**
   * Create new Cosmos instance.
   */
  create() {
    var _a, _b, _c, _d;
    this.points.create();
    this.lines.create();
    (_a = this.forceManyBody) === null || _a === void 0 ? void 0 : _a.create();
    (_b = this.forceLinkIncoming) === null || _b === void 0 ? void 0 : _b.create(LinkDirection.INCOMING);
    (_c = this.forceLinkOutgoing) === null || _c === void 0 ? void 0 : _c.create(LinkDirection.OUTGOING);
    (_d = this.forceCenter) === null || _d === void 0 ? void 0 : _d.create();
    this.hasParticleSystemDestroyed = false;
  }
  destroyParticleSystem() {
    var _a, _b, _c, _d;
    if (this.hasParticleSystemDestroyed)
      return;
    this.points.destroy();
    this.lines.destroy();
    (_a = this.forceCenter) === null || _a === void 0 ? void 0 : _a.destroy();
    (_b = this.forceLinkIncoming) === null || _b === void 0 ? void 0 : _b.destroy();
    (_c = this.forceLinkOutgoing) === null || _c === void 0 ? void 0 : _c.destroy();
    (_d = this.forceManyBody) === null || _d === void 0 ? void 0 : _d.destroy();
    this.reglInstance.destroy();
    this.hasParticleSystemDestroyed = true;
  }
  update(runSimulation) {
    const { graph } = this;
    this.store.pointsTextureSize = Math.ceil(Math.sqrt(graph.nodes.length));
    this.store.linksTextureSize = Math.ceil(Math.sqrt(graph.linksNumber * 2));
    this.destroyParticleSystem();
    this.create();
    this.initPrograms();
    this.setFocusedNodeById();
    this.store.hoveredNode = void 0;
    if (runSimulation) {
      this.start();
    } else {
      this.step();
    }
  }
  initPrograms() {
    var _a, _b, _c, _d, _e2, _f;
    this.points.initPrograms();
    this.lines.initPrograms();
    (_a = this.forceGravity) === null || _a === void 0 ? void 0 : _a.initPrograms();
    (_b = this.forceLinkIncoming) === null || _b === void 0 ? void 0 : _b.initPrograms();
    (_c = this.forceLinkOutgoing) === null || _c === void 0 ? void 0 : _c.initPrograms();
    (_d = this.forceMouse) === null || _d === void 0 ? void 0 : _d.initPrograms();
    (_e2 = this.forceManyBody) === null || _e2 === void 0 ? void 0 : _e2.initPrograms();
    (_f = this.forceCenter) === null || _f === void 0 ? void 0 : _f.initPrograms();
  }
  frame() {
    const { config: { simulation, renderLinks, disableSimulation }, store: { alpha, isSimulationRunning } } = this;
    if (alpha < ALPHA_MIN && isSimulationRunning)
      this.end();
    if (!this.store.pointsTextureSize)
      return;
    this.requestAnimationFrameId = window.requestAnimationFrame((now) => {
      var _a, _b, _c, _d, _e2, _f, _g, _h, _j, _k, _l, _m, _o;
      (_a = this.fpsMonitor) === null || _a === void 0 ? void 0 : _a.begin();
      this.resizeCanvas();
      this.findHoveredPoint();
      if (!disableSimulation) {
        if (this.isRightClickMouse) {
          if (!isSimulationRunning)
            this.start(0.1);
          (_b = this.forceMouse) === null || _b === void 0 ? void 0 : _b.run();
          this.points.updatePosition();
        }
        if (isSimulationRunning && !this.zoomInstance.isRunning) {
          if (simulation.gravity) {
            (_c = this.forceGravity) === null || _c === void 0 ? void 0 : _c.run();
            this.points.updatePosition();
          }
          if (simulation.center) {
            (_d = this.forceCenter) === null || _d === void 0 ? void 0 : _d.run();
            this.points.updatePosition();
          }
          (_e2 = this.forceManyBody) === null || _e2 === void 0 ? void 0 : _e2.run();
          this.points.updatePosition();
          if (this.store.linksTextureSize) {
            (_f = this.forceLinkIncoming) === null || _f === void 0 ? void 0 : _f.run();
            this.points.updatePosition();
            (_g = this.forceLinkOutgoing) === null || _g === void 0 ? void 0 : _g.run();
            this.points.updatePosition();
          }
          this.store.alpha += this.store.addAlpha((_h = this.config.simulation.decay) !== null && _h !== void 0 ? _h : defaultConfigValues.simulation.decay);
          if (this.isRightClickMouse)
            this.store.alpha = Math.max(this.store.alpha, 0.1);
          this.store.simulationProgress = Math.sqrt(Math.min(1, ALPHA_MIN / this.store.alpha));
          (_k = (_j = this.config.simulation).onTick) === null || _k === void 0 ? void 0 : _k.call(_j, this.store.alpha, (_l = this.store.hoveredNode) === null || _l === void 0 ? void 0 : _l.node, this.store.hoveredNode ? this.graph.getInputIndexBySortedIndex(this.store.hoveredNode.index) : void 0, (_m = this.store.hoveredNode) === null || _m === void 0 ? void 0 : _m.position);
        }
        this.points.trackPoints();
      }
      this.reglInstance.clear({
        color: this.store.backgroundColor,
        depth: 1,
        stencil: 0
      });
      if (renderLinks && this.store.linksTextureSize) {
        this.lines.draw();
      }
      this.points.draw();
      (_o = this.fpsMonitor) === null || _o === void 0 ? void 0 : _o.end(now);
      this.currentEvent = void 0;
      this.frame();
    });
  }
  stopFrames() {
    if (this.requestAnimationFrameId)
      window.cancelAnimationFrame(this.requestAnimationFrameId);
  }
  end() {
    var _a, _b;
    this.store.isSimulationRunning = false;
    this.store.simulationProgress = 1;
    (_b = (_a = this.config.simulation).onEnd) === null || _b === void 0 ? void 0 : _b.call(_a);
  }
  onClick(event) {
    var _a, _b, _c, _d;
    (_b = (_a = this.config.events).onClick) === null || _b === void 0 ? void 0 : _b.call(_a, (_c = this.store.hoveredNode) === null || _c === void 0 ? void 0 : _c.node, this.store.hoveredNode ? this.graph.getInputIndexBySortedIndex(this.store.hoveredNode.index) : void 0, (_d = this.store.hoveredNode) === null || _d === void 0 ? void 0 : _d.position, event);
  }
  updateMousePosition(event) {
    if (!event || event.offsetX === void 0 || event.offsetY === void 0)
      return;
    const mouseX = event.offsetX;
    const mouseY = event.offsetY;
    this.store.mousePosition = this.zoomInstance.convertScreenToSpacePosition([mouseX, mouseY]);
    this.store.screenMousePosition = [mouseX, this.store.screenSize[1] - mouseY];
  }
  onMouseMove(event) {
    var _a, _b, _c, _d;
    this.currentEvent = event;
    this.updateMousePosition(event);
    this.isRightClickMouse = event.which === 3;
    (_b = (_a = this.config.events).onMouseMove) === null || _b === void 0 ? void 0 : _b.call(_a, (_c = this.store.hoveredNode) === null || _c === void 0 ? void 0 : _c.node, this.store.hoveredNode ? this.graph.getInputIndexBySortedIndex(this.store.hoveredNode.index) : void 0, (_d = this.store.hoveredNode) === null || _d === void 0 ? void 0 : _d.position, this.currentEvent);
  }
  onRightClickMouse(event) {
    event.preventDefault();
  }
  resizeCanvas(forceResize = false) {
    const prevWidth = this.canvas.width;
    const prevHeight = this.canvas.height;
    const w3 = this.canvas.clientWidth;
    const h6 = this.canvas.clientHeight;
    if (forceResize || prevWidth !== w3 * this.config.pixelRatio || prevHeight !== h6 * this.config.pixelRatio) {
      const [prevW, prevH] = this.store.screenSize;
      const { k: k5 } = this.zoomInstance.eventTransform;
      const centerPosition = this.zoomInstance.convertScreenToSpacePosition([prevW / 2, prevH / 2]);
      this.store.updateScreenSize(w3, h6);
      this.canvas.width = w3 * this.config.pixelRatio;
      this.canvas.height = h6 * this.config.pixelRatio;
      this.reglInstance.poll();
      this.canvasD3Selection.call(this.zoomInstance.behavior.transform, this.zoomInstance.getTransform([centerPosition], k5));
      this.points.updateSampledNodesGrid();
    }
  }
  setZoomTransformByNodePositions(positions, duration = 250, scale3, padding) {
    this.resizeCanvas();
    const transform = this.zoomInstance.getTransform(positions, scale3, padding);
    this.canvasD3Selection.transition().ease(quadInOut).duration(duration).call(this.zoomInstance.behavior.transform, transform);
  }
  zoomToNode(node, duration, scale3, canZoomOut) {
    const { graph, store: { screenSize } } = this;
    const positionPixels = readPixels(this.reglInstance, this.points.currentPositionFbo);
    const nodeIndex = graph.getSortedIndexById(node.id);
    if (nodeIndex === void 0)
      return;
    const posX = positionPixels[nodeIndex * 4 + 0];
    const posY = positionPixels[nodeIndex * 4 + 1];
    if (posX === void 0 || posY === void 0)
      return;
    const distance = this.zoomInstance.getDistanceToPoint([posX, posY]);
    const zoomLevel = canZoomOut ? scale3 : Math.max(this.getZoomLevel(), scale3);
    if (distance < Math.min(screenSize[0], screenSize[1])) {
      this.setZoomTransformByNodePositions([[posX, posY]], duration, zoomLevel);
    } else {
      const transform = this.zoomInstance.getTransform([[posX, posY]], zoomLevel);
      const middle = this.zoomInstance.getMiddlePointTransform([posX, posY]);
      this.canvasD3Selection.transition().ease(quadIn).duration(duration / 2).call(this.zoomInstance.behavior.transform, middle).transition().ease(quadOut).duration(duration / 2).call(this.zoomInstance.behavior.transform, transform);
    }
  }
  disableZoom() {
    this.canvasD3Selection.call(this.zoomInstance.behavior).on("wheel.zoom", null);
  }
  enableZoom() {
    this.canvasD3Selection.call(this.zoomInstance.behavior);
  }
  findHoveredPoint() {
    var _a, _b, _c, _d, _e2;
    if (!this._isMouseOnCanvas)
      return;
    if (this._findHoveredPointExecutionCount < 2) {
      this._findHoveredPointExecutionCount += 1;
      return;
    }
    this._findHoveredPointExecutionCount = 0;
    this.points.findHoveredPoint();
    let isMouseover = false;
    let isMouseout = false;
    const pixels = readPixels(this.reglInstance, this.points.hoveredFbo);
    const nodeSize = pixels[1];
    if (nodeSize) {
      const index2 = pixels[0];
      const inputIndex = this.graph.getInputIndexBySortedIndex(index2);
      const hovered = inputIndex !== void 0 ? this.graph.getNodeByIndex(inputIndex) : void 0;
      if (((_a = this.store.hoveredNode) === null || _a === void 0 ? void 0 : _a.node) !== hovered)
        isMouseover = true;
      const pointX = pixels[2];
      const pointY = pixels[3];
      this.store.hoveredNode = hovered && {
        node: hovered,
        index: index2,
        position: [pointX, pointY]
      };
    } else {
      if (this.store.hoveredNode)
        isMouseout = true;
      this.store.hoveredNode = void 0;
    }
    if (isMouseover && this.store.hoveredNode) {
      (_c = (_b = this.config.events).onNodeMouseOver) === null || _c === void 0 ? void 0 : _c.call(_b, this.store.hoveredNode.node, this.graph.getInputIndexBySortedIndex(this.graph.getSortedIndexById(this.store.hoveredNode.node.id)), this.store.hoveredNode.position, this.currentEvent);
    }
    if (isMouseout)
      (_e2 = (_d = this.config.events).onNodeMouseOut) === null || _e2 === void 0 ? void 0 : _e2.call(_d, this.currentEvent);
  }
};

// node_modules/@interacta/css-labels/dist/helper.js
function rectIntersect(rect1, rect2) {
  const [left1, top1, right1, bottom1] = [rect1.x, rect1.y + rect1.height, rect1.x + rect1.width, rect1.y];
  const [left2, top2, right2, bottom2] = [rect2.x, rect2.y + rect2.height, rect2.x + rect2.width, rect2.y];
  return !(top1 < bottom2 || top2 < bottom1 || right1 < left2 || right2 < left1);
}

// node_modules/@interacta/css-labels/dist/variables.js
var TOP_BOTTOM_PADDING = 6;
var LEFT_RIGHT_PADDING = 9;
var DEFAULT_FONT_SIZE = 14;

// node_modules/@interacta/css-labels/dist/css-label-styles.js
var label = "css-label--label";
var hiddenLabel = "css-label--hidden";
var globalCssLabelStyles;
var createCssStyles = () => {
  if (globalCssLabelStyles)
    return;
  globalCssLabelStyles = document.createElement("style");
  globalCssLabelStyles.innerHTML = `
  :root {
    --css-label-background-color: #1e2428;
    --css-label-brightness: brightness(150%);
  }

  .${label} {
    position: absolute;
    top: 0;
    left: 0;

    font-weight: 500;
    cursor: pointer;
    
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;

    filter: var(--css-label-brightness);
    pointer-events: none;
    background-color: var(--css-label-background-color);
    font-weight: 700;
    border-radius: 6px;
    
    transition: opacity 600ms;
    opacity: 1;
  }

  .${hiddenLabel} {
    opacity: 0 !important;
  }
`;
  const firstStyleTagInHead = document.head.getElementsByTagName("style")[0];
  if (firstStyleTagInHead)
    document.head.insertBefore(globalCssLabelStyles, firstStyleTagInHead);
  else
    document.head.appendChild(globalCssLabelStyles);
};

// node_modules/@interacta/css-labels/dist/css-label.js
var CssLabel = class {
  constructor(container, text) {
    this.element = document.createElement("div");
    this.fontWidthHeightRatio = 0.6;
    this._x = 0;
    this._y = 0;
    this._estimatedWidth = 0;
    this._estimatedHeight = 0;
    this._visible = false;
    this._prevVisible = false;
    this._weight = 0;
    this._customFontSize = DEFAULT_FONT_SIZE;
    this._customColor = void 0;
    this._customOpacity = void 0;
    this._shouldBeShown = false;
    this._text = "";
    this._customPadding = {
      left: LEFT_RIGHT_PADDING,
      top: TOP_BOTTOM_PADDING,
      right: LEFT_RIGHT_PADDING,
      bottom: TOP_BOTTOM_PADDING
    };
    createCssStyles();
    this._container = container;
    this._updateClasses();
    if (text)
      this.setText(text);
    this.resetFontSize();
    this.resetPadding();
  }
  /**
   * Sets the text of the element.
   * @param text - The text to set.
   */
  setText(text) {
    if (this._text !== text) {
      this._text = text;
      this.element.innerHTML = text;
      this._measureText();
    }
  }
  /**
   * Sets the position of the label
   * @param x - The x coordinate of the label
   * @param y - The y coordinate of the label
   */
  setPosition(x3, y3) {
    this._x = x3;
    this._y = y3;
  }
  /**
   * Sets the CSS style of the element.
   * If a color, opacity or pointer-events is specified using the `setColor`,
   * `setOpacity` or `setPointerEvents` method, it takes priority over all custom styles.
   * The `fontSize` style will not apply from `setStyle`, and the `transform` style
   * will not apply, as it is used in the draw method to update the label position.
   * @param style - The style to be set.
   */
  setStyle(style) {
    if (this._customStyle !== style) {
      this._customStyle = style;
      this.element.style.cssText = this._customStyle;
      if (this._customColor)
        this.element.style.color = this._customColor;
      if (this._customOpacity)
        this.element.style.opacity = String(this._customOpacity);
      if (this._customPointerEvents)
        this.element.style.pointerEvents = this._customPointerEvents;
      if (this._customFontSize)
        this.element.style.fontSize = `${this._customFontSize}px`;
      if (this._customPadding) {
        const { top, right, bottom, left } = this._customPadding;
        this.element.style.padding = `${top}px ${right}px ${bottom}px ${left}px`;
      }
    }
  }
  /**
   * Sets the class name of the component
   * @param className - The class name to be set
   */
  setClassName(className) {
    if (this._customClassName !== className) {
      this._customClassName = className;
      this._updateClasses();
    }
  }
  /**
   * Sets the font size of the text in pixels.
   * This value cannot be changed through `setStyle` or `setClassName`
   * methods because it is used to measure the width and height of the label.
   * @param fontSize - The font size to set. If not specified, it will use the default value of `14px`.
   */
  setFontSize(fontSize = DEFAULT_FONT_SIZE) {
    if (this._customFontSize !== fontSize) {
      this.element.style.fontSize = `${fontSize}px`;
      this._customFontSize = fontSize;
      this._measureText();
    }
  }
  /**
   * Resets the font size of the element to default value.
   */
  resetFontSize() {
    this.element.style.fontSize = `${DEFAULT_FONT_SIZE}px`;
    this._customFontSize = DEFAULT_FONT_SIZE;
    this._measureText();
  }
  /**
   * Sets the color of the element.
   * This color will rewrite the color from `setStyle` CSS style if specified.
   * @param color - The color to set
   */
  setColor(color2) {
    if (this._customColor !== color2) {
      this.element.style.color = color2;
      this._customColor = color2;
    }
  }
  /**
   * Resets the color of the element.
   */
  resetColor() {
    this.element.style.removeProperty("color");
    this._customColor = void 0;
  }
  /**
   * Sets the opacity of the element.
   * This opacity will rewrite the opacity from `setStyle` CSS style if specified.
   * @param opacity - The opacity to set.
   */
  setOpacity(opacity) {
    if (this._customOpacity !== opacity) {
      this.element.style.opacity = String(opacity);
      this._customOpacity = opacity;
    }
  }
  /**
   * Resets the opacity of the element.
   */
  resetOpacity() {
    this.element.style.removeProperty("opacity");
    this._customOpacity = void 0;
  }
  /**
   * Sets the `pointerEvents` property to 'none', 'auto', or 'all'.
   * This `pointerEvents` value will rewrite the opacity from `setStyle` CSS style if specified.
   * @param pointerEvents - The `pointerEvents` value to be set.
   */
  setPointerEvents(pointerEvents) {
    if (this._customPointerEvents !== pointerEvents) {
      this.element.style.pointerEvents = `${pointerEvents}`;
      this._customPointerEvents = pointerEvents;
    }
  }
  /**
   * Resets the pointer-events of the element.
   */
  resetPointerEvents() {
    this.element.style.removeProperty("pointer-events");
    this._customPointerEvents = void 0;
  }
  /**
   * Sets the padding of the element in pixels.
   * This value cannot be changed through `setStyle` or `setClassName`
   * methods because it is used to measure the width and height of the label.
   * @param padding - The padding object with left, top, right and bottom properties.
   * If not specified, it will use the default value of `{ left: 9px, top: 6px, right: 9px, bottom: 6px }`.
   */
  setPadding(padding = {
    left: LEFT_RIGHT_PADDING,
    top: TOP_BOTTOM_PADDING,
    right: LEFT_RIGHT_PADDING,
    bottom: TOP_BOTTOM_PADDING
  }) {
    if (this._customPadding.left !== padding.left || this._customPadding.top !== padding.top || this._customPadding.right !== padding.right || this._customPadding.bottom !== padding.bottom) {
      this._customPadding = padding;
      this.element.style.padding = `${padding.top}px ${padding.right}px ${padding.bottom}px ${padding.left}px`;
      this._measureText();
    }
  }
  resetPadding() {
    const padding = {
      left: LEFT_RIGHT_PADDING,
      top: TOP_BOTTOM_PADDING,
      right: LEFT_RIGHT_PADDING,
      bottom: TOP_BOTTOM_PADDING
    };
    this.element.style.padding = `${padding.top}px ${padding.right}px ${padding.bottom}px ${padding.left}px`;
    this._customPadding = padding;
    this._measureText();
  }
  /**
   * Sets the boolean value of whether the element should be forced to shown or not
   * @param shouldBeShown - The boolean value to set
   */
  setForceShow(shouldBeShown) {
    this._shouldBeShown = shouldBeShown;
  }
  /**
   * Gets the boolean value of whether the element should be shown or not.
   * @returns The boolean value of whether the element should be shown or not.
   */
  getForceShow() {
    return this._shouldBeShown;
  }
  /**
   * Draws the element to the container and updates the label's coordinate.
   * The label's coordinate updates using `transform` style. It rewrite
   * the `transform` from `setStyle` CSS style if specified.
   */
  draw() {
    const isVisible = this.getVisibility();
    if (isVisible !== this._prevVisible) {
      if (this._prevVisible === false) {
        this._container.appendChild(this.element);
      } else {
        this._container.removeChild(this.element);
      }
      this._updateClasses();
      this._prevVisible = isVisible;
    }
    if (isVisible) {
      this.element.style.transform = `
        translate(-50%, -100%)
        translate3d(${this._x}px, ${this._y}px, 0)
      `;
    }
  }
  overlaps(label2) {
    return rectIntersect({
      height: this._estimatedHeight,
      width: this._estimatedWidth,
      x: this._x,
      y: this._y
    }, {
      height: label2._estimatedHeight,
      width: label2._estimatedWidth,
      x: label2._x,
      y: label2._y
    });
  }
  setVisibility(visible = true) {
    this._visible = visible;
  }
  getVisibility() {
    return this._visible;
  }
  isOnScreen() {
    return this._x > 0 && this._y > 0 && this._x < this._container.offsetWidth && this._y < this._container.offsetHeight;
  }
  setWeight(weight) {
    this._weight = weight;
  }
  getWeight() {
    return this._weight;
  }
  /**
   * Appends the element to the top of the container
   */
  raise() {
    this._container.appendChild(this.element);
  }
  /**
   * Removes the element from the DOM.
   */
  destroy() {
    this.element.remove();
  }
  _updateClasses() {
    const isVisible = this.getVisibility();
    if (isVisible) {
      window.requestAnimationFrame(() => {
        this.element.className = `${label} ${this._customClassName || ""}`;
      });
    } else {
      this.element.className = `${label} ${this._customClassName || ""} ${hiddenLabel}`;
    }
  }
  _measureText() {
    const { left, top, right, bottom } = this._customPadding;
    this._estimatedWidth = this._customFontSize * this.fontWidthHeightRatio * this.element.innerHTML.length + left + right;
    this._estimatedHeight = this._customFontSize + top + bottom;
  }
};

// node_modules/@interacta/css-labels/dist/styles.js
var labelsContainer = "css-label--labels-container";
var hidden = "css-label--labels-container-hidden";
var globalContainerStyle;
var createCssStyles2 = () => {
  if (globalContainerStyle)
    return;
  globalContainerStyle = document.createElement("style");
  globalContainerStyle.innerHTML = `
  .${labelsContainer} {
    transition: opacity 100ms;
    position: absolute;
    width: 100%;
    height: 100%;
    overflow: hidden;
    top: 0%;
    pointer-events: none;
    opacity: 1;
  }
  .${hidden} {
    opacity: 0;

    div {
      pointer-events: none;
    }
  }
`;
  const firstStyleTagInHead = document.head.getElementsByTagName("style")[0];
  if (firstStyleTagInHead)
    document.head.insertBefore(globalContainerStyle, firstStyleTagInHead);
  else
    document.head.appendChild(globalContainerStyle);
};

// node_modules/@interacta/css-labels/dist/index.js
var LabelRenderer = class {
  constructor(container, options) {
    this._cssLabels = /* @__PURE__ */ new Map();
    this._elementToData = /* @__PURE__ */ new Map();
    createCssStyles2();
    this._container = container;
    container.addEventListener("click", this._onClick.bind(this));
    this._container.className = labelsContainer;
    if (options === null || options === void 0 ? void 0 : options.onLabelClick)
      this._onClickCallback = options.onLabelClick;
    if (options === null || options === void 0 ? void 0 : options.padding)
      this._padding = options.padding;
    if (options === null || options === void 0 ? void 0 : options.pointerEvents)
      this._pointerEvents = options.pointerEvents;
    if (options === null || options === void 0 ? void 0 : options.dispatchWheelEventElement) {
      this._dispatchWheelEventElement = options.dispatchWheelEventElement;
      this._container.addEventListener("wheel", this._onWheel.bind(this));
    }
  }
  setLabels(labels) {
    const labelsToDelete = new Map(this._cssLabels);
    labels.forEach((label2) => {
      const { x: x3, y: y3, fontSize, color: color2, text, weight, opacity, shouldBeShown, style, className } = label2;
      const exists = labelsToDelete.get(label2.id);
      if (exists) {
        labelsToDelete.delete(label2.id);
      } else {
        const cssLabel = new CssLabel(this._container, label2.text);
        this._cssLabels.set(label2.id, cssLabel);
        this._elementToData.set(cssLabel.element, label2);
      }
      const labelToUpdate = this._cssLabels.get(label2.id);
      if (labelToUpdate) {
        labelToUpdate.setText(text);
        labelToUpdate.setPosition(x3, y3);
        if (style !== void 0)
          labelToUpdate.setStyle(style);
        if (weight !== void 0)
          labelToUpdate.setWeight(weight);
        if (fontSize !== void 0)
          labelToUpdate.setFontSize(fontSize);
        if (color2 !== void 0)
          labelToUpdate.setColor(color2);
        if (this._padding !== void 0)
          labelToUpdate.setPadding(this._padding);
        if (this._pointerEvents !== void 0)
          labelToUpdate.setPointerEvents(this._pointerEvents);
        if (opacity !== void 0)
          labelToUpdate.setOpacity(opacity);
        if (shouldBeShown !== void 0)
          labelToUpdate.setForceShow(shouldBeShown);
        if (className !== void 0)
          labelToUpdate.setClassName(className);
      }
    });
    for (const [key] of labelsToDelete) {
      const cssLabel = this._cssLabels.get(key);
      if (cssLabel) {
        this._elementToData.delete(cssLabel.element);
        cssLabel.destroy();
      }
      this._cssLabels.delete(key);
    }
  }
  draw(withIntersection = true) {
    if (withIntersection)
      this._intersectLabels();
    this._cssLabels.forEach((cssLabel) => cssLabel.draw());
  }
  show() {
    this._container.className = labelsContainer;
  }
  hide() {
    this._container.className = `${labelsContainer} ${hidden}`;
  }
  destroy() {
    this._container.removeEventListener("click", this._onClick.bind(this));
    this._container.removeEventListener("wheel", this._onWheel.bind(this));
    this._cssLabels.forEach((cssLabel) => cssLabel.destroy());
  }
  _onClick(e36) {
    var _a;
    const label2 = this._elementToData.get(e36.target);
    if (label2) {
      (_a = this._onClickCallback) === null || _a === void 0 ? void 0 : _a.call(this, e36, label2);
    }
  }
  _onWheel(e36) {
    var _a;
    e36.preventDefault();
    const newWheelEvent = new WheelEvent("wheel", e36);
    (_a = this._dispatchWheelEventElement) === null || _a === void 0 ? void 0 : _a.dispatchEvent(newWheelEvent);
  }
  _intersectLabels() {
    const cssLabels = Array.from(this._cssLabels.values());
    cssLabels.forEach((l6) => l6.setVisibility(l6.isOnScreen()));
    for (let i11 = 0; i11 < cssLabels.length; i11 += 1) {
      const label1 = cssLabels[i11];
      if (!label1.getVisibility())
        continue;
      for (let j6 = i11 + 1; j6 < cssLabels.length; j6 += 1) {
        const label2 = cssLabels[j6];
        if (!label2.getVisibility())
          continue;
        const isOverlapping = label1.overlaps(label2);
        if (isOverlapping) {
          if (label2.getWeight() > label1.getWeight()) {
            label1.setVisibility(label2.getForceShow() ? false : label1.getForceShow());
          } else {
            label2.setVisibility(label1.getForceShow() ? false : label2.getForceShow());
          }
          continue;
        }
      }
    }
  }
};

// node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js
var resizeObservers = [];

// node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js
var hasActiveObservations = function() {
  return resizeObservers.some(function(ro) {
    return ro.activeTargets.length > 0;
  });
};

// node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js
var hasSkippedObservations = function() {
  return resizeObservers.some(function(ro) {
    return ro.skippedTargets.length > 0;
  });
};

// node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js
var msg = "ResizeObserver loop completed with undelivered notifications.";
var deliverResizeLoopError = function() {
  var event;
  if (typeof ErrorEvent === "function") {
    event = new ErrorEvent("error", {
      message: msg
    });
  } else {
    event = document.createEvent("Event");
    event.initEvent("error", false, false);
    event.message = msg;
  }
  window.dispatchEvent(event);
};

// node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js
var ResizeObserverBoxOptions;
(function(ResizeObserverBoxOptions2) {
  ResizeObserverBoxOptions2["BORDER_BOX"] = "border-box";
  ResizeObserverBoxOptions2["CONTENT_BOX"] = "content-box";
  ResizeObserverBoxOptions2["DEVICE_PIXEL_CONTENT_BOX"] = "device-pixel-content-box";
})(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));

// node_modules/@juggle/resize-observer/lib/utils/freeze.js
var freeze = function(obj) {
  return Object.freeze(obj);
};

// node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js
var ResizeObserverSize = /* @__PURE__ */ function() {
  function ResizeObserverSize2(inlineSize, blockSize) {
    this.inlineSize = inlineSize;
    this.blockSize = blockSize;
    freeze(this);
  }
  return ResizeObserverSize2;
}();

// node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js
var DOMRectReadOnly = function() {
  function DOMRectReadOnly2(x3, y3, width, height) {
    this.x = x3;
    this.y = y3;
    this.width = width;
    this.height = height;
    this.top = this.y;
    this.left = this.x;
    this.bottom = this.top + this.height;
    this.right = this.left + this.width;
    return freeze(this);
  }
  DOMRectReadOnly2.prototype.toJSON = function() {
    var _a = this, x3 = _a.x, y3 = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;
    return { x: x3, y: y3, top, right, bottom, left, width, height };
  };
  DOMRectReadOnly2.fromRect = function(rectangle) {
    return new DOMRectReadOnly2(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
  };
  return DOMRectReadOnly2;
}();

// node_modules/@juggle/resize-observer/lib/utils/element.js
var isSVG = function(target) {
  return target instanceof SVGElement && "getBBox" in target;
};
var isHidden = function(target) {
  if (isSVG(target)) {
    var _a = target.getBBox(), width = _a.width, height = _a.height;
    return !width && !height;
  }
  var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;
  return !(offsetWidth || offsetHeight || target.getClientRects().length);
};
var isElement = function(obj) {
  var _a;
  if (obj instanceof Element) {
    return true;
  }
  var scope = (_a = obj === null || obj === void 0 ? void 0 : obj.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView;
  return !!(scope && obj instanceof scope.Element);
};
var isReplacedElement = function(target) {
  switch (target.tagName) {
    case "INPUT":
      if (target.type !== "image") {
        break;
      }
    case "VIDEO":
    case "AUDIO":
    case "EMBED":
    case "OBJECT":
    case "CANVAS":
    case "IFRAME":
    case "IMG":
      return true;
  }
  return false;
};

// node_modules/@juggle/resize-observer/lib/utils/global.js
var global2 = typeof window !== "undefined" ? window : {};

// node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js
var cache = /* @__PURE__ */ new WeakMap();
var scrollRegexp = /auto|scroll/;
var verticalRegexp = /^tb|vertical/;
var IE = /msie|trident/i.test(global2.navigator && global2.navigator.userAgent);
var parseDimension = function(pixel) {
  return parseFloat(pixel || "0");
};
var size = function(inlineSize, blockSize, switchSizes) {
  if (inlineSize === void 0) {
    inlineSize = 0;
  }
  if (blockSize === void 0) {
    blockSize = 0;
  }
  if (switchSizes === void 0) {
    switchSizes = false;
  }
  return new ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);
};
var zeroBoxes = freeze({
  devicePixelContentBoxSize: size(),
  borderBoxSize: size(),
  contentBoxSize: size(),
  contentRect: new DOMRectReadOnly(0, 0, 0, 0)
});
var calculateBoxSizes = function(target, forceRecalculation) {
  if (forceRecalculation === void 0) {
    forceRecalculation = false;
  }
  if (cache.has(target) && !forceRecalculation) {
    return cache.get(target);
  }
  if (isHidden(target)) {
    cache.set(target, zeroBoxes);
    return zeroBoxes;
  }
  var cs = getComputedStyle(target);
  var svg = isSVG(target) && target.ownerSVGElement && target.getBBox();
  var removePadding = !IE && cs.boxSizing === "border-box";
  var switchSizes = verticalRegexp.test(cs.writingMode || "");
  var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || "");
  var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || "");
  var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);
  var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);
  var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);
  var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);
  var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);
  var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);
  var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);
  var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);
  var horizontalPadding = paddingLeft + paddingRight;
  var verticalPadding = paddingTop + paddingBottom;
  var horizontalBorderArea = borderLeft + borderRight;
  var verticalBorderArea = borderTop + borderBottom;
  var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;
  var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;
  var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;
  var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;
  var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;
  var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;
  var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;
  var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;
  var boxes = freeze({
    devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),
    borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),
    contentBoxSize: size(contentWidth, contentHeight, switchSizes),
    contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)
  });
  cache.set(target, boxes);
  return boxes;
};
var calculateBoxSize = function(target, observedBox, forceRecalculation) {
  var _a = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;
  switch (observedBox) {
    case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:
      return devicePixelContentBoxSize;
    case ResizeObserverBoxOptions.BORDER_BOX:
      return borderBoxSize;
    default:
      return contentBoxSize;
  }
};

// node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js
var ResizeObserverEntry = /* @__PURE__ */ function() {
  function ResizeObserverEntry2(target) {
    var boxes = calculateBoxSizes(target);
    this.target = target;
    this.contentRect = boxes.contentRect;
    this.borderBoxSize = freeze([boxes.borderBoxSize]);
    this.contentBoxSize = freeze([boxes.contentBoxSize]);
    this.devicePixelContentBoxSize = freeze([boxes.devicePixelContentBoxSize]);
  }
  return ResizeObserverEntry2;
}();

// node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js
var calculateDepthForNode = function(node) {
  if (isHidden(node)) {
    return Infinity;
  }
  var depth = 0;
  var parent = node.parentNode;
  while (parent) {
    depth += 1;
    parent = parent.parentNode;
  }
  return depth;
};

// node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js
var broadcastActiveObservations = function() {
  var shallowestDepth = Infinity;
  var callbacks2 = [];
  resizeObservers.forEach(function processObserver(ro) {
    if (ro.activeTargets.length === 0) {
      return;
    }
    var entries = [];
    ro.activeTargets.forEach(function processTarget(ot3) {
      var entry = new ResizeObserverEntry(ot3.target);
      var targetDepth = calculateDepthForNode(ot3.target);
      entries.push(entry);
      ot3.lastReportedSize = calculateBoxSize(ot3.target, ot3.observedBox);
      if (targetDepth < shallowestDepth) {
        shallowestDepth = targetDepth;
      }
    });
    callbacks2.push(function resizeObserverCallback() {
      ro.callback.call(ro.observer, entries, ro.observer);
    });
    ro.activeTargets.splice(0, ro.activeTargets.length);
  });
  for (var _i = 0, callbacks_1 = callbacks2; _i < callbacks_1.length; _i++) {
    var callback = callbacks_1[_i];
    callback();
  }
  return shallowestDepth;
};

// node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js
var gatherActiveObservationsAtDepth = function(depth) {
  resizeObservers.forEach(function processObserver(ro) {
    ro.activeTargets.splice(0, ro.activeTargets.length);
    ro.skippedTargets.splice(0, ro.skippedTargets.length);
    ro.observationTargets.forEach(function processTarget(ot3) {
      if (ot3.isActive()) {
        if (calculateDepthForNode(ot3.target) > depth) {
          ro.activeTargets.push(ot3);
        } else {
          ro.skippedTargets.push(ot3);
        }
      }
    });
  });
};

// node_modules/@juggle/resize-observer/lib/utils/process.js
var process = function() {
  var depth = 0;
  gatherActiveObservationsAtDepth(depth);
  while (hasActiveObservations()) {
    depth = broadcastActiveObservations();
    gatherActiveObservationsAtDepth(depth);
  }
  if (hasSkippedObservations()) {
    deliverResizeLoopError();
  }
  return depth > 0;
};

// node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js
var trigger;
var callbacks = [];
var notify = function() {
  return callbacks.splice(0).forEach(function(cb) {
    return cb();
  });
};
var queueMicroTask = function(callback) {
  if (!trigger) {
    var toggle_1 = 0;
    var el_1 = document.createTextNode("");
    var config = { characterData: true };
    new MutationObserver(function() {
      return notify();
    }).observe(el_1, config);
    trigger = function() {
      el_1.textContent = "".concat(toggle_1 ? toggle_1-- : toggle_1++);
    };
  }
  callbacks.push(callback);
  trigger();
};

// node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js
var queueResizeObserver = function(cb) {
  queueMicroTask(function ResizeObserver3() {
    requestAnimationFrame(cb);
  });
};

// node_modules/@juggle/resize-observer/lib/utils/scheduler.js
var watching = 0;
var isWatching = function() {
  return !!watching;
};
var CATCH_PERIOD = 250;
var observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };
var events = [
  "resize",
  "load",
  "transitionend",
  "animationend",
  "animationstart",
  "animationiteration",
  "keyup",
  "keydown",
  "mouseup",
  "mousedown",
  "mouseover",
  "mouseout",
  "blur",
  "focus"
];
var time2 = function(timeout) {
  if (timeout === void 0) {
    timeout = 0;
  }
  return Date.now() + timeout;
};
var scheduled = false;
var Scheduler = function() {
  function Scheduler2() {
    var _this = this;
    this.stopped = true;
    this.listener = function() {
      return _this.schedule();
    };
  }
  Scheduler2.prototype.run = function(timeout) {
    var _this = this;
    if (timeout === void 0) {
      timeout = CATCH_PERIOD;
    }
    if (scheduled) {
      return;
    }
    scheduled = true;
    var until = time2(timeout);
    queueResizeObserver(function() {
      var elementsHaveResized = false;
      try {
        elementsHaveResized = process();
      } finally {
        scheduled = false;
        timeout = until - time2();
        if (!isWatching()) {
          return;
        }
        if (elementsHaveResized) {
          _this.run(1e3);
        } else if (timeout > 0) {
          _this.run(timeout);
        } else {
          _this.start();
        }
      }
    });
  };
  Scheduler2.prototype.schedule = function() {
    this.stop();
    this.run();
  };
  Scheduler2.prototype.observe = function() {
    var _this = this;
    var cb = function() {
      return _this.observer && _this.observer.observe(document.body, observerConfig);
    };
    document.body ? cb() : global2.addEventListener("DOMContentLoaded", cb);
  };
  Scheduler2.prototype.start = function() {
    var _this = this;
    if (this.stopped) {
      this.stopped = false;
      this.observer = new MutationObserver(this.listener);
      this.observe();
      events.forEach(function(name) {
        return global2.addEventListener(name, _this.listener, true);
      });
    }
  };
  Scheduler2.prototype.stop = function() {
    var _this = this;
    if (!this.stopped) {
      this.observer && this.observer.disconnect();
      events.forEach(function(name) {
        return global2.removeEventListener(name, _this.listener, true);
      });
      this.stopped = true;
    }
  };
  return Scheduler2;
}();
var scheduler = new Scheduler();
var updateCount = function(n17) {
  !watching && n17 > 0 && scheduler.start();
  watching += n17;
  !watching && scheduler.stop();
};

// node_modules/@juggle/resize-observer/lib/ResizeObservation.js
var skipNotifyOnElement = function(target) {
  return !isSVG(target) && !isReplacedElement(target) && getComputedStyle(target).display === "inline";
};
var ResizeObservation = function() {
  function ResizeObservation2(target, observedBox) {
    this.target = target;
    this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;
    this.lastReportedSize = {
      inlineSize: 0,
      blockSize: 0
    };
  }
  ResizeObservation2.prototype.isActive = function() {
    var size2 = calculateBoxSize(this.target, this.observedBox, true);
    if (skipNotifyOnElement(this.target)) {
      this.lastReportedSize = size2;
    }
    if (this.lastReportedSize.inlineSize !== size2.inlineSize || this.lastReportedSize.blockSize !== size2.blockSize) {
      return true;
    }
    return false;
  };
  return ResizeObservation2;
}();

// node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js
var ResizeObserverDetail = /* @__PURE__ */ function() {
  function ResizeObserverDetail2(resizeObserver, callback) {
    this.activeTargets = [];
    this.skippedTargets = [];
    this.observationTargets = [];
    this.observer = resizeObserver;
    this.callback = callback;
  }
  return ResizeObserverDetail2;
}();

// node_modules/@juggle/resize-observer/lib/ResizeObserverController.js
var observerMap = /* @__PURE__ */ new WeakMap();
var getObservationIndex = function(observationTargets, target) {
  for (var i11 = 0; i11 < observationTargets.length; i11 += 1) {
    if (observationTargets[i11].target === target) {
      return i11;
    }
  }
  return -1;
};
var ResizeObserverController = function() {
  function ResizeObserverController2() {
  }
  ResizeObserverController2.connect = function(resizeObserver, callback) {
    var detail = new ResizeObserverDetail(resizeObserver, callback);
    observerMap.set(resizeObserver, detail);
  };
  ResizeObserverController2.observe = function(resizeObserver, target, options) {
    var detail = observerMap.get(resizeObserver);
    var firstObservation = detail.observationTargets.length === 0;
    if (getObservationIndex(detail.observationTargets, target) < 0) {
      firstObservation && resizeObservers.push(detail);
      detail.observationTargets.push(new ResizeObservation(target, options && options.box));
      updateCount(1);
      scheduler.schedule();
    }
  };
  ResizeObserverController2.unobserve = function(resizeObserver, target) {
    var detail = observerMap.get(resizeObserver);
    var index2 = getObservationIndex(detail.observationTargets, target);
    var lastObservation = detail.observationTargets.length === 1;
    if (index2 >= 0) {
      lastObservation && resizeObservers.splice(resizeObservers.indexOf(detail), 1);
      detail.observationTargets.splice(index2, 1);
      updateCount(-1);
    }
  };
  ResizeObserverController2.disconnect = function(resizeObserver) {
    var _this = this;
    var detail = observerMap.get(resizeObserver);
    detail.observationTargets.slice().forEach(function(ot3) {
      return _this.unobserve(resizeObserver, ot3.target);
    });
    detail.activeTargets.splice(0, detail.activeTargets.length);
  };
  return ResizeObserverController2;
}();

// node_modules/@juggle/resize-observer/lib/ResizeObserver.js
var ResizeObserver2 = function() {
  function ResizeObserver3(callback) {
    if (arguments.length === 0) {
      throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
    }
    if (typeof callback !== "function") {
      throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
    }
    ResizeObserverController.connect(this, callback);
  }
  ResizeObserver3.prototype.observe = function(target, options) {
    if (arguments.length === 0) {
      throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
    }
    if (!isElement(target)) {
      throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
    }
    ResizeObserverController.observe(this, target, options);
  };
  ResizeObserver3.prototype.unobserve = function(target) {
    if (arguments.length === 0) {
      throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
    }
    if (!isElement(target)) {
      throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
    }
    ResizeObserverController.unobserve(this, target);
  };
  ResizeObserver3.prototype.disconnect = function() {
    ResizeObserverController.disconnect(this);
  };
  ResizeObserver3.toString = function() {
    return "function ResizeObserver () { [polyfill code] }";
  };
  return ResizeObserver3;
}();

// node_modules/@cosmograph/ui/modules/timeline/assets.js
var c2 = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><path fill="currentColor" d="M48 64C21.5 64 0 85.5 0 112V400c0 26.5 21.5 48 48 48H80c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48H48zm192 0c-26.5 0-48 21.5-48 48V400c0 26.5 21.5 48 48 48h32c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48H240z"/></svg>';
var s2 = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><path fill="currentColor" d="M73 39c-14.8-9.1-33.4-9.4-48.5-.9S0 62.6 0 80V432c0 17.4 9.4 33.4 24.5 41.9s33.7 8.1 48.5-.9L361 297c14.3-8.7 23-24.2 23-41s-8.7-32.2-23-41L73 39z"/></svg>';

// node_modules/@cosmograph/ui/modules/timeline/format.js
var a = timeFormat(".%L");
var f = timeFormat(":%S");
var n2 = timeFormat("%I:%M");
var b = timeFormat("%I %p");
var c3 = timeFormat("%a %d");
var s3 = timeFormat("%b %d");
var I = timeFormat("%b");
var u = timeFormat("%Y");
var w = (t23) => {
  const w3 = new Date(t23);
  return (second(w3) < w3 ? a : timeMinute(w3) < w3 ? f : timeHour(w3) < w3 ? n2 : timeDay(w3) < w3 ? b : timeMonth(w3) < w3 ? timeSunday(w3) < w3 ? c3 : s3 : timeYear(w3) < w3 ? I : u)(w3);
};

// node_modules/@cosmograph/ui/utils.js
var t2 = (t23) => "function" == typeof t23;
var e2 = (t23) => Array.isArray(t23);
var n3 = (t23) => t23 instanceof Object;
var r2 = (t23) => "Function" !== t23.constructor.name && "Object" !== t23.constructor.name;
var o2 = (o22) => n3(o22) && !e2(o22) && !t2(o22) && !r2(o22);
var s4 = (t23, e36 = /* @__PURE__ */ new Map()) => {
  if ("object" != typeof t23 || null === t23) return t23;
  if (t23 instanceof Date) return new Date(t23.getTime());
  if (t23 instanceof Array) {
    const n17 = [];
    e36.set(t23, n17);
    for (const r14 of t23) n17.push(e36.has(r14) ? e36.get(r14) : s4(r14, e36));
    return t23;
  }
  if (r2(t23)) {
    return t23;
  }
  if (t23 instanceof Object) {
    const n17 = {};
    e36.set(t23, n17);
    const r14 = t23;
    return Object.keys(t23).reduce((t24, n18) => (t24[n18] = e36.has(r14[n18]) ? e36.get(r14[n18]) : s4(r14[n18], e36), t24), n17), n17;
  }
  return t23;
};
var a2 = (t23, e36, n17 = /* @__PURE__ */ new Map()) => {
  const c11 = r2(t23) ? t23 : s4(t23);
  return t23 === e36 ? t23 : n17.has(e36) ? n17.get(e36) : (n17.set(e36, c11), Object.keys(e36).forEach((i11) => {
    o2(t23[i11]) && o2(e36[i11]) ? c11[i11] = a2(t23[i11], e36[i11], n17) : r2(e36) ? c11[i11] = e36 : c11[i11] = s4(e36[i11]);
  }), c11);
};
var c4 = (t23, e36, n17) => t23 >= +e36 && +t23 <= +n17;
var i = (t23, e36) => {
  const [n17, r14] = e36, o22 = Array.from(t23.keys());
  let s15 = 0;
  return o22.forEach((e37) => {
    var o23;
    c4(+e37, +n17, +r14) && (s15 += null !== (o23 = t23.get(e37)) && void 0 !== o23 ? o23 : 0);
  }), s15;
};
var f2 = (t23) => {
  const e36 = getComputedStyle(t23);
  let n17 = t23.clientWidth, r14 = t23.clientHeight;
  return r14 -= parseFloat(e36.paddingTop) + parseFloat(e36.paddingBottom), n17 -= parseFloat(e36.paddingLeft) + parseFloat(e36.paddingRight), { height: r14, width: n17 };
};
var u2 = class {
  init(t23) {
    const e36 = this;
    return Object.keys(t23).forEach((n17) => {
      o2(e36[n17]) ? e36[n17] = a2(e36[n17], t23[n17]) : e36[n17] = t23[n17];
    }), this;
  }
};

// node_modules/@cosmograph/ui/modules/timeline/config.js
var o3 = { top: 1, left: 0, bottom: 1, right: 0 };
var s5 = class extends u2 {
  constructor() {
    super(...arguments), this.allowSelection = true, this.showAnimationControls = false, this.animationSpeed = 50, this.padding = o3, this.axisTickHeight = 25, this.selectionRadius = 3, this.selectionPadding = 8, this.barCount = 100, this.barRadius = 1, this.barPadding = 0.1, this.barTopMargin = 3, this.minBarHeight = 1, this.dataStep = void 0, this.tickStep = void 0, this.formatter = w, this.events = { onBrush: void 0, onBarHover: void 0, onAnimationPlay: void 0, onAnimationPause: void 0 };
  }
};

// node_modules/@cosmograph/ui/ext/rollup-plugin-styles/dist/runtime/inject-css.js
var e3 = [];
var t3 = [];
function n4(n17, r14) {
  if (n17 && "undefined" != typeof document) {
    var a13, s15 = true === r14.prepend ? "prepend" : "append", d13 = true === r14.singleTag, i11 = "string" == typeof r14.container ? document.querySelector(r14.container) : document.getElementsByTagName("head")[0];
    if (d13) {
      var u8 = e3.indexOf(i11);
      -1 === u8 && (u8 = e3.push(i11) - 1, t3[u8] = {}), a13 = t3[u8] && t3[u8][s15] ? t3[u8][s15] : t3[u8][s15] = c11();
    } else a13 = c11();
    65279 === n17.charCodeAt(0) && (n17 = n17.substring(1)), a13.styleSheet ? a13.styleSheet.cssText += n17 : a13.appendChild(document.createTextNode(n17));
  }
  function c11() {
    var e36 = document.createElement("style");
    if (e36.setAttribute("type", "text/css"), r14.attributes) for (var t23 = Object.keys(r14.attributes), n18 = 0; n18 < t23.length; n18++) e36.setAttribute(t23[n18], r14.attributes[t23[n18]]);
    var a14 = "prepend" === s15 ? "afterbegin" : "beforeend";
    return i11.insertAdjacentElement(a14, e36), e36;
  }
}

// node_modules/@cosmograph/ui/modules/timeline/style.module.css.js
var o4 = ":root{--cosmograph-timeline-text-color:#fff;--cosmograph-timeline-axis-color:#fff;--cosmograph-timeline-selection-color:#777;--cosmograph-timeline-selection-opacity:0.5;--cosmograph-timeline-bar-color:#7a7a7a;--cosmograph-timeline-font-family:inherit;--cosmograph-timeline-font-size:11px;--cosmograph-timeline-background:#222}.style_module_timeline__f90332e1{background:var(--cosmograph-timeline-background);display:flex;overflow:hidden;position:relative;width:100%}.style_module_timelineSvg__f90332e1{height:100%;position:relative;width:100%}.style_module_selection__f90332e1{fill:var(--cosmograph-timeline-selection-color);fill-opacity:var(--cosmograph-timeline-selection-opacity);stroke:none}.style_module_axisTick__f90332e1{text-anchor:initial;alignment-baseline:text-before-edge;color:var(--cosmograph-timeline-axis-color);font:var(--cosmograph-timeline-font-family);font-size:var(--cosmograph-timeline-font-size);font-weight:400;opacity:.7;user-select:none}.style_module_axisLine__f90332e1{color:var(--cosmograph-timeline-axis-color);opacity:.2}.style_module_bar__f90332e1{fill:var(--cosmograph-timeline-bar-color);opacity:0;transform:scaleY(-1)}.style_module_noData__f90332e1{height:100%;position:absolute;top:0;width:100%}.style_module_noData__f90332e1 div{align-items:center;display:flex;font-size:calc(var(--cosmograph-timeline-font-size) + 5px);font-weight:300;height:100%;justify-content:center;letter-spacing:1;opacity:.25;user-select:none}.style_module_animationControl__f90332e1{align-items:center;color:var(--cosmograph-timeline-axis-color);cursor:pointer;display:flex;height:100%;justify-content:center;max-width:30px;min-width:20px;opacity:.5;position:relative;user-select:none;width:6%}.style_module_animationControl__f90332e1>svg{max-height:20px;padding-right:2px;width:50%}.style_module_hidden__f90332e1{display:none}.style_module_disabled__f90332e1{opacity:.2;pointer-events:none}";
var i2 = { timeline: "style_module_timeline__f90332e1", timelineSvg: "style_module_timelineSvg__f90332e1", selection: "style_module_selection__f90332e1", axisTick: "style_module_axisTick__f90332e1", axisLine: "style_module_axisLine__f90332e1", bar: "style_module_bar__f90332e1", noData: "style_module_noData__f90332e1", axis: "style_module_axis__f90332e1", bars: "style_module_bars__f90332e1", brush: "style_module_brush__f90332e1", animationControl: "style_module_animationControl__f90332e1", hidden: "style_module_hidden__f90332e1", disabled: "style_module_disabled__f90332e1", playAnimation: "style_module_playAnimation__f90332e1", pauseAnimation: "style_module_pauseAnimation__f90332e1" };
n4(o4, {});

// node_modules/@cosmograph/ui/modules/timeline/index.js
var p = class {
  constructor(s15, r14) {
    var h6;
    if (this._isAnimationRunning = false, this._svgParser = new DOMParser(), this._height = 0, this._width = 0, this._timelineWidth = 0, this._timelineHeight = 0, this._config = new s5(), this._barWidth = 0, this._maxCount = 0, this._barsData = [], this._timeData = void 0, this._bandIntervals = [], this._isNumericTimeline = false, this._firstRender = true, this._yScale = symlog(), this._timeScale = time(), this._numScale = linear(), this._activeAxisScale = this._timeScale, this._timeAxis = axisBottom(this._timeScale), this._numAxis = axisBottom(this._numScale), this._toggleAnimation = (i11) => {
      i11.preventDefault(), this._isAnimationRunning ? this.pauseAnimation() : this.playAnimation();
    }, this._disableAnimation = () => {
      var i11, t23;
      this.pauseAnimation(), null === (i11 = this._animationControlDiv) || void 0 === i11 || i11.removeEventListener("click", this._toggleAnimation), null === (t23 = this._animationControlDiv) || void 0 === t23 || t23.remove();
    }, this.playAnimation = () => {
      var i11, t23, s16, n17;
      clearInterval(this._animationInterval), this._currentSelectionInPixels && (this._animationInterval = setInterval(this._animateSelection, this._config.animationSpeed), this._isAnimationRunning = true, null === (t23 = (i11 = this._config.events).onAnimationPlay) || void 0 === t23 || t23.call(i11, this._isAnimationRunning, this._currentSelection)), null === (s16 = this._pauseButtonSvg) || void 0 === s16 || s16.classList.remove(i2.hidden), null === (n17 = this._playButtonSvg) || void 0 === n17 || n17.classList.add(i2.hidden);
    }, this.pauseAnimation = () => {
      var i11, t23, s16, n17;
      clearInterval(this._animationInterval), this._isAnimationRunning = false, null === (t23 = (i11 = this._config.events).onAnimationPause) || void 0 === t23 || t23.call(i11, this._isAnimationRunning, this._currentSelection), null === (s16 = this._pauseButtonSvg) || void 0 === s16 || s16.classList.add(i2.hidden), null === (n17 = this._playButtonSvg) || void 0 === n17 || n17.classList.remove(i2.hidden);
    }, this.stopAnimation = () => {
      var i11, t23;
      this.pauseAnimation(), this.setSelection(void 0), null === (t23 = (i11 = this._config.events).onBrush) || void 0 === t23 || t23.call(i11, void 0);
    }, this._animateSelection = () => {
      var i11, t23;
      const s16 = this._currentSelectionInPixels;
      s16 && void 0 !== s16[0] && void 0 !== s16[1] && (this.setSelectionInPixels([s16[0] + this._barWidth, s16[1] + this._barWidth]), s16[1] !== (null === (i11 = this._currentSelectionInPixels) || void 0 === i11 ? void 0 : i11[1]) && void 0 !== (null === (t23 = this._currentSelectionInPixels) || void 0 === t23 ? void 0 : t23[1]) || this.stopAnimation());
    }, this._checkLastTickPosition = () => {
      var i11;
      const t23 = this._axisGroup.selectAll(".tick:last-of-type").nodes();
      if (null == t23 ? void 0 : t23.length) {
        const s16 = t23[0], n17 = null == s16 ? void 0 : s16.getBoundingClientRect().right, e36 = null === (i11 = this._svg) || void 0 === i11 ? void 0 : i11.getBoundingClientRect().right;
        s16.style.display = n17 >= e36 ? "none" : "inherit";
      }
    }, this.destroy = () => {
      this._containerNode.innerHTML = "", clearInterval(this._animationInterval);
    }, r14 && this._config.init(r14), this._containerNode = s15, this._svg = document.createElementNS("http://www.w3.org/2000/svg", "svg"), this._svg.classList.add(i2.timelineSvg), this._animationControlDiv = document.createElement("div"), this._animationControlDiv.classList.add(i2.animationControl), this._containerNode.classList.add(i2.timeline), this._containerNode.appendChild(this._svg), this._noDataDiv = document.createElement("div"), select_default(this._noDataDiv).style("display", "none").attr("class", i2.noData).append("div").text("No timeline data"), this._containerNode.appendChild(this._noDataDiv), null === (h6 = this._config) || void 0 === h6 ? void 0 : h6.showAnimationControls) {
      const i11 = setInterval(() => {
        null !== this._containerNode && (this._initAnimationControls(), clearInterval(i11));
      }, 100);
    }
    this._barsGroup = select_default(this._svg).append("g").attr("class", i2.bars), this._axisGroup = select_default(this._svg).append("g").attr("class", i2.axis), this._brushGroup = select_default(this._svg).append("g").attr("class", i2.brush), this._timeAxis.tickFormat(this._config.formatter), this._numAxis.tickFormat(this._config.formatter), this._resizeObserver = new ResizeObserver2((i11) => {
      window.requestAnimationFrame(() => {
        Array.isArray(i11) && i11.length && this.resize();
      });
    }), this._resizeObserver = new ResizeObserver2(() => {
      this.resize();
    }), this._resizeObserver.observe(this._containerNode);
  }
  get _barPadding() {
    return this._barWidth * this._config.barPadding;
  }
  getCurrentSelection() {
    return this._currentSelection;
  }
  getCurrentSelectionInPixels() {
    return this._currentSelectionInPixels;
  }
  getBarWidth() {
    return this._barWidth - this._barPadding;
  }
  getConfig() {
    return this._config;
  }
  getIsAnimationRunning() {
    return this._isAnimationRunning;
  }
  setConfig(i11) {
    var t23, s15, n17, e36, a13, o22;
    const r14 = JSON.parse(JSON.stringify(this._config));
    i11 ? this._config.init(i11) : this._config = new s5(), (null === (t23 = this._config) || void 0 === t23 ? void 0 : t23.showAnimationControls) ? (null === (s15 = this._animationControlDiv) || void 0 === s15 ? void 0 : s15.isConnected) || this._initAnimationControls() : this._animationControlDiv && this._disableAnimation(), this._config.allowSelection || this._disableBrush(), this._config.formatter && (this._timeAxis.tickFormat(this._config.formatter), this._numAxis.tickFormat(this._config.formatter)), (null === (n17 = this._config) || void 0 === n17 ? void 0 : n17.dataStep) === (null === (e36 = r14.config) || void 0 === e36 ? void 0 : e36.dataStep) && (null === (a13 = this._config) || void 0 === a13 ? void 0 : a13.barCount) === (null === (o22 = r14.config) || void 0 === o22 ? void 0 : o22.barCount) || this._updateTimelineData(), this.resize();
  }
  setTimeData(i11) {
    var t23, s15, n17;
    this._timeData = null == i11 ? void 0 : i11.filter((i12) => !isNaN(+i12) && void 0 !== i12), this._currentSelection = void 0, null === (s15 = (t23 = this._config.events).onBrush) || void 0 === s15 || s15.call(t23, this._currentSelection), this._updateScales(), select_default(this._noDataDiv).style("display", "none"), (null === (n17 = this._timeData) || void 0 === n17 ? void 0 : n17.length) ? (this._dateExtent = extent(this._timeData), this._updateTimelineData()) : (this._barsData = [], this._axisGroup.selectAll("*").remove(), this._barsGroup.selectAll("*").remove(), this._brushGroup.selectAll("*").remove(), select_default(this._noDataDiv).style("display", "block"), this._firstRender = true);
  }
  _getBarsData(i11, t23) {
    var s15, n17;
    if (!(i11[1] <= i11[0]) && (null === (s15 = this._timeData) || void 0 === s15 ? void 0 : s15.length) && this._dateExtent) {
      const s16 = rollup(this._timeData, (i12) => i12.length, (i12) => i12), e36 = null !== (n17 = this._config.dataStep) && void 0 !== n17 ? n17 : (i11[1] - i11[0]) / (this._config.barCount - 1);
      if (0 === e36) return;
      this._bandIntervals = range(+i11[0], +i11[1], e36);
      const a13 = this._bandIntervals[this._bandIntervals.length - 1];
      let o22 = this._config.dataStep ? +a13 + e36 : i11[1];
      t23 && (this._bandIntervals = this._bandIntervals.map((i12) => new Date(i12)), o22 = new Date(o22)), a13 < i11[1] && this._bandIntervals.push(o22);
      const r14 = pairs(this._bandIntervals);
      this._barsData = r14.map((i12) => ({ rangeStart: i12[0], rangeEnd: i12[1], count: i(s16, i12) }));
    }
  }
  _updateTimelineData() {
    var i11;
    if ((null === (i11 = this._timeData) || void 0 === i11 ? void 0 : i11.length) && this._dateExtent) {
      if (this._isNumericTimeline = !(this._timeData[0] instanceof Date), this._isNumericTimeline) this._getBarsData(this._dateExtent);
      else {
        this._timeData = this._timeData.map((i13) => new Date(i13));
        const i12 = this._dateExtent.map((i13) => {
          var t23;
          return null !== (t23 = i13.getTime()) && void 0 !== t23 ? t23 : 0;
        });
        this._getBarsData(i12);
      }
      this._maxCount = Math.max(...this._barsData.map((i12) => i12.count));
    }
  }
  setSelection(i11, t23 = false) {
    var s15, n17, e36, a13;
    const o22 = this._currentSelection;
    i11 && this._dateExtent && i11[0] >= this._dateExtent[0] && i11[1] <= this._dateExtent[1] && i11[0] < i11[1] ? (this._currentSelection = i11, this._currentSelectionInPixels = this._currentSelection.map(this._activeAxisScale), null === (s15 = this._animationControlDiv) || void 0 === s15 || s15.classList.remove(i2.disabled)) : (this._currentSelection = void 0, this._currentSelectionInPixels = void 0, null === (n17 = this._animationControlDiv) || void 0 === n17 || n17.classList.add(i2.disabled));
    const { _currentSelection: r14 } = this;
    t23 || (null == o22 ? void 0 : o22[0]) === (null == r14 ? void 0 : r14[0]) && (null == o22 ? void 0 : o22[1]) === (null == r14 ? void 0 : r14[1]) || null === (a13 = (e36 = this._config.events).onBrush) || void 0 === a13 || a13.call(e36, this._currentSelection, true), this._brushInstance && !this._firstRender && this._brushGroup.call(this._brushInstance.move, this._currentSelectionInPixels);
  }
  setSelectionInPixels(i11) {
    var t23, s15, n17, e36, a13;
    i11 && i11[0] > 0 && i11[1] < this._timelineWidth && i11[0] < i11[1] ? (this._currentSelection = i11.map((i12) => this._activeAxisScale.invert(i12)), this._currentSelectionInPixels = null === (t23 = this._currentSelection) || void 0 === t23 ? void 0 : t23.map(this._activeAxisScale), null === (s15 = this._animationControlDiv) || void 0 === s15 || s15.classList.remove(i2.disabled)) : (this._currentSelection = void 0, this._currentSelectionInPixels = void 0, null === (n17 = this._animationControlDiv) || void 0 === n17 || n17.classList.add(i2.disabled)), this._brushInstance && !this._firstRender && this._brushGroup.call(this._brushInstance.move, this._currentSelectionInPixels), null === (a13 = (e36 = this._config.events).onBrush) || void 0 === a13 || a13.call(e36, this._currentSelection);
  }
  resize() {
    const { height: i11, width: t23 } = f2(this._containerNode), { offsetWidth: s15 } = this._animationControlDiv;
    this._width = t23, this._height = i11, this._timelineWidth = this._width - this._config.padding.left - this._config.padding.right - s15, this._timelineHeight = this._height - this._config.padding.top - this._config.padding.bottom, this._timelineHeight > this._config.padding.top + this._config.padding.bottom && (this._updateScales(), this._checkLastTickPosition(), this._currentSelection && this.setSelection(this._currentSelection, true), this.render());
  }
  render() {
    this._updateBrush(), this._updateBars(), this._updateAxis(), this._firstRender && (this._firstRender = false);
  }
  _updateAxis() {
    this._timeData && (this._axisGroup.style("transform", `translate(${this._config.padding.left}px, ${this._config.padding.top + this._config.axisTickHeight + 1 + this._config.selectionPadding / 2}px)`).call(this._isNumericTimeline ? this._numAxis : this._timeAxis).call((i11) => i11.select(".domain").remove()), this._axisGroup.selectAll(".tick").select("text").attr("class", i2.axisTick).attr("y", 0).attr("dy", -this._config.axisTickHeight).attr("dx", "5px"), this._axisGroup.selectAll("line").attr("class", i2.axisLine).attr("y2", -this._config.axisTickHeight));
  }
  _updateBrush() {
    var i11;
    this._config.allowSelection && (this._brushGroup.style("transform", `translate(${this._config.padding.left}px, ${this._config.padding.top}px)`), this._brushInstance = brushX().extent([[0, 0], [this._timelineWidth, this._timelineHeight]]), this._brushInstance.on("end", ({ selection: i12, sourceEvent: t23 }) => {
      var s15, n17, e36, a13, o22, r14, h6;
      t23 && (i12 ? (this._currentSelection = i12.map((i13) => this._activeAxisScale.invert(i13)), this._currentSelectionInPixels = null === (s15 = this._currentSelection) || void 0 === s15 ? void 0 : s15.map(this._activeAxisScale), null === (n17 = this._animationControlDiv) || void 0 === n17 || n17.classList.remove(i2.disabled), null === (a13 = (e36 = this._config.events).onBrush) || void 0 === a13 || a13.call(e36, this._currentSelection)) : (this._currentSelection = void 0, this._currentSelectionInPixels = void 0, null === (r14 = (o22 = this._config.events).onBrush) || void 0 === r14 || r14.call(o22, void 0), null === (h6 = this._animationControlDiv) || void 0 === h6 || h6.classList.add(i2.disabled)));
    }), this._brushGroup.call(this._brushInstance), this._currentSelection ? (this._currentSelectionInPixels = this._currentSelection.map(this._activeAxisScale), this._brushGroup.call(this._brushInstance.move, this._currentSelectionInPixels)) : null === (i11 = this._brushInstance) || void 0 === i11 || i11.clear(this._brushGroup), this._brushGroup.select("rect.selection").classed(i2.selection, true).attr("rx", this._config.selectionRadius).attr("ry", this._config.selectionRadius));
  }
  _updateBars() {
    this._barsGroup.style("transform", `translate(${this._config.padding.left}px, ${this._config.padding.top - this._config.selectionPadding / 2}px)`);
    const i11 = this._barsGroup.selectAll(`.${i2.bar}`).data(this._barsData).join("rect").attr("class", i2.bar).attr("x", (i12) => this._activeAxisScale(+i12.rangeStart) + this._barPadding / 2).attr("width", this.getBarWidth()).attr("rx", this._config.barRadius).attr("ry", this._config.barRadius).attr("y", -this._timelineHeight);
    this._config.events.onBarHover && i11.on("mouseover", this._config.events.onBarHover), i11.transition().duration(300).attr("height", (i12) => this._yScale(i12.count)).style("opacity", (i12) => this._yScale(i12.count) === this._config.minBarHeight ? 0.25 : 1);
  }
  _updateScales() {
    if (!this._dateExtent || !this._barsData.length) return;
    const i11 = this._barsData[this._barsData.length - 1];
    if (this._config.tickStep) {
      const i12 = range(+this._dateExtent[0], +this._dateExtent[1], this._config.tickStep);
      this._isNumericTimeline ? this._numAxis.tickValues(i12) : this._timeAxis.tickValues(i12.map((i13) => new Date(i13)));
    }
    this._yScale.range([this._config.minBarHeight, this._timelineHeight - this._config.barTopMargin - this._config.selectionPadding]).domain([0, this._maxCount]).clamp(true), this._isNumericTimeline ? (this._numScale.domain([this._dateExtent[0], i11.rangeEnd]).range([0, this._timelineWidth]).clamp(true), this._activeAxisScale = this._numScale) : (this._timeScale.domain([this._dateExtent[0], i11.rangeEnd]).range([0, this._timelineWidth]).clamp(true), this._activeAxisScale = this._timeScale);
    const t23 = this._barsData[0], s15 = this._activeAxisScale(t23.rangeEnd) - this._activeAxisScale(t23.rangeStart);
    this._barWidth = s15;
  }
  _disableBrush() {
    var i11, t23;
    null === (i11 = this._brushInstance) || void 0 === i11 || i11.clear(this._brushGroup), this._currentSelectionInPixels = void 0, this._currentSelection = void 0, this.pauseAnimation(), this._brushGroup.selectAll("*").remove(), this._config.showAnimationControls && (null === (t23 = this._animationControlDiv) || void 0 === t23 || t23.classList.add(i2.disabled));
  }
  async _initAnimationControls() {
    this._containerNode.insertBefore(this._animationControlDiv, this._svg);
    await (async () => {
      var i11, t23;
      if (!this._animationControlDiv.firstChild) {
        const s15 = this._svgParser.parseFromString(s2, "image/svg+xml").firstChild, n17 = this._svgParser.parseFromString(c2, "image/svg+xml").firstChild;
        this._pauseButtonSvg = null === (i11 = this._animationControlDiv) || void 0 === i11 ? void 0 : i11.appendChild(n17), this._playButtonSvg = null === (t23 = this._animationControlDiv) || void 0 === t23 ? void 0 : t23.appendChild(s15);
      }
    })().then(() => {
      var i11, t23, s15, n17, e36;
      this._isAnimationRunning ? (null === (s15 = this._playButtonSvg) || void 0 === s15 || s15.classList.add(i2.playAnimation, i2.hidden), null === (n17 = this._pauseButtonSvg) || void 0 === n17 || n17.classList.add(i2.pauseAnimation)) : (null === (i11 = this._playButtonSvg) || void 0 === i11 || i11.classList.add(i2.playAnimation), null === (t23 = this._pauseButtonSvg) || void 0 === t23 || t23.classList.add(i2.pauseAnimation, i2.hidden)), this._currentSelection || null === (e36 = this._animationControlDiv) || void 0 === e36 || e36.classList.add(i2.disabled), this._animationControlDiv.addEventListener("click", this._toggleAnimation);
    });
  }
};

// node_modules/@cosmograph/ui/modules/histogram/config.js
var i3 = { top: 5, left: 5, bottom: 1, right: 5 };
var s6 = class extends u2 {
  constructor() {
    super(...arguments), this.padding = i3, this.barsCount = 50, this.barPadding = 0.1, this.minBarHeight = 2, this.selectionRadius = 3, this.selectionPadding = 8, this.barCount = 30, this.dataStep = void 0, this.barRadius = 1, this.barTopMargin = 7, this.labelSideMargin = 3, this.formatter = void 0, this.allowSelection = true, this.stickySelection = true, this.events = { onBrush: void 0, onBarHover: void 0 };
  }
};

// node_modules/@cosmograph/ui/modules/histogram/style.module.css.js
var o5 = ":root{--cosmograph-histogram-text-color:#fff;--cosmograph-histogram-axis-color:#d7d7d7;--cosmograph-histogram-selection-color:#777;--cosmograph-histogram-selection-opacity:0.5;--cosmograph-histogram-bar-color:#7a7a7a;--cosmograph-histogram-highlighted-bar-color:#fff;--cosmograph-histogram-font-family:inherit;--cosmograph-histogram-font-size:11px;--cosmograph-histogram-background:#222}.style_module_histogram__ee5eb209{background:var(--cosmograph-histogram-background);display:flex;position:relative;width:100%}.style_module_histogramSvg__ee5eb209{height:100%;position:relative;width:100%}.style_module_selection__ee5eb209{fill:var(--cosmograph-histogram-selection-color);fill-opacity:var(--cosmograph-histogram-selection-opacity);stroke:none}.style_module_axisTick__ee5eb209{alignment-baseline:text-before-edge;text-anchor:initial;font-size:var(--cosmograph-histogram-font-size);font-weight:400;opacity:1;user-select:none}.style_module_bar__ee5eb209{fill:var(--cosmograph-histogram-bar-color);transform:scaleY(-1)}.style_module_highlightedBar__ee5eb209{fill:var(--cosmograph-histogram-highlighted-bar-color);pointer-events:none;transform:scaleY(-1)}.style_module_axis__ee5eb209{color:var(--cosmograph-histogram-axis-color)}.style_module_noData__ee5eb209{height:100%;position:absolute;top:0;width:100%}.style_module_noData__ee5eb209 div{align-items:center;display:flex;font-size:calc(var(--cosmograph-histogram-font-size));font-weight:300;height:100%;justify-content:center;letter-spacing:1;opacity:.25;user-select:none}";
var t4 = { histogram: "style_module_histogram__ee5eb209", histogramSvg: "style_module_histogramSvg__ee5eb209", selection: "style_module_selection__ee5eb209", axisTick: "style_module_axisTick__ee5eb209", bar: "style_module_bar__ee5eb209", highlightedBar: "style_module_highlightedBar__ee5eb209", axis: "style_module_axis__ee5eb209", bars: "style_module_bars__ee5eb209", brush: "style_module_brush__ee5eb209", noData: "style_module_noData__ee5eb209" };
n4(o5, {});

// node_modules/@cosmograph/ui/modules/histogram/index.js
var d = class {
  constructor(s15, n17) {
    var r14;
    this._config = new s6(), this._firstRender = true, this._barWidth = 0, this._maxCount = 0, this._barsData = [], this._highlightedBarsData = [], this._histogramData = void 0, this._highlightedData = void 0, this._bandIntervals = [], this._calculatedStep = 0, this._yScale = symlog(), this._xScale = linear(), this._axis = axisBottom(this._xScale), this._getClosestRange = (t23, i11) => {
      var s16;
      return null === (s16 = this._barsData) || void 0 === s16 ? void 0 : s16.reduce((s17, e36) => Math.abs(e36[i11 ? "rangeEnd" : "rangeStart"] - t23) < Math.abs(s17[i11 ? "rangeEnd" : "rangeStart"] - t23) ? e36 : s17);
    };
    const { offsetWidth: o22, offsetHeight: l6 } = s15;
    n17 && this._config.init(n17), this._containerNode = s15, this._containerNode.classList.add(t4.histogram), this._width = o22, this._height = l6, this._formatter = null !== (r14 = null == n17 ? void 0 : n17.formatter) && void 0 !== r14 ? r14 : void 0, this._histogramWidth = this._width - this._config.padding.left - this._config.padding.right, this._histogramHeight = this._height - this._config.padding.top - this._config.padding.bottom, this._svg = document.createElementNS("http://www.w3.org/2000/svg", "svg"), this._svg.classList.add(t4.histogramSvg), this._containerNode.appendChild(this._svg), this._noDataDiv = document.createElement("div"), select_default(this._noDataDiv).style("display", "none").attr("class", t4.noData).append("div").text("No histogram data"), this._containerNode.appendChild(this._noDataDiv), this._axisGroup = select_default(this._svg).append("g").attr("class", t4.axis), this._barsGroup = select_default(this._svg).append("g").attr("class", t4.bars), this._highlightedBarsGroup = select_default(this._svg).append("g").attr("class", t4.bars), this._brushGroup = select_default(this._svg).append("g").attr("class", t4.brush), this._axis.tickFormat((t23) => this._formatter ? this._formatter(t23) : t23.toFixed(0)), this._resizeObserver = new ResizeObserver2(() => {
      this.resize();
    }), this._resizeObserver.observe(this._containerNode);
  }
  get _barPadding() {
    return this._barWidth * this._config.barPadding;
  }
  get getCurrentSelection() {
    return this._currentSelection;
  }
  get getCurrentSelectionInPixels() {
    var t23;
    return null !== (t23 = this._currentSelectionInPixels) && void 0 !== t23 ? t23 : [];
  }
  getBarWidth() {
    return this._barWidth - this._barPadding;
  }
  getConfig() {
    return this._config;
  }
  setConfig(t23) {
    var i11, s15, e36, a13;
    const h6 = JSON.parse(JSON.stringify(this._config));
    t23 ? this._config.init(t23) : this._config = new s6(), this._config.allowSelection || this._disableBrush(), (null === (i11 = this._config) || void 0 === i11 ? void 0 : i11.dataStep) === (null === (s15 = h6.config) || void 0 === s15 ? void 0 : s15.dataStep) && (null === (e36 = this._config) || void 0 === e36 ? void 0 : e36.barCount) === (null === (a13 = h6.config) || void 0 === a13 ? void 0 : a13.barCount) || (this._updateHistogramData(), this._updateHistogramHighlightedData()), this.resize();
  }
  setHistogramData(t23, i11) {
    var s15, e36, a13;
    i11 && i11[1] <= i11[0] || (this._histogramData = null == t23 ? void 0 : t23.filter((t24) => !isNaN(t24) && void 0 !== t24), this._highlightedBarsData = [], this._currentSelection = void 0, this._brushCurrentSelection(), null === (e36 = (s15 = this._config.events).onBrush) || void 0 === e36 || e36.call(s15, this._currentSelection), select_default(this._noDataDiv).style("display", "none"), (null === (a13 = this._histogramData) || void 0 === a13 ? void 0 : a13.length) ? (this._extent = i11 || extent(this._histogramData), this._firstRender = true, this._updateHistogramData(), this._updateScales(), this.render()) : select_default(this._noDataDiv).style("display", "block"));
  }
  setHighlightedData(t23) {
    if (this._histogramData) if (t23 && 0 !== t23.length) this._highlightedData = null == t23 ? void 0 : t23.filter((t24) => !isNaN(t24) && void 0 !== t24), this._updateHistogramHighlightedData(), this._updateBars(true);
    else {
      const t24 = JSON.stringify(this._highlightedBarsData);
      this._highlightedData = [], this._highlightedBarsData = [], t24 !== JSON.stringify(this._highlightedBarsData) && this._updateBars(true);
    }
  }
  setSelection(t23, i11 = false) {
    var s15, e36;
    const a13 = this._currentSelection;
    if (t23 && this._extent && t23[0] >= this._extent[0] && t23[1] <= this._extent[1] && t23[0] < t23[1]) {
      const i12 = t23.map(this._xScale);
      this._mapSelection(i12);
    } else this._currentSelection = void 0;
    const { _currentSelection: h6 } = this;
    i11 || (null == a13 ? void 0 : a13[0]) === (null == h6 ? void 0 : h6[0]) && (null == a13 ? void 0 : a13[1]) === (null == h6 ? void 0 : h6[1]) || null === (e36 = (s15 = this._config.events).onBrush) || void 0 === e36 || e36.call(s15, this._currentSelection, true), this._brushCurrentSelection();
  }
  resize() {
    const { offsetWidth: t23, offsetHeight: i11 } = this._containerNode;
    this._width = t23, this._height = i11, this._histogramWidth = this._width - this._config.padding.left - this._config.padding.right, this._histogramHeight = this._height - this._config.padding.top - this._config.padding.bottom, this._histogramHeight > this._config.padding.top + this._config.padding.bottom && (this._updateScales(), this._currentSelection && this.setSelection(this._currentSelection, true), this._firstRender || this.render());
  }
  render() {
    this._updateBrush(), this._updateBars(), this._updateBars(true), this._updateAxis(), this._firstRender && (this._firstRender = false);
  }
  destroy() {
    this._containerNode.innerHTML = "";
  }
  _updateAxis() {
    this._histogramData && (this._axisGroup.style("transform", `translate(${this._config.padding.left}px, ${this._config.padding.top - this._config.selectionPadding / 2 + 1}px)`).call(this._axis).call((t23) => t23.select(".domain").remove()), this._axisGroup.selectAll(".tick").select("text").attr("class", t4.axisTick).attr("y", 0).attr("dy", 0).attr("dx", this._config.labelSideMargin), this._axisGroup.selectAll(".tick:last-of-type text").attr("dx", -this._config.labelSideMargin).style("text-anchor", "end"), this._axisGroup.selectAll("line").attr("y2", this._histogramHeight).attr("y1", 0).attr("opacity", 0.1));
  }
  _updateBrush() {
    this._config.allowSelection && (this._brushGroup.style("transform", `translate(${this._config.padding.left}px, ${this._config.padding.top}px)`), this._brushInstance = brushX().extent([[0, 0], [this._histogramWidth, this._histogramHeight]]), this._brushInstance.on("end", ({ selection: t23, sourceEvent: i11 }) => {
      var s15, e36, a13, h6;
      i11 && (t23 ? (this._mapSelection(t23), null === (e36 = (s15 = this._config.events).onBrush) || void 0 === e36 || e36.call(s15, this._currentSelection)) : (this._currentSelection = void 0, null === (h6 = (a13 = this._config.events).onBrush) || void 0 === h6 || h6.call(a13, void 0)), this._brushCurrentSelection());
    }), this._brushGroup.call(this._brushInstance), this._brushGroup.select("rect.selection").classed(t4.selection, true).attr("rx", this._config.selectionRadius).attr("ry", this._config.selectionRadius));
  }
  _updateBars(t23) {
    const i11 = t23 ? this._highlightedBarsGroup : this._barsGroup;
    i11.style("transform", `translate(${this._config.padding.left}px, ${this._config.padding.top - this._config.selectionPadding / 2}px)`);
    const s15 = t23 ? 0.5 : 1, e36 = i11.selectAll(`.${t23 ? t4.highlightedBar : t4.bar}`).data(t23 ? this._highlightedBarsData : this._barsData).join("rect").attr("class", t23 ? t4.highlightedBar : t4.bar).attr("x", (t24) => this._xScale(t24.rangeStart) + this._barPadding / 2).attr("width", this.getBarWidth()).attr("rx", this._config.barRadius).attr("ry", this._config.barRadius).attr("y", -this._histogramHeight);
    t23 || this._config.events.onBarHover && e36.on("mouseover", this._config.events.onBarHover), e36.transition().duration(300).attr("height", (i12) => t23 && 0 === i12.count ? 0 : this._yScale(i12.count)).style("opacity", (t24) => this._yScale(t24.count) === this._config.minBarHeight ? 0.4 : s15);
  }
  _updateScales() {
    if (!this._extent || !this._barsData.length) return;
    const t23 = this._barsData[this._barsData.length - 1], i11 = this._config.dataStep ? [this._extent[0], t23.rangeEnd] : this._extent;
    this._xScale.domain(i11).range([0, this._histogramWidth]).clamp(true), this._yScale.range([this._config.minBarHeight, this._histogramHeight - this._config.barTopMargin - this._config.selectionPadding]).domain([0, this._maxCount]).clamp(true), this._axis.tickValues(i11), this._barWidth = this._xScale(t23.rangeEnd) - this._xScale(t23.rangeStart);
  }
  _disableBrush() {
    this._currentSelection = void 0, this._brushCurrentSelection(), this._brushGroup.selectAll("*").remove();
  }
  _updateHistogramData() {
    var t23, i11;
    if ((null === (t23 = this._histogramData) || void 0 === t23 ? void 0 : t23.length) && this._extent) {
      const t24 = rollup(this._histogramData, (t25) => t25.length, (t25) => t25), s15 = null !== (i11 = this._config.dataStep) && void 0 !== i11 ? i11 : Math.abs(this._extent[1] - this._extent[0]) / (this._config.barCount - 1);
      if (0 === s15) return;
      if (this._calculatedStep = s15, this._bandIntervals = this._generateSequence(this._extent[0], this._extent[1], this._calculatedStep), this._config.dataStep) {
        const t25 = this._bandIntervals[this._bandIntervals.length - 1];
        t25 < this._extent[1] && this._bandIntervals.push(+t25 + this._calculatedStep);
      }
      const e36 = pairs(this._bandIntervals);
      this._barsData = e36.map((i12) => ({ rangeStart: i12[0], rangeEnd: i12[1], count: i(t24, i12) })), this._maxCount = Math.max(...this._barsData.map((t25) => t25.count));
    }
  }
  _updateHistogramHighlightedData() {
    var t23;
    if ((null === (t23 = this._highlightedData) || void 0 === t23 ? void 0 : t23.length) && this._extent) {
      const t24 = rollup(this._highlightedData, (t25) => t25.length, (t25) => t25);
      this._bandIntervals = this._generateSequence(this._extent[0], this._extent[1], this._calculatedStep);
      const i11 = pairs(this._bandIntervals);
      this._highlightedBarsData = i11.map((i12, s15) => {
        let e36 = i(t24, i12);
        const a13 = this._barsData[s15];
        return a13 && e36 > this._barsData[s15].count && (e36 = this._barsData[s15].count), { rangeStart: a13.rangeStart, rangeEnd: a13.rangeEnd, count: e36 };
      });
    }
  }
  _mapSelection(t23) {
    this._barsData.length && (this._config.stickySelection ? (this._currentSelection = [this._getClosestRange(this._xScale.invert(t23[0])).rangeStart, this._getClosestRange(this._xScale.invert(t23[1]), true).rangeEnd], this._currentSelection[0] === this._currentSelection[1] && (this._currentSelection = void 0)) : this._currentSelection = t23.map(this._xScale.invert));
  }
  _brushCurrentSelection() {
    var t23;
    this._currentSelection ? (this._currentSelectionInPixels = this._currentSelection.map(this._xScale), this._brushInstance && !this._firstRender && this._brushGroup.call(this._brushInstance.move, this._currentSelectionInPixels)) : (this._currentSelectionInPixels = void 0, null === (t23 = this._brushInstance) || void 0 === t23 || t23.clear(this._brushGroup));
  }
  _generateSequence(t23, i11, s15) {
    const e36 = Math.round((i11 - t23) / s15) + 1, a13 = new Array(e36);
    for (let i12 = 0; i12 < e36; i12++) a13[i12] = t23 + i12 * s15;
    return a13;
  }
};

// node_modules/@cosmograph/ui/modules/search/config.js
var e4 = { isDisabled: false, minMatch: 1, limitSuggestions: 50, truncateValues: 100, maxVisibleItems: 10, openListUpwards: false, placeholder: "Search...", activeAccessorIndex: void 0, accessors: [{ label: "id", accessor: (e36) => e36.id }], matchPalette: ["#fbb4ae80", "#b3cde380", "#ccebc580", "#decbe480", "#fed9a680", "#ffffcc80", "#e5d8bd80", "#fddaec80"], ordering: void 0, events: { onSelect: void 0, onSearch: void 0, onEnter: void 0, onAccessorSelect: void 0 } };

// node_modules/@cosmograph/ui/modules/search/types.js
var e5;
!function(e36) {
  e36.Input = "input", e36.Select = "select", e36.Enter = "enter", e36.AccessorSelect = "accessorSelect";
}(e5 || (e5 = {}));

// node_modules/@cosmograph/ui/ext/svelte/internal/index.mjs.js
function t5() {
}
function n5(t23, n17) {
  for (const e36 in n17) t23[e36] = n17[e36];
  return t23;
}
function e6(t23) {
  return t23();
}
function o6() {
  return /* @__PURE__ */ Object.create(null);
}
function r3(t23) {
  t23.forEach(e6);
}
function c5(t23) {
  return "function" == typeof t23;
}
function u3(t23, n17) {
  return t23 != t23 ? n17 == n17 : t23 !== n17 || t23 && "object" == typeof t23 || "function" == typeof t23;
}
function i4(t23) {
  return 0 === Object.keys(t23).length;
}
function f3(n17, ...e36) {
  if (null == n17) return t5;
  const o22 = n17.subscribe(...e36);
  return o22.unsubscribe ? () => o22.unsubscribe() : o22;
}
function s7(t23, n17, e36) {
  t23.$$.on_destroy.push(f3(n17, e36));
}
function l(t23, n17, e36, o22) {
  if (t23) {
    const r14 = a3(t23, n17, e36, o22);
    return t23[0](r14);
  }
}
function a3(t23, e36, o22, r14) {
  return t23[1] && r14 ? n5(o22.ctx.slice(), t23[1](r14(e36))) : o22.ctx;
}
function d2(t23, n17, e36, o22) {
  if (t23[2] && o22) {
    const r14 = t23[2](o22(e36));
    if (void 0 === n17.dirty) return r14;
    if ("object" == typeof r14) {
      const t24 = [], e37 = Math.max(n17.dirty.length, r14.length);
      for (let o23 = 0; o23 < e37; o23 += 1) t24[o23] = n17.dirty[o23] | r14[o23];
      return t24;
    }
    return n17.dirty | r14;
  }
  return n17.dirty;
}
function h(t23, n17, e36, o22, r14, c11) {
  if (r14) {
    const u8 = a3(n17, e36, o22, c11);
    t23.p(u8, r14);
  }
}
function p2(t23) {
  if (t23.ctx.length > 32) {
    const n17 = [], e36 = t23.ctx.length / 32;
    for (let t24 = 0; t24 < e36; t24++) n17[t24] = -1;
    return n17;
  }
  return -1;
}
function $(t23) {
  const n17 = {};
  for (const e36 in t23) "$" !== e36[0] && (n17[e36] = t23[e36]);
  return n17;
}
function y(t23, n17) {
  const e36 = {};
  n17 = new Set(n17);
  for (const o22 in t23) n17.has(o22) || "$" === o22[0] || (e36[o22] = t23[o22]);
  return e36;
}
function g(t23) {
  const n17 = {};
  for (const e36 in t23) n17[e36] = true;
  return n17;
}
function b2(t23, n17, e36) {
  return t23.set(e36), n17;
}
function m(n17) {
  return n17 && c5(n17.destroy) ? n17.destroy : t5;
}
var _ = "undefined" != typeof window ? window : "undefined" != typeof globalThis ? globalThis : global;
function x(t23, n17) {
  t23.appendChild(n17);
}
function w2(t23, n17, e36) {
  t23.insertBefore(n17, e36 || null);
}
function v(t23) {
  t23.parentNode && t23.parentNode.removeChild(t23);
}
function k(t23) {
  return document.createElement(t23);
}
function E(t23) {
  return document.createElementNS("http://www.w3.org/2000/svg", t23);
}
function O(t23) {
  return document.createTextNode(t23);
}
function j() {
  return O(" ");
}
function S() {
  return O("");
}
function A(t23, n17, e36, o22) {
  return t23.addEventListener(n17, e36, o22), () => t23.removeEventListener(n17, e36, o22);
}
function M(t23, n17, e36) {
  null == e36 ? t23.removeAttribute(n17) : t23.getAttribute(n17) !== e36 && t23.setAttribute(n17, e36);
}
var N = ["width", "height"];
function P(t23, n17) {
  const e36 = Object.getOwnPropertyDescriptors(t23.__proto__);
  for (const o22 in n17) null == n17[o22] ? t23.removeAttribute(o22) : "style" === o22 ? t23.style.cssText = n17[o22] : "__value" === o22 ? t23.value = t23[o22] = n17[o22] : e36[o22] && e36[o22].set && -1 === N.indexOf(o22) ? t23[o22] = n17[o22] : M(t23, o22, n17[o22]);
}
function C(t23, n17) {
  for (const e36 in n17) M(t23, e36, n17[e36]);
}
function T(t23, n17) {
  Object.keys(n17).forEach((e36) => {
    L(t23, e36, n17[e36]);
  });
}
function L(t23, n17, e36) {
  n17 in t23 ? t23[n17] = "boolean" == typeof t23[n17] && "" === e36 || e36 : M(t23, n17, e36);
}
function q(t23) {
  return /-/.test(t23) ? T : P;
}
function z(t23) {
  return Array.from(t23.childNodes);
}
function B(t23, n17) {
  n17 = "" + n17, t23.data !== n17 && (t23.data = n17);
}
function D(t23, n17) {
  t23.value = null == n17 ? "" : n17;
}
function F(t23, n17, e36, o22) {
  null == e36 ? t23.style.removeProperty(n17) : t23.style.setProperty(n17, e36, o22 ? "important" : "");
}
function G(t23, n17, e36) {
  t23.classList[e36 ? "add" : "remove"](n17);
}
function H(t23, n17, { bubbles: e36 = false, cancelable: o22 = false } = {}) {
  const r14 = document.createEvent("CustomEvent");
  return r14.initCustomEvent(t23, e36, o22, n17), r14;
}
function I2(t23, n17) {
  return new t23(n17);
}
var J;
function K(t23) {
  J = t23;
}
function Q() {
  if (!J) throw new Error("Function called outside component initialization");
  return J;
}
function R(t23) {
  Q().$$.on_mount.push(t23);
}
function U(t23) {
  Q().$$.on_destroy.push(t23);
}
function V() {
  const t23 = Q();
  return (n17, e36, { cancelable: o22 = false } = {}) => {
    const r14 = t23.$$.callbacks[n17];
    if (r14) {
      const c11 = H(n17, e36, { cancelable: o22 });
      return r14.slice().forEach((n18) => {
        n18.call(t23, c11);
      }), !c11.defaultPrevented;
    }
    return true;
  };
}
function W(t23, n17) {
  return Q().$$.context.set(t23, n17), n17;
}
function X(t23) {
  return Q().$$.context.get(t23);
}
function Y(t23, n17) {
  const e36 = t23.$$.callbacks[n17.type];
  e36 && e36.slice().forEach((t24) => t24.call(this, n17));
}
var Z = [];
var tt = [];
var nt = [];
var et = [];
var ot = Promise.resolve();
var rt = false;
function ct() {
  rt || (rt = true, ot.then(at));
}
function ut() {
  return ct(), ot;
}
function it(t23) {
  nt.push(t23);
}
function ft(t23) {
  et.push(t23);
}
var st = /* @__PURE__ */ new Set();
var lt = 0;
function at() {
  if (0 !== lt) return;
  const t23 = J;
  do {
    try {
      for (; lt < Z.length; ) {
        const t24 = Z[lt];
        lt++, K(t24), dt(t24.$$);
      }
    } catch (t24) {
      throw Z.length = 0, lt = 0, t24;
    }
    for (K(null), Z.length = 0, lt = 0; tt.length; ) tt.pop()();
    for (let t24 = 0; t24 < nt.length; t24 += 1) {
      const n17 = nt[t24];
      st.has(n17) || (st.add(n17), n17());
    }
    nt.length = 0;
  } while (Z.length);
  for (; et.length; ) et.pop()();
  rt = false, st.clear(), K(t23);
}
function dt(t23) {
  if (null !== t23.fragment) {
    t23.update(), r3(t23.before_update);
    const n17 = t23.dirty;
    t23.dirty = [-1], t23.fragment && t23.fragment.p(t23.ctx, n17), t23.after_update.forEach(it);
  }
}
function ht(t23) {
  const n17 = [], e36 = [];
  nt.forEach((o22) => -1 === t23.indexOf(o22) ? n17.push(o22) : e36.push(o22)), e36.forEach((t24) => t24()), nt = n17;
}
var pt = /* @__PURE__ */ new Set();
var $t;
function yt() {
  $t = { r: 0, c: [], p: $t };
}
function gt() {
  $t.r || r3($t.c), $t = $t.p;
}
function bt(t23, n17) {
  t23 && t23.i && (pt.delete(t23), t23.i(n17));
}
function mt(t23, n17, e36, o22) {
  if (t23 && t23.o) {
    if (pt.has(t23)) return;
    pt.add(t23), $t.c.push(() => {
      pt.delete(t23), o22 && (e36 && t23.d(1), o22());
    }), t23.o(n17);
  } else o22 && o22();
}
function _t(t23, n17) {
  t23.d(1), n17.delete(t23.key);
}
function xt(t23, n17) {
  mt(t23, 1, 1, () => {
    n17.delete(t23.key);
  });
}
function wt(t23, n17, e36, o22, c11, u8, i11, f6, s15, l6, a13, d13) {
  let h6 = t23.length, p5 = u8.length, $2 = h6;
  const y3 = {};
  for (; $2--; ) y3[t23[$2].key] = $2;
  const g2 = [], b5 = /* @__PURE__ */ new Map(), m6 = /* @__PURE__ */ new Map(), _7 = [];
  for ($2 = p5; $2--; ) {
    const t24 = d13(c11, u8, $2), r14 = e36(t24);
    let f7 = i11.get(r14);
    f7 ? o22 && _7.push(() => f7.p(t24, n17)) : (f7 = l6(r14, t24), f7.c()), b5.set(r14, g2[$2] = f7), r14 in y3 && m6.set(r14, Math.abs($2 - y3[r14]));
  }
  const x3 = /* @__PURE__ */ new Set(), w3 = /* @__PURE__ */ new Set();
  function v3(t24) {
    bt(t24, 1), t24.m(f6, a13), i11.set(t24.key, t24), a13 = t24.first, p5--;
  }
  for (; h6 && p5; ) {
    const n18 = g2[p5 - 1], e37 = t23[h6 - 1], o23 = n18.key, r14 = e37.key;
    n18 === e37 ? (a13 = n18.first, h6--, p5--) : b5.has(r14) ? !i11.has(o23) || x3.has(o23) ? v3(n18) : w3.has(r14) ? h6-- : m6.get(o23) > m6.get(r14) ? (w3.add(o23), v3(n18)) : (x3.add(r14), h6--) : (s15(e37, i11), h6--);
  }
  for (; h6--; ) {
    const n18 = t23[h6];
    b5.has(n18.key) || s15(n18, i11);
  }
  for (; p5; ) v3(g2[p5 - 1]);
  return r3(_7), g2;
}
function vt(t23, n17) {
  const e36 = {}, o22 = {}, r14 = { $$scope: 1 };
  let c11 = t23.length;
  for (; c11--; ) {
    const u8 = t23[c11], i11 = n17[c11];
    if (i11) {
      for (const t24 in u8) t24 in i11 || (o22[t24] = 1);
      for (const t24 in i11) r14[t24] || (e36[t24] = i11[t24], r14[t24] = 1);
      t23[c11] = i11;
    } else for (const t24 in u8) r14[t24] = 1;
  }
  for (const t24 in o22) t24 in e36 || (e36[t24] = void 0);
  return e36;
}
function kt(t23) {
  return "object" == typeof t23 && null !== t23 ? t23 : {};
}
function Et(t23, n17, e36) {
  const o22 = t23.$$.props[n17];
  void 0 !== o22 && (t23.$$.bound[o22] = e36, e36(t23.$$.ctx[o22]));
}
function Ot(t23) {
  t23 && t23.c();
}
function jt(t23, n17, o22, u8) {
  const { fragment: i11, after_update: f6 } = t23.$$;
  i11 && i11.m(n17, o22), u8 || it(() => {
    const n18 = t23.$$.on_mount.map(e6).filter(c5);
    t23.$$.on_destroy ? t23.$$.on_destroy.push(...n18) : r3(n18), t23.$$.on_mount = [];
  }), f6.forEach(it);
}
function St(t23, n17) {
  const e36 = t23.$$;
  null !== e36.fragment && (ht(e36.after_update), r3(e36.on_destroy), e36.fragment && e36.fragment.d(n17), e36.on_destroy = e36.fragment = null, e36.ctx = []);
}
function At(n17, e36, c11, u8, i11, f6, s15, l6 = [-1]) {
  const a13 = J;
  K(n17);
  const d13 = n17.$$ = { fragment: null, ctx: [], props: f6, update: t5, not_equal: i11, bound: o6(), on_mount: [], on_destroy: [], on_disconnect: [], before_update: [], after_update: [], context: new Map(e36.context || (a13 ? a13.$$.context : [])), callbacks: o6(), dirty: l6, skip_bound: false, root: e36.target || a13.$$.root };
  s15 && s15(d13.root);
  let h6 = false;
  if (d13.ctx = c11 ? c11(n17, e36.props || {}, (t23, e37, ...o22) => {
    const r14 = o22.length ? o22[0] : e37;
    return d13.ctx && i11(d13.ctx[t23], d13.ctx[t23] = r14) && (!d13.skip_bound && d13.bound[t23] && d13.bound[t23](r14), h6 && function(t24, n18) {
      -1 === t24.$$.dirty[0] && (Z.push(t24), ct(), t24.$$.dirty.fill(0)), t24.$$.dirty[n18 / 31 | 0] |= 1 << n18 % 31;
    }(n17, t23)), e37;
  }) : [], d13.update(), h6 = true, r3(d13.before_update), d13.fragment = !!u8 && u8(d13.ctx), e36.target) {
    if (e36.hydrate) {
      const t23 = z(e36.target);
      d13.fragment && d13.fragment.l(t23), t23.forEach(v);
    } else d13.fragment && d13.fragment.c();
    e36.intro && bt(n17.$$.fragment), jt(n17, e36.target, e36.anchor, e36.customElement), at();
  }
  K(a13);
}
var Mt = class {
  $destroy() {
    St(this, 1), this.$destroy = t5;
  }
  $on(n17, e36) {
    if (!c5(e36)) return t5;
    const o22 = this.$$.callbacks[n17] || (this.$$.callbacks[n17] = []);
    return o22.push(e36), () => {
      const t23 = o22.indexOf(e36);
      -1 !== t23 && o22.splice(t23, 1);
    };
  }
  $set(t23) {
    this.$$set && !i4(t23) && (this.$$.skip_bound = true, this.$$set(t23), this.$$.skip_bound = false);
  }
};

// node_modules/escape-string-regexp/index.js
function escapeStringRegexp(string) {
  if (typeof string !== "string") {
    throw new TypeError("Expected a string");
  }
  return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}

// node_modules/@cosmograph/ui/ext/@material/dom/ponyfill.js
var ponyfill_exports = {};
__export(ponyfill_exports, {
  closest: () => e7,
  estimateScrollWidth: () => r4,
  matches: () => t6
});
function e7(e36, r14) {
  if (e36.closest) return e36.closest(r14);
  for (var n17 = e36; n17; ) {
    if (t6(n17, r14)) return n17;
    n17 = n17.parentElement;
  }
  return null;
}
function t6(e36, t23) {
  return (e36.matches || e36.webkitMatchesSelector || e36.msMatchesSelector).call(e36, t23);
}
function r4(e36) {
  var t23 = e36;
  if (null !== t23.offsetParent) return t23.scrollWidth;
  var r14 = t23.cloneNode(true);
  r14.style.setProperty("position", "absolute"), r14.style.setProperty("transform", "translate(-9999px, -9999px)"), document.documentElement.appendChild(r14);
  var n17 = r14.scrollWidth;
  return document.documentElement.removeChild(r14), n17;
}

// node_modules/@cosmograph/ui/ext/@smui/common/dist/internal/classMap.js
function e8(e36) {
  return Object.entries(e36).filter(([e37, t23]) => "" !== e37 && t23).map(([e37]) => e37).join(" ");
}

// node_modules/@cosmograph/ui/ext/@smui/common/dist/internal/dispatch.js
function e9(e36, t23, n17, i11 = { bubbles: true }, s15 = false) {
  if ("undefined" == typeof Event) throw new Error("Event not defined.");
  if (!e36) throw new Error("Tried to dipatch event without element.");
  const r14 = new CustomEvent(t23, Object.assign(Object.assign({}, i11), { detail: n17 }));
  if (null == e36 || e36.dispatchEvent(r14), s15 && t23.startsWith("SMUI")) {
    const s16 = new CustomEvent(t23.replace(/^SMUI/g, () => "MDC"), Object.assign(Object.assign({}, i11), { detail: n17 }));
    null == e36 || e36.dispatchEvent(s16), s16.defaultPrevented && r14.preventDefault();
  }
  return r14;
}

// node_modules/@cosmograph/ui/ext/@smui/common/dist/internal/forwardEventsBuilder.js
var t7 = /^[a-z]+(?::(?:preventDefault|stopPropagation|passive|nonpassive|capture|once|self))+$/;
var e10 = /^[^$]+(?:\$(?:preventDefault|stopPropagation|passive|nonpassive|capture|once|self))+$/;
function n6(n17) {
  let s15, r14 = [];
  function i11(t23) {
    const e36 = n17.$$.callbacks[t23.type];
    e36 && e36.slice().forEach((e37) => e37.call(this, t23));
  }
  return n17.$on = (e36, n18) => {
    let o22 = e36, i12 = () => {
    };
    s15 ? i12 = s15(o22, n18) : r14.push([o22, n18]);
    return o22.match(t7) && console && console.warn('Event modifiers in SMUI now use "$" instead of ":", so that all events can be bound with modifiers. Please update your event binding: ', o22), () => {
      i12();
    };
  }, (n18) => {
    const a13 = [], c11 = {};
    s15 = (s16, r15) => {
      let l6 = s16, u8 = r15, p5 = false;
      const f6 = l6.match(t7), h6 = l6.match(e10), v3 = f6 || h6;
      if (l6.match(/^SMUI:\w+:/)) {
        const t23 = l6.split(":");
        let e36 = "";
        for (let n19 = 0; n19 < t23.length; n19++) e36 += n19 === t23.length - 1 ? ":" + t23[n19] : t23[n19].split("-").map((t24) => t24.slice(0, 1).toUpperCase() + t24.slice(1)).join("");
        console.warn(`The event ${l6.split("$")[0]} has been renamed to ${e36.split("$")[0]}.`), l6 = e36;
      }
      if (v3) {
        const t23 = l6.split(f6 ? ":" : "$");
        l6 = t23[0];
        const e36 = t23.slice(1).reduce((t24, e37) => (t24[e37] = true, t24), {});
        e36.passive && (p5 = p5 || {}, p5.passive = true), e36.nonpassive && (p5 = p5 || {}, p5.passive = false), e36.capture && (p5 = p5 || {}, p5.capture = true), e36.once && (p5 = p5 || {}, p5.once = true), e36.preventDefault && (d13 = u8, u8 = function(t24) {
          return t24.preventDefault(), d13.call(this, t24);
        }), e36.stopPropagation && (u8 = /* @__PURE__ */ function(t24) {
          return function(e37) {
            return e37.stopPropagation(), t24.call(this, e37);
          };
        }(u8)), e36.stopImmediatePropagation && (u8 = /* @__PURE__ */ function(t24) {
          return function(e37) {
            return e37.stopImmediatePropagation(), t24.call(this, e37);
          };
        }(u8)), e36.self && (u8 = /* @__PURE__ */ function(t24, e37) {
          return function(n19) {
            if (n19.target === t24) return e37.call(this, n19);
          };
        }(n18, u8)), e36.trusted && (u8 = /* @__PURE__ */ function(t24) {
          return function(e37) {
            if (e37.isTrusted) return t24.call(this, e37);
          };
        }(u8));
      }
      var d13;
      const m6 = o7(n18, l6, u8, p5), $2 = () => {
        m6();
        const t23 = a13.indexOf($2);
        t23 > -1 && a13.splice(t23, 1);
      };
      return a13.push($2), l6 in c11 || (c11[l6] = o7(n18, l6, i11)), $2;
    };
    for (let t23 = 0; t23 < r14.length; t23++) s15(r14[t23][0], r14[t23][1]);
    return { destroy: () => {
      for (let t23 = 0; t23 < a13.length; t23++) a13[t23]();
      for (let t23 of Object.entries(c11)) t23[1]();
    } };
  };
}
function o7(t23, e36, n17, o22) {
  return t23.addEventListener(e36, n17, o22), () => t23.removeEventListener(e36, n17, o22);
}

// node_modules/@cosmograph/ui/ext/@smui/common/dist/internal/useActions.js
function t8(t23, r14) {
  let e36 = [];
  if (r14) for (let n17 = 0; n17 < r14.length; n17++) {
    const o22 = r14[n17], a13 = Array.isArray(o22) ? o22[0] : o22;
    Array.isArray(o22) && o22.length > 1 ? e36.push(a13(t23, o22[1])) : e36.push(a13(t23));
  }
  return { update(t24) {
    if ((t24 && t24.length || 0) != e36.length) throw new Error("You must not change the length of an actions array.");
    if (t24) for (let r15 = 0; r15 < t24.length; r15++) {
      const n17 = e36[r15];
      if (n17 && n17.update) {
        const e37 = t24[r15];
        Array.isArray(e37) && e37.length > 1 ? n17.update(e37[1]) : n17.update();
      }
    }
  }, destroy() {
    for (let t24 = 0; t24 < e36.length; t24++) {
      const r15 = e36[t24];
      r15 && r15.destroy && r15.destroy();
    }
  } };
}

// node_modules/@cosmograph/ui/ext/@smui/common/dist/SmuiElement.svelte.js
function q2(l6) {
  let t23, r14, s15 = l6[1], i11 = l6[1] && D2(l6);
  return { c() {
    i11 && i11.c(), t23 = S();
  }, m(l7, n17) {
    i11 && i11.m(l7, n17), w2(l7, t23, n17), r14 = true;
  }, p(l7, e36) {
    l7[1] ? s15 ? u3(s15, l7[1]) ? (i11.d(1), i11 = D2(l7), s15 = l7[1], i11.c(), i11.m(t23.parentNode, t23)) : i11.p(l7, e36) : (i11 = D2(l7), s15 = l7[1], i11.c(), i11.m(t23.parentNode, t23)) : s15 && (i11.d(1), i11 = null, s15 = l7[1]);
  }, i(l7) {
    r14 || (bt(i11), r14 = true);
  }, o(l7) {
    mt(i11), r14 = false;
  }, d(l7) {
    l7 && v(t23), i11 && i11.d(l7);
  } };
}
function z2(l6) {
  let t23, c11 = l6[1], r14 = l6[1] && F2(l6);
  return { c() {
    r14 && r14.c(), t23 = S();
  }, m(l7, n17) {
    r14 && r14.m(l7, n17), w2(l7, t23, n17);
  }, p(l7, e36) {
    l7[1] ? c11 ? u3(c11, l7[1]) ? (r14.d(1), r14 = F2(l7), c11 = l7[1], r14.c(), r14.m(t23.parentNode, t23)) : r14.p(l7, e36) : (r14 = F2(l7), c11 = l7[1], r14.c(), r14.m(t23.parentNode, t23)) : c11 && (r14.d(1), r14 = null, c11 = l7[1]);
  }, i: t5, o: t5, d(l7) {
    l7 && v(t23), r14 && r14.d(l7);
  } };
}
function C2(l6) {
  let t23, n17, e36, r14, s15;
  const i11 = l6[8].default, p5 = l(i11, l6, l6[7], null);
  let m6 = [l6[5]], f6 = {};
  for (let l7 = 0; l7 < m6.length; l7 += 1) f6 = n5(f6, m6[l7]);
  return { c() {
    t23 = E("svg"), p5 && p5.c(), C(t23, f6);
  }, m(c11, o22) {
    w2(c11, t23, o22), p5 && p5.m(t23, null), l6[9](t23), e36 = true, r14 || (s15 = [m(n17 = t8.call(null, t23, l6[0])), m(l6[4].call(null, t23))], r14 = true);
  }, p(l7, u8) {
    p5 && p5.p && (!e36 || 128 & u8) && h(p5, i11, l7, l7[7], e36 ? d2(i11, l7[7], u8, null) : p2(l7[7]), null), C(t23, f6 = vt(m6, [32 & u8 && l7[5]])), n17 && c5(n17.update) && 1 & u8 && n17.update.call(null, l7[0]);
  }, i(l7) {
    e36 || (bt(p5, l7), e36 = true);
  }, o(l7) {
    mt(p5, l7), e36 = false;
  }, d(n18) {
    n18 && v(t23), p5 && p5.d(n18), l6[9](null), r14 = false, r3(s15);
  } };
}
function D2(l6) {
  let t23, n17, e36, r14, s15;
  const i11 = l6[8].default, p5 = l(i11, l6, l6[7], null);
  let m6 = [l6[5]], f6 = {};
  for (let l7 = 0; l7 < m6.length; l7 += 1) f6 = n5(f6, m6[l7]);
  return { c() {
    t23 = k(l6[1]), p5 && p5.c(), q(l6[1])(t23, f6);
  }, m(c11, o22) {
    w2(c11, t23, o22), p5 && p5.m(t23, null), l6[11](t23), e36 = true, r14 || (s15 = [m(n17 = t8.call(null, t23, l6[0])), m(l6[4].call(null, t23))], r14 = true);
  }, p(l7, u8) {
    p5 && p5.p && (!e36 || 128 & u8) && h(p5, i11, l7, l7[7], e36 ? d2(i11, l7[7], u8, null) : p2(l7[7]), null), q(l7[1])(t23, f6 = vt(m6, [32 & u8 && l7[5]])), n17 && c5(n17.update) && 1 & u8 && n17.update.call(null, l7[0]);
  }, i(l7) {
    e36 || (bt(p5, l7), e36 = true);
  }, o(l7) {
    mt(p5, l7), e36 = false;
  }, d(n18) {
    n18 && v(t23), p5 && p5.d(n18), l6[11](null), r14 = false, r3(s15);
  } };
}
function F2(l6) {
  let t23, n17, e36, c11, r14 = [l6[5]], o22 = {};
  for (let l7 = 0; l7 < r14.length; l7 += 1) o22 = n5(o22, r14[l7]);
  return { c() {
    t23 = k(l6[1]), q(l6[1])(t23, o22);
  }, m(r15, o23) {
    w2(r15, t23, o23), l6[10](t23), e36 || (c11 = [m(n17 = t8.call(null, t23, l6[0])), m(l6[4].call(null, t23))], e36 = true);
  }, p(l7, e37) {
    q(l7[1])(t23, o22 = vt(r14, [32 & e37 && l7[5]])), n17 && c5(n17.update) && 1 & e37 && n17.update.call(null, l7[0]);
  }, d(n18) {
    n18 && v(t23), l6[10](null), e36 = false, r3(c11);
  } };
}
function G2(l6) {
  let t23, n17, s15, i11;
  const d13 = [C2, z2, q2], p5 = [];
  function f6(l7, t24) {
    return "svg" === l7[1] ? 0 : l7[3] ? 1 : 2;
  }
  return t23 = f6(l6), n17 = p5[t23] = d13[t23](l6), { c() {
    n17.c(), s15 = S();
  }, m(l7, n18) {
    p5[t23].m(l7, n18), w2(l7, s15, n18), i11 = true;
  }, p(l7, [e36]) {
    let u8 = t23;
    t23 = f6(l7), t23 === u8 ? p5[t23].p(l7, e36) : (yt(), mt(p5[u8], 1, 1, () => {
      p5[u8] = null;
    }), gt(), n17 = p5[t23], n17 ? n17.p(l7, e36) : (n17 = p5[t23] = d13[t23](l7), n17.c()), bt(n17, 1), n17.m(s15.parentNode, s15));
  }, i(l7) {
    i11 || (bt(n17), i11 = true);
  }, o(l7) {
    mt(n17), i11 = false;
  }, d(l7) {
    p5[t23].d(l7), l7 && v(s15);
  } };
}
function H2(l6, t23, n17) {
  let e36;
  const u8 = ["use", "tag", "getElement"];
  let c11 = y(t23, u8), { $$slots: r14 = {}, $$scope: o22 } = t23, { use: a13 = [] } = t23, { tag: m6 } = t23;
  const $2 = n6(Q());
  let g2;
  return l6.$$set = (l7) => {
    t23 = n5(n5({}, t23), $(l7)), n17(5, c11 = y(t23, u8)), "use" in l7 && n17(0, a13 = l7.use), "tag" in l7 && n17(1, m6 = l7.tag), "$$scope" in l7 && n17(7, o22 = l7.$$scope);
  }, l6.$$.update = () => {
    2 & l6.$$.dirty && n17(3, e36 = ["area", "base", "br", "col", "embed", "hr", "img", "input", "link", "meta", "param", "source", "track", "wbr"].indexOf(m6) > -1);
  }, [a13, m6, g2, e36, $2, c11, function() {
    return g2;
  }, o22, r14, function(l7) {
    tt[l7 ? "unshift" : "push"](() => {
      g2 = l7, n17(2, g2);
    });
  }, function(l7) {
    tt[l7 ? "unshift" : "push"](() => {
      g2 = l7, n17(2, g2);
    });
  }, function(l7) {
    tt[l7 ? "unshift" : "push"](() => {
      g2 = l7, n17(2, g2);
    });
  }];
}
var I3 = class extends Mt {
  constructor(l6) {
    super(), At(this, l6, H2, G2, u3, { use: 0, tag: 1, getElement: 6 });
  }
  get getElement() {
    return this.$$.ctx[6];
  }
};

// node_modules/@cosmograph/ui/_virtual/_tslib.js
var r5 = function(t23, o22) {
  return r5 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(r14, t24) {
    r14.__proto__ = t24;
  } || function(r14, t24) {
    for (var o23 in t24) Object.prototype.hasOwnProperty.call(t24, o23) && (r14[o23] = t24[o23]);
  }, r5(t23, o22);
};
function t9(t23, o22) {
  if ("function" != typeof o22 && null !== o22) throw new TypeError("Class extends value " + String(o22) + " is not a constructor or null");
  function n17() {
    this.constructor = t23;
  }
  r5(t23, o22), t23.prototype = null === o22 ? Object.create(o22) : (n17.prototype = o22.prototype, new n17());
}
var o8 = function() {
  return o8 = Object.assign || function(r14) {
    for (var t23, o22 = 1, n17 = arguments.length; o22 < n17; o22++) for (var e36 in t23 = arguments[o22]) Object.prototype.hasOwnProperty.call(t23, e36) && (r14[e36] = t23[e36]);
    return r14;
  }, o8.apply(this, arguments);
};
function n7(r14) {
  var t23 = "function" == typeof Symbol && Symbol.iterator, o22 = t23 && r14[t23], n17 = 0;
  if (o22) return o22.call(r14);
  if (r14 && "number" == typeof r14.length) return { next: function() {
    return r14 && n17 >= r14.length && (r14 = void 0), { value: r14 && r14[n17++], done: !r14 };
  } };
  throw new TypeError(t23 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function e11(r14, t23) {
  var o22 = "function" == typeof Symbol && r14[Symbol.iterator];
  if (!o22) return r14;
  var n17, e36, i11 = o22.call(r14), l6 = [];
  try {
    for (; (void 0 === t23 || t23-- > 0) && !(n17 = i11.next()).done; ) l6.push(n17.value);
  } catch (r15) {
    e36 = { error: r15 };
  } finally {
    try {
      n17 && !n17.done && (o22 = i11.return) && o22.call(i11);
    } finally {
      if (e36) throw e36.error;
    }
  }
  return l6;
}
function i5(r14, t23, o22) {
  if (o22 || 2 === arguments.length) for (var n17, e36 = 0, i11 = t23.length; e36 < i11; e36++) !n17 && e36 in t23 || (n17 || (n17 = Array.prototype.slice.call(t23, 0, e36)), n17[e36] = t23[e36]);
  return r14.concat(n17 || Array.prototype.slice.call(t23));
}

// node_modules/@cosmograph/ui/ext/@material/base/foundation.js
var e12 = function() {
  function e36(e37) {
    void 0 === e37 && (e37 = {}), this.adapter = e37;
  }
  return Object.defineProperty(e36, "cssClasses", { get: function() {
    return {};
  }, enumerable: false, configurable: true }), Object.defineProperty(e36, "strings", { get: function() {
    return {};
  }, enumerable: false, configurable: true }), Object.defineProperty(e36, "numbers", { get: function() {
    return {};
  }, enumerable: false, configurable: true }), Object.defineProperty(e36, "defaultAdapter", { get: function() {
    return {};
  }, enumerable: false, configurable: true }), e36.prototype.init = function() {
  }, e36.prototype.destroy = function() {
  }, e36;
}();

// node_modules/@cosmograph/ui/ext/@material/dom/keyboard.js
var E2 = { UNKNOWN: "Unknown", BACKSPACE: "Backspace", ENTER: "Enter", SPACEBAR: "Spacebar", PAGE_UP: "PageUp", PAGE_DOWN: "PageDown", END: "End", HOME: "Home", ARROW_LEFT: "ArrowLeft", ARROW_UP: "ArrowUp", ARROW_RIGHT: "ArrowRight", ARROW_DOWN: "ArrowDown", DELETE: "Delete", ESCAPE: "Escape", TAB: "Tab" };
var d3 = /* @__PURE__ */ new Set();
d3.add(E2.BACKSPACE), d3.add(E2.ENTER), d3.add(E2.SPACEBAR), d3.add(E2.PAGE_UP), d3.add(E2.PAGE_DOWN), d3.add(E2.END), d3.add(E2.HOME), d3.add(E2.ARROW_LEFT), d3.add(E2.ARROW_UP), d3.add(E2.ARROW_RIGHT), d3.add(E2.ARROW_DOWN), d3.add(E2.DELETE), d3.add(E2.ESCAPE), d3.add(E2.TAB);
var A2 = 8;
var R2 = 13;
var a4 = 32;
var e13 = 33;
var O2 = 34;
var P2 = 35;
var W2 = 36;
var t10 = 37;
var _2 = 38;
var N2 = 39;
var r6 = 40;
var D3 = 46;
var T2 = 27;
var s8 = 9;
var n8 = /* @__PURE__ */ new Map();
n8.set(A2, E2.BACKSPACE), n8.set(R2, E2.ENTER), n8.set(a4, E2.SPACEBAR), n8.set(e13, E2.PAGE_UP), n8.set(O2, E2.PAGE_DOWN), n8.set(P2, E2.END), n8.set(W2, E2.HOME), n8.set(t10, E2.ARROW_LEFT), n8.set(_2, E2.ARROW_UP), n8.set(N2, E2.ARROW_RIGHT), n8.set(r6, E2.ARROW_DOWN), n8.set(D3, E2.DELETE), n8.set(T2, E2.ESCAPE), n8.set(s8, E2.TAB);
var C3 = /* @__PURE__ */ new Set();
function U2(A5) {
  var R7 = A5.key;
  if (d3.has(R7)) return R7;
  var a13 = n8.get(A5.keyCode);
  return a13 || E2.UNKNOWN;
}
C3.add(E2.PAGE_UP), C3.add(E2.PAGE_DOWN), C3.add(E2.END), C3.add(E2.HOME), C3.add(E2.ARROW_LEFT), C3.add(E2.ARROW_UP), C3.add(E2.ARROW_RIGHT), C3.add(E2.ARROW_DOWN);

// node_modules/@cosmograph/ui/ext/@material/list/constants.js
var _3;
var E3;
var e14 = { LIST_ITEM_ACTIVATED_CLASS: "mdc-list-item--activated", LIST_ITEM_CLASS: "mdc-list-item", LIST_ITEM_DISABLED_CLASS: "mdc-list-item--disabled", LIST_ITEM_SELECTED_CLASS: "mdc-list-item--selected", LIST_ITEM_TEXT_CLASS: "mdc-list-item__text", LIST_ITEM_PRIMARY_TEXT_CLASS: "mdc-list-item__primary-text", ROOT: "mdc-list" };
(_3 = {})["" + e14.LIST_ITEM_ACTIVATED_CLASS] = "mdc-list-item--activated", _3["" + e14.LIST_ITEM_CLASS] = "mdc-list-item", _3["" + e14.LIST_ITEM_DISABLED_CLASS] = "mdc-list-item--disabled", _3["" + e14.LIST_ITEM_SELECTED_CLASS] = "mdc-list-item--selected", _3["" + e14.LIST_ITEM_PRIMARY_TEXT_CLASS] = "mdc-list-item__primary-text", _3["" + e14.ROOT] = "mdc-list";
var t11 = ((E3 = {})["" + e14.LIST_ITEM_ACTIVATED_CLASS] = "mdc-deprecated-list-item--activated", E3["" + e14.LIST_ITEM_CLASS] = "mdc-deprecated-list-item", E3["" + e14.LIST_ITEM_DISABLED_CLASS] = "mdc-deprecated-list-item--disabled", E3["" + e14.LIST_ITEM_SELECTED_CLASS] = "mdc-deprecated-list-item--selected", E3["" + e14.LIST_ITEM_TEXT_CLASS] = "mdc-deprecated-list-item__text", E3["" + e14.LIST_ITEM_PRIMARY_TEXT_CLASS] = "mdc-deprecated-list-item__primary-text", E3["" + e14.ROOT] = "mdc-deprecated-list", E3);
var T3 = { ACTION_EVENT: "MDCList:action", SELECTION_CHANGE_EVENT: "MDCList:selectionChange", ARIA_CHECKED: "aria-checked", ARIA_CHECKED_CHECKBOX_SELECTOR: '[role="checkbox"][aria-checked="true"]', ARIA_CHECKED_RADIO_SELECTOR: '[role="radio"][aria-checked="true"]', ARIA_CURRENT: "aria-current", ARIA_DISABLED: "aria-disabled", ARIA_ORIENTATION: "aria-orientation", ARIA_ORIENTATION_HORIZONTAL: "horizontal", ARIA_ROLE_CHECKBOX_SELECTOR: '[role="checkbox"]', ARIA_SELECTED: "aria-selected", ARIA_INTERACTIVE_ROLES_SELECTOR: '[role="listbox"], [role="menu"]', ARIA_MULTI_SELECTABLE_SELECTOR: '[aria-multiselectable="true"]', CHECKBOX_RADIO_SELECTOR: 'input[type="checkbox"], input[type="radio"]', CHECKBOX_SELECTOR: 'input[type="checkbox"]', CHILD_ELEMENTS_TO_TOGGLE_TABINDEX: "\n    ." + e14.LIST_ITEM_CLASS + " button:not(:disabled),\n    ." + e14.LIST_ITEM_CLASS + " a,\n    ." + t11[e14.LIST_ITEM_CLASS] + " button:not(:disabled),\n    ." + t11[e14.LIST_ITEM_CLASS] + " a\n  ", DEPRECATED_SELECTOR: ".mdc-deprecated-list", FOCUSABLE_CHILD_ELEMENTS: "\n    ." + e14.LIST_ITEM_CLASS + " button:not(:disabled),\n    ." + e14.LIST_ITEM_CLASS + " a,\n    ." + e14.LIST_ITEM_CLASS + ' input[type="radio"]:not(:disabled),\n    .' + e14.LIST_ITEM_CLASS + ' input[type="checkbox"]:not(:disabled),\n    .' + t11[e14.LIST_ITEM_CLASS] + " button:not(:disabled),\n    ." + t11[e14.LIST_ITEM_CLASS] + " a,\n    ." + t11[e14.LIST_ITEM_CLASS] + ' input[type="radio"]:not(:disabled),\n    .' + t11[e14.LIST_ITEM_CLASS] + ' input[type="checkbox"]:not(:disabled)\n  ', RADIO_SELECTOR: 'input[type="radio"]', SELECTED_ITEM_SELECTOR: '[aria-selected="true"], [aria-current="true"]' };
var S2 = { UNSET_INDEX: -1, TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS: 300 };

// node_modules/@cosmograph/ui/ext/@material/list/events.js
var t12 = ["input", "button", "textarea", "select"];
var e15 = function(e36) {
  var a13 = e36.target;
  if (a13) {
    var r14 = ("" + a13.tagName).toLowerCase();
    -1 === t12.indexOf(r14) && e36.preventDefault();
  }
};

// node_modules/@cosmograph/ui/ext/@material/list/typeahead.js
function n9() {
  return { bufferClearTimeout: 0, currentFirstChar: "", sortedIndexCursor: 0, typeaheadBuffer: "" };
}
function o9(e36, r14) {
  for (var t23 = /* @__PURE__ */ new Map(), n17 = 0; n17 < e36; n17++) {
    var o22 = r14(n17).trim();
    if (o22) {
      var d13 = o22[0].toLowerCase();
      t23.has(d13) || t23.set(d13, []), t23.get(d13).push({ text: o22.toLowerCase(), index: n17 });
    }
  }
  return t23.forEach(function(e37) {
    e37.sort(function(e38, r15) {
      return e38.index - r15.index;
    });
  }), t23;
}
function d4(e36, t23) {
  var n17, o22 = e36.nextChar, d13 = e36.focusItemAtIndex, s15 = e36.sortedIndexByFirstChar, a13 = e36.focusedItemIndex, f6 = e36.skipFocus, i11 = e36.isItemAtIndexDisabled;
  return clearTimeout(t23.bufferClearTimeout), t23.bufferClearTimeout = setTimeout(function() {
    u4(t23);
  }, S2.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS), t23.typeaheadBuffer = t23.typeaheadBuffer + o22, n17 = 1 === t23.typeaheadBuffer.length ? function(e37, r14, t24, n18) {
    var o23 = n18.typeaheadBuffer[0], d14 = e37.get(o23);
    if (!d14) return -1;
    if (o23 === n18.currentFirstChar && d14[n18.sortedIndexCursor].index === r14) {
      n18.sortedIndexCursor = (n18.sortedIndexCursor + 1) % d14.length;
      var s16 = d14[n18.sortedIndexCursor].index;
      if (!t24(s16)) return s16;
    }
    n18.currentFirstChar = o23;
    var u8, a14 = -1;
    for (u8 = 0; u8 < d14.length; u8++) if (!t24(d14[u8].index)) {
      a14 = u8;
      break;
    }
    for (; u8 < d14.length; u8++) if (d14[u8].index > r14 && !t24(d14[u8].index)) {
      a14 = u8;
      break;
    }
    if (-1 !== a14) return n18.sortedIndexCursor = a14, d14[n18.sortedIndexCursor].index;
    return -1;
  }(s15, a13, i11, t23) : function(e37, r14, t24) {
    var n18 = t24.typeaheadBuffer[0], o23 = e37.get(n18);
    if (!o23) return -1;
    var d14 = o23[t24.sortedIndexCursor];
    if (0 === d14.text.lastIndexOf(t24.typeaheadBuffer, 0) && !r14(d14.index)) return d14.index;
    var s16 = (t24.sortedIndexCursor + 1) % o23.length, u8 = -1;
    for (; s16 !== t24.sortedIndexCursor; ) {
      var a14 = o23[s16], f7 = 0 === a14.text.lastIndexOf(t24.typeaheadBuffer, 0), i12 = !r14(a14.index);
      if (f7 && i12) {
        u8 = s16;
        break;
      }
      s16 = (s16 + 1) % o23.length;
    }
    if (-1 !== u8) return t24.sortedIndexCursor = u8, o23[t24.sortedIndexCursor].index;
    return -1;
  }(s15, i11, t23), -1 === n17 || f6 || d13(n17), n17;
}
function s9(e36) {
  return e36.typeaheadBuffer.length > 0;
}
function u4(e36) {
  e36.typeaheadBuffer = "";
}
function a5(r14, n17) {
  var o22 = r14.event, u8 = r14.isTargetListItem, a13 = r14.focusedItemIndex, f6 = r14.focusItemAtIndex, i11 = r14.sortedIndexByFirstChar, x3 = r14.isItemAtIndexDisabled, I8 = "ArrowLeft" === U2(o22), h6 = "ArrowUp" === U2(o22), c11 = "ArrowRight" === U2(o22), C9 = "ArrowDown" === U2(o22), m6 = "Home" === U2(o22), p5 = "End" === U2(o22), l6 = "Enter" === U2(o22), y3 = "Spacebar" === U2(o22);
  return o22.altKey || o22.ctrlKey || o22.metaKey || I8 || h6 || c11 || C9 || m6 || p5 || l6 ? -1 : y3 || 1 !== o22.key.length ? y3 ? (u8 && e15(o22), u8 && s9(n17) ? d4({ focusItemAtIndex: f6, focusedItemIndex: a13, nextChar: " ", sortedIndexByFirstChar: i11, skipFocus: false, isItemAtIndexDisabled: x3 }, n17) : -1) : -1 : (e15(o22), d4({ focusItemAtIndex: f6, focusedItemIndex: a13, nextChar: o22.key.toLowerCase(), sortedIndexByFirstChar: i11, skipFocus: false, isItemAtIndexDisabled: x3 }, n17));
}

// node_modules/@cosmograph/ui/ext/@material/list/foundation.js
var p3 = ["Alt", "Control", "Meta", "Shift"];
function A3(e36) {
  var t23 = new Set(e36 ? p3.filter(function(t24) {
    return e36.getModifierState(t24);
  }) : []);
  return function(e37) {
    return e37.every(function(e38) {
      return t23.has(e38);
    }) && e37.length === t23.size;
  };
}
var m2 = function(n17) {
  function p5(e36) {
    var i11 = n17.call(this, o8(o8({}, p5.defaultAdapter), e36)) || this;
    return i11.wrapFocus = false, i11.isVertical = true, i11.isSingleSelectionList = false, i11.areDisabledItemsFocusable = true, i11.selectedIndex = S2.UNSET_INDEX, i11.focusedItemIndex = S2.UNSET_INDEX, i11.useActivatedClass = false, i11.useSelectedAttr = false, i11.ariaCurrentAttrValue = null, i11.isCheckboxList = false, i11.isRadioList = false, i11.lastSelectedIndex = null, i11.hasTypeahead = false, i11.typeaheadState = n9(), i11.sortedIndexByFirstChar = /* @__PURE__ */ new Map(), i11;
  }
  return t9(p5, n17), Object.defineProperty(p5, "strings", { get: function() {
    return T3;
  }, enumerable: false, configurable: true }), Object.defineProperty(p5, "cssClasses", { get: function() {
    return e14;
  }, enumerable: false, configurable: true }), Object.defineProperty(p5, "numbers", { get: function() {
    return S2;
  }, enumerable: false, configurable: true }), Object.defineProperty(p5, "defaultAdapter", { get: function() {
    return { addClassForElementIndex: function() {
    }, focusItemAtIndex: function() {
    }, getAttributeForElementIndex: function() {
      return null;
    }, getFocusedElementIndex: function() {
      return 0;
    }, getListItemCount: function() {
      return 0;
    }, hasCheckboxAtIndex: function() {
      return false;
    }, hasRadioAtIndex: function() {
      return false;
    }, isCheckboxCheckedAtIndex: function() {
      return false;
    }, isFocusInsideList: function() {
      return false;
    }, isRootFocused: function() {
      return false;
    }, listItemAtIndexHasClass: function() {
      return false;
    }, notifyAction: function() {
    }, notifySelectionChange: function() {
    }, removeClassForElementIndex: function() {
    }, setAttributeForElementIndex: function() {
    }, setCheckedCheckboxOrRadioAtIndex: function() {
    }, setTabIndexForListItemChildren: function() {
    }, getPrimaryTextAtIndex: function() {
      return "";
    } };
  }, enumerable: false, configurable: true }), p5.prototype.layout = function() {
    0 !== this.adapter.getListItemCount() && (this.adapter.hasCheckboxAtIndex(0) ? this.isCheckboxList = true : this.adapter.hasRadioAtIndex(0) ? this.isRadioList = true : this.maybeInitializeSingleSelection(), this.hasTypeahead && (this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex()));
  }, p5.prototype.getFocusedItemIndex = function() {
    return this.focusedItemIndex;
  }, p5.prototype.setWrapFocus = function(e36) {
    this.wrapFocus = e36;
  }, p5.prototype.setVerticalOrientation = function(e36) {
    this.isVertical = e36;
  }, p5.prototype.setSingleSelection = function(e36) {
    this.isSingleSelectionList = e36, e36 && (this.maybeInitializeSingleSelection(), this.selectedIndex = this.getSelectedIndexFromDOM());
  }, p5.prototype.setDisabledItemsFocusable = function(e36) {
    this.areDisabledItemsFocusable = e36;
  }, p5.prototype.maybeInitializeSingleSelection = function() {
    var e36 = this.getSelectedIndexFromDOM();
    e36 !== S2.UNSET_INDEX && (this.adapter.listItemAtIndexHasClass(e36, e14.LIST_ITEM_ACTIVATED_CLASS) && this.setUseActivatedClass(true), this.isSingleSelectionList = true, this.selectedIndex = e36);
  }, p5.prototype.getSelectedIndexFromDOM = function() {
    for (var e36 = S2.UNSET_INDEX, t23 = this.adapter.getListItemCount(), i11 = 0; i11 < t23; i11++) {
      var s15 = this.adapter.listItemAtIndexHasClass(i11, e14.LIST_ITEM_SELECTED_CLASS), n18 = this.adapter.listItemAtIndexHasClass(i11, e14.LIST_ITEM_ACTIVATED_CLASS);
      if (s15 || n18) {
        e36 = i11;
        break;
      }
    }
    return e36;
  }, p5.prototype.setHasTypeahead = function(e36) {
    this.hasTypeahead = e36, e36 && (this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex());
  }, p5.prototype.isTypeaheadInProgress = function() {
    return this.hasTypeahead && s9(this.typeaheadState);
  }, p5.prototype.setUseActivatedClass = function(e36) {
    this.useActivatedClass = e36;
  }, p5.prototype.setUseSelectedAttribute = function(e36) {
    this.useSelectedAttr = e36;
  }, p5.prototype.getSelectedIndex = function() {
    return this.selectedIndex;
  }, p5.prototype.setSelectedIndex = function(e36, t23) {
    void 0 === t23 && (t23 = {}), this.isIndexValid(e36) && (this.isCheckboxList ? this.setCheckboxAtIndex(e36, t23) : this.isRadioList ? this.setRadioAtIndex(e36, t23) : this.setSingleSelectionAtIndex(e36, t23));
  }, p5.prototype.handleFocusIn = function(e36) {
    e36 >= 0 && (this.focusedItemIndex = e36, this.adapter.setAttributeForElementIndex(e36, "tabindex", "0"), this.adapter.setTabIndexForListItemChildren(e36, "0"));
  }, p5.prototype.handleFocusOut = function(e36) {
    var t23 = this;
    e36 >= 0 && (this.adapter.setAttributeForElementIndex(e36, "tabindex", "-1"), this.adapter.setTabIndexForListItemChildren(e36, "-1")), setTimeout(function() {
      t23.adapter.isFocusInsideList() || t23.setTabindexToFirstSelectedOrFocusedItem();
    }, 0);
  }, p5.prototype.isIndexDisabled = function(e36) {
    return this.adapter.listItemAtIndexHasClass(e36, e14.LIST_ITEM_DISABLED_CLASS);
  }, p5.prototype.handleKeydown = function(e36, t23, i11) {
    var s15, n18 = this, d13 = "ArrowLeft" === U2(e36), a13 = "ArrowUp" === U2(e36), c11 = "ArrowRight" === U2(e36), l6 = "ArrowDown" === U2(e36), u8 = "Home" === U2(e36), x3 = "End" === U2(e36), f6 = "Enter" === U2(e36), p6 = "Spacebar" === U2(e36), m6 = this.isVertical && l6 || !this.isVertical && c11, S4 = this.isVertical && a13 || !this.isVertical && d13, b5 = "A" === e36.key || "a" === e36.key, E8 = A3(e36);
    if (this.adapter.isRootFocused()) {
      if ((S4 || x3) && E8([])) e36.preventDefault(), this.focusLastElement();
      else if ((m6 || u8) && E8([])) e36.preventDefault(), this.focusFirstElement();
      else if (S4 && E8(["Shift"]) && this.isCheckboxList) {
        e36.preventDefault(), -1 !== (g2 = this.focusLastElement()) && this.setSelectedIndexOnAction(g2, false);
      } else if (m6 && E8(["Shift"]) && this.isCheckboxList) {
        e36.preventDefault(), -1 !== (g2 = this.focusFirstElement()) && this.setSelectedIndexOnAction(g2, false);
      }
      if (this.hasTypeahead) {
        var C9 = { event: e36, focusItemAtIndex: function(e37) {
          n18.focusItemAtIndex(e37);
        }, focusedItemIndex: -1, isTargetListItem: t23, sortedIndexByFirstChar: this.sortedIndexByFirstChar, isItemAtIndexDisabled: function(e37) {
          return n18.isIndexDisabled(e37);
        } };
        a5(C9, this.typeaheadState);
      }
    } else {
      var y3 = this.adapter.getFocusedElementIndex();
      if (!(-1 === y3 && (y3 = i11) < 0)) {
        if (m6 && E8([])) e15(e36), this.focusNextElement(y3);
        else if (S4 && E8([])) e15(e36), this.focusPrevElement(y3);
        else if (m6 && E8(["Shift"]) && this.isCheckboxList) {
          e15(e36), -1 !== (g2 = this.focusNextElement(y3)) && this.setSelectedIndexOnAction(g2, false);
        } else if (S4 && E8(["Shift"]) && this.isCheckboxList) {
          var g2;
          e15(e36), -1 !== (g2 = this.focusPrevElement(y3)) && this.setSelectedIndexOnAction(g2, false);
        } else if (u8 && E8([])) e15(e36), this.focusFirstElement();
        else if (x3 && E8([])) e15(e36), this.focusLastElement();
        else if (u8 && E8(["Control", "Shift"]) && this.isCheckboxList) {
          if (e15(e36), this.isIndexDisabled(y3)) return;
          this.focusFirstElement(), this.toggleCheckboxRange(0, y3, y3);
        } else if (x3 && E8(["Control", "Shift"]) && this.isCheckboxList) {
          if (e15(e36), this.isIndexDisabled(y3)) return;
          this.focusLastElement(), this.toggleCheckboxRange(y3, this.adapter.getListItemCount() - 1, y3);
        } else if (b5 && E8(["Control"]) && this.isCheckboxList) e36.preventDefault(), this.checkboxListToggleAll(this.selectedIndex === S2.UNSET_INDEX ? [] : this.selectedIndex, true);
        else if ((f6 || p6) && E8([])) {
          if (t23) {
            if ((L3 = e36.target) && "A" === L3.tagName && f6) return;
            if (e15(e36), this.isIndexDisabled(y3)) return;
            this.isTypeaheadInProgress() || (this.isSelectableList() && this.setSelectedIndexOnAction(y3, false), this.adapter.notifyAction(y3));
          }
        } else if ((f6 || p6) && E8(["Shift"]) && this.isCheckboxList) {
          var L3;
          if ((L3 = e36.target) && "A" === L3.tagName && f6) return;
          if (e15(e36), this.isIndexDisabled(y3)) return;
          this.isTypeaheadInProgress() || (this.toggleCheckboxRange(null !== (s15 = this.lastSelectedIndex) && void 0 !== s15 ? s15 : y3, y3, y3), this.adapter.notifyAction(y3));
        }
        if (this.hasTypeahead) {
          C9 = { event: e36, focusItemAtIndex: function(e37) {
            n18.focusItemAtIndex(e37);
          }, focusedItemIndex: this.focusedItemIndex, isTargetListItem: t23, sortedIndexByFirstChar: this.sortedIndexByFirstChar, isItemAtIndexDisabled: function(e37) {
            return n18.isIndexDisabled(e37);
          } };
          a5(C9, this.typeaheadState);
        }
      }
    }
  }, p5.prototype.handleClick = function(e36, t23, i11) {
    var s15, n18 = A3(i11);
    e36 !== S2.UNSET_INDEX && (this.isIndexDisabled(e36) || (n18([]) ? (this.isSelectableList() && this.setSelectedIndexOnAction(e36, t23), this.adapter.notifyAction(e36)) : this.isCheckboxList && n18(["Shift"]) && (this.toggleCheckboxRange(null !== (s15 = this.lastSelectedIndex) && void 0 !== s15 ? s15 : e36, e36, e36), this.adapter.notifyAction(e36))));
  }, p5.prototype.focusNextElement = function(e36) {
    var t23 = this.adapter.getListItemCount(), i11 = e36, s15 = null;
    do {
      if (++i11 >= t23) {
        if (!this.wrapFocus) return e36;
        i11 = 0;
      }
      if (i11 === s15) return -1;
      s15 = null != s15 ? s15 : i11;
    } while (!this.areDisabledItemsFocusable && this.isIndexDisabled(i11));
    return this.focusItemAtIndex(i11), i11;
  }, p5.prototype.focusPrevElement = function(e36) {
    var t23 = this.adapter.getListItemCount(), i11 = e36, s15 = null;
    do {
      if (--i11 < 0) {
        if (!this.wrapFocus) return e36;
        i11 = t23 - 1;
      }
      if (i11 === s15) return -1;
      s15 = null != s15 ? s15 : i11;
    } while (!this.areDisabledItemsFocusable && this.isIndexDisabled(i11));
    return this.focusItemAtIndex(i11), i11;
  }, p5.prototype.focusFirstElement = function() {
    return this.focusNextElement(-1);
  }, p5.prototype.focusLastElement = function() {
    return this.focusPrevElement(this.adapter.getListItemCount());
  }, p5.prototype.focusInitialElement = function() {
    var e36 = this.getFirstSelectedOrFocusedItemIndex();
    return this.focusItemAtIndex(e36), e36;
  }, p5.prototype.setEnabled = function(e36, t23) {
    this.isIndexValid(e36, false) && (t23 ? (this.adapter.removeClassForElementIndex(e36, e14.LIST_ITEM_DISABLED_CLASS), this.adapter.setAttributeForElementIndex(e36, T3.ARIA_DISABLED, "false")) : (this.adapter.addClassForElementIndex(e36, e14.LIST_ITEM_DISABLED_CLASS), this.adapter.setAttributeForElementIndex(e36, T3.ARIA_DISABLED, "true")));
  }, p5.prototype.setSingleSelectionAtIndex = function(e36, t23) {
    if (void 0 === t23 && (t23 = {}), this.selectedIndex !== e36 || t23.forceUpdate) {
      var i11 = e14.LIST_ITEM_SELECTED_CLASS;
      this.useActivatedClass && (i11 = e14.LIST_ITEM_ACTIVATED_CLASS), this.selectedIndex !== S2.UNSET_INDEX && this.adapter.removeClassForElementIndex(this.selectedIndex, i11), this.setAriaForSingleSelectionAtIndex(e36), this.setTabindexAtIndex(e36), e36 !== S2.UNSET_INDEX && this.adapter.addClassForElementIndex(e36, i11), this.selectedIndex = e36, t23.isUserInteraction && !t23.forceUpdate && this.adapter.notifySelectionChange([e36]);
    }
  }, p5.prototype.setAriaForSingleSelectionAtIndex = function(e36) {
    this.selectedIndex === S2.UNSET_INDEX && (this.ariaCurrentAttrValue = this.adapter.getAttributeForElementIndex(e36, T3.ARIA_CURRENT));
    var t23 = null !== this.ariaCurrentAttrValue, i11 = t23 ? T3.ARIA_CURRENT : T3.ARIA_SELECTED;
    if (this.selectedIndex !== S2.UNSET_INDEX && this.adapter.setAttributeForElementIndex(this.selectedIndex, i11, "false"), e36 !== S2.UNSET_INDEX) {
      var s15 = t23 ? this.ariaCurrentAttrValue : "true";
      this.adapter.setAttributeForElementIndex(e36, i11, s15);
    }
  }, p5.prototype.getSelectionAttribute = function() {
    return this.useSelectedAttr ? T3.ARIA_SELECTED : T3.ARIA_CHECKED;
  }, p5.prototype.setRadioAtIndex = function(e36, t23) {
    void 0 === t23 && (t23 = {});
    var i11 = this.getSelectionAttribute();
    this.adapter.setCheckedCheckboxOrRadioAtIndex(e36, true), (this.selectedIndex !== e36 || t23.forceUpdate) && (this.selectedIndex !== S2.UNSET_INDEX && this.adapter.setAttributeForElementIndex(this.selectedIndex, i11, "false"), this.adapter.setAttributeForElementIndex(e36, i11, "true"), this.selectedIndex = e36, t23.isUserInteraction && !t23.forceUpdate && this.adapter.notifySelectionChange([e36]));
  }, p5.prototype.setCheckboxAtIndex = function(e36, t23) {
    void 0 === t23 && (t23 = {});
    for (var i11 = this.selectedIndex, s15 = t23.isUserInteraction ? new Set(i11 === S2.UNSET_INDEX ? [] : i11) : null, n18 = this.getSelectionAttribute(), r14 = [], d13 = 0; d13 < this.adapter.getListItemCount(); d13++) {
      var a13 = null == s15 ? void 0 : s15.has(d13), h6 = e36.indexOf(d13) >= 0;
      h6 !== a13 && r14.push(d13), this.adapter.setCheckedCheckboxOrRadioAtIndex(d13, h6), this.adapter.setAttributeForElementIndex(d13, n18, h6 ? "true" : "false");
    }
    this.selectedIndex = e36, t23.isUserInteraction && r14.length && this.adapter.notifySelectionChange(r14);
  }, p5.prototype.toggleCheckboxRange = function(e36, t23, n18) {
    this.lastSelectedIndex = n18;
    for (var r14 = new Set(this.selectedIndex === S2.UNSET_INDEX ? [] : this.selectedIndex), d13 = !(null == r14 ? void 0 : r14.has(n18)), a13 = e11([e36, t23].sort(), 2), h6 = a13[0], c11 = a13[1], l6 = this.getSelectionAttribute(), I8 = [], u8 = h6; u8 <= c11; u8++) {
      if (!this.isIndexDisabled(u8)) d13 !== r14.has(u8) && (I8.push(u8), this.adapter.setCheckedCheckboxOrRadioAtIndex(u8, d13), this.adapter.setAttributeForElementIndex(u8, l6, "" + d13), d13 ? r14.add(u8) : r14.delete(u8));
    }
    I8.length && (this.selectedIndex = i5([], e11(r14)), this.adapter.notifySelectionChange(I8));
  }, p5.prototype.setTabindexAtIndex = function(e36) {
    this.focusedItemIndex === S2.UNSET_INDEX && 0 !== e36 ? this.adapter.setAttributeForElementIndex(0, "tabindex", "-1") : this.focusedItemIndex >= 0 && this.focusedItemIndex !== e36 && this.adapter.setAttributeForElementIndex(this.focusedItemIndex, "tabindex", "-1"), this.selectedIndex instanceof Array || this.selectedIndex === e36 || this.adapter.setAttributeForElementIndex(this.selectedIndex, "tabindex", "-1"), e36 !== S2.UNSET_INDEX && this.adapter.setAttributeForElementIndex(e36, "tabindex", "0");
  }, p5.prototype.isSelectableList = function() {
    return this.isSingleSelectionList || this.isCheckboxList || this.isRadioList;
  }, p5.prototype.setTabindexToFirstSelectedOrFocusedItem = function() {
    var e36 = this.getFirstSelectedOrFocusedItemIndex();
    this.setTabindexAtIndex(e36);
  }, p5.prototype.getFirstSelectedOrFocusedItemIndex = function() {
    return this.isSelectableList() ? "number" == typeof this.selectedIndex && this.selectedIndex !== S2.UNSET_INDEX ? this.selectedIndex : this.selectedIndex instanceof Array && this.selectedIndex.length > 0 ? this.selectedIndex.reduce(function(e36, t23) {
      return Math.min(e36, t23);
    }) : 0 : Math.max(this.focusedItemIndex, 0);
  }, p5.prototype.isIndexValid = function(e36, t23) {
    var i11 = this;
    if (void 0 === t23 && (t23 = true), e36 instanceof Array) {
      if (!this.isCheckboxList && t23) throw new Error("MDCListFoundation: Array of index is only supported for checkbox based list");
      return 0 === e36.length || e36.some(function(e37) {
        return i11.isIndexInRange(e37);
      });
    }
    if ("number" == typeof e36) {
      if (this.isCheckboxList && t23) throw new Error("MDCListFoundation: Expected array of index for checkbox based list but got number: " + e36);
      return this.isIndexInRange(e36) || this.isSingleSelectionList && e36 === S2.UNSET_INDEX;
    }
    return false;
  }, p5.prototype.isIndexInRange = function(e36) {
    var t23 = this.adapter.getListItemCount();
    return e36 >= 0 && e36 < t23;
  }, p5.prototype.setSelectedIndexOnAction = function(e36, t23) {
    this.lastSelectedIndex = e36, this.isCheckboxList ? (this.toggleCheckboxAtIndex(e36, t23), this.adapter.notifySelectionChange([e36])) : this.setSelectedIndex(e36, { isUserInteraction: true });
  }, p5.prototype.toggleCheckboxAtIndex = function(e36, t23) {
    var i11, s15 = this.getSelectionAttribute(), n18 = this.adapter.isCheckboxCheckedAtIndex(e36);
    t23 ? i11 = n18 : (i11 = !n18, this.adapter.setCheckedCheckboxOrRadioAtIndex(e36, i11)), this.adapter.setAttributeForElementIndex(e36, s15, i11 ? "true" : "false");
    var r14 = this.selectedIndex === S2.UNSET_INDEX ? [] : this.selectedIndex.slice();
    i11 ? r14.push(e36) : r14 = r14.filter(function(t24) {
      return t24 !== e36;
    }), this.selectedIndex = r14;
  }, p5.prototype.focusItemAtIndex = function(e36) {
    this.adapter.focusItemAtIndex(e36), this.focusedItemIndex = e36;
  }, p5.prototype.checkboxListToggleAll = function(e36, t23) {
    var i11 = this.adapter.getListItemCount();
    if (e36.length === i11) this.setCheckboxAtIndex([], { isUserInteraction: t23 });
    else {
      for (var s15 = [], n18 = 0; n18 < i11; n18++) (!this.isIndexDisabled(n18) || e36.indexOf(n18) > -1) && s15.push(n18);
      this.setCheckboxAtIndex(s15, { isUserInteraction: t23 });
    }
  }, p5.prototype.typeaheadMatchItem = function(e36, t23, i11) {
    var s15 = this;
    void 0 === i11 && (i11 = false);
    var n18 = { focusItemAtIndex: function(e37) {
      s15.focusItemAtIndex(e37);
    }, focusedItemIndex: t23 || this.focusedItemIndex, nextChar: e36, sortedIndexByFirstChar: this.sortedIndexByFirstChar, skipFocus: i11, isItemAtIndexDisabled: function(e37) {
      return s15.isIndexDisabled(e37);
    } };
    return d4(n18, this.typeaheadState);
  }, p5.prototype.typeaheadInitSortedIndex = function() {
    return o9(this.adapter.getListItemCount(), this.adapter.getPrimaryTextAtIndex);
  }, p5.prototype.clearTypeaheadBuffer = function() {
    u4(this.typeaheadState);
  }, p5;
}(e12);

// node_modules/@cosmograph/ui/ext/@smui/list/dist/List.svelte.js
function j2(e36) {
  let t23;
  const n17 = e36[42].default, i11 = l(n17, e36, e36[44], null);
  return { c() {
    i11 && i11.c();
  }, m(e37, n18) {
    i11 && i11.m(e37, n18), t23 = true;
  }, p(e37, s15) {
    i11 && i11.p && (!t23 || 8192 & s15[1]) && h(i11, n17, e37, e37[44], t23 ? d2(n17, e37[44], s15, null) : p2(e37[44]), null);
  }, i(e37) {
    t23 || (bt(i11, e37), t23 = true);
  }, o(e37) {
    mt(i11, e37), t23 = false;
  }, d(e37) {
    i11 && i11.d(e37);
  } };
}
function O3(e36) {
  let t23, n17, h6;
  const $2 = [{ tag: e36[13] }, { use: [e36[16], ...e36[0]] }, { class: e8({ [e36[1]]: true, "mdc-deprecated-list": true, "mdc-deprecated-list--non-interactive": e36[2], "mdc-deprecated-list--dense": e36[3], "mdc-deprecated-list--textual-list": e36[4], "mdc-deprecated-list--avatar-list": e36[5] || e36[17], "mdc-deprecated-list--icon-list": e36[6], "mdc-deprecated-list--image-list": e36[7], "mdc-deprecated-list--thumbnail-list": e36[8], "mdc-deprecated-list--video-list": e36[9], "mdc-deprecated-list--two-line": e36[10], "smui-list--three-line": e36[11] && !e36[10] }) }, { role: e36[15] }, e36[25]];
  var x3 = e36[12];
  function v3(e37) {
    let t24 = { $$slots: { default: [j2] }, $$scope: { ctx: e37 } };
    for (let e38 = 0; e38 < $2.length; e38 += 1) t24 = n5(t24, $2[e38]);
    return { props: t24 };
  }
  return x3 && (t23 = I2(x3, v3(e36)), e36[43](t23), t23.$on("keydown", e36[20]), t23.$on("focusin", e36[21]), t23.$on("focusout", e36[22]), t23.$on("click", e36[23]), t23.$on("SMUIListItem:mount", e36[18]), t23.$on("SMUIListItem:unmount", e36[19]), t23.$on("SMUI:action", e36[24])), { c() {
    t23 && Ot(t23.$$.fragment), n17 = S();
  }, m(e37, i11) {
    t23 && jt(t23, e37, i11), w2(e37, n17, i11), h6 = true;
  }, p(e37, o22) {
    const d13 = 33796095 & o22[0] ? vt($2, [8192 & o22[0] && { tag: e37[13] }, 65537 & o22[0] && { use: [e37[16], ...e37[0]] }, 135166 & o22[0] && { class: e8({ [e37[1]]: true, "mdc-deprecated-list": true, "mdc-deprecated-list--non-interactive": e37[2], "mdc-deprecated-list--dense": e37[3], "mdc-deprecated-list--textual-list": e37[4], "mdc-deprecated-list--avatar-list": e37[5] || e37[17], "mdc-deprecated-list--icon-list": e37[6], "mdc-deprecated-list--image-list": e37[7], "mdc-deprecated-list--thumbnail-list": e37[8], "mdc-deprecated-list--video-list": e37[9], "mdc-deprecated-list--two-line": e37[10], "smui-list--three-line": e37[11] && !e37[10] }) }, 32768 & o22[0] && { role: e37[15] }, 33554432 & o22[0] && kt(e37[25])]) : {};
    if (8192 & o22[1] && (d13.$$scope = { dirty: o22, ctx: e37 }), 4096 & o22[0] && x3 !== (x3 = e37[12])) {
      if (t23) {
        yt();
        const e38 = t23;
        mt(e38.$$.fragment, 1, 0, () => {
          St(e38, 1);
        }), gt();
      }
      x3 ? (t23 = I2(x3, v3(e37)), e37[43](t23), t23.$on("keydown", e37[20]), t23.$on("focusin", e37[21]), t23.$on("focusout", e37[22]), t23.$on("click", e37[23]), t23.$on("SMUIListItem:mount", e37[18]), t23.$on("SMUIListItem:unmount", e37[19]), t23.$on("SMUI:action", e37[24]), Ot(t23.$$.fragment), bt(t23.$$.fragment, 1), jt(t23, n17.parentNode, n17)) : t23 = null;
    } else x3 && t23.$set(d13);
  }, i(e37) {
    h6 || (t23 && bt(t23.$$.fragment, e37), h6 = true);
  }, o(e37) {
    t23 && mt(t23.$$.fragment, e37), h6 = false;
  }, d(i11) {
    e36[43](null), i11 && v(n17), t23 && St(t23, i11);
  } };
}
function R3(e36, t23, n17) {
  const i11 = ["use", "class", "nonInteractive", "dense", "textualList", "avatarList", "iconList", "imageList", "thumbnailList", "videoList", "twoLine", "threeLine", "vertical", "wrapFocus", "singleSelection", "disabledItemsFocusable", "selectedIndex", "radioList", "checkList", "hasTypeahead", "component", "tag", "layout", "setEnabled", "getTypeaheadInProgress", "getSelectedIndex", "getFocusedItemIndex", "focusItemAtIndex", "getElement"];
  let s15 = y(t23, i11), { $$slots: o22 = {}, $$scope: a13 } = t23;
  var d13;
  const { closest: l6, matches: c11 } = ponyfill_exports, r14 = n6(Q());
  let u8, m6, { use: p5 = [] } = t23, { class: I8 = "" } = t23, { nonInteractive: g2 = false } = t23, { dense: F6 = false } = t23, { textualList: k5 = false } = t23, { avatarList: A5 = false } = t23, { iconList: E8 = false } = t23, { imageList: w3 = false } = t23, { thumbnailList: j6 = false } = t23, { videoList: O8 = false } = t23, { twoLine: R7 = false } = t23, { threeLine: _7 = false } = t23, { vertical: q6 = true } = t23, { wrapFocus: H3 = null !== (d13 = X("SMUI:list:wrapFocus")) && void 0 !== d13 && d13 } = t23, { singleSelection: W6 = false } = t23, { disabledItemsFocusable: B4 = false } = t23, { selectedIndex: D4 = -1 } = t23, { radioList: K3 = false } = t23, { checkList: N6 = false } = t23, { hasTypeahead: V2 = false } = t23, z5 = [], G5 = X("SMUI:list:role"), J3 = X("SMUI:list:nav");
  const Q3 = /* @__PURE__ */ new WeakMap();
  let X3, Y3 = X("SMUI:dialog:selection"), Z3 = X("SMUI:addLayoutListener"), { component: ee = I3 } = t23, { tag: te = ee === I3 ? J3 ? "nav" : "ul" : void 0 } = t23;
  function ne() {
    return null == u8 ? [] : [...Ie2().children].map((e37) => Q3.get(e37)).filter((e37) => e37 && e37._smui_list_item_accessor);
  }
  function ie(e37, t24) {
    var n18;
    const i12 = ne()[e37];
    return null !== (n18 = i12 && i12.hasClass(t24)) && void 0 !== n18 && n18;
  }
  function se2(e37, t24) {
    const n18 = ne()[e37];
    n18 && n18.addClass(t24);
  }
  function oe2(e37, t24) {
    const n18 = ne()[e37];
    n18 && n18.removeClass(t24);
  }
  function ae(e37, t24, n18) {
    const i12 = ne()[e37];
    i12 && i12.addAttr(t24, n18);
  }
  function de2(e37, t24) {
    const n18 = ne()[e37];
    n18 && n18.removeAttr(t24);
  }
  function le(e37, t24) {
    const n18 = ne()[e37];
    return n18 ? n18.getAttr(t24) : null;
  }
  function ce2(e37) {
    var t24;
    const n18 = ne()[e37];
    return null !== (t24 = n18 && n18.getPrimaryText()) && void 0 !== t24 ? t24 : "";
  }
  function re2(e37) {
    const t24 = l6(e37, ".mdc-deprecated-list-item, .mdc-deprecated-list");
    return t24 && c11(t24, ".mdc-deprecated-list-item") ? ne().map((e38) => null == e38 ? void 0 : e38.element).indexOf(t24) : -1;
  }
  function ue2() {
    return m6.layout();
  }
  function me2() {
    return m6.getSelectedIndex();
  }
  function pe2(e37) {
    const t24 = ne()[e37];
    t24 && "focus" in t24.element && t24.element.focus();
  }
  function Ie2() {
    return u8.getElement();
  }
  return W("SMUI:list:nonInteractive", g2), W("SMUI:separator:context", "list"), G5 || (W6 ? (G5 = "listbox", W("SMUI:list:item:role", "option")) : K3 ? (G5 = "radiogroup", W("SMUI:list:item:role", "radio")) : N6 ? (G5 = "group", W("SMUI:list:item:role", "checkbox")) : (G5 = "list", W("SMUI:list:item:role", void 0))), Z3 && (X3 = Z3(ue2)), R(() => {
    n17(41, m6 = new m2({ addClassForElementIndex: se2, focusItemAtIndex: pe2, getAttributeForElementIndex: (e38, t24) => {
      var n18, i12;
      return null !== (i12 = null === (n18 = ne()[e38]) || void 0 === n18 ? void 0 : n18.getAttr(t24)) && void 0 !== i12 ? i12 : null;
    }, getFocusedElementIndex: () => document.activeElement ? ne().map((e38) => e38.element).indexOf(document.activeElement) : -1, getListItemCount: () => z5.length, getPrimaryTextAtIndex: ce2, hasCheckboxAtIndex: (e38) => {
      var t24, n18;
      return null !== (n18 = null === (t24 = ne()[e38]) || void 0 === t24 ? void 0 : t24.hasCheckbox) && void 0 !== n18 && n18;
    }, hasRadioAtIndex: (e38) => {
      var t24, n18;
      return null !== (n18 = null === (t24 = ne()[e38]) || void 0 === t24 ? void 0 : t24.hasRadio) && void 0 !== n18 && n18;
    }, isCheckboxCheckedAtIndex: (e38) => {
      var t24;
      const n18 = ne()[e38];
      return null !== (t24 = (null == n18 ? void 0 : n18.hasCheckbox) && n18.checked) && void 0 !== t24 && t24;
    }, isFocusInsideList: () => null != u8 && Ie2() !== document.activeElement && Ie2().contains(document.activeElement), isRootFocused: () => null != u8 && document.activeElement === Ie2(), listItemAtIndexHasClass: ie, notifyAction: (e38) => {
      n17(26, D4 = e38), null != u8 && e9(Ie2(), "SMUIList:action", { index: e38 }, void 0, true);
    }, notifySelectionChange: (e38) => {
      null != u8 && e9(Ie2(), "SMUIList:selectionChange", { changedIndices: e38 });
    }, removeClassForElementIndex: oe2, setAttributeForElementIndex: ae, setCheckedCheckboxOrRadioAtIndex: (e38, t24) => {
      ne()[e38].checked = t24;
    }, setTabIndexForListItemChildren: (e38, t24) => {
      const n18 = ne()[e38];
      Array.prototype.forEach.call(n18.element.querySelectorAll("button:not(:disabled), a"), (e39) => {
        e39.setAttribute("tabindex", t24);
      });
    } }));
    const e37 = { get element() {
      return Ie2();
    }, get items() {
      return z5;
    }, get typeaheadInProgress() {
      return m6.isTypeaheadInProgress();
    }, typeaheadMatchItem: (e38, t24) => m6.typeaheadMatchItem(e38, t24, true), getOrderedList: ne, focusItemAtIndex: pe2, addClassForElementIndex: se2, removeClassForElementIndex: oe2, setAttributeForElementIndex: ae, removeAttributeForElementIndex: de2, getAttributeFromElementIndex: le, getPrimaryTextAtIndex: ce2 };
    return e9(Ie2(), "SMUIList:mount", e37), m6.init(), m6.layout(), () => {
      m6.destroy();
    };
  }), U(() => {
    X3 && X3();
  }), e36.$$set = (e37) => {
    t23 = n5(n5({}, t23), $(e37)), n17(25, s15 = y(t23, i11)), "use" in e37 && n17(0, p5 = e37.use), "class" in e37 && n17(1, I8 = e37.class), "nonInteractive" in e37 && n17(2, g2 = e37.nonInteractive), "dense" in e37 && n17(3, F6 = e37.dense), "textualList" in e37 && n17(4, k5 = e37.textualList), "avatarList" in e37 && n17(5, A5 = e37.avatarList), "iconList" in e37 && n17(6, E8 = e37.iconList), "imageList" in e37 && n17(7, w3 = e37.imageList), "thumbnailList" in e37 && n17(8, j6 = e37.thumbnailList), "videoList" in e37 && n17(9, O8 = e37.videoList), "twoLine" in e37 && n17(10, R7 = e37.twoLine), "threeLine" in e37 && n17(11, _7 = e37.threeLine), "vertical" in e37 && n17(27, q6 = e37.vertical), "wrapFocus" in e37 && n17(28, H3 = e37.wrapFocus), "singleSelection" in e37 && n17(29, W6 = e37.singleSelection), "disabledItemsFocusable" in e37 && n17(30, B4 = e37.disabledItemsFocusable), "selectedIndex" in e37 && n17(26, D4 = e37.selectedIndex), "radioList" in e37 && n17(31, K3 = e37.radioList), "checkList" in e37 && n17(32, N6 = e37.checkList), "hasTypeahead" in e37 && n17(33, V2 = e37.hasTypeahead), "component" in e37 && n17(12, ee = e37.component), "tag" in e37 && n17(13, te = e37.tag), "$$scope" in e37 && n17(44, a13 = e37.$$scope);
  }, e36.$$.update = () => {
    134217728 & e36.$$.dirty[0] | 1024 & e36.$$.dirty[1] && m6 && m6.setVerticalOrientation(q6), 268435456 & e36.$$.dirty[0] | 1024 & e36.$$.dirty[1] && m6 && m6.setWrapFocus(H3), 1028 & e36.$$.dirty[1] && m6 && m6.setHasTypeahead(V2), 536870912 & e36.$$.dirty[0] | 1024 & e36.$$.dirty[1] && m6 && m6.setSingleSelection(W6), 1073741824 & e36.$$.dirty[0] | 1024 & e36.$$.dirty[1] && m6 && m6.setDisabledItemsFocusable(B4), 603979776 & e36.$$.dirty[0] | 1024 & e36.$$.dirty[1] && m6 && W6 && me2() !== D4 && m6.setSelectedIndex(D4);
  }, [p5, I8, g2, F6, k5, A5, E8, w3, j6, O8, R7, _7, ee, te, u8, G5, r14, Y3, function(e37) {
    z5.push(e37.detail), Q3.set(e37.detail.element, e37.detail), W6 && e37.detail.selected && n17(26, D4 = re2(e37.detail.element)), e37.stopPropagation();
  }, function(e37) {
    var t24;
    const n18 = null !== (t24 = e37.detail && z5.indexOf(e37.detail)) && void 0 !== t24 ? t24 : -1;
    -1 !== n18 && (z5.splice(n18, 1), Q3.delete(e37.detail.element)), e37.stopPropagation();
  }, function(e37) {
    m6 && e37.target && m6.handleKeydown(e37, e37.target.classList.contains("mdc-deprecated-list-item"), re2(e37.target));
  }, function(e37) {
    m6 && e37.target && m6.handleFocusIn(re2(e37.target));
  }, function(e37) {
    m6 && e37.target && m6.handleFocusOut(re2(e37.target));
  }, function(e37) {
    m6 && e37.target && m6.handleClick(re2(e37.target), !c11(e37.target, 'input[type="checkbox"], input[type="radio"]'), e37);
  }, function(e37) {
    if (K3 || N6) {
      const t24 = re2(e37.target);
      if (-1 !== t24) {
        const n18 = ne()[t24];
        n18 && (K3 && !n18.checked || N6) && (c11(e37.detail.target, 'input[type="checkbox"], input[type="radio"]') || (n18.checked = !n18.checked), n18.activateRipple(), window.requestAnimationFrame(() => {
          n18.deactivateRipple();
        }));
      }
    }
  }, s15, D4, q6, H3, W6, B4, K3, N6, V2, ue2, function(e37, t24) {
    return m6.setEnabled(e37, t24);
  }, function() {
    return m6.isTypeaheadInProgress();
  }, me2, function() {
    return m6.getFocusedItemIndex();
  }, pe2, Ie2, m6, o22, function(e37) {
    tt[e37 ? "unshift" : "push"](() => {
      u8 = e37, n17(14, u8);
    });
  }, a13];
}
var _4 = class extends Mt {
  constructor(e36) {
    super(), At(this, e36, R3, O3, u3, { use: 0, class: 1, nonInteractive: 2, dense: 3, textualList: 4, avatarList: 5, iconList: 6, imageList: 7, thumbnailList: 8, videoList: 9, twoLine: 10, threeLine: 11, vertical: 27, wrapFocus: 28, singleSelection: 29, disabledItemsFocusable: 30, selectedIndex: 26, radioList: 31, checkList: 32, hasTypeahead: 33, component: 12, tag: 13, layout: 34, setEnabled: 35, getTypeaheadInProgress: 36, getSelectedIndex: 37, getFocusedItemIndex: 38, focusItemAtIndex: 39, getElement: 40 }, null, [-1, -1]);
  }
  get layout() {
    return this.$$.ctx[34];
  }
  get setEnabled() {
    return this.$$.ctx[35];
  }
  get getTypeaheadInProgress() {
    return this.$$.ctx[36];
  }
  get getSelectedIndex() {
    return this.$$.ctx[37];
  }
  get getFocusedItemIndex() {
    return this.$$.ctx[38];
  }
  get focusItemAtIndex() {
    return this.$$.ctx[39];
  }
  get getElement() {
    return this.$$.ctx[40];
  }
};

// node_modules/@cosmograph/ui/ext/@material/dom/events.js
var events_exports = {};
__export(events_exports, {
  applyPassive: () => t13
});
function t13(t23) {
  return void 0 === t23 && (t23 = window), !!function(t24) {
    void 0 === t24 && (t24 = window);
    var e36 = false;
    try {
      var n17 = { get passive() {
        return e36 = true, false;
      } }, r14 = function() {
      };
      t24.document.addEventListener("test", r14, n17), t24.document.removeEventListener("test", r14, n17);
    } catch (t25) {
      e36 = false;
    }
    return e36;
  }(t23) && { passive: true };
}

// node_modules/@cosmograph/ui/ext/@material/ripple/constants.js
var d5 = { BG_FOCUSED: "mdc-ripple-upgraded--background-focused", FG_ACTIVATION: "mdc-ripple-upgraded--foreground-activation", FG_DEACTIVATION: "mdc-ripple-upgraded--foreground-deactivation", ROOT: "mdc-ripple-upgraded", UNBOUNDED: "mdc-ripple-upgraded--unbounded" };
var p4 = { VAR_FG_SCALE: "--mdc-ripple-fg-scale", VAR_FG_SIZE: "--mdc-ripple-fg-size", VAR_FG_TRANSLATE_END: "--mdc-ripple-fg-translate-end", VAR_FG_TRANSLATE_START: "--mdc-ripple-fg-translate-start", VAR_LEFT: "--mdc-ripple-left", VAR_TOP: "--mdc-ripple-top" };
var e16 = { DEACTIVATION_TIMEOUT_MS: 225, FG_DEACTIVATION_MS: 150, INITIAL_ORIGIN_SCALE: 0.6, PADDING: 10, TAP_DELAY_MS: 300 };

// node_modules/@cosmograph/ui/ext/@material/ripple/util.js
var r7;
function e17(e36, t23) {
  void 0 === t23 && (t23 = false);
  var s15, o22 = e36.CSS;
  if ("boolean" == typeof r7 && !t23) return r7;
  if (!(o22 && "function" == typeof o22.supports)) return false;
  var p5 = o22.supports("--css-vars", "yes"), a13 = o22.supports("(--css-vars: yes)") && o22.supports("color", "#00000000");
  return s15 = p5 || a13, t23 || (r7 = s15), s15;
}
function t14(r14, e36, t23) {
  if (!r14) return { x: 0, y: 0 };
  var s15, o22, p5 = e36.x, a13 = e36.y, u8 = p5 + t23.left, n17 = a13 + t23.top;
  if ("touchstart" === r14.type) {
    var c11 = r14;
    s15 = c11.changedTouches[0].pageX - u8, o22 = c11.changedTouches[0].pageY - n17;
  } else {
    var f6 = r14;
    s15 = f6.pageX - u8, o22 = f6.pageY - n17;
  }
  return { x: s15, y: o22 };
}

// node_modules/@cosmograph/ui/ext/@material/ripple/foundation.js
var d6 = ["touchstart", "pointerdown", "mousedown", "keydown"];
var c6 = ["touchend", "pointerup", "mouseup", "contextmenu"];
var u5 = [];
var l2 = function(i11) {
  function l6(t23) {
    var a13 = i11.call(this, o8(o8({}, l6.defaultAdapter), t23)) || this;
    return a13.activationAnimationHasEnded = false, a13.activationTimer = 0, a13.fgDeactivationRemovalTimer = 0, a13.fgScale = "0", a13.frame = { width: 0, height: 0 }, a13.initialSize = 0, a13.layoutFrame = 0, a13.maxRadius = 0, a13.unboundedCoords = { left: 0, top: 0 }, a13.activationState = a13.defaultActivationState(), a13.activationTimerCallback = function() {
      a13.activationAnimationHasEnded = true, a13.runDeactivationUXLogicIfReady();
    }, a13.activateHandler = function(t24) {
      a13.activateImpl(t24);
    }, a13.deactivateHandler = function() {
      a13.deactivateImpl();
    }, a13.focusHandler = function() {
      a13.handleFocus();
    }, a13.blurHandler = function() {
      a13.handleBlur();
    }, a13.resizeHandler = function() {
      a13.layout();
    }, a13;
  }
  return t9(l6, i11), Object.defineProperty(l6, "cssClasses", { get: function() {
    return d5;
  }, enumerable: false, configurable: true }), Object.defineProperty(l6, "strings", { get: function() {
    return p4;
  }, enumerable: false, configurable: true }), Object.defineProperty(l6, "numbers", { get: function() {
    return e16;
  }, enumerable: false, configurable: true }), Object.defineProperty(l6, "defaultAdapter", { get: function() {
    return { addClass: function() {
    }, browserSupportsCssVars: function() {
      return true;
    }, computeBoundingRect: function() {
      return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
    }, containsEventTarget: function() {
      return true;
    }, deregisterDocumentInteractionHandler: function() {
    }, deregisterInteractionHandler: function() {
    }, deregisterResizeHandler: function() {
    }, getWindowPageOffset: function() {
      return { x: 0, y: 0 };
    }, isSurfaceActive: function() {
      return true;
    }, isSurfaceDisabled: function() {
      return true;
    }, isUnbounded: function() {
      return true;
    }, registerDocumentInteractionHandler: function() {
    }, registerInteractionHandler: function() {
    }, registerResizeHandler: function() {
    }, removeClass: function() {
    }, updateCssVariable: function() {
    } };
  }, enumerable: false, configurable: true }), l6.prototype.init = function() {
    var t23 = this, e36 = this.supportsPressRipple();
    if (this.registerRootHandlers(e36), e36) {
      var a13 = l6.cssClasses, i12 = a13.ROOT, r14 = a13.UNBOUNDED;
      requestAnimationFrame(function() {
        t23.adapter.addClass(i12), t23.adapter.isUnbounded() && (t23.adapter.addClass(r14), t23.layoutInternal());
      });
    }
  }, l6.prototype.destroy = function() {
    var t23 = this;
    if (this.supportsPressRipple()) {
      this.activationTimer && (clearTimeout(this.activationTimer), this.activationTimer = 0, this.adapter.removeClass(l6.cssClasses.FG_ACTIVATION)), this.fgDeactivationRemovalTimer && (clearTimeout(this.fgDeactivationRemovalTimer), this.fgDeactivationRemovalTimer = 0, this.adapter.removeClass(l6.cssClasses.FG_DEACTIVATION));
      var e36 = l6.cssClasses, a13 = e36.ROOT, i12 = e36.UNBOUNDED;
      requestAnimationFrame(function() {
        t23.adapter.removeClass(a13), t23.adapter.removeClass(i12), t23.removeCssVars();
      });
    }
    this.deregisterRootHandlers(), this.deregisterDeactivationHandlers();
  }, l6.prototype.activate = function(t23) {
    this.activateImpl(t23);
  }, l6.prototype.deactivate = function() {
    this.deactivateImpl();
  }, l6.prototype.layout = function() {
    var t23 = this;
    this.layoutFrame && cancelAnimationFrame(this.layoutFrame), this.layoutFrame = requestAnimationFrame(function() {
      t23.layoutInternal(), t23.layoutFrame = 0;
    });
  }, l6.prototype.setUnbounded = function(t23) {
    var e36 = l6.cssClasses.UNBOUNDED;
    t23 ? this.adapter.addClass(e36) : this.adapter.removeClass(e36);
  }, l6.prototype.handleFocus = function() {
    var t23 = this;
    requestAnimationFrame(function() {
      return t23.adapter.addClass(l6.cssClasses.BG_FOCUSED);
    });
  }, l6.prototype.handleBlur = function() {
    var t23 = this;
    requestAnimationFrame(function() {
      return t23.adapter.removeClass(l6.cssClasses.BG_FOCUSED);
    });
  }, l6.prototype.supportsPressRipple = function() {
    return this.adapter.browserSupportsCssVars();
  }, l6.prototype.defaultActivationState = function() {
    return { activationEvent: void 0, hasDeactivationUXRun: false, isActivated: false, isProgrammatic: false, wasActivatedByPointer: false, wasElementMadeActive: false };
  }, l6.prototype.registerRootHandlers = function(t23) {
    var e36, i12;
    if (t23) {
      try {
        for (var r14 = n7(d6), n17 = r14.next(); !n17.done; n17 = r14.next()) {
          var s15 = n17.value;
          this.adapter.registerInteractionHandler(s15, this.activateHandler);
        }
      } catch (t24) {
        e36 = { error: t24 };
      } finally {
        try {
          n17 && !n17.done && (i12 = r14.return) && i12.call(r14);
        } finally {
          if (e36) throw e36.error;
        }
      }
      this.adapter.isUnbounded() && this.adapter.registerResizeHandler(this.resizeHandler);
    }
    this.adapter.registerInteractionHandler("focus", this.focusHandler), this.adapter.registerInteractionHandler("blur", this.blurHandler);
  }, l6.prototype.registerDeactivationHandlers = function(t23) {
    var e36, i12;
    if ("keydown" === t23.type) this.adapter.registerInteractionHandler("keyup", this.deactivateHandler);
    else try {
      for (var r14 = n7(c6), n17 = r14.next(); !n17.done; n17 = r14.next()) {
        var s15 = n17.value;
        this.adapter.registerDocumentInteractionHandler(s15, this.deactivateHandler);
      }
    } catch (t24) {
      e36 = { error: t24 };
    } finally {
      try {
        n17 && !n17.done && (i12 = r14.return) && i12.call(r14);
      } finally {
        if (e36) throw e36.error;
      }
    }
  }, l6.prototype.deregisterRootHandlers = function() {
    var t23, e36;
    try {
      for (var i12 = n7(d6), r14 = i12.next(); !r14.done; r14 = i12.next()) {
        var n17 = r14.value;
        this.adapter.deregisterInteractionHandler(n17, this.activateHandler);
      }
    } catch (e37) {
      t23 = { error: e37 };
    } finally {
      try {
        r14 && !r14.done && (e36 = i12.return) && e36.call(i12);
      } finally {
        if (t23) throw t23.error;
      }
    }
    this.adapter.deregisterInteractionHandler("focus", this.focusHandler), this.adapter.deregisterInteractionHandler("blur", this.blurHandler), this.adapter.isUnbounded() && this.adapter.deregisterResizeHandler(this.resizeHandler);
  }, l6.prototype.deregisterDeactivationHandlers = function() {
    var t23, e36;
    this.adapter.deregisterInteractionHandler("keyup", this.deactivateHandler);
    try {
      for (var i12 = n7(c6), r14 = i12.next(); !r14.done; r14 = i12.next()) {
        var n17 = r14.value;
        this.adapter.deregisterDocumentInteractionHandler(n17, this.deactivateHandler);
      }
    } catch (e37) {
      t23 = { error: e37 };
    } finally {
      try {
        r14 && !r14.done && (e36 = i12.return) && e36.call(i12);
      } finally {
        if (t23) throw t23.error;
      }
    }
  }, l6.prototype.removeCssVars = function() {
    var t23 = this, e36 = l6.strings;
    Object.keys(e36).forEach(function(a13) {
      0 === a13.indexOf("VAR_") && t23.adapter.updateCssVariable(e36[a13], null);
    });
  }, l6.prototype.activateImpl = function(t23) {
    var e36 = this;
    if (!this.adapter.isSurfaceDisabled()) {
      var a13 = this.activationState;
      if (!a13.isActivated) {
        var i12 = this.previousActivationEvent;
        if (!(i12 && void 0 !== t23 && i12.type !== t23.type)) a13.isActivated = true, a13.isProgrammatic = void 0 === t23, a13.activationEvent = t23, a13.wasActivatedByPointer = !a13.isProgrammatic && (void 0 !== t23 && ("mousedown" === t23.type || "touchstart" === t23.type || "pointerdown" === t23.type)), void 0 !== t23 && u5.length > 0 && u5.some(function(t24) {
          return e36.adapter.containsEventTarget(t24);
        }) ? this.resetActivationState() : (void 0 !== t23 && (u5.push(t23.target), this.registerDeactivationHandlers(t23)), a13.wasElementMadeActive = this.checkElementMadeActive(t23), a13.wasElementMadeActive && this.animateActivation(), requestAnimationFrame(function() {
          u5 = [], a13.wasElementMadeActive || void 0 === t23 || " " !== t23.key && 32 !== t23.keyCode || (a13.wasElementMadeActive = e36.checkElementMadeActive(t23), a13.wasElementMadeActive && e36.animateActivation()), a13.wasElementMadeActive || (e36.activationState = e36.defaultActivationState());
        }));
      }
    }
  }, l6.prototype.checkElementMadeActive = function(t23) {
    return void 0 === t23 || "keydown" !== t23.type || this.adapter.isSurfaceActive();
  }, l6.prototype.animateActivation = function() {
    var t23 = this, e36 = l6.strings, a13 = e36.VAR_FG_TRANSLATE_START, i12 = e36.VAR_FG_TRANSLATE_END, r14 = l6.cssClasses, n17 = r14.FG_DEACTIVATION, s15 = r14.FG_ACTIVATION, o22 = l6.numbers.DEACTIVATION_TIMEOUT_MS;
    this.layoutInternal();
    var d13 = "", c11 = "";
    if (!this.adapter.isUnbounded()) {
      var u8 = this.getFgTranslationCoordinates(), h6 = u8.startPoint, v3 = u8.endPoint;
      d13 = h6.x + "px, " + h6.y + "px", c11 = v3.x + "px, " + v3.y + "px";
    }
    this.adapter.updateCssVariable(a13, d13), this.adapter.updateCssVariable(i12, c11), clearTimeout(this.activationTimer), clearTimeout(this.fgDeactivationRemovalTimer), this.rmBoundedActivationClasses(), this.adapter.removeClass(n17), this.adapter.computeBoundingRect(), this.adapter.addClass(s15), this.activationTimer = setTimeout(function() {
      t23.activationTimerCallback();
    }, o22);
  }, l6.prototype.getFgTranslationCoordinates = function() {
    var t23, e36 = this.activationState, a13 = e36.activationEvent;
    return { startPoint: t23 = { x: (t23 = e36.wasActivatedByPointer ? t14(a13, this.adapter.getWindowPageOffset(), this.adapter.computeBoundingRect()) : { x: this.frame.width / 2, y: this.frame.height / 2 }).x - this.initialSize / 2, y: t23.y - this.initialSize / 2 }, endPoint: { x: this.frame.width / 2 - this.initialSize / 2, y: this.frame.height / 2 - this.initialSize / 2 } };
  }, l6.prototype.runDeactivationUXLogicIfReady = function() {
    var t23 = this, e36 = l6.cssClasses.FG_DEACTIVATION, a13 = this.activationState, i12 = a13.hasDeactivationUXRun, r14 = a13.isActivated;
    (i12 || !r14) && this.activationAnimationHasEnded && (this.rmBoundedActivationClasses(), this.adapter.addClass(e36), this.fgDeactivationRemovalTimer = setTimeout(function() {
      t23.adapter.removeClass(e36);
    }, e16.FG_DEACTIVATION_MS));
  }, l6.prototype.rmBoundedActivationClasses = function() {
    var t23 = l6.cssClasses.FG_ACTIVATION;
    this.adapter.removeClass(t23), this.activationAnimationHasEnded = false, this.adapter.computeBoundingRect();
  }, l6.prototype.resetActivationState = function() {
    var t23 = this;
    this.previousActivationEvent = this.activationState.activationEvent, this.activationState = this.defaultActivationState(), setTimeout(function() {
      return t23.previousActivationEvent = void 0;
    }, l6.numbers.TAP_DELAY_MS);
  }, l6.prototype.deactivateImpl = function() {
    var t23 = this, a13 = this.activationState;
    if (a13.isActivated) {
      var i12 = o8({}, a13);
      a13.isProgrammatic ? (requestAnimationFrame(function() {
        t23.animateDeactivation(i12);
      }), this.resetActivationState()) : (this.deregisterDeactivationHandlers(), requestAnimationFrame(function() {
        t23.activationState.hasDeactivationUXRun = true, t23.animateDeactivation(i12), t23.resetActivationState();
      }));
    }
  }, l6.prototype.animateDeactivation = function(t23) {
    var e36 = t23.wasActivatedByPointer, a13 = t23.wasElementMadeActive;
    (e36 || a13) && this.runDeactivationUXLogicIfReady();
  }, l6.prototype.layoutInternal = function() {
    var t23 = this;
    this.frame = this.adapter.computeBoundingRect();
    var e36 = Math.max(this.frame.height, this.frame.width);
    this.maxRadius = this.adapter.isUnbounded() ? e36 : Math.sqrt(Math.pow(t23.frame.width, 2) + Math.pow(t23.frame.height, 2)) + l6.numbers.PADDING;
    var a13 = Math.floor(e36 * l6.numbers.INITIAL_ORIGIN_SCALE);
    this.adapter.isUnbounded() && a13 % 2 != 0 ? this.initialSize = a13 - 1 : this.initialSize = a13, this.fgScale = "" + this.maxRadius / this.initialSize, this.updateLayoutCssVars();
  }, l6.prototype.updateLayoutCssVars = function() {
    var t23 = l6.strings, e36 = t23.VAR_FG_SIZE, a13 = t23.VAR_LEFT, i12 = t23.VAR_TOP, r14 = t23.VAR_FG_SCALE;
    this.adapter.updateCssVariable(e36, this.initialSize + "px"), this.adapter.updateCssVariable(r14, this.fgScale), this.adapter.isUnbounded() && (this.unboundedCoords = { left: Math.round(this.frame.width / 2 - this.initialSize / 2), top: Math.round(this.frame.height / 2 - this.initialSize / 2) }, this.adapter.updateCssVariable(a13, this.unboundedCoords.left + "px"), this.adapter.updateCssVariable(i12, this.unboundedCoords.top + "px"));
  }, l6;
}(e12);

// node_modules/@cosmograph/ui/ext/@smui/ripple/dist/Ripple.js
var { applyPassive: a6 } = events_exports;
var { matches: n10 } = ponyfill_exports;
function d7(e36, { ripple: r14 = true, surface: d13 = false, unbounded: o22 = false, disabled: l6 = false, color: p5, active: c11, rippleElement: m6, eventTarget: u8, activeTarget: v3, addClass: f6 = (r15) => e36.classList.add(r15), removeClass: y3 = (r15) => e36.classList.remove(r15), addStyle: g2 = (r15, i11) => e36.style.setProperty(r15, i11), initPromise: b5 = Promise.resolve() } = {}) {
  let w3, E8, L3 = X("SMUI:addLayoutListener"), C9 = c11, P6 = u8, j6 = v3;
  function S4() {
    d13 ? (f6("mdc-ripple-surface"), "primary" === p5 ? (f6("smui-ripple-surface--primary"), y3("smui-ripple-surface--secondary")) : "secondary" === p5 ? (y3("smui-ripple-surface--primary"), f6("smui-ripple-surface--secondary")) : (y3("smui-ripple-surface--primary"), y3("smui-ripple-surface--secondary"))) : (y3("mdc-ripple-surface"), y3("smui-ripple-surface--primary"), y3("smui-ripple-surface--secondary")), w3 && C9 !== c11 && (C9 = c11, c11 ? w3.activate() : false === c11 && w3.deactivate()), r14 && !w3 ? (w3 = new l2({ addClass: f6, browserSupportsCssVars: () => e17(window), computeBoundingRect: () => (m6 || e36).getBoundingClientRect(), containsEventTarget: (r15) => e36.contains(r15), deregisterDocumentInteractionHandler: (e37, r15) => document.documentElement.removeEventListener(e37, r15, a6()), deregisterInteractionHandler: (r15, i11) => (u8 || e36).removeEventListener(r15, i11, a6()), deregisterResizeHandler: (e37) => window.removeEventListener("resize", e37), getWindowPageOffset: () => ({ x: window.pageXOffset, y: window.pageYOffset }), isSurfaceActive: () => null == c11 ? n10(v3 || e36, ":active") : c11, isSurfaceDisabled: () => !!l6, isUnbounded: () => !!o22, registerDocumentInteractionHandler: (e37, r15) => document.documentElement.addEventListener(e37, r15, a6()), registerInteractionHandler: (r15, i11) => (u8 || e36).addEventListener(r15, i11, a6()), registerResizeHandler: (e37) => window.addEventListener("resize", e37), removeClass: y3, updateCssVariable: g2 }), b5.then(() => {
      w3 && (w3.init(), w3.setUnbounded(o22));
    })) : w3 && !r14 && b5.then(() => {
      w3 && (w3.destroy(), w3 = void 0);
    }), !w3 || P6 === u8 && j6 === v3 || (P6 = u8, j6 = v3, w3.destroy(), requestAnimationFrame(() => {
      w3 && (w3.init(), w3.setUnbounded(o22));
    })), !r14 && o22 && f6("mdc-ripple-upgraded--unbounded");
  }
  return S4(), L3 && (E8 = L3(function() {
    w3 && w3.layout();
  })), { update(i11) {
    ({ ripple: r14, surface: d13, unbounded: o22, disabled: l6, color: p5, active: c11, rippleElement: m6, eventTarget: u8, activeTarget: v3, addClass: f6, removeClass: y3, addStyle: g2, initPromise: b5 } = Object.assign({ ripple: true, surface: false, unbounded: false, disabled: false, color: void 0, active: void 0, rippleElement: void 0, eventTarget: void 0, activeTarget: void 0, addClass: (r15) => e36.classList.add(r15), removeClass: (r15) => e36.classList.remove(r15), addStyle: (r15, i12) => e36.style.setProperty(r15, i12), initPromise: Promise.resolve() }, i11)), S4();
  }, destroy() {
    w3 && (w3.destroy(), w3 = void 0, y3("mdc-ripple-surface"), y3("smui-ripple-surface--primary"), y3("smui-ripple-surface--secondary")), E8 && E8();
  } };
}

// node_modules/@cosmograph/ui/ext/@smui/list/dist/Item.svelte.js
function T4(e36) {
  let t23;
  return { c() {
    t23 = k("span"), M(t23, "class", "mdc-deprecated-list-item__ripple");
  }, m(e37, i11) {
    w2(e37, t23, i11);
  }, d(e37) {
    e37 && v(t23);
  } };
}
function G3(e36) {
  let t23, i11, n17 = e36[7] && T4();
  const r14 = e36[34].default, c11 = l(r14, e36, e36[37], null);
  return { c() {
    n17 && n17.c(), t23 = S(), c11 && c11.c();
  }, m(e37, r15) {
    n17 && n17.m(e37, r15), w2(e37, t23, r15), c11 && c11.m(e37, r15), i11 = true;
  }, p(e37, s15) {
    e37[7] ? n17 || (n17 = T4(), n17.c(), n17.m(t23.parentNode, t23)) : n17 && (n17.d(1), n17 = null), c11 && c11.p && (!i11 || 64 & s15[1]) && h(c11, r14, e37, e37[37], i11 ? d2(r14, e37[37], s15, null) : p2(e37[37]), null);
  }, i(e37) {
    i11 || (bt(c11, e37), i11 = true);
  }, o(e37) {
    mt(c11, e37), i11 = false;
  }, d(e37) {
    n17 && n17.d(e37), e37 && v(t23), c11 && c11.d(e37);
  } };
}
function P3(e36) {
  let t23, i11, $2;
  const g2 = [{ tag: e36[14] }, { use: [...e36[6] ? [] : [[d7, { ripple: !e36[16], unbounded: false, color: (e36[1] || e36[0]) && null == e36[5] ? "primary" : e36[5], disabled: e36[10], addClass: e36[24], removeClass: e36[25], addStyle: e36[26] }]], e36[22], ...e36[2]] }, { class: e8({ [e36[3]]: true, "mdc-deprecated-list-item": !e36[8], "mdc-deprecated-list-item__wrapper": e36[8], "mdc-deprecated-list-item--activated": e36[1], "mdc-deprecated-list-item--selected": e36[0], "mdc-deprecated-list-item--disabled": e36[10], "mdc-menu-item--selected": !e36[23] && "menuitem" === e36[9] && e36[0], "smui-menu-item--non-interactive": e36[6], ...e36[18] }) }, { style: Object.entries(e36[19]).map(N3).concat([e36[4]]).join(" ") }, e36[23] && e36[1] ? { "aria-current": "page" } : {}, !e36[23] || e36[8] ? { role: e36[9] } : {}, e36[23] || "option" !== e36[9] ? {} : { "aria-selected": e36[0] ? "true" : "false" }, e36[23] || "radio" !== e36[9] && "checkbox" !== e36[9] ? {} : { "aria-checked": e36[16] && e36[16].checked ? "true" : "false" }, e36[23] ? {} : { "aria-disabled": e36[10] ? "true" : "false" }, { "data-menu-item-skip-restore-focus": e36[11] || void 0 }, { tabindex: e36[21] }, { href: e36[12] }, e36[20], e36[29]];
  var b5 = e36[13];
  function x3(e37) {
    let t24 = { $$slots: { default: [G3] }, $$scope: { ctx: e37 } };
    for (let e38 = 0; e38 < g2.length; e38 += 1) t24 = n5(t24, g2[e38]);
    return { props: t24 };
  }
  return b5 && (t23 = I2(b5, x3(e36)), e36[35](t23), t23.$on("click", e36[15]), t23.$on("keydown", e36[27]), t23.$on("SMUIGenericInput:mount", e36[28]), t23.$on("SMUIGenericInput:unmount", e36[36])), { c() {
    t23 && Ot(t23.$$.fragment), i11 = S();
  }, m(e37, n17) {
    t23 && jt(t23, e37, n17), w2(e37, i11, n17), $2 = true;
  }, p(e37, s15) {
    const a13 = 670916479 & s15[0] ? vt(g2, [16384 & s15[0] && { tag: e37[14] }, 121701479 & s15[0] && { use: [...e37[6] ? [] : [[d7, { ripple: !e37[16], unbounded: false, color: (e37[1] || e37[0]) && null == e37[5] ? "primary" : e37[5], disabled: e37[10], addClass: e37[24], removeClass: e37[25], addStyle: e37[26] }]], e37[22], ...e37[2]] }, 8652619 & s15[0] && { class: e8({ [e37[3]]: true, "mdc-deprecated-list-item": !e37[8], "mdc-deprecated-list-item__wrapper": e37[8], "mdc-deprecated-list-item--activated": e37[1], "mdc-deprecated-list-item--selected": e37[0], "mdc-deprecated-list-item--disabled": e37[10], "mdc-menu-item--selected": !e37[23] && "menuitem" === e37[9] && e37[0], "smui-menu-item--non-interactive": e37[6], ...e37[18] }) }, 524304 & s15[0] && { style: Object.entries(e37[19]).map(N3).concat([e37[4]]).join(" ") }, 8388610 & s15[0] && kt(e37[23] && e37[1] ? { "aria-current": "page" } : {}), 8389376 & s15[0] && kt(!e37[23] || e37[8] ? { role: e37[9] } : {}), 8389121 & s15[0] && kt(e37[23] || "option" !== e37[9] ? {} : { "aria-selected": e37[0] ? "true" : "false" }), 8454656 & s15[0] && kt(e37[23] || "radio" !== e37[9] && "checkbox" !== e37[9] ? {} : { "aria-checked": e37[16] && e37[16].checked ? "true" : "false" }), 8389632 & s15[0] && kt(e37[23] ? {} : { "aria-disabled": e37[10] ? "true" : "false" }), 2048 & s15[0] && { "data-menu-item-skip-restore-focus": e37[11] || void 0 }, 2097152 & s15[0] && { tabindex: e37[21] }, 4096 & s15[0] && { href: e37[12] }, 1048576 & s15[0] && kt(e37[20]), 536870912 & s15[0] && kt(e37[29])]) : {};
    if (128 & s15[0] | 64 & s15[1] && (a13.$$scope = { dirty: s15, ctx: e37 }), 8192 & s15[0] && b5 !== (b5 = e37[13])) {
      if (t23) {
        yt();
        const e38 = t23;
        mt(e38.$$.fragment, 1, 0, () => {
          St(e38, 1);
        }), gt();
      }
      b5 ? (t23 = I2(b5, x3(e37)), e37[35](t23), t23.$on("click", e37[15]), t23.$on("keydown", e37[27]), t23.$on("SMUIGenericInput:mount", e37[28]), t23.$on("SMUIGenericInput:unmount", e37[36]), Ot(t23.$$.fragment), bt(t23.$$.fragment, 1), jt(t23, i11.parentNode, i11)) : t23 = null;
    } else b5 && t23.$set(a13);
  }, i(e37) {
    $2 || (t23 && bt(t23.$$.fragment, e37), $2 = true);
  }, o(e37) {
    t23 && mt(t23.$$.fragment, e37), $2 = false;
  }, d(n17) {
    e36[35](null), n17 && v(i11), t23 && St(t23, n17);
  } };
}
var q3 = 0;
var N3 = ([e36, t23]) => `${e36}: ${t23};`;
function O4(e36, t23, i11) {
  let n17;
  const r14 = ["use", "class", "style", "color", "nonInteractive", "ripple", "wrapper", "activated", "role", "selected", "disabled", "skipRestoreFocus", "tabindex", "inputId", "href", "component", "tag", "action", "getPrimaryText", "getElement"];
  let s15 = y(t23, r14), { $$slots: c11 = {}, $$scope: a13 } = t23;
  var o22;
  const l6 = n6(Q());
  let d13 = () => {
  };
  let { use: u8 = [] } = t23, { class: m6 = "" } = t23, { style: p5 = "" } = t23, { color: f6 } = t23, { nonInteractive: v3 = null !== (o22 = X("SMUI:list:nonInteractive")) && void 0 !== o22 && o22 } = t23;
  W("SMUI:list:nonInteractive", void 0);
  let { ripple: S4 = !v3 } = t23, { wrapper: M3 = false } = t23, { activated: U6 = false } = t23, { role: w3 = M3 ? "presentation" : X("SMUI:list:item:role") } = t23;
  W("SMUI:list:item:role", void 0);
  let j6, C9, R7, { selected: A5 = false } = t23, { disabled: T7 = false } = t23, { skipRestoreFocus: G5 = false } = t23, { tabindex: P6 = d13 } = t23, { inputId: N6 = "SMUI-form-field-list-" + q3++ } = t23, { href: O8 } = t23, B4 = {}, V2 = {}, z5 = {}, D4 = X("SMUI:list:item:nav"), { component: H3 = I3 } = t23, { tag: J3 = H3 === I3 ? D4 ? O8 ? "a" : "span" : "li" : void 0 } = t23;
  function K3(e37) {
    return e37 in B4 ? B4[e37] : ie().classList.contains(e37);
  }
  function Q3(e37) {
    B4[e37] || i11(18, B4[e37] = true, B4);
  }
  function W6(e37) {
    e37 in B4 && !B4[e37] || i11(18, B4[e37] = false, B4);
  }
  function X3(e37) {
    var t24;
    return e37 in z5 ? null !== (t24 = z5[e37]) && void 0 !== t24 ? t24 : null : ie().getAttribute(e37);
  }
  function Y3(e37, t24) {
    z5[e37] !== t24 && i11(20, z5[e37] = t24, z5);
  }
  function Z3(e37) {
    e37 in z5 && null == z5[e37] || i11(20, z5[e37] = void 0, z5);
  }
  function ee(e37) {
    T7 || e9(ie(), "SMUI:action", e37);
  }
  function te() {
    var e37, t24, i12;
    const n18 = ie(), r15 = n18.querySelector(".mdc-deprecated-list-item__primary-text");
    if (r15) return null !== (e37 = r15.textContent) && void 0 !== e37 ? e37 : "";
    const s16 = n18.querySelector(".mdc-deprecated-list-item__text");
    return s16 ? null !== (t24 = s16.textContent) && void 0 !== t24 ? t24 : "" : null !== (i12 = n18.textContent) && void 0 !== i12 ? i12 : "";
  }
  function ie() {
    return j6.getElement();
  }
  W("SMUI:generic:input:props", { id: N6 }), W("SMUI:separator:context", void 0), R(() => {
    if (!A5 && !v3) {
      let e38 = true, t24 = j6.getElement();
      for (; t24.previousSibling; ) if (t24 = t24.previousSibling, 1 === t24.nodeType && t24.classList.contains("mdc-deprecated-list-item") && !t24.classList.contains("mdc-deprecated-list-item--disabled")) {
        e38 = false;
        break;
      }
      e38 && (R7 = window.requestAnimationFrame(() => function(e39) {
        let t25 = true;
        for (; e39.nextElementSibling; ) if (1 === (e39 = e39.nextElementSibling).nodeType && e39.classList.contains("mdc-deprecated-list-item")) {
          const i12 = e39.attributes.getNamedItem("tabindex");
          if (i12 && "0" === i12.value) {
            t25 = false;
            break;
          }
        }
        t25 && i11(21, n17 = 0);
      }(t24)));
    }
    const e37 = { _smui_list_item_accessor: true, get element() {
      return ie();
    }, get selected() {
      return A5;
    }, set selected(e38) {
      i11(0, A5 = e38);
    }, hasClass: K3, addClass: Q3, removeClass: W6, getAttr: X3, addAttr: Y3, removeAttr: Z3, getPrimaryText: te, get checked() {
      var e38;
      return null !== (e38 = C9 && C9.checked) && void 0 !== e38 && e38;
    }, set checked(e38) {
      C9 && i11(16, C9.checked = !!e38, C9);
    }, get hasCheckbox() {
      return !(!C9 || !("_smui_checkbox_accessor" in C9));
    }, get hasRadio() {
      return !(!C9 || !("_smui_radio_accessor" in C9));
    }, activateRipple() {
      C9 && C9.activateRipple();
    }, deactivateRipple() {
      C9 && C9.deactivateRipple();
    }, getValue: () => s15.value, action: ee, get tabindex() {
      return n17;
    }, set tabindex(e38) {
      i11(30, P6 = e38);
    }, get disabled() {
      return T7;
    }, get activated() {
      return U6;
    }, set activated(e38) {
      i11(1, U6 = e38);
    } };
    return e9(ie(), "SMUIListItem:mount", e37), () => {
      e9(ie(), "SMUIListItem:unmount", e37);
    };
  }), U(() => {
    R7 && window.cancelAnimationFrame(R7);
  });
  return e36.$$set = (e37) => {
    t23 = n5(n5({}, t23), $(e37)), i11(29, s15 = y(t23, r14)), "use" in e37 && i11(2, u8 = e37.use), "class" in e37 && i11(3, m6 = e37.class), "style" in e37 && i11(4, p5 = e37.style), "color" in e37 && i11(5, f6 = e37.color), "nonInteractive" in e37 && i11(6, v3 = e37.nonInteractive), "ripple" in e37 && i11(7, S4 = e37.ripple), "wrapper" in e37 && i11(8, M3 = e37.wrapper), "activated" in e37 && i11(1, U6 = e37.activated), "role" in e37 && i11(9, w3 = e37.role), "selected" in e37 && i11(0, A5 = e37.selected), "disabled" in e37 && i11(10, T7 = e37.disabled), "skipRestoreFocus" in e37 && i11(11, G5 = e37.skipRestoreFocus), "tabindex" in e37 && i11(30, P6 = e37.tabindex), "inputId" in e37 && i11(31, N6 = e37.inputId), "href" in e37 && i11(12, O8 = e37.href), "component" in e37 && i11(13, H3 = e37.component), "tag" in e37 && i11(14, J3 = e37.tag), "$$scope" in e37 && i11(37, a13 = e37.$$scope);
  }, e36.$$.update = () => {
    1073808449 & e36.$$.dirty[0] && i11(21, n17 = P6 === d13 ? v3 || T7 || !(A5 || C9 && C9.checked) ? -1 : 0 : P6);
  }, [A5, U6, u8, m6, p5, f6, v3, S4, M3, w3, T7, G5, O8, H3, J3, ee, C9, j6, B4, V2, z5, n17, l6, D4, Q3, W6, function(e37, t24) {
    V2[e37] != t24 && ("" === t24 || null == t24 ? (delete V2[e37], i11(19, V2)) : i11(19, V2[e37] = t24, V2));
  }, function(e37) {
    const t24 = "Enter" === e37.key, i12 = "Space" === e37.key;
    (t24 || i12) && ee(e37);
  }, function(e37) {
    ("_smui_checkbox_accessor" in e37.detail || "_smui_radio_accessor" in e37.detail) && i11(16, C9 = e37.detail);
  }, s15, P6, N6, te, ie, c11, function(e37) {
    tt[e37 ? "unshift" : "push"](() => {
      j6 = e37, i11(17, j6);
    });
  }, () => i11(16, C9 = void 0), a13];
}
var B2 = class extends Mt {
  constructor(e36) {
    super(), At(this, e36, O4, P3, u3, { use: 2, class: 3, style: 4, color: 5, nonInteractive: 6, ripple: 7, wrapper: 8, activated: 1, role: 9, selected: 0, disabled: 10, skipRestoreFocus: 11, tabindex: 30, inputId: 31, href: 12, component: 13, tag: 14, action: 15, getPrimaryText: 32, getElement: 33 }, null, [-1, -1]);
  }
  get action() {
    return this.$$.ctx[15];
  }
  get getPrimaryText() {
    return this.$$.ctx[32];
  }
  get getElement() {
    return this.$$.ctx[33];
  }
};

// node_modules/@cosmograph/ui/ext/@smui/common/dist/classadder/ClassAdder.svelte.js
function k2(t23) {
  let e36;
  const s15 = t23[11].default, n17 = l(s15, t23, t23[13], null);
  return { c() {
    n17 && n17.c();
  }, m(t24, s16) {
    n17 && n17.m(t24, s16), e36 = true;
  }, p(t24, o22) {
    n17 && n17.p && (!e36 || 8192 & o22) && h(n17, s15, t24, t24[13], e36 ? d2(s15, t24[13], o22, null) : p2(t24[13]), null);
  }, i(t24) {
    e36 || (bt(n17, t24), e36 = true);
  }, o(t24) {
    mt(n17, t24), e36 = false;
  }, d(t24) {
    n17 && n17.d(t24);
  } };
}
function q4(t23) {
  let e36, s15, g2;
  const d13 = [{ tag: t23[3] }, { use: [t23[8], ...t23[0]] }, { class: e8({ [t23[1]]: true, [t23[6]]: true, ...t23[5] }) }, t23[7], t23[9]];
  var h6 = t23[2];
  function x3(t24) {
    let e37 = { $$slots: { default: [k2] }, $$scope: { ctx: t24 } };
    for (let t25 = 0; t25 < d13.length; t25 += 1) e37 = n5(e37, d13[t25]);
    return { props: e37 };
  }
  return h6 && (e36 = I2(h6, x3(t23)), t23[12](e36)), { c() {
    e36 && Ot(e36.$$.fragment), s15 = S();
  }, m(t24, n17) {
    e36 && jt(e36, t24, n17), w2(t24, s15, n17), g2 = true;
  }, p(t24, [c11]) {
    const l6 = 1003 & c11 ? vt(d13, [8 & c11 && { tag: t24[3] }, 257 & c11 && { use: [t24[8], ...t24[0]] }, 98 & c11 && { class: e8({ [t24[1]]: true, [t24[6]]: true, ...t24[5] }) }, 128 & c11 && kt(t24[7]), 512 & c11 && kt(t24[9])]) : {};
    if (8192 & c11 && (l6.$$scope = { dirty: c11, ctx: t24 }), 4 & c11 && h6 !== (h6 = t24[2])) {
      if (e36) {
        yt();
        const t25 = e36;
        mt(t25.$$.fragment, 1, 0, () => {
          St(t25, 1);
        }), gt();
      }
      h6 ? (e36 = I2(h6, x3(t24)), t24[12](e36), Ot(e36.$$.fragment), bt(e36.$$.fragment, 1), jt(e36, s15.parentNode, s15)) : e36 = null;
    } else h6 && e36.$set(l6);
  }, i(t24) {
    g2 || (e36 && bt(e36.$$.fragment, t24), g2 = true);
  }, o(t24) {
    e36 && mt(e36.$$.fragment, t24), g2 = false;
  }, d(n17) {
    t23[12](null), n17 && v(s15), e36 && St(e36, n17);
  } };
}
var z3 = { component: I3, tag: "div", class: "", classMap: {}, contexts: {}, props: {} };
function A4(t23, e36, s15) {
  const n17 = ["use", "class", "component", "tag", "getElement"];
  let o22, c11 = y(e36, n17), { $$slots: r14 = {}, $$scope: l6 } = e36, { use: a13 = [] } = e36, { class: i11 = "" } = e36;
  const u8 = z3.class, p5 = {}, m6 = [], $2 = z3.contexts, f6 = z3.props;
  let { component: b5 = z3.component } = e36, { tag: w3 = b5 === I3 ? z3.tag : void 0 } = e36;
  Object.entries(z3.classMap).forEach(([t24, e37]) => {
    const n18 = X(e37);
    n18 && "subscribe" in n18 && m6.push(n18.subscribe((e38) => {
      s15(5, p5[t24] = e38, p5);
    }));
  });
  const y3 = n6(Q());
  for (let t24 in $2) $2.hasOwnProperty(t24) && W(t24, $2[t24]);
  return U(() => {
    for (const t24 of m6) t24();
  }), t23.$$set = (t24) => {
    e36 = n5(n5({}, e36), $(t24)), s15(9, c11 = y(e36, n17)), "use" in t24 && s15(0, a13 = t24.use), "class" in t24 && s15(1, i11 = t24.class), "component" in t24 && s15(2, b5 = t24.component), "tag" in t24 && s15(3, w3 = t24.tag), "$$scope" in t24 && s15(13, l6 = t24.$$scope);
  }, [a13, i11, b5, w3, o22, p5, u8, f6, y3, c11, function() {
    return o22.getElement();
  }, r14, function(t24) {
    tt[t24 ? "unshift" : "push"](() => {
      o22 = t24, s15(4, o22);
    });
  }, l6];
}
var C4 = class extends Mt {
  constructor(t23) {
    super(), At(this, t23, A4, q4, u3, { use: 0, class: 1, component: 2, tag: 3, getElement: 10 });
  }
  get getElement() {
    return this.$$.ctx[10];
  }
};

// node_modules/@cosmograph/ui/ext/@smui/common/dist/classadder/classAdderBuilder.js
var e18 = Object.assign({}, z3);
function r8(r14) {
  return new Proxy(C4, { construct: function(n17, s15) {
    return Object.assign(z3, e18, r14), new n17(...s15);
  }, get: function(n17, s15) {
    return Object.assign(z3, e18, r14), n17[s15];
  } });
}

// node_modules/@cosmograph/ui/ext/@smui/list/dist/Text.js
var a7 = r8({ class: "mdc-deprecated-list-item__text", tag: "span" });

// node_modules/@cosmograph/ui/ext/@smui/list/dist/PrimaryText.js
r8({ class: "mdc-deprecated-list-item__primary-text", tag: "span" });

// node_modules/@cosmograph/ui/ext/@smui/list/dist/SecondaryText.js
r8({ class: "mdc-deprecated-list-item__secondary-text", tag: "span" });

// node_modules/@cosmograph/ui/ext/@smui/list/dist/Meta.js
r8({ class: "mdc-deprecated-list-item__meta", tag: "span" });

// node_modules/@cosmograph/ui/ext/@smui/list/dist/Group.js
r8({ class: "mdc-deprecated-list-group", tag: "div" });

// node_modules/@cosmograph/ui/ext/@smui/list/dist/Subheader.js
r8({ class: "mdc-deprecated-list-group__subheader", tag: "h3" });

// node_modules/@cosmograph/ui/ext/@smui/common/dist/internal/exclude.js
function e19(e36, t23) {
  let n17 = Object.getOwnPropertyNames(e36);
  const r14 = {};
  for (let o22 = 0; o22 < n17.length; o22++) {
    const f6 = n17[o22], i11 = f6.indexOf("$");
    -1 !== i11 && -1 !== t23.indexOf(f6.substring(0, i11 + 1)) || -1 === t23.indexOf(f6) && (r14[f6] = e36[f6]);
  }
  return r14;
}

// node_modules/@cosmograph/ui/ext/@smui/common/dist/internal/prefixFilter.js
function t15(t23, e36) {
  let n17 = Object.getOwnPropertyNames(t23);
  const r14 = {};
  for (let s15 = 0; s15 < n17.length; s15++) {
    const g2 = n17[s15];
    g2.substring(0, e36.length) === e36 && (r14[g2.substring(e36.length)] = t23[g2]);
  }
  return r14;
}

// node_modules/@cosmograph/ui/ext/svelte/store/index.mjs.js
var e20 = [];
function o10(o22, s15 = t5) {
  let i11;
  const r14 = /* @__PURE__ */ new Set();
  function c11(n17) {
    if (u3(o22, n17) && (o22 = n17, i11)) {
      const n18 = !e20.length;
      for (const n19 of r14) n19[1](), e20.push(n19, o22);
      if (n18) {
        for (let n19 = 0; n19 < e20.length; n19 += 2) e20[n19][0](e20[n19 + 1]);
        e20.length = 0;
      }
    }
  }
  return { set: c11, update: function(n17) {
    c11(n17(o22));
  }, subscribe: function(t23, e36 = t5) {
    const f6 = [t23, e36];
    return r14.add(f6), 1 === r14.size && (i11 = s15(c11) || t5), t23(o22), () => {
      r14.delete(f6), 0 === r14.size && i11 && (i11(), i11 = null);
    };
  } };
}

// node_modules/@cosmograph/ui/ext/@smui/common/dist/ContextFragment.svelte.js
function m3(e36) {
  let t23;
  const s15 = e36[4].default, $2 = l(s15, e36, e36[3], null);
  return { c() {
    $2 && $2.c();
  }, m(e37, s16) {
    $2 && $2.m(e37, s16), t23 = true;
  }, p(e37, [n17]) {
    $2 && $2.p && (!t23 || 8 & n17) && h($2, s15, e37, e37[3], t23 ? d2(s15, e37[3], n17, null) : p2(e37[3]), null);
  }, i(e37) {
    t23 || (bt($2, e37), t23 = true);
  }, o(e37) {
    mt($2, e37), t23 = false;
  }, d(e37) {
    $2 && $2.d(e37);
  } };
}
function v2(e36, t23, s15) {
  let n17, { $$slots: l6 = {}, $$scope: o22 } = t23, { key: u8 } = t23, { value: r14 } = t23;
  const i11 = o10(r14);
  return s7(e36, i11, (e37) => s15(5, n17 = e37)), W(u8, i11), U(() => {
    i11.set(void 0);
  }), e36.$$set = (e37) => {
    "key" in e37 && s15(1, u8 = e37.key), "value" in e37 && s15(2, r14 = e37.value), "$$scope" in e37 && s15(3, o22 = e37.$$scope);
  }, e36.$$.update = () => {
    4 & e36.$$.dirty && b2(i11, n17 = r14, n17);
  }, [i11, u8, r14, o22, l6];
}
var f4 = class extends Mt {
  constructor(e36) {
    super(), At(this, e36, v2, m3, u3, { key: 1, value: 2 });
  }
};

// node_modules/@cosmograph/ui/ext/@material/floating-label/constants.js
var l3 = { LABEL_FLOAT_ABOVE: "mdc-floating-label--float-above", LABEL_REQUIRED: "mdc-floating-label--required", LABEL_SHAKE: "mdc-floating-label--shake", ROOT: "mdc-floating-label" };

// node_modules/@cosmograph/ui/ext/@material/floating-label/foundation.js
var r9 = function(a13) {
  function r14(t23) {
    var n17 = a13.call(this, o8(o8({}, r14.defaultAdapter), t23)) || this;
    return n17.shakeAnimationEndHandler = function() {
      n17.handleShakeAnimationEnd();
    }, n17;
  }
  return t9(r14, a13), Object.defineProperty(r14, "cssClasses", { get: function() {
    return l3;
  }, enumerable: false, configurable: true }), Object.defineProperty(r14, "defaultAdapter", { get: function() {
    return { addClass: function() {
    }, removeClass: function() {
    }, getWidth: function() {
      return 0;
    }, registerInteractionHandler: function() {
    }, deregisterInteractionHandler: function() {
    } };
  }, enumerable: false, configurable: true }), r14.prototype.init = function() {
    this.adapter.registerInteractionHandler("animationend", this.shakeAnimationEndHandler);
  }, r14.prototype.destroy = function() {
    this.adapter.deregisterInteractionHandler("animationend", this.shakeAnimationEndHandler);
  }, r14.prototype.getWidth = function() {
    return this.adapter.getWidth();
  }, r14.prototype.shake = function(t23) {
    var e36 = r14.cssClasses.LABEL_SHAKE;
    t23 ? this.adapter.addClass(e36) : this.adapter.removeClass(e36);
  }, r14.prototype.float = function(t23) {
    var e36 = r14.cssClasses, a14 = e36.LABEL_FLOAT_ABOVE, n17 = e36.LABEL_SHAKE;
    t23 ? this.adapter.addClass(a14) : (this.adapter.removeClass(a14), this.adapter.removeClass(n17));
  }, r14.prototype.setRequired = function(t23) {
    var e36 = r14.cssClasses.LABEL_REQUIRED;
    t23 ? this.adapter.addClass(e36) : this.adapter.removeClass(e36);
  }, r14.prototype.handleShakeAnimationEnd = function() {
    var t23 = r14.cssClasses.LABEL_SHAKE;
    this.adapter.removeClass(t23);
  }, r14;
}(e12);

// node_modules/@cosmograph/ui/ext/@smui/floating-label/dist/FloatingLabel.svelte.js
function C5(e36) {
  let t23, l6, n17, a13, r14, d13, u8, f6;
  const m6 = e36[22].default, g2 = l(m6, e36, e36[21], null);
  let b5 = [{ class: l6 = e8({ [e36[3]]: true, "mdc-floating-label": true, "mdc-floating-label--float-above": e36[0], "mdc-floating-label--required": e36[1], ...e36[8] }) }, { style: n17 = Object.entries(e36[9]).map(R4).concat([e36[4]]).join(" ") }, { for: a13 = e36[5] || (e36[11] ? e36[11].id : void 0) }, e36[12]], W6 = {};
  for (let e37 = 0; e37 < b5.length; e37 += 1) W6 = n5(W6, b5[e37]);
  return { c() {
    t23 = k("label"), g2 && g2.c(), P(t23, W6);
  }, m(l7, n18) {
    w2(l7, t23, n18), g2 && g2.m(t23, null), e36[24](t23), d13 = true, u8 || (f6 = [m(r14 = t8.call(null, t23, e36[2])), m(e36[10].call(null, t23))], u8 = true);
  }, p(e37, o22) {
    g2 && g2.p && (!d13 || 2097152 & o22) && h(g2, m6, e37, e37[21], d13 ? d2(m6, e37[21], o22, null) : p2(e37[21]), null), P(t23, W6 = vt(b5, [(!d13 || 267 & o22 && l6 !== (l6 = e8({ [e37[3]]: true, "mdc-floating-label": true, "mdc-floating-label--float-above": e37[0], "mdc-floating-label--required": e37[1], ...e37[8] }))) && { class: l6 }, (!d13 || 528 & o22 && n17 !== (n17 = Object.entries(e37[9]).map(R4).concat([e37[4]]).join(" "))) && { style: n17 }, (!d13 || 32 & o22 && a13 !== (a13 = e37[5] || (e37[11] ? e37[11].id : void 0))) && { for: a13 }, 4096 & o22 && e37[12]])), r14 && c5(r14.update) && 4 & o22 && r14.update.call(null, e37[2]);
  }, i(e37) {
    d13 || (bt(g2, e37), d13 = true);
  }, o(e37) {
    mt(g2, e37), d13 = false;
  }, d(l7) {
    l7 && v(t23), g2 && g2.d(l7), e36[24](null), u8 = false, r3(f6);
  } };
}
function M2(e36) {
  let t23, l6, n17, a13, r14, d13, u8;
  const f6 = e36[22].default, m6 = l(f6, e36, e36[21], null);
  let g2 = [{ class: l6 = e8({ [e36[3]]: true, "mdc-floating-label": true, "mdc-floating-label--float-above": e36[0], "mdc-floating-label--required": e36[1], ...e36[8] }) }, { style: n17 = Object.entries(e36[9]).map(O5).concat([e36[4]]).join(" ") }, e36[12]], b5 = {};
  for (let e37 = 0; e37 < g2.length; e37 += 1) b5 = n5(b5, g2[e37]);
  return { c() {
    t23 = k("span"), m6 && m6.c(), P(t23, b5);
  }, m(l7, n18) {
    w2(l7, t23, n18), m6 && m6.m(t23, null), e36[23](t23), r14 = true, d13 || (u8 = [m(a13 = t8.call(null, t23, e36[2])), m(e36[10].call(null, t23))], d13 = true);
  }, p(e37, o22) {
    m6 && m6.p && (!r14 || 2097152 & o22) && h(m6, f6, e37, e37[21], r14 ? d2(f6, e37[21], o22, null) : p2(e37[21]), null), P(t23, b5 = vt(g2, [(!r14 || 267 & o22 && l6 !== (l6 = e8({ [e37[3]]: true, "mdc-floating-label": true, "mdc-floating-label--float-above": e37[0], "mdc-floating-label--required": e37[1], ...e37[8] }))) && { class: l6 }, (!r14 || 528 & o22 && n17 !== (n17 = Object.entries(e37[9]).map(O5).concat([e37[4]]).join(" "))) && { style: n17 }, 4096 & o22 && e37[12]])), a13 && c5(a13.update) && 4 & o22 && a13.update.call(null, e37[2]);
  }, i(e37) {
    r14 || (bt(m6, e37), r14 = true);
  }, o(e37) {
    mt(m6, e37), r14 = false;
  }, d(l7) {
    l7 && v(t23), m6 && m6.d(l7), e36[23](null), d13 = false, r3(u8);
  } };
}
function N4(e36) {
  let t23, l6, d13, u8;
  const f6 = [M2, C5], m6 = [];
  function p5(e37, t24) {
    return e37[6] ? 0 : 1;
  }
  return t23 = p5(e36), l6 = m6[t23] = f6[t23](e36), { c() {
    l6.c(), d13 = S();
  }, m(e37, l7) {
    m6[t23].m(e37, l7), w2(e37, d13, l7), u8 = true;
  }, p(e37, [n17]) {
    let o22 = t23;
    t23 = p5(e37), t23 === o22 ? m6[t23].p(e37, n17) : (yt(), mt(m6[o22], 1, 1, () => {
      m6[o22] = null;
    }), gt(), l6 = m6[t23], l6 ? l6.p(e37, n17) : (l6 = m6[t23] = f6[t23](e37), l6.c()), bt(l6, 1), l6.m(d13.parentNode, d13));
  }, i(e37) {
    u8 || (bt(l6), u8 = true);
  }, o(e37) {
    mt(l6), u8 = false;
  }, d(e37) {
    m6[t23].d(e37), e37 && v(d13);
  } };
}
var O5 = ([e36, t23]) => `${e36}: ${t23};`;
var R4 = ([e36, t23]) => `${e36}: ${t23};`;
function U3(e36, t23, l6) {
  const n17 = ["use", "class", "style", "for", "floatAbove", "required", "wrapped", "shake", "float", "setRequired", "getWidth", "getElement"];
  let o22 = y(t23, n17), { $$slots: a13 = {}, $$scope: i11 } = t23;
  var r14;
  const s15 = n6(Q());
  let c11, $2, { use: v3 = [] } = t23, { class: h6 = "" } = t23, { style: j6 = "" } = t23, { for: y3 } = t23, { floatAbove: q6 = false } = t23, { required: x3 = false } = t23, { wrapped: w3 = false } = t23, L3 = {}, A5 = {}, E8 = null !== (r14 = X("SMUI:generic:input:props")) && void 0 !== r14 ? r14 : {}, S4 = q6, C9 = x3;
  function M3(e37) {
    L3[e37] || l6(8, L3[e37] = true, L3);
  }
  function N6(e37) {
    e37 in L3 && !L3[e37] || l6(8, L3[e37] = false, L3);
  }
  function O8(e37, t24) {
    A5[e37] != t24 && ("" === t24 || null == t24 ? (delete A5[e37], l6(9, A5)) : l6(9, A5[e37] = t24, A5));
  }
  function R7(e37) {
    e37 in A5 && (delete A5[e37], l6(9, A5));
  }
  function U6() {
    return c11;
  }
  return R(() => {
    l6(18, $2 = new r9({ addClass: M3, removeClass: N6, getWidth: () => {
      var e38, t24;
      const l7 = U6(), n18 = l7.cloneNode(true);
      null === (e38 = l7.parentNode) || void 0 === e38 || e38.appendChild(n18), n18.classList.add("smui-floating-label--remove-transition"), n18.classList.add("smui-floating-label--force-size"), n18.classList.remove("mdc-floating-label--float-above");
      const o23 = n18.scrollWidth;
      return null === (t24 = l7.parentNode) || void 0 === t24 || t24.removeChild(n18), o23;
    }, registerInteractionHandler: (e38, t24) => U6().addEventListener(e38, t24), deregisterInteractionHandler: (e38, t24) => U6().removeEventListener(e38, t24) }));
    const e37 = { get element() {
      return U6();
    }, addStyle: O8, removeStyle: R7 };
    return e9(c11, "SMUIFloatingLabel:mount", e37), $2.init(), () => {
      e9(c11, "SMUIFloatingLabel:unmount", e37), $2.destroy();
    };
  }), e36.$$set = (e37) => {
    t23 = n5(n5({}, t23), $(e37)), l6(12, o22 = y(t23, n17)), "use" in e37 && l6(2, v3 = e37.use), "class" in e37 && l6(3, h6 = e37.class), "style" in e37 && l6(4, j6 = e37.style), "for" in e37 && l6(5, y3 = e37.for), "floatAbove" in e37 && l6(0, q6 = e37.floatAbove), "required" in e37 && l6(1, x3 = e37.required), "wrapped" in e37 && l6(6, w3 = e37.wrapped), "$$scope" in e37 && l6(21, i11 = e37.$$scope);
  }, e36.$$.update = () => {
    786433 & e36.$$.dirty && $2 && S4 !== q6 && (l6(19, S4 = q6), $2.float(q6)), 1310722 & e36.$$.dirty && $2 && C9 !== x3 && (l6(20, C9 = x3), $2.setRequired(x3));
  }, [q6, x3, v3, h6, j6, y3, w3, c11, L3, A5, s15, E8, o22, function(e37) {
    $2.shake(e37);
  }, function(e37) {
    l6(0, q6 = e37);
  }, function(e37) {
    l6(1, x3 = e37);
  }, function() {
    return $2.getWidth();
  }, U6, $2, S4, C9, i11, a13, function(e37) {
    tt[e37 ? "unshift" : "push"](() => {
      c11 = e37, l6(7, c11);
    });
  }, function(e37) {
    tt[e37 ? "unshift" : "push"](() => {
      c11 = e37, l6(7, c11);
    });
  }];
}
var F3 = class extends Mt {
  constructor(e36) {
    super(), At(this, e36, U3, N4, u3, { use: 2, class: 3, style: 4, for: 5, floatAbove: 0, required: 1, wrapped: 6, shake: 13, float: 14, setRequired: 15, getWidth: 16, getElement: 17 });
  }
  get shake() {
    return this.$$.ctx[13];
  }
  get float() {
    return this.$$.ctx[14];
  }
  get setRequired() {
    return this.$$.ctx[15];
  }
  get getWidth() {
    return this.$$.ctx[16];
  }
  get getElement() {
    return this.$$.ctx[17];
  }
};

// node_modules/@cosmograph/ui/ext/@material/line-ripple/constants.js
var e21 = { LINE_RIPPLE_ACTIVE: "mdc-line-ripple--active", LINE_RIPPLE_DEACTIVATING: "mdc-line-ripple--deactivating" };

// node_modules/@cosmograph/ui/ext/@material/line-ripple/foundation.js
var a8 = function(n17) {
  function a13(t23) {
    var r14 = n17.call(this, o8(o8({}, a13.defaultAdapter), t23)) || this;
    return r14.transitionEndHandler = function(t24) {
      r14.handleTransitionEnd(t24);
    }, r14;
  }
  return t9(a13, n17), Object.defineProperty(a13, "cssClasses", { get: function() {
    return e21;
  }, enumerable: false, configurable: true }), Object.defineProperty(a13, "defaultAdapter", { get: function() {
    return { addClass: function() {
    }, removeClass: function() {
    }, hasClass: function() {
      return false;
    }, setStyle: function() {
    }, registerEventHandler: function() {
    }, deregisterEventHandler: function() {
    } };
  }, enumerable: false, configurable: true }), a13.prototype.init = function() {
    this.adapter.registerEventHandler("transitionend", this.transitionEndHandler);
  }, a13.prototype.destroy = function() {
    this.adapter.deregisterEventHandler("transitionend", this.transitionEndHandler);
  }, a13.prototype.activate = function() {
    this.adapter.removeClass(e21.LINE_RIPPLE_DEACTIVATING), this.adapter.addClass(e21.LINE_RIPPLE_ACTIVE);
  }, a13.prototype.setRippleCenter = function(t23) {
    this.adapter.setStyle("transform-origin", t23 + "px center");
  }, a13.prototype.deactivate = function() {
    this.adapter.addClass(e21.LINE_RIPPLE_DEACTIVATING);
  }, a13.prototype.handleTransitionEnd = function(t23) {
    var e36 = this.adapter.hasClass(e21.LINE_RIPPLE_DEACTIVATING);
    "opacity" === t23.propertyName && e36 && (this.adapter.removeClass(e21.LINE_RIPPLE_ACTIVE), this.adapter.removeClass(e21.LINE_RIPPLE_DEACTIVATING));
  }, a13;
}(e12);

// node_modules/@cosmograph/ui/ext/@smui/line-ripple/dist/LineRipple.svelte.js
function x2(e36) {
  let t23, n17, m6, v3, f6, $2, g2 = [{ class: n17 = e8({ [e36[1]]: true, "mdc-line-ripple": true, "mdc-line-ripple--active": e36[3], ...e36[5] }) }, { style: m6 = Object.entries(e36[6]).map(C6).concat([e36[2]]).join(" ") }, e36[8]], h6 = {};
  for (let e37 = 0; e37 < g2.length; e37 += 1) h6 = n5(h6, g2[e37]);
  return { c() {
    t23 = k("div"), P(t23, h6);
  }, m(n18, i11) {
    w2(n18, t23, i11), e36[13](t23), f6 || ($2 = [m(v3 = t8.call(null, t23, e36[0])), m(e36[7].call(null, t23))], f6 = true);
  }, p(e37, [i11]) {
    P(t23, h6 = vt(g2, [42 & i11 && n17 !== (n17 = e8({ [e37[1]]: true, "mdc-line-ripple": true, "mdc-line-ripple--active": e37[3], ...e37[5] })) && { class: n17 }, 68 & i11 && m6 !== (m6 = Object.entries(e37[6]).map(C6).concat([e37[2]]).join(" ")) && { style: m6 }, 256 & i11 && e37[8]])), v3 && c5(v3.update) && 1 & i11 && v3.update.call(null, e37[0]);
  }, i: t5, o: t5, d(n18) {
    n18 && v(t23), e36[13](null), f6 = false, r3($2);
  } };
}
var C6 = ([e36, t23]) => `${e36}: ${t23};`;
function R5(e36, t23, n17) {
  const s15 = ["use", "class", "style", "active", "activate", "deactivate", "setRippleCenter", "getElement"];
  let l6 = y(t23, s15);
  const c11 = n6(Q());
  let a13, r14, { use: o22 = [] } = t23, { class: u8 = "" } = t23, { style: p5 = "" } = t23, { active: d13 = false } = t23, j6 = {}, y3 = {};
  function x3(e37) {
    return e37 in j6 ? j6[e37] : b5().classList.contains(e37);
  }
  function C9(e37) {
    j6[e37] || n17(5, j6[e37] = true, j6);
  }
  function R7(e37) {
    e37 in j6 && !j6[e37] || n17(5, j6[e37] = false, j6);
  }
  function L3(e37, t24) {
    y3[e37] != t24 && ("" === t24 || null == t24 ? (delete y3[e37], n17(6, y3)) : n17(6, y3[e37] = t24, y3));
  }
  function b5() {
    return a13;
  }
  return R(() => (r14 = new a8({ addClass: C9, removeClass: R7, hasClass: x3, setStyle: L3, registerEventHandler: (e37, t24) => b5().addEventListener(e37, t24), deregisterEventHandler: (e37, t24) => b5().removeEventListener(e37, t24) }), r14.init(), () => {
    r14.destroy();
  })), e36.$$set = (e37) => {
    t23 = n5(n5({}, t23), $(e37)), n17(8, l6 = y(t23, s15)), "use" in e37 && n17(0, o22 = e37.use), "class" in e37 && n17(1, u8 = e37.class), "style" in e37 && n17(2, p5 = e37.style), "active" in e37 && n17(3, d13 = e37.active);
  }, [o22, u8, p5, d13, a13, j6, y3, c11, l6, function() {
    r14.activate();
  }, function() {
    r14.deactivate();
  }, function(e37) {
    r14.setRippleCenter(e37);
  }, b5, function(e37) {
    tt[e37 ? "unshift" : "push"](() => {
      a13 = e37, n17(4, a13);
    });
  }];
}
var L2 = class extends Mt {
  constructor(e36) {
    super(), At(this, e36, R5, x2, u3, { use: 0, class: 1, style: 2, active: 3, activate: 9, deactivate: 10, setRippleCenter: 11, getElement: 12 });
  }
  get activate() {
    return this.$$.ctx[9];
  }
  get deactivate() {
    return this.$$.ctx[10];
  }
  get setRippleCenter() {
    return this.$$.ctx[11];
  }
  get getElement() {
    return this.$$.ctx[12];
  }
};

// node_modules/@cosmograph/ui/ext/@material/notched-outline/constants.js
var E4 = { NOTCH_ELEMENT_SELECTOR: ".mdc-notched-outline__notch" };
var e22 = { NOTCH_ELEMENT_PADDING: 8 };
var o11 = { NO_LABEL: "mdc-notched-outline--no-label", OUTLINE_NOTCHED: "mdc-notched-outline--notched", OUTLINE_UPGRADED: "mdc-notched-outline--upgraded" };

// node_modules/@cosmograph/ui/ext/@material/notched-outline/foundation.js
var a9 = function(r14) {
  function a13(t23) {
    return r14.call(this, o8(o8({}, a13.defaultAdapter), t23)) || this;
  }
  return t9(a13, r14), Object.defineProperty(a13, "strings", { get: function() {
    return E4;
  }, enumerable: false, configurable: true }), Object.defineProperty(a13, "cssClasses", { get: function() {
    return o11;
  }, enumerable: false, configurable: true }), Object.defineProperty(a13, "numbers", { get: function() {
    return e22;
  }, enumerable: false, configurable: true }), Object.defineProperty(a13, "defaultAdapter", { get: function() {
    return { addClass: function() {
    }, removeClass: function() {
    }, setNotchWidthProperty: function() {
    }, removeNotchWidthProperty: function() {
    } };
  }, enumerable: false, configurable: true }), a13.prototype.notch = function(t23) {
    var e36 = a13.cssClasses.OUTLINE_NOTCHED;
    t23 > 0 && (t23 += e22.NOTCH_ELEMENT_PADDING), this.adapter.setNotchWidthProperty(t23), this.adapter.addClass(e36);
  }, a13.prototype.closeNotch = function() {
    var t23 = a13.cssClasses.OUTLINE_NOTCHED;
    this.adapter.removeClass(t23), this.adapter.removeNotchWidthProperty();
  }, a13;
}(e12);

// node_modules/@cosmograph/ui/ext/@smui/notched-outline/dist/NotchedOutline.svelte.js
function I4(t23) {
  let n17, e36, o22;
  const c11 = t23[15].default, s15 = l(c11, t23, t23[14], null);
  return { c() {
    n17 = k("div"), s15 && s15.c(), M(n17, "class", "mdc-notched-outline__notch"), M(n17, "style", e36 = Object.entries(t23[7]).map(P4).join(" "));
  }, m(t24, e37) {
    w2(t24, n17, e37), s15 && s15.m(n17, null), o22 = true;
  }, p(t24, l6) {
    s15 && s15.p && (!o22 || 16384 & l6) && h(s15, c11, t24, t24[14], o22 ? d2(c11, t24[14], l6, null) : p2(t24[14]), null), (!o22 || 128 & l6 && e36 !== (e36 = Object.entries(t24[7]).map(P4).join(" "))) && M(n17, "style", e36);
  }, i(t24) {
    o22 || (bt(s15, t24), o22 = true);
  }, o(t24) {
    mt(s15, t24), o22 = false;
  }, d(t24) {
    t24 && v(n17), s15 && s15.d(t24);
  } };
}
function O6(t23) {
  let n17, e36, j6, y3, x3, L3, N6, _7, w3, E8, S4 = !t23[3] && I4(t23), M3 = [{ class: L3 = e8({ [t23[1]]: true, "mdc-notched-outline": true, "mdc-notched-outline--notched": t23[2], "mdc-notched-outline--no-label": t23[3], ...t23[6] }) }, t23[10]], C9 = {};
  for (let t24 = 0; t24 < M3.length; t24 += 1) C9 = n5(C9, M3[t24]);
  return { c() {
    n17 = k("div"), e36 = k("div"), j6 = j(), S4 && S4.c(), y3 = j(), x3 = k("div"), M(e36, "class", "mdc-notched-outline__leading"), M(x3, "class", "mdc-notched-outline__trailing"), P(n17, C9);
  }, m(o22, l6) {
    w2(o22, n17, l6), x(n17, e36), x(n17, j6), S4 && S4.m(n17, null), x(n17, y3), x(n17, x3), t23[16](n17), _7 = true, w3 || (E8 = [m(N6 = t8.call(null, n17, t23[0])), m(t23[8].call(null, n17)), A(n17, "SMUIFloatingLabel:mount", t23[9]), A(n17, "SMUIFloatingLabel:unmount", t23[17])], w3 = true);
  }, p(t24, [e37]) {
    t24[3] ? S4 && (yt(), mt(S4, 1, 1, () => {
      S4 = null;
    }), gt()) : S4 ? (S4.p(t24, e37), 8 & e37 && bt(S4, 1)) : (S4 = I4(t24), S4.c(), bt(S4, 1), S4.m(n17, y3)), P(n17, C9 = vt(M3, [(!_7 || 78 & e37 && L3 !== (L3 = e8({ [t24[1]]: true, "mdc-notched-outline": true, "mdc-notched-outline--notched": t24[2], "mdc-notched-outline--no-label": t24[3], ...t24[6] }))) && { class: L3 }, 1024 & e37 && t24[10]])), N6 && c5(N6.update) && 1 & e37 && N6.update.call(null, t24[0]);
  }, i(t24) {
    _7 || (bt(S4), _7 = true);
  }, o(t24) {
    mt(S4), _7 = false;
  }, d(e37) {
    e37 && v(n17), S4 && S4.d(), t23[16](null), w3 = false, r3(E8);
  } };
}
var P4 = ([t23, n17]) => `${t23}: ${n17};`;
function U4(t23, n17, e36) {
  const l6 = ["use", "class", "notched", "noLabel", "notch", "closeNotch", "getElement"];
  let c11 = y(n17, l6), { $$slots: i11 = {}, $$scope: s15 } = n17;
  const d13 = n6(Q());
  let u8, r14, a13, { use: m6 = [] } = n17, { class: h6 = "" } = n17, { notched: p5 = false } = n17, { noLabel: $2 = false } = n17, f6 = {}, g2 = {};
  function v3(t24) {
    f6[t24] || e36(6, f6[t24] = true, f6);
  }
  function b5(t24) {
    t24 in f6 && !f6[t24] || e36(6, f6[t24] = false, f6);
  }
  R(() => (r14 = new a9({ addClass: v3, removeClass: b5, setNotchWidthProperty: (t24) => {
    return o22 = t24 + "px", void (g2[n18 = "width"] != o22 && ("" === o22 || null == o22 ? (delete g2[n18], e36(7, g2)) : e36(7, g2[n18] = o22, g2)));
    var n18, o22;
  }, removeNotchWidthProperty: () => {
    var t24;
    (t24 = "width") in g2 && (delete g2[t24], e36(7, g2));
  } }), r14.init(), () => {
    r14.destroy();
  }));
  return t23.$$set = (t24) => {
    n17 = n5(n5({}, n17), $(t24)), e36(10, c11 = y(n17, l6)), "use" in t24 && e36(0, m6 = t24.use), "class" in t24 && e36(1, h6 = t24.class), "notched" in t24 && e36(2, p5 = t24.notched), "noLabel" in t24 && e36(3, $2 = t24.noLabel), "$$scope" in t24 && e36(14, s15 = t24.$$scope);
  }, t23.$$.update = () => {
    16 & t23.$$.dirty && (a13 ? (a13.addStyle("transition-duration", "0s"), v3("mdc-notched-outline--upgraded"), requestAnimationFrame(() => {
      a13 && a13.removeStyle("transition-duration");
    })) : b5("mdc-notched-outline--upgraded"));
  }, [m6, h6, p5, $2, a13, u8, f6, g2, d13, function(t24) {
    e36(4, a13 = t24.detail);
  }, c11, function(t24) {
    r14.notch(t24);
  }, function() {
    r14.closeNotch();
  }, function() {
    return u8;
  }, s15, i11, function(t24) {
    tt[t24 ? "unshift" : "push"](() => {
      u8 = t24, e36(5, u8);
    });
  }, () => e36(4, a13 = void 0)];
}
var W3 = class extends Mt {
  constructor(t23) {
    super(), At(this, t23, U4, O6, u3, { use: 0, class: 1, notched: 2, noLabel: 3, notch: 11, closeNotch: 12, getElement: 13 });
  }
  get notch() {
    return this.$$.ctx[11];
  }
  get closeNotch() {
    return this.$$.ctx[12];
  }
  get getElement() {
    return this.$$.ctx[13];
  }
};

// node_modules/@cosmograph/ui/ext/@smui/textfield/dist/HelperLine.js
var e23 = r8({ class: "mdc-text-field-helper-line", tag: "div" });

// node_modules/@cosmograph/ui/ext/@smui/textfield/dist/Prefix.js
var d8 = r8({ class: "mdc-text-field__affix mdc-text-field__affix--prefix", tag: "span" });

// node_modules/@cosmograph/ui/ext/@smui/textfield/dist/Suffix.js
var d9 = r8({ class: "mdc-text-field__affix mdc-text-field__affix--suffix", tag: "span" });

// node_modules/@cosmograph/ui/ext/@smui/textfield/dist/Input.svelte.js
function b3(e36) {
  let t23, l6, m6, v3, h6, y3 = [{ class: l6 = e8({ [e36[1]]: true, "mdc-text-field__input": true }) }, { type: e36[2] }, { placeholder: e36[3] }, e36[4], e36[6], e36[10]], g2 = {};
  for (let e37 = 0; e37 < y3.length; e37 += 1) g2 = n5(g2, y3[e37]);
  return { c() {
    t23 = k("input"), P(t23, g2);
  }, m(l7, n17) {
    w2(l7, t23, n17), t23.autofocus && t23.focus(), e36[26](t23), v3 || (h6 = [m(m6 = t8.call(null, t23, e36[0])), m(e36[7].call(null, t23)), A(t23, "input", e36[27]), A(t23, "change", e36[9]), A(t23, "blur", e36[24]), A(t23, "focus", e36[25])], v3 = true);
  }, p(e37, [n17]) {
    P(t23, g2 = vt(y3, [2 & n17 && l6 !== (l6 = e8({ [e37[1]]: true, "mdc-text-field__input": true })) && { class: l6 }, 4 & n17 && { type: e37[2] }, 8 & n17 && { placeholder: e37[3] }, 16 & n17 && e37[4], 64 & n17 && e37[6], 1024 & n17 && e37[10]])), m6 && c5(m6.update) && 1 & n17 && m6.update.call(null, e37[0]);
  }, i: t5, o: t5, d(l7) {
    l7 && v(t23), e36[26](null), v3 = false, r3(h6);
  } };
}
function N5(e36, t23, l6) {
  const u8 = ["use", "class", "type", "placeholder", "value", "files", "dirty", "invalid", "updateInvalid", "emptyValueNull", "emptyValueUndefined", "getAttr", "addAttr", "removeAttr", "focus", "blur", "getElement"];
  let i11 = y(t23, u8);
  const r14 = n6(Q());
  let a13 = () => {
  };
  let { use: s15 = [] } = t23, { class: c11 = "" } = t23, { type: d13 = "text" } = t23, { placeholder: o22 = " " } = t23, { value: f6 = a13 } = t23;
  const p5 = /* @__PURE__ */ function(e37) {
    return e37 === a13;
  }(f6);
  p5 && (f6 = "");
  let { files: x3 = null } = t23, { dirty: V2 = false } = t23, { invalid: b5 = false } = t23, { updateInvalid: N6 = true } = t23, { emptyValueNull: j6 = null === f6 } = t23;
  p5 && j6 && (f6 = null);
  let I8, { emptyValueUndefined: T7 = void 0 === f6 } = t23;
  p5 && T7 && (f6 = void 0);
  let U6 = {}, E8 = {};
  function _7(e37) {
    if ("file" !== d13) if ("" === e37.currentTarget.value && j6) l6(11, f6 = null);
    else if ("" === e37.currentTarget.value && T7) l6(11, f6 = void 0);
    else switch (d13) {
      case "number":
      case "range":
        l6(11, f6 = function(e38) {
          return "" === e38 ? Number.NaN : +e38;
        }(e37.currentTarget.value));
        break;
      default:
        l6(11, f6 = e37.currentTarget.value);
    }
    else l6(12, x3 = e37.currentTarget.files);
  }
  function w3() {
    return I8;
  }
  R(() => {
    N6 && l6(14, b5 = I8.matches(":invalid"));
  });
  return e36.$$set = (e37) => {
    t23 = n5(n5({}, t23), $(e37)), l6(10, i11 = y(t23, u8)), "use" in e37 && l6(0, s15 = e37.use), "class" in e37 && l6(1, c11 = e37.class), "type" in e37 && l6(2, d13 = e37.type), "placeholder" in e37 && l6(3, o22 = e37.placeholder), "value" in e37 && l6(11, f6 = e37.value), "files" in e37 && l6(12, x3 = e37.files), "dirty" in e37 && l6(13, V2 = e37.dirty), "invalid" in e37 && l6(14, b5 = e37.invalid), "updateInvalid" in e37 && l6(15, N6 = e37.updateInvalid), "emptyValueNull" in e37 && l6(16, j6 = e37.emptyValueNull), "emptyValueUndefined" in e37 && l6(17, T7 = e37.emptyValueUndefined);
  }, e36.$$.update = () => {
    2068 & e36.$$.dirty && ("file" === d13 ? (delete E8.value, l6(4, E8), l6(2, d13), l6(11, f6)) : l6(4, E8.value = null == f6 ? "" : f6, E8));
  }, [s15, c11, d13, o22, E8, I8, U6, r14, _7, function(e37) {
    "file" !== d13 && "range" !== d13 || _7(e37), l6(13, V2 = true), N6 && l6(14, b5 = I8.matches(":invalid"));
  }, i11, f6, x3, V2, b5, N6, j6, T7, function(e37) {
    var t24;
    return e37 in U6 ? null !== (t24 = U6[e37]) && void 0 !== t24 ? t24 : null : w3().getAttribute(e37);
  }, function(e37, t24) {
    U6[e37] !== t24 && l6(6, U6[e37] = t24, U6);
  }, function(e37) {
    e37 in U6 && null == U6[e37] || l6(6, U6[e37] = void 0, U6);
  }, function() {
    w3().focus();
  }, function() {
    w3().blur();
  }, w3, function(t24) {
    Y.call(this, e36, t24);
  }, function(t24) {
    Y.call(this, e36, t24);
  }, function(e37) {
    tt[e37 ? "unshift" : "push"](() => {
      I8 = e37, l6(5, I8);
    });
  }, (e37) => "file" !== d13 && _7(e37)];
}
var j3 = class extends Mt {
  constructor(e36) {
    super(), At(this, e36, N5, b3, u3, { use: 0, class: 1, type: 2, placeholder: 3, value: 11, files: 12, dirty: 13, invalid: 14, updateInvalid: 15, emptyValueNull: 16, emptyValueUndefined: 17, getAttr: 18, addAttr: 19, removeAttr: 20, focus: 21, blur: 22, getElement: 23 });
  }
  get getAttr() {
    return this.$$.ctx[18];
  }
  get addAttr() {
    return this.$$.ctx[19];
  }
  get removeAttr() {
    return this.$$.ctx[20];
  }
  get focus() {
    return this.$$.ctx[21];
  }
  get blur() {
    return this.$$.ctx[22];
  }
  get getElement() {
    return this.$$.ctx[23];
  }
};

// node_modules/@cosmograph/ui/ext/@smui/textfield/dist/Textarea.svelte.js
function j4(t23) {
  let e36, n17, p5, $2, h6, g2, x3 = [{ class: n17 = e8({ [t23[2]]: true, "mdc-text-field__input": true }) }, { style: p5 = `${t23[4] ? "" : "resize: none; "}${t23[3]}` }, t23[6], t23[9]], y3 = {};
  for (let t24 = 0; t24 < x3.length; t24 += 1) y3 = n5(y3, x3[t24]);
  return { c() {
    e36 = k("textarea"), P(e36, y3);
  }, m(n18, i11) {
    w2(n18, e36, i11), e36.autofocus && e36.focus(), t23[21](e36), D(e36, t23[0]), h6 || (g2 = [m($2 = t8.call(null, e36, t23[1])), m(t23[7].call(null, e36)), A(e36, "change", t23[8]), A(e36, "blur", t23[19]), A(e36, "focus", t23[20]), A(e36, "input", t23[22])], h6 = true);
  }, p(t24, [i11]) {
    P(e36, y3 = vt(x3, [4 & i11 && n17 !== (n17 = e8({ [t24[2]]: true, "mdc-text-field__input": true })) && { class: n17 }, 24 & i11 && p5 !== (p5 = `${t24[4] ? "" : "resize: none; "}${t24[3]}`) && { style: p5 }, 64 & i11 && t24[6], 512 & i11 && t24[9]])), $2 && c5($2.update) && 2 & i11 && $2.update.call(null, t24[1]), 1 & i11 && D(e36, t24[0]);
  }, i: t5, o: t5, d(n18) {
    n18 && v(e36), t23[21](null), h6 = false, r3(g2);
  } };
}
function I5(t23, e36, n17) {
  const l6 = ["use", "class", "style", "value", "dirty", "invalid", "updateInvalid", "resizable", "getAttr", "addAttr", "removeAttr", "focus", "blur", "getElement"];
  let s15 = y(e36, l6);
  const r14 = n6(Q());
  let u8, { use: a13 = [] } = e36, { class: c11 = "" } = e36, { style: o22 = "" } = e36, { value: d13 = "" } = e36, { dirty: f6 = false } = e36, { invalid: m6 = false } = e36, { updateInvalid: v3 = true } = e36, { resizable: b5 = true } = e36, z5 = {};
  function j6() {
    return u8;
  }
  return R(() => {
    v3 && n17(11, m6 = u8.matches(":invalid"));
  }), t23.$$set = (t24) => {
    e36 = n5(n5({}, e36), $(t24)), n17(9, s15 = y(e36, l6)), "use" in t24 && n17(1, a13 = t24.use), "class" in t24 && n17(2, c11 = t24.class), "style" in t24 && n17(3, o22 = t24.style), "value" in t24 && n17(0, d13 = t24.value), "dirty" in t24 && n17(10, f6 = t24.dirty), "invalid" in t24 && n17(11, m6 = t24.invalid), "updateInvalid" in t24 && n17(12, v3 = t24.updateInvalid), "resizable" in t24 && n17(4, b5 = t24.resizable);
  }, [d13, a13, c11, o22, b5, u8, z5, r14, function() {
    n17(10, f6 = true), v3 && n17(11, m6 = u8.matches(":invalid"));
  }, s15, f6, m6, v3, function(t24) {
    var e37;
    return t24 in z5 ? null !== (e37 = z5[t24]) && void 0 !== e37 ? e37 : null : j6().getAttribute(t24);
  }, function(t24, e37) {
    z5[t24] !== e37 && n17(6, z5[t24] = e37, z5);
  }, function(t24) {
    t24 in z5 && null == z5[t24] || n17(6, z5[t24] = void 0, z5);
  }, function() {
    j6().focus();
  }, function() {
    j6().blur();
  }, j6, function(e37) {
    Y.call(this, t23, e37);
  }, function(e37) {
    Y.call(this, t23, e37);
  }, function(t24) {
    tt[t24 ? "unshift" : "push"](() => {
      u8 = t24, n17(5, u8);
    });
  }, function() {
    d13 = this.value, n17(0, d13);
  }];
}
var E5 = class extends Mt {
  constructor(t23) {
    super(), At(this, t23, I5, j4, u3, { use: 1, class: 2, style: 3, value: 0, dirty: 10, invalid: 11, updateInvalid: 12, resizable: 4, getAttr: 13, addAttr: 14, removeAttr: 15, focus: 16, blur: 17, getElement: 18 });
  }
  get getAttr() {
    return this.$$.ctx[13];
  }
  get addAttr() {
    return this.$$.ctx[14];
  }
  get removeAttr() {
    return this.$$.ctx[15];
  }
  get focus() {
    return this.$$.ctx[16];
  }
  get blur() {
    return this.$$.ctx[17];
  }
  get getElement() {
    return this.$$.ctx[18];
  }
};

// node_modules/@cosmograph/ui/ext/@material/textfield/constants.js
var e24 = { ARIA_CONTROLS: "aria-controls", ARIA_DESCRIBEDBY: "aria-describedby", INPUT_SELECTOR: ".mdc-text-field__input", LABEL_SELECTOR: ".mdc-floating-label", LEADING_ICON_SELECTOR: ".mdc-text-field__icon--leading", LINE_RIPPLE_SELECTOR: ".mdc-line-ripple", OUTLINE_SELECTOR: ".mdc-notched-outline", PREFIX_SELECTOR: ".mdc-text-field__affix--prefix", SUFFIX_SELECTOR: ".mdc-text-field__affix--suffix", TRAILING_ICON_SELECTOR: ".mdc-text-field__icon--trailing" };
var t16 = { DISABLED: "mdc-text-field--disabled", FOCUSED: "mdc-text-field--focused", HELPER_LINE: "mdc-text-field-helper-line", INVALID: "mdc-text-field--invalid", LABEL_FLOATING: "mdc-text-field--label-floating", NO_LABEL: "mdc-text-field--no-label", OUTLINED: "mdc-text-field--outlined", ROOT: "mdc-text-field", TEXTAREA: "mdc-text-field--textarea", WITH_LEADING_ICON: "mdc-text-field--with-leading-icon", WITH_TRAILING_ICON: "mdc-text-field--with-trailing-icon", WITH_INTERNAL_COUNTER: "mdc-text-field--with-internal-counter" };
var i6 = { LABEL_SCALE: 0.75 };
var d10 = ["pattern", "min", "max", "required", "step", "minlength", "maxlength"];
var l4 = ["color", "date", "datetime-local", "month", "range", "time", "week"];

// node_modules/@cosmograph/ui/ext/@material/textfield/foundation.js
var u6 = ["mousedown", "touchstart"];
var h2 = ["click", "keydown"];
var d11 = function(a13) {
  function d13(t23, e36) {
    void 0 === e36 && (e36 = {});
    var n17 = a13.call(this, o8(o8({}, d13.defaultAdapter), t23)) || this;
    return n17.isFocused = false, n17.receivedUserInput = false, n17.valid = true, n17.useNativeValidation = true, n17.validateOnValueChange = true, n17.helperText = e36.helperText, n17.characterCounter = e36.characterCounter, n17.leadingIcon = e36.leadingIcon, n17.trailingIcon = e36.trailingIcon, n17.inputFocusHandler = function() {
      n17.activateFocus();
    }, n17.inputBlurHandler = function() {
      n17.deactivateFocus();
    }, n17.inputInputHandler = function() {
      n17.handleInput();
    }, n17.setPointerXOffset = function(t24) {
      n17.setTransformOrigin(t24);
    }, n17.textFieldInteractionHandler = function() {
      n17.handleTextFieldInteraction();
    }, n17.validationAttributeChangeHandler = function(t24) {
      n17.handleValidationAttributeChange(t24);
    }, n17;
  }
  return t9(d13, a13), Object.defineProperty(d13, "cssClasses", { get: function() {
    return t16;
  }, enumerable: false, configurable: true }), Object.defineProperty(d13, "strings", { get: function() {
    return e24;
  }, enumerable: false, configurable: true }), Object.defineProperty(d13, "numbers", { get: function() {
    return i6;
  }, enumerable: false, configurable: true }), Object.defineProperty(d13.prototype, "shouldAlwaysFloat", { get: function() {
    var t23 = this.getNativeInput().type;
    return l4.indexOf(t23) >= 0;
  }, enumerable: false, configurable: true }), Object.defineProperty(d13.prototype, "shouldFloat", { get: function() {
    return this.shouldAlwaysFloat || this.isFocused || !!this.getValue() || this.isBadInput();
  }, enumerable: false, configurable: true }), Object.defineProperty(d13.prototype, "shouldShake", { get: function() {
    return !this.isFocused && !this.isValid() && !!this.getValue();
  }, enumerable: false, configurable: true }), Object.defineProperty(d13, "defaultAdapter", { get: function() {
    return { addClass: function() {
    }, removeClass: function() {
    }, hasClass: function() {
      return true;
    }, setInputAttr: function() {
    }, removeInputAttr: function() {
    }, registerTextFieldInteractionHandler: function() {
    }, deregisterTextFieldInteractionHandler: function() {
    }, registerInputInteractionHandler: function() {
    }, deregisterInputInteractionHandler: function() {
    }, registerValidationAttributeChangeHandler: function() {
      return new MutationObserver(function() {
      });
    }, deregisterValidationAttributeChangeHandler: function() {
    }, getNativeInput: function() {
      return null;
    }, isFocused: function() {
      return false;
    }, activateLineRipple: function() {
    }, deactivateLineRipple: function() {
    }, setLineRippleTransformOrigin: function() {
    }, shakeLabel: function() {
    }, floatLabel: function() {
    }, setLabelRequired: function() {
    }, hasLabel: function() {
      return false;
    }, getLabelWidth: function() {
      return 0;
    }, hasOutline: function() {
      return false;
    }, notchOutline: function() {
    }, closeOutline: function() {
    } };
  }, enumerable: false, configurable: true }), d13.prototype.init = function() {
    var t23, i11, a14, n17;
    this.adapter.hasLabel() && this.getNativeInput().required && this.adapter.setLabelRequired(true), this.adapter.isFocused() ? this.inputFocusHandler() : this.adapter.hasLabel() && this.shouldFloat && (this.notchOutline(true), this.adapter.floatLabel(true), this.styleFloating(true)), this.adapter.registerInputInteractionHandler("focus", this.inputFocusHandler), this.adapter.registerInputInteractionHandler("blur", this.inputBlurHandler), this.adapter.registerInputInteractionHandler("input", this.inputInputHandler);
    try {
      for (var r14 = n7(u6), s15 = r14.next(); !s15.done; s15 = r14.next()) {
        var o22 = s15.value;
        this.adapter.registerInputInteractionHandler(o22, this.setPointerXOffset);
      }
    } catch (e36) {
      t23 = { error: e36 };
    } finally {
      try {
        s15 && !s15.done && (i11 = r14.return) && i11.call(r14);
      } finally {
        if (t23) throw t23.error;
      }
    }
    try {
      for (var l6 = n7(h2), d14 = l6.next(); !d14.done; d14 = l6.next()) {
        o22 = d14.value;
        this.adapter.registerTextFieldInteractionHandler(o22, this.textFieldInteractionHandler);
      }
    } catch (t24) {
      a14 = { error: t24 };
    } finally {
      try {
        d14 && !d14.done && (n17 = l6.return) && n17.call(l6);
      } finally {
        if (a14) throw a14.error;
      }
    }
    this.validationObserver = this.adapter.registerValidationAttributeChangeHandler(this.validationAttributeChangeHandler), this.setcharacterCounter(this.getValue().length);
  }, d13.prototype.destroy = function() {
    var t23, i11, a14, n17;
    this.adapter.deregisterInputInteractionHandler("focus", this.inputFocusHandler), this.adapter.deregisterInputInteractionHandler("blur", this.inputBlurHandler), this.adapter.deregisterInputInteractionHandler("input", this.inputInputHandler);
    try {
      for (var r14 = n7(u6), s15 = r14.next(); !s15.done; s15 = r14.next()) {
        var o22 = s15.value;
        this.adapter.deregisterInputInteractionHandler(o22, this.setPointerXOffset);
      }
    } catch (e36) {
      t23 = { error: e36 };
    } finally {
      try {
        s15 && !s15.done && (i11 = r14.return) && i11.call(r14);
      } finally {
        if (t23) throw t23.error;
      }
    }
    try {
      for (var l6 = n7(h2), d14 = l6.next(); !d14.done; d14 = l6.next()) {
        o22 = d14.value;
        this.adapter.deregisterTextFieldInteractionHandler(o22, this.textFieldInteractionHandler);
      }
    } catch (t24) {
      a14 = { error: t24 };
    } finally {
      try {
        d14 && !d14.done && (n17 = l6.return) && n17.call(l6);
      } finally {
        if (a14) throw a14.error;
      }
    }
    this.adapter.deregisterValidationAttributeChangeHandler(this.validationObserver);
  }, d13.prototype.handleTextFieldInteraction = function() {
    var t23 = this.adapter.getNativeInput();
    t23 && t23.disabled || (this.receivedUserInput = true);
  }, d13.prototype.handleValidationAttributeChange = function(t23) {
    var e36 = this;
    t23.some(function(t24) {
      return d10.indexOf(t24) > -1 && (e36.styleValidity(true), e36.adapter.setLabelRequired(e36.getNativeInput().required), true);
    }), t23.indexOf("maxlength") > -1 && this.setcharacterCounter(this.getValue().length);
  }, d13.prototype.notchOutline = function(t23) {
    if (this.adapter.hasOutline() && this.adapter.hasLabel()) if (t23) {
      var e36 = this.adapter.getLabelWidth() * i6.LABEL_SCALE;
      this.adapter.notchOutline(e36);
    } else this.adapter.closeOutline();
  }, d13.prototype.activateFocus = function() {
    this.isFocused = true, this.styleFocused(this.isFocused), this.adapter.activateLineRipple(), this.adapter.hasLabel() && (this.notchOutline(this.shouldFloat), this.adapter.floatLabel(this.shouldFloat), this.styleFloating(this.shouldFloat), this.adapter.shakeLabel(this.shouldShake)), !this.helperText || !this.helperText.isPersistent() && this.helperText.isValidation() && this.valid || this.helperText.showToScreenReader();
  }, d13.prototype.setTransformOrigin = function(t23) {
    if (!this.isDisabled() && !this.adapter.hasOutline()) {
      var e36 = t23.touches, i11 = e36 ? e36[0] : t23, a14 = i11.target.getBoundingClientRect(), n17 = i11.clientX - a14.left;
      this.adapter.setLineRippleTransformOrigin(n17);
    }
  }, d13.prototype.handleInput = function() {
    this.autoCompleteFocus(), this.setcharacterCounter(this.getValue().length);
  }, d13.prototype.autoCompleteFocus = function() {
    this.receivedUserInput || this.activateFocus();
  }, d13.prototype.deactivateFocus = function() {
    this.isFocused = false, this.adapter.deactivateLineRipple();
    var t23 = this.isValid();
    this.styleValidity(t23), this.styleFocused(this.isFocused), this.adapter.hasLabel() && (this.notchOutline(this.shouldFloat), this.adapter.floatLabel(this.shouldFloat), this.styleFloating(this.shouldFloat), this.adapter.shakeLabel(this.shouldShake)), this.shouldFloat || (this.receivedUserInput = false);
  }, d13.prototype.getValue = function() {
    return this.getNativeInput().value;
  }, d13.prototype.setValue = function(t23) {
    if (this.getValue() !== t23 && (this.getNativeInput().value = t23), this.setcharacterCounter(t23.length), this.validateOnValueChange) {
      var e36 = this.isValid();
      this.styleValidity(e36);
    }
    this.adapter.hasLabel() && (this.notchOutline(this.shouldFloat), this.adapter.floatLabel(this.shouldFloat), this.styleFloating(this.shouldFloat), this.validateOnValueChange && this.adapter.shakeLabel(this.shouldShake));
  }, d13.prototype.isValid = function() {
    return this.useNativeValidation ? this.isNativeInputValid() : this.valid;
  }, d13.prototype.setValid = function(t23) {
    this.valid = t23, this.styleValidity(t23);
    var e36 = !t23 && !this.isFocused && !!this.getValue();
    this.adapter.hasLabel() && this.adapter.shakeLabel(e36);
  }, d13.prototype.setValidateOnValueChange = function(t23) {
    this.validateOnValueChange = t23;
  }, d13.prototype.getValidateOnValueChange = function() {
    return this.validateOnValueChange;
  }, d13.prototype.setUseNativeValidation = function(t23) {
    this.useNativeValidation = t23;
  }, d13.prototype.isDisabled = function() {
    return this.getNativeInput().disabled;
  }, d13.prototype.setDisabled = function(t23) {
    this.getNativeInput().disabled = t23, this.styleDisabled(t23);
  }, d13.prototype.setHelperTextContent = function(t23) {
    this.helperText && this.helperText.setContent(t23);
  }, d13.prototype.setLeadingIconAriaLabel = function(t23) {
    this.leadingIcon && this.leadingIcon.setAriaLabel(t23);
  }, d13.prototype.setLeadingIconContent = function(t23) {
    this.leadingIcon && this.leadingIcon.setContent(t23);
  }, d13.prototype.setTrailingIconAriaLabel = function(t23) {
    this.trailingIcon && this.trailingIcon.setAriaLabel(t23);
  }, d13.prototype.setTrailingIconContent = function(t23) {
    this.trailingIcon && this.trailingIcon.setContent(t23);
  }, d13.prototype.setcharacterCounter = function(t23) {
    if (this.characterCounter) {
      var e36 = this.getNativeInput().maxLength;
      if (-1 === e36) throw new Error("MDCTextFieldFoundation: Expected maxlength html property on text input or textarea.");
      this.characterCounter.setCounterValue(t23, e36);
    }
  }, d13.prototype.isBadInput = function() {
    return this.getNativeInput().validity.badInput || false;
  }, d13.prototype.isNativeInputValid = function() {
    return this.getNativeInput().validity.valid;
  }, d13.prototype.styleValidity = function(t23) {
    var e36 = d13.cssClasses.INVALID;
    if (t23 ? this.adapter.removeClass(e36) : this.adapter.addClass(e36), this.helperText) {
      if (this.helperText.setValidity(t23), !this.helperText.isValidation()) return;
      var i11 = this.helperText.isVisible(), a14 = this.helperText.getId();
      i11 && a14 ? this.adapter.setInputAttr(e24.ARIA_DESCRIBEDBY, a14) : this.adapter.removeInputAttr(e24.ARIA_DESCRIBEDBY);
    }
  }, d13.prototype.styleFocused = function(t23) {
    var e36 = d13.cssClasses.FOCUSED;
    t23 ? this.adapter.addClass(e36) : this.adapter.removeClass(e36);
  }, d13.prototype.styleDisabled = function(t23) {
    var e36 = d13.cssClasses, i11 = e36.DISABLED, a14 = e36.INVALID;
    t23 ? (this.adapter.addClass(i11), this.adapter.removeClass(a14)) : this.adapter.removeClass(i11), this.leadingIcon && this.leadingIcon.setDisabled(t23), this.trailingIcon && this.trailingIcon.setDisabled(t23);
  }, d13.prototype.styleFloating = function(t23) {
    var e36 = d13.cssClasses.LABEL_FLOATING;
    t23 ? this.adapter.addClass(e36) : this.adapter.removeClass(e36);
  }, d13.prototype.getNativeInput = function() {
    return (this.adapter ? this.adapter.getNativeInput() : null) || { disabled: false, maxLength: -1, required: false, type: "input", validity: { badInput: false, valid: true }, value: "" };
  }, d13;
}(e12);

// node_modules/@cosmograph/ui/ext/@smui/textfield/dist/Textfield.svelte.js
var de = (e36) => ({});
var oe = (e36) => ({});
var re = (e36) => ({});
var ue = (e36) => ({});
var ce = (e36) => ({});
var se = (e36) => ({});
var fe = (e36) => ({});
var pe = (e36) => ({});
var me = (e36) => ({});
var $e = (e36) => ({});
var ge = (e36) => ({});
var xe = (e36) => ({});
var ve = (e36) => ({});
var be = (e36) => ({});
var he = (e36) => ({});
var Ie = (e36) => ({});
var ye = (e36) => ({});
var we = (e36) => ({});
var Le = (e36) => ({});
var Te = (e36) => ({});
var Ce = (e36) => ({});
var je = (e36) => ({});
var Se = (e36) => ({});
var Me = (e36) => ({});
function Ne(e36) {
  let t23, n17, i11, o22, u8, s15, f6, p5, m6, $2, g2, x3, b5, w3;
  const T7 = e36[56].label, A5 = l(T7, e36, e36[87], $e);
  i11 = new f4({ props: { key: "SMUI:textfield:icon:leading", value: true, $$slots: { default: [Oe] }, $$scope: { ctx: e36 } } });
  const H3 = e36[56].default, z5 = l(H3, e36, e36[87], null);
  s15 = new f4({ props: { key: "SMUI:textfield:icon:leading", value: false, $$slots: { default: [Ve] }, $$scope: { ctx: e36 } } });
  const F6 = e36[56].ripple, k5 = l(F6, e36, e36[87], ue);
  let _7 = [{ class: p5 = e8({ [e36[9]]: true, "mdc-text-field": true, "mdc-text-field--disabled": e36[12], "mdc-text-field--textarea": e36[14], "mdc-text-field--filled": "filled" === e36[15], "mdc-text-field--outlined": "outlined" === e36[15], "smui-text-field--standard": "standard" === e36[15] && !e36[14], "mdc-text-field--no-label": e36[16] || !e36[47].label, "mdc-text-field--with-leading-icon": e36[47].leadingIcon, "mdc-text-field--with-trailing-icon": e36[47].trailingIcon, "mdc-text-field--invalid": e36[1], ...e36[25] }) }, { style: m6 = Object.entries(e36[26]).map(tt2).concat([e36[10]]).join(" ") }, e19(e36[46], ["input$", "label$", "ripple$", "outline$", "helperLine$"])], W6 = {};
  for (let e37 = 0; e37 < _7.length; e37 += 1) W6 = n5(W6, _7[e37]);
  return { c() {
    t23 = k("div"), A5 && A5.c(), n17 = j(), Ot(i11.$$.fragment), o22 = j(), z5 && z5.c(), u8 = j(), Ot(s15.$$.fragment), f6 = j(), k5 && k5.c(), P(t23, W6);
  }, m(l6, d13) {
    w2(l6, t23, d13), A5 && A5.m(t23, null), x(t23, n17), jt(i11, t23, null), x(t23, o22), z5 && z5.m(t23, null), x(t23, u8), jt(s15, t23, null), x(t23, f6), k5 && k5.m(t23, null), e36[82](t23), x3 = true, b5 || (w3 = [m($2 = d7.call(null, t23, { ripple: e36[11], unbounded: false, addClass: e36[43], removeClass: e36[44], addStyle: e36[45] })), m(g2 = t8.call(null, t23, e36[8])), m(e36[34].call(null, t23)), A(t23, "SMUITextfieldLeadingIcon:mount", e36[38]), A(t23, "SMUITextfieldLeadingIcon:unmount", e36[83]), A(t23, "SMUITextfieldTrailingIcon:mount", e36[39]), A(t23, "SMUITextfieldTrailingIcon:unmount", e36[84])], b5 = true);
  }, p(e37, n18) {
    A5 && A5.p && (!x3 || 33554432 & n18[2]) && h(A5, T7, e37, e37[87], x3 ? d2(T7, e37[87], n18, me) : p2(e37[87]), $e);
    const l6 = {};
    33554432 & n18[2] && (l6.$$scope = { dirty: n18, ctx: e37 }), i11.$set(l6), z5 && z5.p && (!x3 || 33554432 & n18[2]) && h(z5, H3, e37, e37[87], x3 ? d2(H3, e37[87], n18, null) : p2(e37[87]), null);
    const a13 = {};
    33554432 & n18[2] && (a13.$$scope = { dirty: n18, ctx: e37 }), s15.$set(a13), k5 && k5.p && (!x3 || 33554432 & n18[2]) && h(k5, F6, e37, e37[87], x3 ? d2(F6, e37[87], n18, re) : p2(e37[87]), ue), P(t23, W6 = vt(_7, [(!x3 || 33673730 & n18[0] | 65536 & n18[1] && p5 !== (p5 = e8({ [e37[9]]: true, "mdc-text-field": true, "mdc-text-field--disabled": e37[12], "mdc-text-field--textarea": e37[14], "mdc-text-field--filled": "filled" === e37[15], "mdc-text-field--outlined": "outlined" === e37[15], "smui-text-field--standard": "standard" === e37[15] && !e37[14], "mdc-text-field--no-label": e37[16] || !e37[47].label, "mdc-text-field--with-leading-icon": e37[47].leadingIcon, "mdc-text-field--with-trailing-icon": e37[47].trailingIcon, "mdc-text-field--invalid": e37[1], ...e37[25] }))) && { class: p5 }, (!x3 || 67109888 & n18[0] && m6 !== (m6 = Object.entries(e37[26]).map(tt2).concat([e37[10]]).join(" "))) && { style: m6 }, 32768 & n18[1] && e19(e37[46], ["input$", "label$", "ripple$", "outline$", "helperLine$"])])), $2 && c5($2.update) && 2048 & n18[0] && $2.update.call(null, { ripple: e37[11], unbounded: false, addClass: e37[43], removeClass: e37[44], addStyle: e37[45] }), g2 && c5(g2.update) && 256 & n18[0] && g2.update.call(null, e37[8]);
  }, i(e37) {
    x3 || (bt(A5, e37), bt(i11.$$.fragment, e37), bt(z5, e37), bt(s15.$$.fragment, e37), bt(k5, e37), x3 = true);
  }, o(e37) {
    mt(A5, e37), mt(i11.$$.fragment, e37), mt(z5, e37), mt(s15.$$.fragment, e37), mt(k5, e37), x3 = false;
  }, d(n18) {
    n18 && v(t23), A5 && A5.d(n18), St(i11), z5 && z5.d(n18), St(s15), k5 && k5.d(n18), e36[82](null), b5 = false, r3(w3);
  } };
}
function Ue(e36) {
  let t23, n17, i11, s15, f6, p5, m6, $2, g2, x3, b5, w3, T7, A5, H3, z5, F6, k5, _7 = !e36[14] && "outlined" !== e36[15] && Ee(e36), W6 = (e36[14] || "outlined" === e36[15]) && He(e36);
  s15 = new f4({ props: { key: "SMUI:textfield:icon:leading", value: true, $$slots: { default: [_e] }, $$scope: { ctx: e36 } } });
  const D4 = e36[56].default, G5 = l(D4, e36, e36[87], null), X3 = [We, Pe], Y3 = [];
  function Z3(e37, t24) {
    return e37[14] && "string" == typeof e37[0] ? 0 : 1;
  }
  m6 = Z3(e36), $2 = Y3[m6] = X3[m6](e36), x3 = new f4({ props: { key: "SMUI:textfield:icon:leading", value: false, $$slots: { default: [Ke] }, $$scope: { ctx: e36 } } });
  let ee = !e36[14] && "outlined" !== e36[15] && e36[11] && Qe(e36), te = [{ class: w3 = e8({ [e36[9]]: true, "mdc-text-field": true, "mdc-text-field--disabled": e36[12], "mdc-text-field--textarea": e36[14], "mdc-text-field--filled": "filled" === e36[15], "mdc-text-field--outlined": "outlined" === e36[15], "smui-text-field--standard": "standard" === e36[15] && !e36[14], "mdc-text-field--no-label": e36[16] || null == e36[17] && !e36[47].label, "mdc-text-field--label-floating": e36[28] || null != e36[0] && "" !== e36[0], "mdc-text-field--with-leading-icon": e36[35](e36[22]) ? e36[47].leadingIcon : e36[22], "mdc-text-field--with-trailing-icon": e36[35](e36[23]) ? e36[47].trailingIcon : e36[23], "mdc-text-field--with-internal-counter": e36[14] && e36[47].internalCounter, "mdc-text-field--invalid": e36[1], ...e36[25] }) }, { style: T7 = Object.entries(e36[26]).map(et2).concat([e36[10]]).join(" ") }, { for: void 0 }, e19(e36[46], ["input$", "label$", "ripple$", "outline$", "helperLine$"])], ne = {};
  for (let e37 = 0; e37 < te.length; e37 += 1) ne = n5(ne, te[e37]);
  return { c() {
    t23 = k("label"), _7 && _7.c(), n17 = j(), W6 && W6.c(), i11 = j(), Ot(s15.$$.fragment), f6 = j(), G5 && G5.c(), p5 = j(), $2.c(), g2 = j(), Ot(x3.$$.fragment), b5 = j(), ee && ee.c(), P(t23, ne);
  }, m(l6, d13) {
    w2(l6, t23, d13), _7 && _7.m(t23, null), x(t23, n17), W6 && W6.m(t23, null), x(t23, i11), jt(s15, t23, null), x(t23, f6), G5 && G5.m(t23, null), x(t23, p5), Y3[m6].m(t23, null), x(t23, g2), jt(x3, t23, null), x(t23, b5), ee && ee.m(t23, null), e36[78](t23), z5 = true, F6 || (k5 = [m(A5 = d7.call(null, t23, { ripple: !e36[14] && "filled" === e36[15], unbounded: false, addClass: e36[43], removeClass: e36[44], addStyle: e36[45], eventTarget: e36[33], activeTarget: e36[33], initPromise: e36[37] })), m(H3 = t8.call(null, t23, e36[8])), m(e36[34].call(null, t23)), A(t23, "SMUITextfieldLeadingIcon:mount", e36[38]), A(t23, "SMUITextfieldLeadingIcon:unmount", e36[79]), A(t23, "SMUITextfieldTrailingIcon:mount", e36[39]), A(t23, "SMUITextfieldTrailingIcon:unmount", e36[80]), A(t23, "SMUITextfieldCharacterCounter:mount", e36[40]), A(t23, "SMUITextfieldCharacterCounter:unmount", e36[81])], F6 = true);
  }, p(e37, l6) {
    e37[14] || "outlined" === e37[15] ? _7 && (yt(), mt(_7, 1, 1, () => {
      _7 = null;
    }), gt()) : _7 ? (_7.p(e37, l6), 49152 & l6[0] && bt(_7, 1)) : (_7 = Ee(e37), _7.c(), bt(_7, 1), _7.m(t23, n17)), e37[14] || "outlined" === e37[15] ? W6 ? (W6.p(e37, l6), 49152 & l6[0] && bt(W6, 1)) : (W6 = He(e37), W6.c(), bt(W6, 1), W6.m(t23, i11)) : W6 && (yt(), mt(W6, 1, 1, () => {
      W6 = null;
    }), gt());
    const a13 = {};
    33554432 & l6[2] && (a13.$$scope = { dirty: l6, ctx: e37 }), s15.$set(a13), G5 && G5.p && (!z5 || 33554432 & l6[2]) && h(G5, D4, e37, e37[87], z5 ? d2(D4, e37[87], l6, null) : p2(e37[87]), null);
    let c11 = m6;
    m6 = Z3(e37), m6 === c11 ? Y3[m6].p(e37, l6) : (yt(), mt(Y3[c11], 1, 1, () => {
      Y3[c11] = null;
    }), gt(), $2 = Y3[m6], $2 ? $2.p(e37, l6) : ($2 = Y3[m6] = X3[m6](e37), $2.c()), bt($2, 1), $2.m(t23, g2));
    const f7 = {};
    33554432 & l6[2] && (f7.$$scope = { dirty: l6, ctx: e37 }), x3.$set(f7), !e37[14] && "outlined" !== e37[15] && e37[11] ? ee ? (ee.p(e37, l6), 51200 & l6[0] && bt(ee, 1)) : (ee = Qe(e37), ee.c(), bt(ee, 1), ee.m(t23, null)) : ee && (yt(), mt(ee, 1, 1, () => {
      ee = null;
    }), gt()), P(t23, ne = vt(te, [(!z5 || 314823171 & l6[0] | 65536 & l6[1] && w3 !== (w3 = e8({ [e37[9]]: true, "mdc-text-field": true, "mdc-text-field--disabled": e37[12], "mdc-text-field--textarea": e37[14], "mdc-text-field--filled": "filled" === e37[15], "mdc-text-field--outlined": "outlined" === e37[15], "smui-text-field--standard": "standard" === e37[15] && !e37[14], "mdc-text-field--no-label": e37[16] || null == e37[17] && !e37[47].label, "mdc-text-field--label-floating": e37[28] || null != e37[0] && "" !== e37[0], "mdc-text-field--with-leading-icon": e37[35](e37[22]) ? e37[47].leadingIcon : e37[22], "mdc-text-field--with-trailing-icon": e37[35](e37[23]) ? e37[47].trailingIcon : e37[23], "mdc-text-field--with-internal-counter": e37[14] && e37[47].internalCounter, "mdc-text-field--invalid": e37[1], ...e37[25] }))) && { class: w3 }, (!z5 || 67109888 & l6[0] && T7 !== (T7 = Object.entries(e37[26]).map(et2).concat([e37[10]]).join(" "))) && { style: T7 }, { for: void 0 }, 32768 & l6[1] && e19(e37[46], ["input$", "label$", "ripple$", "outline$", "helperLine$"])])), A5 && c5(A5.update) && 49152 & l6[0] | 4 & l6[1] && A5.update.call(null, { ripple: !e37[14] && "filled" === e37[15], unbounded: false, addClass: e37[43], removeClass: e37[44], addStyle: e37[45], eventTarget: e37[33], activeTarget: e37[33], initPromise: e37[37] }), H3 && c5(H3.update) && 256 & l6[0] && H3.update.call(null, e37[8]);
  }, i(e37) {
    z5 || (bt(_7), bt(W6), bt(s15.$$.fragment, e37), bt(G5, e37), bt($2), bt(x3.$$.fragment, e37), bt(ee), z5 = true);
  }, o(e37) {
    mt(_7), mt(W6), mt(s15.$$.fragment, e37), mt(G5, e37), mt($2), mt(x3.$$.fragment, e37), mt(ee), z5 = false;
  }, d(n18) {
    n18 && v(t23), _7 && _7.d(), W6 && W6.d(), St(s15), G5 && G5.d(n18), Y3[m6].d(), St(x3), ee && ee.d(), e36[78](null), F6 = false, r3(k5);
  } };
}
function Oe(e36) {
  let t23;
  const n17 = e36[56].leadingIcon, l6 = l(n17, e36, e36[87], pe);
  return { c() {
    l6 && l6.c();
  }, m(e37, n18) {
    l6 && l6.m(e37, n18), t23 = true;
  }, p(e37, i11) {
    l6 && l6.p && (!t23 || 33554432 & i11[2]) && h(l6, n17, e37, e37[87], t23 ? d2(n17, e37[87], i11, fe) : p2(e37[87]), pe);
  }, i(e37) {
    t23 || (bt(l6, e37), t23 = true);
  }, o(e37) {
    mt(l6, e37), t23 = false;
  }, d(e37) {
    l6 && l6.d(e37);
  } };
}
function Ve(e36) {
  let t23;
  const n17 = e36[56].trailingIcon, l6 = l(n17, e36, e36[87], se);
  return { c() {
    l6 && l6.c();
  }, m(e37, n18) {
    l6 && l6.m(e37, n18), t23 = true;
  }, p(e37, i11) {
    l6 && l6.p && (!t23 || 33554432 & i11[2]) && h(l6, n17, e37, e37[87], t23 ? d2(n17, e37[87], i11, ce) : p2(e37[87]), se);
  }, i(e37) {
    t23 || (bt(l6, e37), t23 = true);
  }, o(e37) {
    mt(l6, e37), t23 = false;
  }, d(e37) {
    l6 && l6.d(e37);
  } };
}
function Ee(e36) {
  let t23, n17, s15, f6 = "filled" === e36[15] && qe(), p5 = !e36[16] && (null != e36[17] || e36[47].label) && Re(e36);
  return { c() {
    f6 && f6.c(), t23 = j(), p5 && p5.c(), n17 = S();
  }, m(e37, l6) {
    f6 && f6.m(e37, l6), w2(e37, t23, l6), p5 && p5.m(e37, l6), w2(e37, n17, l6), s15 = true;
  }, p(e37, l6) {
    "filled" === e37[15] ? f6 || (f6 = qe(), f6.c(), f6.m(t23.parentNode, t23)) : f6 && (f6.d(1), f6 = null), e37[16] || null == e37[17] && !e37[47].label ? p5 && (yt(), mt(p5, 1, 1, () => {
      p5 = null;
    }), gt()) : p5 ? (p5.p(e37, l6), 196608 & l6[0] | 65536 & l6[1] && bt(p5, 1)) : (p5 = Re(e37), p5.c(), bt(p5, 1), p5.m(n17.parentNode, n17));
  }, i(e37) {
    s15 || (bt(p5), s15 = true);
  }, o(e37) {
    mt(p5), s15 = false;
  }, d(e37) {
    f6 && f6.d(e37), e37 && v(t23), p5 && p5.d(e37), e37 && v(n17);
  } };
}
function qe(e36) {
  let t23;
  return { c() {
    t23 = k("span"), M(t23, "class", "mdc-text-field__ripple");
  }, m(e37, n17) {
    w2(e37, t23, n17);
  }, d(e37) {
    e37 && v(t23);
  } };
}
function Re(e36) {
  let t23, n17;
  const l6 = [{ floatAbove: e36[28] || null != e36[0] && "" !== e36[0] && ("number" != typeof e36[0] || !isNaN(e36[0])) }, { required: e36[13] }, { wrapped: true }, t15(e36[46], "label$")];
  let i11 = { $$slots: { default: [Ae] }, $$scope: { ctx: e36 } };
  for (let e37 = 0; e37 < l6.length; e37 += 1) i11 = n5(i11, l6[e37]);
  return t23 = new F3({ props: i11 }), e36[57](t23), { c() {
    Ot(t23.$$.fragment);
  }, m(e37, l7) {
    jt(t23, e37, l7), n17 = true;
  }, p(e37, n18) {
    const i12 = 268443649 & n18[0] | 32768 & n18[1] ? vt(l6, [268435457 & n18[0] && { floatAbove: e37[28] || null != e37[0] && "" !== e37[0] && ("number" != typeof e37[0] || !isNaN(e37[0])) }, 8192 & n18[0] && { required: e37[13] }, l6[2], 32768 & n18[1] && kt(t15(e37[46], "label$"))]) : {};
    131072 & n18[0] | 33554432 & n18[2] && (i12.$$scope = { dirty: n18, ctx: e37 }), t23.$set(i12);
  }, i(e37) {
    n17 || (bt(t23.$$.fragment, e37), n17 = true);
  }, o(e37) {
    mt(t23.$$.fragment, e37), n17 = false;
  }, d(n18) {
    e36[57](null), St(t23, n18);
  } };
}
function Ae(e36) {
  let t23, n17, l6 = (null == e36[17] ? "" : e36[17]) + "";
  const i11 = e36[56].label, o22 = l(i11, e36, e36[87], Me);
  return { c() {
    t23 = O(l6), o22 && o22.c();
  }, m(e37, l7) {
    w2(e37, t23, l7), o22 && o22.m(e37, l7), n17 = true;
  }, p(e37, a13) {
    (!n17 || 131072 & a13[0]) && l6 !== (l6 = (null == e37[17] ? "" : e37[17]) + "") && B(t23, l6), o22 && o22.p && (!n17 || 33554432 & a13[2]) && h(o22, i11, e37, e37[87], n17 ? d2(i11, e37[87], a13, Se) : p2(e37[87]), Me);
  }, i(e37) {
    n17 || (bt(o22, e37), n17 = true);
  }, o(e37) {
    mt(o22, e37), n17 = false;
  }, d(e37) {
    e37 && v(t23), o22 && o22.d(e37);
  } };
}
function He(e36) {
  let t23, n17;
  const l6 = [{ noLabel: e36[16] || null == e36[17] && !e36[47].label }, t15(e36[46], "outline$")];
  let i11 = { $$slots: { default: [ke] }, $$scope: { ctx: e36 } };
  for (let e37 = 0; e37 < l6.length; e37 += 1) i11 = n5(i11, l6[e37]);
  return t23 = new W3({ props: i11 }), e36[59](t23), { c() {
    Ot(t23.$$.fragment);
  }, m(e37, l7) {
    jt(t23, e37, l7), n17 = true;
  }, p(e37, n18) {
    const i12 = 196608 & n18[0] | 98304 & n18[1] ? vt(l6, [196608 & n18[0] | 65536 & n18[1] && { noLabel: e37[16] || null == e37[17] && !e37[47].label }, 32768 & n18[1] && kt(t15(e37[46], "outline$"))]) : {};
    268640289 & n18[0] | 98304 & n18[1] | 33554432 & n18[2] && (i12.$$scope = { dirty: n18, ctx: e37 }), t23.$set(i12);
  }, i(e37) {
    n17 || (bt(t23.$$.fragment, e37), n17 = true);
  }, o(e37) {
    mt(t23.$$.fragment, e37), n17 = false;
  }, d(n18) {
    e36[59](null), St(t23, n18);
  } };
}
function ze(e36) {
  let t23, n17;
  const l6 = [{ floatAbove: e36[28] || null != e36[0] && "" !== e36[0] && ("number" != typeof e36[0] || !isNaN(e36[0])) }, { required: e36[13] }, { wrapped: true }, t15(e36[46], "label$")];
  let i11 = { $$slots: { default: [Fe] }, $$scope: { ctx: e36 } };
  for (let e37 = 0; e37 < l6.length; e37 += 1) i11 = n5(i11, l6[e37]);
  return t23 = new F3({ props: i11 }), e36[58](t23), { c() {
    Ot(t23.$$.fragment);
  }, m(e37, l7) {
    jt(t23, e37, l7), n17 = true;
  }, p(e37, n18) {
    const i12 = 268443649 & n18[0] | 32768 & n18[1] ? vt(l6, [268435457 & n18[0] && { floatAbove: e37[28] || null != e37[0] && "" !== e37[0] && ("number" != typeof e37[0] || !isNaN(e37[0])) }, 8192 & n18[0] && { required: e37[13] }, l6[2], 32768 & n18[1] && kt(t15(e37[46], "label$"))]) : {};
    131072 & n18[0] | 33554432 & n18[2] && (i12.$$scope = { dirty: n18, ctx: e37 }), t23.$set(i12);
  }, i(e37) {
    n17 || (bt(t23.$$.fragment, e37), n17 = true);
  }, o(e37) {
    mt(t23.$$.fragment, e37), n17 = false;
  }, d(n18) {
    e36[58](null), St(t23, n18);
  } };
}
function Fe(e36) {
  let t23, n17, l6 = (null == e36[17] ? "" : e36[17]) + "";
  const i11 = e36[56].label, o22 = l(i11, e36, e36[87], je);
  return { c() {
    t23 = O(l6), o22 && o22.c();
  }, m(e37, l7) {
    w2(e37, t23, l7), o22 && o22.m(e37, l7), n17 = true;
  }, p(e37, a13) {
    (!n17 || 131072 & a13[0]) && l6 !== (l6 = (null == e37[17] ? "" : e37[17]) + "") && B(t23, l6), o22 && o22.p && (!n17 || 33554432 & a13[2]) && h(o22, i11, e37, e37[87], n17 ? d2(i11, e37[87], a13, Ce) : p2(e37[87]), je);
  }, i(e37) {
    n17 || (bt(o22, e37), n17 = true);
  }, o(e37) {
    mt(o22, e37), n17 = false;
  }, d(e37) {
    e37 && v(t23), o22 && o22.d(e37);
  } };
}
function ke(e36) {
  let t23, n17, l6 = !e36[16] && (null != e36[17] || e36[47].label) && ze(e36);
  return { c() {
    l6 && l6.c(), t23 = S();
  }, m(e37, i11) {
    l6 && l6.m(e37, i11), w2(e37, t23, i11), n17 = true;
  }, p(e37, n18) {
    e37[16] || null == e37[17] && !e37[47].label ? l6 && (yt(), mt(l6, 1, 1, () => {
      l6 = null;
    }), gt()) : l6 ? (l6.p(e37, n18), 196608 & n18[0] | 65536 & n18[1] && bt(l6, 1)) : (l6 = ze(e37), l6.c(), bt(l6, 1), l6.m(t23.parentNode, t23));
  }, i(e37) {
    n17 || (bt(l6), n17 = true);
  }, o(e37) {
    mt(l6), n17 = false;
  }, d(e37) {
    l6 && l6.d(e37), e37 && v(t23);
  } };
}
function _e(e36) {
  let t23;
  const n17 = e36[56].leadingIcon, l6 = l(n17, e36, e36[87], Te);
  return { c() {
    l6 && l6.c();
  }, m(e37, n18) {
    l6 && l6.m(e37, n18), t23 = true;
  }, p(e37, i11) {
    l6 && l6.p && (!t23 || 33554432 & i11[2]) && h(l6, n17, e37, e37[87], t23 ? d2(n17, e37[87], i11, Le) : p2(e37[87]), Te);
  }, i(e37) {
    t23 || (bt(l6, e37), t23 = true);
  }, o(e37) {
    mt(l6, e37), t23 = false;
  }, d(e37) {
    l6 && l6.d(e37);
  } };
}
function Pe(e36) {
  let t23, n17, i11, s15, f6, p5, m6, $2, g2, x3;
  const b5 = e36[56].prefix, j6 = l(b5, e36, e36[87], Ie);
  let S4 = null != e36[20] && Be(e36);
  const M3 = [{ type: e36[18] }, { disabled: e36[12] }, { required: e36[13] }, { updateInvalid: e36[19] }, { "aria-controls": e36[27] }, { "aria-describedby": e36[27] }, e36[16] && null != e36[17] ? { placeholder: e36[17] } : {}, t15(e36[46], "input$")];
  function N6(t24) {
    e36[69](t24);
  }
  function U6(t24) {
    e36[70](t24);
  }
  function q6(t24) {
    e36[71](t24);
  }
  function R7(t24) {
    e36[72](t24);
  }
  let A5 = {};
  for (let e37 = 0; e37 < M3.length; e37 += 1) A5 = n5(A5, M3[e37]);
  void 0 !== e36[0] && (A5.value = e36[0]), void 0 !== e36[3] && (A5.files = e36[3]), void 0 !== e36[4] && (A5.dirty = e36[4]), void 0 !== e36[1] && (A5.invalid = e36[1]), i11 = new j3({ props: A5 }), e36[68](i11), tt.push(() => Et(i11, "value", N6)), tt.push(() => Et(i11, "files", U6)), tt.push(() => Et(i11, "dirty", q6)), tt.push(() => Et(i11, "invalid", R7)), i11.$on("blur", e36[73]), i11.$on("focus", e36[74]), i11.$on("blur", e36[75]), i11.$on("focus", e36[76]);
  let H3 = null != e36[21] && Ge(e36);
  const z5 = e36[56].suffix, _7 = l(z5, e36, e36[87], be);
  return { c() {
    j6 && j6.c(), t23 = j(), S4 && S4.c(), n17 = j(), Ot(i11.$$.fragment), $2 = j(), H3 && H3.c(), g2 = j(), _7 && _7.c();
  }, m(e37, l6) {
    j6 && j6.m(e37, l6), w2(e37, t23, l6), S4 && S4.m(e37, l6), w2(e37, n17, l6), jt(i11, e37, l6), w2(e37, $2, l6), H3 && H3.m(e37, l6), w2(e37, g2, l6), _7 && _7.m(e37, l6), x3 = true;
  }, p(e37, t24) {
    j6 && j6.p && (!x3 || 33554432 & t24[2]) && h(j6, b5, e37, e37[87], x3 ? d2(b5, e37[87], t24, he) : p2(e37[87]), Ie), null != e37[20] ? S4 ? (S4.p(e37, t24), 1048576 & t24[0] && bt(S4, 1)) : (S4 = Be(e37), S4.c(), bt(S4, 1), S4.m(n17.parentNode, n17)) : S4 && (yt(), mt(S4, 1, 1, () => {
      S4 = null;
    }), gt());
    const l6 = 135213056 & t24[0] | 32768 & t24[1] ? vt(M3, [262144 & t24[0] && { type: e37[18] }, 4096 & t24[0] && { disabled: e37[12] }, 8192 & t24[0] && { required: e37[13] }, 524288 & t24[0] && { updateInvalid: e37[19] }, 134217728 & t24[0] && { "aria-controls": e37[27] }, 134217728 & t24[0] && { "aria-describedby": e37[27] }, 196608 & t24[0] && kt(e37[16] && null != e37[17] ? { placeholder: e37[17] } : {}), 32768 & t24[1] && kt(t15(e37[46], "input$"))]) : {};
    !s15 && 1 & t24[0] && (s15 = true, l6.value = e37[0], ft(() => s15 = false)), !f6 && 8 & t24[0] && (f6 = true, l6.files = e37[3], ft(() => f6 = false)), !p5 && 16 & t24[0] && (p5 = true, l6.dirty = e37[4], ft(() => p5 = false)), !m6 && 2 & t24[0] && (m6 = true, l6.invalid = e37[1], ft(() => m6 = false)), i11.$set(l6), null != e37[21] ? H3 ? (H3.p(e37, t24), 2097152 & t24[0] && bt(H3, 1)) : (H3 = Ge(e37), H3.c(), bt(H3, 1), H3.m(g2.parentNode, g2)) : H3 && (yt(), mt(H3, 1, 1, () => {
      H3 = null;
    }), gt()), _7 && _7.p && (!x3 || 33554432 & t24[2]) && h(_7, z5, e37, e37[87], x3 ? d2(z5, e37[87], t24, ve) : p2(e37[87]), be);
  }, i(e37) {
    x3 || (bt(j6, e37), bt(S4), bt(i11.$$.fragment, e37), bt(H3), bt(_7, e37), x3 = true);
  }, o(e37) {
    mt(j6, e37), mt(S4), mt(i11.$$.fragment, e37), mt(H3), mt(_7, e37), x3 = false;
  }, d(l6) {
    j6 && j6.d(l6), l6 && v(t23), S4 && S4.d(l6), l6 && v(n17), e36[68](null), St(i11, l6), l6 && v($2), H3 && H3.d(l6), l6 && v(g2), _7 && _7.d(l6);
  } };
}
function We(e36) {
  let t23, n17, i11, o22, u8, s15, f6, p5;
  const m6 = [{ disabled: e36[12] }, { required: e36[13] }, { updateInvalid: e36[19] }, { "aria-controls": e36[27] }, { "aria-describedby": e36[27] }, t15(e36[46], "input$")];
  function $2(t24) {
    e36[61](t24);
  }
  function g2(t24) {
    e36[62](t24);
  }
  function x3(t24) {
    e36[63](t24);
  }
  let b5 = {};
  for (let e37 = 0; e37 < m6.length; e37 += 1) b5 = n5(b5, m6[e37]);
  void 0 !== e36[0] && (b5.value = e36[0]), void 0 !== e36[4] && (b5.dirty = e36[4]), void 0 !== e36[1] && (b5.invalid = e36[1]), n17 = new E5({ props: b5 }), e36[60](n17), tt.push(() => Et(n17, "value", $2)), tt.push(() => Et(n17, "dirty", g2)), tt.push(() => Et(n17, "invalid", x3)), n17.$on("blur", e36[64]), n17.$on("focus", e36[65]), n17.$on("blur", e36[66]), n17.$on("focus", e36[67]);
  const S4 = e36[56].internalCounter, N6 = l(S4, e36, e36[87], we);
  return { c() {
    t23 = k("span"), Ot(n17.$$.fragment), s15 = j(), N6 && N6.c(), M(t23, "class", f6 = e8({ "mdc-text-field__resizer": !("input$resizable" in e36[46]) || e36[46].input$resizable }));
  }, m(e37, l6) {
    w2(e37, t23, l6), jt(n17, t23, null), x(t23, s15), N6 && N6.m(t23, null), p5 = true;
  }, p(e37, l6) {
    const a13 = 134754304 & l6[0] | 32768 & l6[1] ? vt(m6, [4096 & l6[0] && { disabled: e37[12] }, 8192 & l6[0] && { required: e37[13] }, 524288 & l6[0] && { updateInvalid: e37[19] }, 134217728 & l6[0] && { "aria-controls": e37[27] }, 134217728 & l6[0] && { "aria-describedby": e37[27] }, 32768 & l6[1] && kt(t15(e37[46], "input$"))]) : {};
    !i11 && 1 & l6[0] && (i11 = true, a13.value = e37[0], ft(() => i11 = false)), !o22 && 16 & l6[0] && (o22 = true, a13.dirty = e37[4], ft(() => o22 = false)), !u8 && 2 & l6[0] && (u8 = true, a13.invalid = e37[1], ft(() => u8 = false)), n17.$set(a13), N6 && N6.p && (!p5 || 33554432 & l6[2]) && h(N6, S4, e37, e37[87], p5 ? d2(S4, e37[87], l6, ye) : p2(e37[87]), we), (!p5 || 32768 & l6[1] && f6 !== (f6 = e8({ "mdc-text-field__resizer": !("input$resizable" in e37[46]) || e37[46].input$resizable }))) && M(t23, "class", f6);
  }, i(e37) {
    p5 || (bt(n17.$$.fragment, e37), bt(N6, e37), p5 = true);
  }, o(e37) {
    mt(n17.$$.fragment, e37), mt(N6, e37), p5 = false;
  }, d(l6) {
    l6 && v(t23), e36[60](null), St(n17), N6 && N6.d(l6);
  } };
}
function Be(e36) {
  let t23, n17;
  return t23 = new d8({ props: { $$slots: { default: [De] }, $$scope: { ctx: e36 } } }), { c() {
    Ot(t23.$$.fragment);
  }, m(e37, l6) {
    jt(t23, e37, l6), n17 = true;
  }, p(e37, n18) {
    const l6 = {};
    1048576 & n18[0] | 33554432 & n18[2] && (l6.$$scope = { dirty: n18, ctx: e37 }), t23.$set(l6);
  }, i(e37) {
    n17 || (bt(t23.$$.fragment, e37), n17 = true);
  }, o(e37) {
    mt(t23.$$.fragment, e37), n17 = false;
  }, d(e37) {
    St(t23, e37);
  } };
}
function De(e36) {
  let t23;
  return { c() {
    t23 = O(e36[20]);
  }, m(e37, n17) {
    w2(e37, t23, n17);
  }, p(e37, n17) {
    1048576 & n17[0] && B(t23, e37[20]);
  }, d(e37) {
    e37 && v(t23);
  } };
}
function Ge(e36) {
  let t23, n17;
  return t23 = new d9({ props: { $$slots: { default: [Je] }, $$scope: { ctx: e36 } } }), { c() {
    Ot(t23.$$.fragment);
  }, m(e37, l6) {
    jt(t23, e37, l6), n17 = true;
  }, p(e37, n18) {
    const l6 = {};
    2097152 & n18[0] | 33554432 & n18[2] && (l6.$$scope = { dirty: n18, ctx: e37 }), t23.$set(l6);
  }, i(e37) {
    n17 || (bt(t23.$$.fragment, e37), n17 = true);
  }, o(e37) {
    mt(t23.$$.fragment, e37), n17 = false;
  }, d(e37) {
    St(t23, e37);
  } };
}
function Je(e36) {
  let t23;
  return { c() {
    t23 = O(e36[21]);
  }, m(e37, n17) {
    w2(e37, t23, n17);
  }, p(e37, n17) {
    2097152 & n17[0] && B(t23, e37[21]);
  }, d(e37) {
    e37 && v(t23);
  } };
}
function Ke(e36) {
  let t23;
  const n17 = e36[56].trailingIcon, l6 = l(n17, e36, e36[87], xe);
  return { c() {
    l6 && l6.c();
  }, m(e37, n18) {
    l6 && l6.m(e37, n18), t23 = true;
  }, p(e37, i11) {
    l6 && l6.p && (!t23 || 33554432 & i11[2]) && h(l6, n17, e37, e37[87], t23 ? d2(n17, e37[87], i11, ge) : p2(e37[87]), xe);
  }, i(e37) {
    t23 || (bt(l6, e37), t23 = true);
  }, o(e37) {
    mt(l6, e37), t23 = false;
  }, d(e37) {
    l6 && l6.d(e37);
  } };
}
function Qe(e36) {
  let t23, n17;
  const l6 = [t15(e36[46], "ripple$")];
  let i11 = {};
  for (let e37 = 0; e37 < l6.length; e37 += 1) i11 = n5(i11, l6[e37]);
  return t23 = new L2({ props: i11 }), e36[77](t23), { c() {
    Ot(t23.$$.fragment);
  }, m(e37, l7) {
    jt(t23, e37, l7), n17 = true;
  }, p(e37, n18) {
    const i12 = 32768 & n18[1] ? vt(l6, [kt(t15(e37[46], "ripple$"))]) : {};
    t23.$set(i12);
  }, i(e37) {
    n17 || (bt(t23.$$.fragment, e37), n17 = true);
  }, o(e37) {
    mt(t23.$$.fragment, e37), n17 = false;
  }, d(n18) {
    e36[77](null), St(t23, n18);
  } };
}
function Xe(e36) {
  let t23, n17;
  const l6 = [t15(e36[46], "helperLine$")];
  let i11 = { $$slots: { default: [Ye] }, $$scope: { ctx: e36 } };
  for (let e37 = 0; e37 < l6.length; e37 += 1) i11 = n5(i11, l6[e37]);
  return t23 = new e23({ props: i11 }), t23.$on("SMUITextfieldHelperText:id", e36[41]), t23.$on("SMUITextfieldHelperText:mount", e36[42]), t23.$on("SMUITextfieldHelperText:unmount", e36[85]), t23.$on("SMUITextfieldCharacterCounter:mount", e36[40]), t23.$on("SMUITextfieldCharacterCounter:unmount", e36[86]), { c() {
    Ot(t23.$$.fragment);
  }, m(e37, l7) {
    jt(t23, e37, l7), n17 = true;
  }, p(e37, n18) {
    const i12 = 32768 & n18[1] ? vt(l6, [kt(t15(e37[46], "helperLine$"))]) : {};
    33554432 & n18[2] && (i12.$$scope = { dirty: n18, ctx: e37 }), t23.$set(i12);
  }, i(e37) {
    n17 || (bt(t23.$$.fragment, e37), n17 = true);
  }, o(e37) {
    mt(t23.$$.fragment, e37), n17 = false;
  }, d(e37) {
    St(t23, e37);
  } };
}
function Ye(e36) {
  let t23;
  const n17 = e36[56].helper, l6 = l(n17, e36, e36[87], oe);
  return { c() {
    l6 && l6.c();
  }, m(e37, n18) {
    l6 && l6.m(e37, n18), t23 = true;
  }, p(e37, i11) {
    l6 && l6.p && (!t23 || 33554432 & i11[2]) && h(l6, n17, e37, e37[87], t23 ? d2(n17, e37[87], i11, de) : p2(e37[87]), oe);
  }, i(e37) {
    t23 || (bt(l6, e37), t23 = true);
  }, o(e37) {
    mt(l6, e37), t23 = false;
  }, d(e37) {
    l6 && l6.d(e37);
  } };
}
function Ze(e36) {
  let t23, n17, s15, f6, p5;
  const m6 = [Ue, Ne], $2 = [];
  t23 = function(e37, t24) {
    return e37[36] ? 0 : 1;
  }(e36), n17 = $2[t23] = m6[t23](e36);
  let g2 = e36[47].helper && Xe(e36);
  return { c() {
    n17.c(), s15 = j(), g2 && g2.c(), f6 = S();
  }, m(e37, n18) {
    $2[t23].m(e37, n18), w2(e37, s15, n18), g2 && g2.m(e37, n18), w2(e37, f6, n18), p5 = true;
  }, p(e37, t24) {
    n17.p(e37, t24), e37[47].helper ? g2 ? (g2.p(e37, t24), 65536 & t24[1] && bt(g2, 1)) : (g2 = Xe(e37), g2.c(), bt(g2, 1), g2.m(f6.parentNode, f6)) : g2 && (yt(), mt(g2, 1, 1, () => {
      g2 = null;
    }), gt());
  }, i(e37) {
    p5 || (bt(n17), bt(g2), p5 = true);
  }, o(e37) {
    mt(n17), mt(g2), p5 = false;
  }, d(e37) {
    $2[t23].d(e37), e37 && v(s15), g2 && g2.d(e37), e37 && v(f6);
  } };
}
var et2 = ([e36, t23]) => `${e36}: ${t23};`;
var tt2 = ([e36, t23]) => `${e36}: ${t23};`;
function nt2(e36, t23, n17) {
  let l6;
  const i11 = ["use", "class", "style", "ripple", "disabled", "required", "textarea", "variant", "noLabel", "label", "type", "value", "files", "invalid", "updateInvalid", "dirty", "prefix", "suffix", "validateOnValueChange", "useNativeValidation", "withLeadingIcon", "withTrailingIcon", "input", "floatingLabel", "lineRipple", "notchedOutline", "focus", "blur", "layout", "getElement"];
  let a13 = y(t23, i11), { $$slots: d13 = {}, $$scope: o22 } = t23;
  const r14 = g(d13), { applyPassive: u8 } = events_exports, c11 = n6(Q());
  let h6 = () => {
  };
  function I8(e37) {
    return e37 === h6;
  }
  let { use: y3 = [] } = t23, { class: w3 = "" } = t23, { style: L3 = "" } = t23, { ripple: C9 = true } = t23, { disabled: j6 = false } = t23, { required: S4 = false } = t23, { textarea: M3 = false } = t23, { variant: N6 = M3 ? "outlined" : "standard" } = t23, { noLabel: U6 = false } = t23, { label: O8 } = t23, { type: V2 = "text" } = t23, { value: E8 = a13.input$emptyValueUndefined ? void 0 : h6 } = t23, { files: q6 = h6 } = t23;
  const R7 = !I8(E8) || !I8(q6);
  I8(E8) && (E8 = void 0), I8(q6) && (q6 = null);
  let { invalid: A5 = h6 } = t23, { updateInvalid: H3 = I8(A5) } = t23;
  I8(A5) && (A5 = false);
  let z5, F6, k5, P6, B4, G5, J3, K3, Q3, { dirty: X3 = false } = t23, { prefix: Y3 } = t23, { suffix: Z3 } = t23, { validateOnValueChange: ee = H3 } = t23, { useNativeValidation: te = H3 } = t23, { withLeadingIcon: ne = h6 } = t23, { withTrailingIcon: le = h6 } = t23, { input: ie } = t23, { floatingLabel: de2 } = t23, { lineRipple: oe2 } = t23, { notchedOutline: re2 } = t23, ue2 = {}, ce2 = {}, se2 = false, fe2 = X("SMUI:addLayoutListener"), pe2 = new Promise((e37) => B4 = e37), me2 = E8;
  function $e2(e37) {
    var t24;
    return e37 in ue2 ? null !== (t24 = ue2[e37]) && void 0 !== t24 ? t24 : null : be2().classList.contains(e37);
  }
  function ge2(e37) {
    ue2[e37] || n17(25, ue2[e37] = true, ue2);
  }
  function xe2(e37) {
    e37 in ue2 && !ue2[e37] || n17(25, ue2[e37] = false, ue2);
  }
  function ve2() {
    if (F6) {
      const e37 = F6.shouldFloat;
      F6.notchOutline(e37);
    }
  }
  function be2() {
    return z5;
  }
  fe2 && (P6 = fe2(ve2)), R(() => {
    if (n17(54, F6 = new d11({ addClass: ge2, removeClass: xe2, hasClass: $e2, registerTextFieldInteractionHandler: (e37, t24) => be2().addEventListener(e37, t24), deregisterTextFieldInteractionHandler: (e37, t24) => be2().removeEventListener(e37, t24), registerValidationAttributeChangeHandler: (e37) => {
      const t24 = new MutationObserver((t25) => {
        te && e37(((e38) => e38.map((e39) => e39.attributeName).filter((e39) => e39))(t25));
      }), n18 = { attributes: true };
      return ie && t24.observe(ie.getElement(), n18), t24;
    }, deregisterValidationAttributeChangeHandler: (e37) => {
      e37.disconnect();
    }, getNativeInput: () => {
      var e37;
      return null !== (e37 = null == ie ? void 0 : ie.getElement()) && void 0 !== e37 ? e37 : null;
    }, setInputAttr: (e37, t24) => {
      null == ie || ie.addAttr(e37, t24);
    }, removeInputAttr: (e37) => {
      null == ie || ie.removeAttr(e37);
    }, isFocused: () => document.activeElement === (null == ie ? void 0 : ie.getElement()), registerInputInteractionHandler: (e37, t24) => {
      null == ie || ie.getElement().addEventListener(e37, t24, u8());
    }, deregisterInputInteractionHandler: (e37, t24) => {
      null == ie || ie.getElement().removeEventListener(e37, t24, u8());
    }, floatLabel: (e37) => de2 && de2.float(e37), getLabelWidth: () => de2 ? de2.getWidth() : 0, hasLabel: () => !!de2, shakeLabel: (e37) => de2 && de2.shake(e37), setLabelRequired: (e37) => de2 && de2.setRequired(e37), activateLineRipple: () => oe2 && oe2.activate(), deactivateLineRipple: () => oe2 && oe2.deactivate(), setLineRippleTransformOrigin: (e37) => oe2 && oe2.setRippleCenter(e37), closeOutline: () => re2 && re2.closeNotch(), hasOutline: () => !!re2, notchOutline: (e37) => re2 && re2.notch(e37) }, { get helperText() {
      return K3;
    }, get characterCounter() {
      return Q3;
    }, get leadingIcon() {
      return G5;
    }, get trailingIcon() {
      return J3;
    } })), R7) {
      if (null == ie) throw new Error("SMUI Textfield initialized without Input component.");
      F6.init();
    } else ut().then(() => {
      if (null == ie) throw new Error("SMUI Textfield initialized without Input component.");
      F6.init();
    });
    return B4(), () => {
      F6.destroy();
    };
  }), U(() => {
    P6 && P6();
  });
  return e36.$$set = (e37) => {
    t23 = n5(n5({}, t23), $(e37)), n17(46, a13 = y(t23, i11)), "use" in e37 && n17(8, y3 = e37.use), "class" in e37 && n17(9, w3 = e37.class), "style" in e37 && n17(10, L3 = e37.style), "ripple" in e37 && n17(11, C9 = e37.ripple), "disabled" in e37 && n17(12, j6 = e37.disabled), "required" in e37 && n17(13, S4 = e37.required), "textarea" in e37 && n17(14, M3 = e37.textarea), "variant" in e37 && n17(15, N6 = e37.variant), "noLabel" in e37 && n17(16, U6 = e37.noLabel), "label" in e37 && n17(17, O8 = e37.label), "type" in e37 && n17(18, V2 = e37.type), "value" in e37 && n17(0, E8 = e37.value), "files" in e37 && n17(3, q6 = e37.files), "invalid" in e37 && n17(1, A5 = e37.invalid), "updateInvalid" in e37 && n17(19, H3 = e37.updateInvalid), "dirty" in e37 && n17(4, X3 = e37.dirty), "prefix" in e37 && n17(20, Y3 = e37.prefix), "suffix" in e37 && n17(21, Z3 = e37.suffix), "validateOnValueChange" in e37 && n17(48, ee = e37.validateOnValueChange), "useNativeValidation" in e37 && n17(49, te = e37.useNativeValidation), "withLeadingIcon" in e37 && n17(22, ne = e37.withLeadingIcon), "withTrailingIcon" in e37 && n17(23, le = e37.withTrailingIcon), "input" in e37 && n17(2, ie = e37.input), "floatingLabel" in e37 && n17(5, de2 = e37.floatingLabel), "lineRipple" in e37 && n17(6, oe2 = e37.lineRipple), "notchedOutline" in e37 && n17(7, re2 = e37.notchedOutline), "$$scope" in e37 && n17(87, o22 = e37.$$scope);
  }, e36.$$.update = () => {
    if (4 & e36.$$.dirty[0] && n17(33, l6 = ie && ie.getElement()), 524290 & e36.$$.dirty[0] | 8388608 & e36.$$.dirty[1] && F6 && F6.isValid() !== !A5 && (H3 ? n17(1, A5 = !F6.isValid()) : F6.setValid(!A5)), 8519680 & e36.$$.dirty[1] && F6 && F6.getValidateOnValueChange() !== ee && F6.setValidateOnValueChange(!I8(ee) && ee), 8650752 & e36.$$.dirty[1] && F6 && F6.setUseNativeValidation(!!I8(te) || te), 4096 & e36.$$.dirty[0] | 8388608 & e36.$$.dirty[1] && F6 && F6.setDisabled(j6), 1 & e36.$$.dirty[0] | 25165824 & e36.$$.dirty[1] && F6 && R7 && me2 !== E8) {
      n17(55, me2 = E8);
      const e37 = `${E8}`;
      F6.getValue() !== e37 && F6.setValue(e37);
    }
  }, [E8, A5, ie, q6, X3, de2, oe2, re2, y3, w3, L3, C9, j6, S4, M3, N6, U6, O8, V2, H3, Y3, Z3, ne, le, z5, ue2, ce2, k5, se2, G5, J3, K3, Q3, l6, c11, I8, R7, pe2, function(e37) {
    n17(29, G5 = e37.detail);
  }, function(e37) {
    n17(30, J3 = e37.detail);
  }, function(e37) {
    n17(32, Q3 = e37.detail);
  }, function(e37) {
    n17(27, k5 = e37.detail);
  }, function(e37) {
    n17(31, K3 = e37.detail);
  }, ge2, xe2, function(e37, t24) {
    ce2[e37] != t24 && ("" === t24 || null == t24 ? (delete ce2[e37], n17(26, ce2)) : n17(26, ce2[e37] = t24, ce2));
  }, a13, r14, ee, te, function() {
    null == ie || ie.focus();
  }, function() {
    null == ie || ie.blur();
  }, ve2, be2, F6, me2, d13, function(e37) {
    tt[e37 ? "unshift" : "push"](() => {
      de2 = e37, n17(5, de2);
    });
  }, function(e37) {
    tt[e37 ? "unshift" : "push"](() => {
      de2 = e37, n17(5, de2);
    });
  }, function(e37) {
    tt[e37 ? "unshift" : "push"](() => {
      re2 = e37, n17(7, re2);
    });
  }, function(e37) {
    tt[e37 ? "unshift" : "push"](() => {
      ie = e37, n17(2, ie);
    });
  }, function(e37) {
    E8 = e37, n17(0, E8);
  }, function(e37) {
    X3 = e37, n17(4, X3);
  }, function(e37) {
    A5 = e37, n17(1, A5), n17(54, F6), n17(19, H3);
  }, () => n17(28, se2 = false), () => n17(28, se2 = true), (e37) => e9(z5, "blur", e37), (e37) => e9(z5, "focus", e37), function(e37) {
    tt[e37 ? "unshift" : "push"](() => {
      ie = e37, n17(2, ie);
    });
  }, function(e37) {
    E8 = e37, n17(0, E8);
  }, function(e37) {
    q6 = e37, n17(3, q6);
  }, function(e37) {
    X3 = e37, n17(4, X3);
  }, function(e37) {
    A5 = e37, n17(1, A5), n17(54, F6), n17(19, H3);
  }, () => n17(28, se2 = false), () => n17(28, se2 = true), (e37) => e9(z5, "blur", e37), (e37) => e9(z5, "focus", e37), function(e37) {
    tt[e37 ? "unshift" : "push"](() => {
      oe2 = e37, n17(6, oe2);
    });
  }, function(e37) {
    tt[e37 ? "unshift" : "push"](() => {
      z5 = e37, n17(24, z5);
    });
  }, () => n17(29, G5 = void 0), () => n17(30, J3 = void 0), () => n17(32, Q3 = void 0), function(e37) {
    tt[e37 ? "unshift" : "push"](() => {
      z5 = e37, n17(24, z5);
    });
  }, () => n17(29, G5 = void 0), () => n17(30, J3 = void 0), () => {
    n17(27, k5 = void 0), n17(31, K3 = void 0);
  }, () => n17(32, Q3 = void 0), o22];
}
var lt2 = class extends Mt {
  constructor(e36) {
    super(), At(this, e36, nt2, Ze, u3, { use: 8, class: 9, style: 10, ripple: 11, disabled: 12, required: 13, textarea: 14, variant: 15, noLabel: 16, label: 17, type: 18, value: 0, files: 3, invalid: 1, updateInvalid: 19, dirty: 4, prefix: 20, suffix: 21, validateOnValueChange: 48, useNativeValidation: 49, withLeadingIcon: 22, withTrailingIcon: 23, input: 2, floatingLabel: 5, lineRipple: 6, notchedOutline: 7, focus: 50, blur: 51, layout: 52, getElement: 53 }, null, [-1, -1, -1, -1]);
  }
  get focus() {
    return this.$$.ctx[50];
  }
  get blur() {
    return this.$$.ctx[51];
  }
  get layout() {
    return this.$$.ctx[52];
  }
  get getElement() {
    return this.$$.ctx[53];
  }
};

// node_modules/@cosmograph/ui/ext/@material/textfield/icon/constants.js
var t17 = { ICON_EVENT: "MDCTextField:icon", ICON_ROLE: "button" };
var e25 = { ROOT: "mdc-text-field__icon" };

// node_modules/@cosmograph/ui/ext/@material/textfield/icon/foundation.js
var o12 = ["click", "keydown"];
var s10 = function(n17) {
  function s15(t23) {
    var r14 = n17.call(this, o8(o8({}, s15.defaultAdapter), t23)) || this;
    return r14.savedTabIndex = null, r14.interactionHandler = function(t24) {
      r14.handleInteraction(t24);
    }, r14;
  }
  return t9(s15, n17), Object.defineProperty(s15, "strings", { get: function() {
    return t17;
  }, enumerable: false, configurable: true }), Object.defineProperty(s15, "cssClasses", { get: function() {
    return e25;
  }, enumerable: false, configurable: true }), Object.defineProperty(s15, "defaultAdapter", { get: function() {
    return { getAttr: function() {
      return null;
    }, setAttr: function() {
    }, removeAttr: function() {
    }, setContent: function() {
    }, registerInteractionHandler: function() {
    }, deregisterInteractionHandler: function() {
    }, notifyIconAction: function() {
    } };
  }, enumerable: false, configurable: true }), s15.prototype.init = function() {
    var t23, e36;
    this.savedTabIndex = this.adapter.getAttr("tabindex");
    try {
      for (var n18 = n7(o12), a13 = n18.next(); !a13.done; a13 = n18.next()) {
        var i11 = a13.value;
        this.adapter.registerInteractionHandler(i11, this.interactionHandler);
      }
    } catch (e37) {
      t23 = { error: e37 };
    } finally {
      try {
        a13 && !a13.done && (e36 = n18.return) && e36.call(n18);
      } finally {
        if (t23) throw t23.error;
      }
    }
  }, s15.prototype.destroy = function() {
    var t23, e36;
    try {
      for (var n18 = n7(o12), a13 = n18.next(); !a13.done; a13 = n18.next()) {
        var i11 = a13.value;
        this.adapter.deregisterInteractionHandler(i11, this.interactionHandler);
      }
    } catch (e37) {
      t23 = { error: e37 };
    } finally {
      try {
        a13 && !a13.done && (e36 = n18.return) && e36.call(n18);
      } finally {
        if (t23) throw t23.error;
      }
    }
  }, s15.prototype.setDisabled = function(t23) {
    this.savedTabIndex && (t23 ? (this.adapter.setAttr("tabindex", "-1"), this.adapter.removeAttr("role")) : (this.adapter.setAttr("tabindex", this.savedTabIndex), this.adapter.setAttr("role", t17.ICON_ROLE)));
  }, s15.prototype.setAriaLabel = function(t23) {
    this.adapter.setAttr("aria-label", t23);
  }, s15.prototype.setContent = function(t23) {
    this.adapter.setContent(t23);
  }, s15.prototype.handleInteraction = function(t23) {
    var e36 = "Enter" === t23.key || 13 === t23.keyCode;
    ("click" === t23.type || e36) && (t23.preventDefault(), this.adapter.notifyIconAction());
  }, s15;
}(e12);

// node_modules/@cosmograph/ui/ext/@smui/textfield/dist/icon/Icon.svelte.js
function C7(t23) {
  let e36;
  return { c() {
    e36 = O(t23[7]);
  }, m(t24, n17) {
    w2(t24, e36, n17);
  }, p(t24, n17) {
    128 & n17 && B(e36, t24[7]);
  }, i: t5, o: t5, d(t24) {
    t24 && v(e36);
  } };
}
function F4(t23) {
  let e36;
  const n17 = t23[15].default, i11 = l(n17, t23, t23[14], null);
  return { c() {
    i11 && i11.c();
  }, m(t24, n18) {
    i11 && i11.m(t24, n18), e36 = true;
  }, p(t24, l6) {
    i11 && i11.p && (!e36 || 16384 & l6) && h(i11, n17, t24, t24[14], e36 ? d2(n17, t24[14], l6, null) : p2(t24[14]), null);
  }, i(t24) {
    e36 || (bt(i11, t24), e36 = true);
  }, o(t24) {
    mt(i11, t24), e36 = false;
  }, d(t24) {
    i11 && i11.d(t24);
  } };
}
function k3(t23) {
  let e36, n17, g2, b5, $2, v3, I8, _7, h6, j6;
  const M3 = [F4, C7], T7 = [];
  function A5(t24, e37) {
    return null == t24[7] ? 0 : 1;
  }
  n17 = A5(t23), g2 = T7[n17] = M3[n17](t23);
  let E8 = [{ class: b5 = e8({ [t23[1]]: true, "mdc-text-field__icon": true, "mdc-text-field__icon--leading": t23[11], "mdc-text-field__icon--trailing": !t23[11] }) }, { "aria-hidden": $2 = -1 === t23[3] ? "true" : "false" }, { "aria-disabled": v3 = "button" === t23[2] ? t23[4] ? "true" : "false" : void 0 }, t23[8], t23[6], t23[12]], S4 = {};
  for (let t24 = 0; t24 < E8.length; t24 += 1) S4 = n5(S4, E8[t24]);
  return { c() {
    e36 = k("i"), g2.c(), P(e36, S4);
  }, m(i11, l6) {
    w2(i11, e36, l6), T7[n17].m(e36, null), t23[16](e36), _7 = true, h6 || (j6 = [m(I8 = t8.call(null, e36, t23[0])), m(t23[9].call(null, e36))], h6 = true);
  }, p(t24, [i11]) {
    let l6 = n17;
    n17 = A5(t24), n17 === l6 ? T7[n17].p(t24, i11) : (yt(), mt(T7[l6], 1, 1, () => {
      T7[l6] = null;
    }), gt(), g2 = T7[n17], g2 ? g2.p(t24, i11) : (g2 = T7[n17] = M3[n17](t24), g2.c()), bt(g2, 1), g2.m(e36, null)), P(e36, S4 = vt(E8, [(!_7 || 2 & i11 && b5 !== (b5 = e8({ [t24[1]]: true, "mdc-text-field__icon": true, "mdc-text-field__icon--leading": t24[11], "mdc-text-field__icon--trailing": !t24[11] }))) && { class: b5 }, (!_7 || 8 & i11 && $2 !== ($2 = -1 === t24[3] ? "true" : "false")) && { "aria-hidden": $2 }, (!_7 || 20 & i11 && v3 !== (v3 = "button" === t24[2] ? t24[4] ? "true" : "false" : void 0)) && { "aria-disabled": v3 }, 256 & i11 && t24[8], 64 & i11 && t24[6], 4096 & i11 && t24[12]])), I8 && c5(I8.update) && 1 & i11 && I8.update.call(null, t24[0]);
  }, i(t24) {
    _7 || (bt(g2), _7 = true);
  }, o(t24) {
    mt(g2), _7 = false;
  }, d(i11) {
    i11 && v(e36), T7[n17].d(), t23[16](null), h6 = false, r3(j6);
  } };
}
function q5(t23, e36, n17) {
  let l6;
  const o22 = ["use", "class", "role", "tabindex", "disabled", "getElement"];
  let d13, r14 = y(e36, o22), { $$slots: s15 = {}, $$scope: a13 } = e36;
  const c11 = n6(Q());
  let u8, m6, { use: f6 = [] } = e36, { class: p5 = "" } = e36, { role: x3 } = e36, { tabindex: j6 = "button" === x3 ? 0 : -1 } = e36, { disabled: M3 = false } = e36, T7 = {};
  const A5 = X("SMUI:textfield:icon:leading");
  s7(t23, A5, (t24) => n17(18, d13 = t24));
  const E8 = d13;
  let S4;
  function U6(t24) {
    var e37;
    return t24 in T7 ? null !== (e37 = T7[t24]) && void 0 !== e37 ? e37 : null : C9().getAttribute(t24);
  }
  function L3(t24, e37) {
    T7[t24] !== e37 && n17(6, T7[t24] = e37, T7);
  }
  function H3(t24) {
    t24 in T7 && null == T7[t24] || n17(6, T7[t24] = void 0, T7);
  }
  function C9() {
    return u8;
  }
  return R(() => (m6 = new s10({ getAttr: U6, setAttr: L3, removeAttr: H3, setContent: (t24) => {
    n17(7, S4 = t24);
  }, registerInteractionHandler: (t24, e37) => C9().addEventListener(t24, e37), deregisterInteractionHandler: (t24, e37) => C9().removeEventListener(t24, e37), notifyIconAction: () => e9(C9(), "SMUITextField:icon", void 0, void 0, true) }), e9(C9(), E8 ? "SMUITextfieldLeadingIcon:mount" : "SMUITextfieldTrailingIcon:mount", m6), m6.init(), () => {
    e9(C9(), E8 ? "SMUITextfieldLeadingIcon:unmount" : "SMUITextfieldTrailingIcon:unmount", m6), m6.destroy();
  })), t23.$$set = (t24) => {
    e36 = n5(n5({}, e36), $(t24)), n17(12, r14 = y(e36, o22)), "use" in t24 && n17(0, f6 = t24.use), "class" in t24 && n17(1, p5 = t24.class), "role" in t24 && n17(2, x3 = t24.role), "tabindex" in t24 && n17(3, j6 = t24.tabindex), "disabled" in t24 && n17(4, M3 = t24.disabled), "$$scope" in t24 && n17(14, a13 = t24.$$scope);
  }, t23.$$.update = () => {
    12 & t23.$$.dirty && n17(8, l6 = { role: x3, tabindex: j6 });
  }, [f6, p5, x3, j6, M3, u8, T7, S4, l6, c11, A5, E8, r14, C9, a13, s15, function(t24) {
    tt[t24 ? "unshift" : "push"](() => {
      u8 = t24, n17(5, u8);
    });
  }];
}
var z4 = class extends Mt {
  constructor(t23) {
    super(), At(this, t23, q5, k3, u3, { use: 0, class: 1, role: 2, tabindex: 3, disabled: 4, getElement: 13 });
  }
  get getElement() {
    return this.$$.ctx[13];
  }
};

// node_modules/@cosmograph/ui/ext/@material/menu-surface/constants.js
var T5;
var O7;
var e26 = { ANCHOR: "mdc-menu-surface--anchor", ANIMATING_CLOSED: "mdc-menu-surface--animating-closed", ANIMATING_OPEN: "mdc-menu-surface--animating-open", FIXED: "mdc-menu-surface--fixed", IS_OPEN_BELOW: "mdc-menu-surface--is-open-below", OPEN: "mdc-menu-surface--open", ROOT: "mdc-menu-surface" };
var E6 = { CLOSED_EVENT: "MDCMenuSurface:closed", CLOSING_EVENT: "MDCMenuSurface:closing", OPENED_EVENT: "MDCMenuSurface:opened", OPENING_EVENT: "MDCMenuSurface:opening", FOCUSABLE_ELEMENTS: ["button:not(:disabled)", '[href]:not([aria-disabled="true"])', "input:not(:disabled)", "select:not(:disabled)", "textarea:not(:disabled)", '[tabindex]:not([tabindex="-1"]):not([aria-disabled="true"])'].join(", ") };
var _5 = { TRANSITION_OPEN_DURATION: 120, TRANSITION_CLOSE_DURATION: 75, MARGIN_TO_EDGE: 32, ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO: 0.67, TOUCH_EVENT_WAIT_MS: 30 };
!function(T7) {
  T7[T7.BOTTOM = 1] = "BOTTOM", T7[T7.CENTER = 2] = "CENTER", T7[T7.RIGHT = 4] = "RIGHT", T7[T7.FLIP_RTL = 8] = "FLIP_RTL";
}(T5 || (T5 = {})), function(T7) {
  T7[T7.TOP_LEFT = 0] = "TOP_LEFT", T7[T7.TOP_RIGHT = 4] = "TOP_RIGHT", T7[T7.BOTTOM_LEFT = 1] = "BOTTOM_LEFT", T7[T7.BOTTOM_RIGHT = 5] = "BOTTOM_RIGHT", T7[T7.TOP_START = 8] = "TOP_START", T7[T7.TOP_END = 12] = "TOP_END", T7[T7.BOTTOM_START = 9] = "BOTTOM_START", T7[T7.BOTTOM_END = 13] = "BOTTOM_END";
}(O7 || (O7 = {}));

// node_modules/@cosmograph/ui/ext/@material/menu-surface/foundation.js
var c7 = function(n17) {
  function c11(t23) {
    var e36 = n17.call(this, o8(o8({}, c11.defaultAdapter), t23)) || this;
    return e36.isSurfaceOpen = false, e36.isQuickOpen = false, e36.isHoistedElement = false, e36.isFixedPosition = false, e36.isHorizontallyCenteredOnViewport = false, e36.maxHeight = 0, e36.openBottomBias = 0, e36.openAnimationEndTimerId = 0, e36.closeAnimationEndTimerId = 0, e36.animationRequestId = 0, e36.anchorCorner = O7.TOP_START, e36.originCorner = O7.TOP_START, e36.anchorMargin = { top: 0, right: 0, bottom: 0, left: 0 }, e36.position = { x: 0, y: 0 }, e36;
  }
  return t9(c11, n17), Object.defineProperty(c11, "cssClasses", { get: function() {
    return e26;
  }, enumerable: false, configurable: true }), Object.defineProperty(c11, "strings", { get: function() {
    return E6;
  }, enumerable: false, configurable: true }), Object.defineProperty(c11, "numbers", { get: function() {
    return _5;
  }, enumerable: false, configurable: true }), Object.defineProperty(c11, "Corner", { get: function() {
    return O7;
  }, enumerable: false, configurable: true }), Object.defineProperty(c11, "defaultAdapter", { get: function() {
    return { addClass: function() {
    }, removeClass: function() {
    }, hasClass: function() {
      return false;
    }, hasAnchor: function() {
      return false;
    }, isElementInContainer: function() {
      return false;
    }, isFocused: function() {
      return false;
    }, isRtl: function() {
      return false;
    }, getInnerDimensions: function() {
      return { height: 0, width: 0 };
    }, getAnchorDimensions: function() {
      return null;
    }, getWindowDimensions: function() {
      return { height: 0, width: 0 };
    }, getBodyDimensions: function() {
      return { height: 0, width: 0 };
    }, getWindowScroll: function() {
      return { x: 0, y: 0 };
    }, setPosition: function() {
    }, setMaxHeight: function() {
    }, setTransformOrigin: function() {
    }, saveFocus: function() {
    }, restoreFocus: function() {
    }, notifyClose: function() {
    }, notifyClosing: function() {
    }, notifyOpen: function() {
    }, notifyOpening: function() {
    } };
  }, enumerable: false, configurable: true }), c11.prototype.init = function() {
    var t23 = c11.cssClasses, i11 = t23.ROOT, e36 = t23.OPEN;
    if (!this.adapter.hasClass(i11)) throw new Error(i11 + " class required in root element.");
    this.adapter.hasClass(e36) && (this.isSurfaceOpen = true);
  }, c11.prototype.destroy = function() {
    clearTimeout(this.openAnimationEndTimerId), clearTimeout(this.closeAnimationEndTimerId), cancelAnimationFrame(this.animationRequestId);
  }, c11.prototype.setAnchorCorner = function(t23) {
    this.anchorCorner = t23;
  }, c11.prototype.flipCornerHorizontally = function() {
    this.originCorner = this.originCorner ^ T5.RIGHT;
  }, c11.prototype.setAnchorMargin = function(t23) {
    this.anchorMargin.top = t23.top || 0, this.anchorMargin.right = t23.right || 0, this.anchorMargin.bottom = t23.bottom || 0, this.anchorMargin.left = t23.left || 0;
  }, c11.prototype.setIsHoisted = function(t23) {
    this.isHoistedElement = t23;
  }, c11.prototype.setFixedPosition = function(t23) {
    this.isFixedPosition = t23;
  }, c11.prototype.isFixed = function() {
    return this.isFixedPosition;
  }, c11.prototype.setAbsolutePosition = function(t23, i11) {
    this.position.x = this.isFinite(t23) ? t23 : 0, this.position.y = this.isFinite(i11) ? i11 : 0;
  }, c11.prototype.setIsHorizontallyCenteredOnViewport = function(t23) {
    this.isHorizontallyCenteredOnViewport = t23;
  }, c11.prototype.setQuickOpen = function(t23) {
    this.isQuickOpen = t23;
  }, c11.prototype.setMaxHeight = function(t23) {
    this.maxHeight = t23;
  }, c11.prototype.setOpenBottomBias = function(t23) {
    this.openBottomBias = t23;
  }, c11.prototype.isOpen = function() {
    return this.isSurfaceOpen;
  }, c11.prototype.open = function() {
    var t23 = this;
    this.isSurfaceOpen || (this.adapter.notifyOpening(), this.adapter.saveFocus(), this.isQuickOpen ? (this.isSurfaceOpen = true, this.adapter.addClass(c11.cssClasses.OPEN), this.dimensions = this.adapter.getInnerDimensions(), this.autoposition(), this.adapter.notifyOpen()) : (this.adapter.addClass(c11.cssClasses.ANIMATING_OPEN), this.animationRequestId = requestAnimationFrame(function() {
      t23.dimensions = t23.adapter.getInnerDimensions(), t23.autoposition(), t23.adapter.addClass(c11.cssClasses.OPEN), t23.openAnimationEndTimerId = setTimeout(function() {
        t23.openAnimationEndTimerId = 0, t23.adapter.removeClass(c11.cssClasses.ANIMATING_OPEN), t23.adapter.notifyOpen();
      }, _5.TRANSITION_OPEN_DURATION);
    }), this.isSurfaceOpen = true));
  }, c11.prototype.close = function(t23) {
    var i11 = this;
    if (void 0 === t23 && (t23 = false), this.isSurfaceOpen) {
      if (this.adapter.notifyClosing(), this.isQuickOpen) return this.isSurfaceOpen = false, t23 || this.maybeRestoreFocus(), this.adapter.removeClass(c11.cssClasses.OPEN), this.adapter.removeClass(c11.cssClasses.IS_OPEN_BELOW), void this.adapter.notifyClose();
      this.adapter.addClass(c11.cssClasses.ANIMATING_CLOSED), requestAnimationFrame(function() {
        i11.adapter.removeClass(c11.cssClasses.OPEN), i11.adapter.removeClass(c11.cssClasses.IS_OPEN_BELOW), i11.closeAnimationEndTimerId = setTimeout(function() {
          i11.closeAnimationEndTimerId = 0, i11.adapter.removeClass(c11.cssClasses.ANIMATING_CLOSED), i11.adapter.notifyClose();
        }, _5.TRANSITION_CLOSE_DURATION);
      }), this.isSurfaceOpen = false, t23 || this.maybeRestoreFocus();
    }
  }, c11.prototype.handleBodyClick = function(t23) {
    var i11 = t23.target;
    this.adapter.isElementInContainer(i11) || this.close();
  }, c11.prototype.handleKeydown = function(t23) {
    var i11 = t23.keyCode;
    ("Escape" === t23.key || 27 === i11) && this.close();
  }, c11.prototype.autoposition = function() {
    var t23;
    this.measurements = this.getAutoLayoutmeasurements();
    var i11 = this.getoriginCorner(), e36 = this.getMenuSurfaceMaxHeight(i11), n18 = this.hasBit(i11, T5.BOTTOM) ? "bottom" : "top", s15 = this.hasBit(i11, T5.RIGHT) ? "right" : "left", o22 = this.getHorizontalOriginOffset(i11), r14 = this.getVerticalOriginOffset(i11), u8 = this.measurements, p5 = u8.anchorSize, d13 = u8.surfaceSize, f6 = ((t23 = {})[s15] = o22, t23[n18] = r14, t23);
    p5.width / d13.width > _5.ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO && (s15 = "center"), (this.isHoistedElement || this.isFixedPosition) && this.adjustPositionForHoistedElement(f6), this.adapter.setTransformOrigin(s15 + " " + n18), this.adapter.setPosition(f6), this.adapter.setMaxHeight(e36 ? e36 + "px" : ""), this.hasBit(i11, T5.BOTTOM) || this.adapter.addClass(c11.cssClasses.IS_OPEN_BELOW);
  }, c11.prototype.getAutoLayoutmeasurements = function() {
    var t23 = this.adapter.getAnchorDimensions(), i11 = this.adapter.getBodyDimensions(), e36 = this.adapter.getWindowDimensions(), n18 = this.adapter.getWindowScroll();
    return t23 || (t23 = { top: this.position.y, right: this.position.x, bottom: this.position.y, left: this.position.x, width: 0, height: 0 }), { anchorSize: t23, bodySize: i11, surfaceSize: this.dimensions, viewportDistance: { top: t23.top, right: e36.width - t23.right, bottom: e36.height - t23.bottom, left: t23.left }, viewportSize: e36, windowScroll: n18 };
  }, c11.prototype.getoriginCorner = function() {
    var t23, i11, e36 = this.originCorner, n18 = this.measurements, s15 = n18.viewportDistance, o22 = n18.anchorSize, r14 = n18.surfaceSize, a13 = c11.numbers.MARGIN_TO_EDGE;
    this.hasBit(this.anchorCorner, T5.BOTTOM) ? (t23 = s15.top - a13 + this.anchorMargin.bottom, i11 = s15.bottom - a13 - this.anchorMargin.bottom) : (t23 = s15.top - a13 + this.anchorMargin.top, i11 = s15.bottom - a13 + o22.height - this.anchorMargin.top), !(i11 - r14.height > 0) && t23 > i11 + this.openBottomBias && (e36 = this.setBit(e36, T5.BOTTOM));
    var u8, p5, d13 = this.adapter.isRtl(), f6 = this.hasBit(this.anchorCorner, T5.FLIP_RTL), m6 = this.hasBit(this.anchorCorner, T5.RIGHT) || this.hasBit(e36, T5.RIGHT), l6 = false;
    (l6 = d13 && f6 ? !m6 : m6) ? (u8 = s15.left + o22.width + this.anchorMargin.right, p5 = s15.right - this.anchorMargin.right) : (u8 = s15.left + this.anchorMargin.left, p5 = s15.right + o22.width - this.anchorMargin.left);
    var g2 = u8 - r14.width > 0, O8 = p5 - r14.width > 0, y3 = this.hasBit(e36, T5.FLIP_RTL) && this.hasBit(e36, T5.RIGHT);
    return O8 && y3 && d13 || !g2 && y3 ? e36 = this.unsetBit(e36, T5.RIGHT) : (g2 && l6 && d13 || g2 && !l6 && m6 || !O8 && u8 >= p5) && (e36 = this.setBit(e36, T5.RIGHT)), e36;
  }, c11.prototype.getMenuSurfaceMaxHeight = function(t23) {
    if (this.maxHeight > 0) return this.maxHeight;
    var i11 = this.measurements.viewportDistance, e36 = 0, n18 = this.hasBit(t23, T5.BOTTOM), s15 = this.hasBit(this.anchorCorner, T5.BOTTOM), o22 = c11.numbers.MARGIN_TO_EDGE;
    return n18 ? (e36 = i11.top + this.anchorMargin.top - o22, s15 || (e36 += this.measurements.anchorSize.height)) : (e36 = i11.bottom - this.anchorMargin.bottom + this.measurements.anchorSize.height - o22, s15 && (e36 -= this.measurements.anchorSize.height)), e36;
  }, c11.prototype.getHorizontalOriginOffset = function(t23) {
    var i11 = this.measurements.anchorSize, e36 = this.hasBit(t23, T5.RIGHT), n18 = this.hasBit(this.anchorCorner, T5.RIGHT);
    if (e36) {
      var s15 = n18 ? i11.width - this.anchorMargin.left : this.anchorMargin.right;
      return this.isHoistedElement || this.isFixedPosition ? s15 - (this.measurements.viewportSize.width - this.measurements.bodySize.width) : s15;
    }
    return n18 ? i11.width - this.anchorMargin.right : this.anchorMargin.left;
  }, c11.prototype.getVerticalOriginOffset = function(t23) {
    var i11 = this.measurements.anchorSize, e36 = this.hasBit(t23, T5.BOTTOM), n18 = this.hasBit(this.anchorCorner, T5.BOTTOM);
    return e36 ? n18 ? i11.height - this.anchorMargin.top : -this.anchorMargin.bottom : n18 ? i11.height + this.anchorMargin.bottom : this.anchorMargin.top;
  }, c11.prototype.adjustPositionForHoistedElement = function(t23) {
    var i11, n18, s15 = this.measurements, o22 = s15.windowScroll, r14 = s15.viewportDistance, a13 = s15.surfaceSize, h6 = s15.viewportSize, c12 = Object.keys(t23);
    try {
      for (var u8 = n7(c12), p5 = u8.next(); !p5.done; p5 = u8.next()) {
        var d13 = p5.value, f6 = t23[d13] || 0;
        !this.isHorizontallyCenteredOnViewport || "left" !== d13 && "right" !== d13 ? (f6 += r14[d13], this.isFixedPosition || ("top" === d13 ? f6 += o22.y : "bottom" === d13 ? f6 -= o22.y : "left" === d13 ? f6 += o22.x : f6 -= o22.x), t23[d13] = f6) : t23[d13] = (h6.width - a13.width) / 2;
      }
    } catch (t24) {
      i11 = { error: t24 };
    } finally {
      try {
        p5 && !p5.done && (n18 = u8.return) && n18.call(u8);
      } finally {
        if (i11) throw i11.error;
      }
    }
  }, c11.prototype.maybeRestoreFocus = function() {
    var t23 = this, i11 = this.adapter.isFocused(), e36 = this.adapter.getOwnerDocument ? this.adapter.getOwnerDocument() : document, n18 = e36.activeElement && this.adapter.isElementInContainer(e36.activeElement);
    (i11 || n18) && setTimeout(function() {
      t23.adapter.restoreFocus();
    }, _5.TOUCH_EVENT_WAIT_MS);
  }, c11.prototype.hasBit = function(t23, i11) {
    return Boolean(t23 & i11);
  }, c11.prototype.setBit = function(t23, i11) {
    return t23 | i11;
  }, c11.prototype.unsetBit = function(t23, i11) {
    return t23 ^ i11;
  }, c11.prototype.isFinite = function(t23) {
    return "number" == typeof t23 && isFinite(t23);
  }, c11;
}(e12);

// node_modules/@cosmograph/ui/ext/@smui/menu-surface/dist/MenuSurface.svelte.js
var { document: W4 } = _;
function k4(e36) {
  let n17, t23, x3, O8, w3, C9, M3, E8;
  const B4 = e36[34].default, H3 = l(B4, e36, e36[33], null);
  let I8 = [{ class: x3 = e8({ [e36[1]]: true, "mdc-menu-surface": true, "mdc-menu-surface--fixed": e36[4], "mdc-menu-surface--open": e36[3], "smui-menu-surface--static": e36[3], "mdc-menu-surface--fullwidth": e36[5], ...e36[8] }) }, { style: O8 = Object.entries(e36[9]).map(P5).concat([e36[2]]).join(" ") }, e36[12]], S4 = {};
  for (let e37 = 0; e37 < I8.length; e37 += 1) S4 = n5(S4, I8[e37]);
  return { c() {
    n17 = j(), t23 = k("div"), H3 && H3.c(), P(t23, S4);
  }, m(i11, o22) {
    w2(i11, n17, o22), w2(i11, t23, o22), H3 && H3.m(t23, null), e36[35](t23), C9 = true, M3 || (E8 = [A(W4.body, "click", e36[11], true), m(w3 = t8.call(null, t23, e36[0])), m(e36[10].call(null, t23)), A(t23, "keydown", function() {
      c5(e36[7] && e36[7].handleKeydown.bind(e36[7])) && (e36[7] && e36[7].handleKeydown.bind(e36[7])).apply(this, arguments);
    })], M3 = true);
  }, p(n18, i11) {
    e36 = n18, H3 && H3.p && (!C9 || 4 & i11[1]) && h(H3, B4, e36, e36[33], C9 ? d2(B4, e36[33], i11, null) : p2(e36[33]), null), P(t23, S4 = vt(I8, [(!C9 || 314 & i11[0] && x3 !== (x3 = e8({ [e36[1]]: true, "mdc-menu-surface": true, "mdc-menu-surface--fixed": e36[4], "mdc-menu-surface--open": e36[3], "smui-menu-surface--static": e36[3], "mdc-menu-surface--fullwidth": e36[5], ...e36[8] }))) && { class: x3 }, (!C9 || 516 & i11[0] && O8 !== (O8 = Object.entries(e36[9]).map(P5).concat([e36[2]]).join(" "))) && { style: O8 }, 4096 & i11[0] && e36[12]])), w3 && c5(w3.update) && 1 & i11[0] && w3.update.call(null, e36[0]);
  }, i(e37) {
    C9 || (bt(H3, e37), C9 = true);
  }, o(e37) {
    mt(H3, e37), C9 = false;
  }, d(i11) {
    i11 && v(n17), i11 && v(t23), H3 && H3.d(i11), e36[35](null), M3 = false, r3(E8);
  } };
}
var P5 = ([e36, n17]) => `${e36}: ${n17};`;
function R6(e36, n17, t23) {
  const i11 = ["use", "class", "style", "static", "anchor", "fixed", "open", "managed", "fullWidth", "quickOpen", "anchorElement", "anchorCorner", "anchorMargin", "maxHeight", "horizontallyCenteredOnViewport", "openBottomBias", "neverRestoreFocus", "isOpen", "setOpen", "setAbsolutePosition", "setIsHoisted", "isFixed", "getElement"];
  let s15 = y(n17, i11), { $$slots: r14 = {}, $$scope: c11 } = n17;
  var a13, l6, u8;
  const d13 = n6(Q());
  let m6, h6, f6, { use: p5 = [] } = n17, { class: g2 = "" } = n17, { style: $2 = "" } = n17, { static: y3 = false } = n17, { anchor: v3 = true } = n17, { fixed: B4 = false } = n17, { open: b5 = y3 } = n17, { managed: F6 = false } = n17, { fullWidth: W6 = false } = n17, { quickOpen: k5 = false } = n17, { anchorElement: P6 } = n17, { anchorCorner: R7 } = n17, { anchorMargin: U6 = { top: 0, right: 0, bottom: 0, left: 0 } } = n17, { maxHeight: V2 = 0 } = n17, { horizontallyCenteredOnViewport: z5 = false } = n17, { openBottomBias: q6 = 0 } = n17, { neverRestoreFocus: D4 = false } = n17, L3 = {}, K3 = {};
  W("SMUI:list:role", "menu"), W("SMUI:list:item:role", "menuitem");
  const N6 = O7;
  function Q3(e37) {
    return e37 in L3 ? L3[e37] : G5().classList.contains(e37);
  }
  function T7(e37) {
    L3[e37] || t23(8, L3[e37] = true, L3);
  }
  function X3(e37) {
    e37 in L3 && !L3[e37] || t23(8, L3[e37] = false, L3);
  }
  function Y3(e37) {
    h6.close(e37), t23(13, b5 = false);
  }
  function G5() {
    return m6;
  }
  return R(() => {
    t23(7, h6 = new c7({ addClass: T7, removeClass: X3, hasClass: Q3, hasAnchor: () => !!P6, notifyClose: () => {
      F6 || t23(13, b5 = y3), b5 || e9(m6, "SMUIMenuSurface:closed", void 0, void 0, true);
    }, notifyClosing: () => {
      F6 || t23(13, b5 = y3), b5 || e9(m6, "SMUIMenuSurface:closing", void 0, void 0, true);
    }, notifyOpen: () => {
      F6 || t23(13, b5 = true), b5 && e9(m6, "SMUIMenuSurface:opened", void 0, void 0, true);
    }, notifyOpening: () => {
      b5 || e9(m6, "SMUIMenuSurface:opening", void 0, void 0, true);
    }, isElementInContainer: (e37) => m6.contains(e37), isRtl: () => "rtl" === getComputedStyle(m6).getPropertyValue("direction"), setTransformOrigin: (e37) => {
      t23(9, K3["transform-origin"] = e37, K3);
    }, isFocused: () => document.activeElement === m6, saveFocus: () => {
      var e37;
      f6 = null !== (e37 = document.activeElement) && void 0 !== e37 ? e37 : void 0;
    }, restoreFocus: () => {
      !D4 && (!m6 || m6.contains(document.activeElement)) && f6 && document.contains(f6) && "focus" in f6 && f6.focus();
    }, getInnerDimensions: () => ({ width: m6.offsetWidth, height: m6.offsetHeight }), getAnchorDimensions: () => P6 ? P6.getBoundingClientRect() : null, getWindowDimensions: () => ({ width: window.innerWidth, height: window.innerHeight }), getBodyDimensions: () => ({ width: document.body.clientWidth, height: document.body.clientHeight }), getWindowScroll: () => ({ x: window.pageXOffset, y: window.pageYOffset }), setPosition: (e37) => {
      t23(9, K3.left = "left" in e37 ? `${e37.left}px` : "", K3), t23(9, K3.right = "right" in e37 ? `${e37.right}px` : "", K3), t23(9, K3.top = "top" in e37 ? `${e37.top}px` : "", K3), t23(9, K3.bottom = "bottom" in e37 ? `${e37.bottom}px` : "", K3);
    }, setMaxHeight: (e37) => {
      t23(9, K3["max-height"] = e37, K3);
    } }));
    return e9(m6, "SMUIMenuSurface:mount", { get open() {
      return b5;
    }, set open(e37) {
      t23(13, b5 = e37);
    }, closeProgrammatic: Y3 }), h6.init(), () => {
      var e37;
      const n18 = h6.isHoistedElement;
      h6.destroy(), n18 && (null === (e37 = m6.parentNode) || void 0 === e37 || e37.removeChild(m6));
    };
  }), U(() => {
    var e37;
    v3 && m6 && (null === (e37 = m6.parentElement) || void 0 === e37 || e37.classList.remove("mdc-menu-surface--anchor"));
  }), e36.$$set = (e37) => {
    n17 = n5(n5({}, n17), $(e37)), t23(12, s15 = y(n17, i11)), "use" in e37 && t23(0, p5 = e37.use), "class" in e37 && t23(1, g2 = e37.class), "style" in e37 && t23(2, $2 = e37.style), "static" in e37 && t23(3, y3 = e37.static), "anchor" in e37 && t23(15, v3 = e37.anchor), "fixed" in e37 && t23(4, B4 = e37.fixed), "open" in e37 && t23(13, b5 = e37.open), "managed" in e37 && t23(16, F6 = e37.managed), "fullWidth" in e37 && t23(5, W6 = e37.fullWidth), "quickOpen" in e37 && t23(17, k5 = e37.quickOpen), "anchorElement" in e37 && t23(14, P6 = e37.anchorElement), "anchorCorner" in e37 && t23(18, R7 = e37.anchorCorner), "anchorMargin" in e37 && t23(19, U6 = e37.anchorMargin), "maxHeight" in e37 && t23(20, V2 = e37.maxHeight), "horizontallyCenteredOnViewport" in e37 && t23(21, z5 = e37.horizontallyCenteredOnViewport), "openBottomBias" in e37 && t23(22, q6 = e37.openBottomBias), "neverRestoreFocus" in e37 && t23(23, D4 = e37.neverRestoreFocus), "$$scope" in e37 && t23(33, c11 = e37.$$scope);
  }, e36.$$.update = () => {
    1073774656 & e36.$$.dirty[0] | 3 & e36.$$.dirty[1] && m6 && v3 && !(null === t23(30, a13 = m6.parentElement) || void 0 === a13 ? void 0 : a13.classList.contains("mdc-menu-surface--anchor")) && (null === t23(31, l6 = m6.parentElement) || void 0 === l6 || l6.classList.add("mdc-menu-surface--anchor"), t23(14, P6 = null !== t23(32, u8 = m6.parentElement) && void 0 !== u8 ? u8 : void 0)), 8320 & e36.$$.dirty[0] && h6 && h6.isOpen() !== b5 && (b5 ? h6.open() : h6.close()), 131200 & e36.$$.dirty[0] && h6 && h6.setQuickOpen(k5), 144 & e36.$$.dirty[0] && h6 && h6.setFixedPosition(B4), 1048704 & e36.$$.dirty[0] && h6 && h6.setMaxHeight(V2), 2097280 & e36.$$.dirty[0] && h6 && h6.setIsHorizontallyCenteredOnViewport(z5), 262272 & e36.$$.dirty[0] && h6 && null != R7 && ("string" == typeof R7 ? h6.setAnchorCorner(N6[R7]) : h6.setAnchorCorner(R7)), 524416 & e36.$$.dirty[0] && h6 && h6.setAnchorMargin(U6), 4194432 & e36.$$.dirty[0] && h6 && h6.setOpenBottomBias(q6);
  }, [p5, g2, $2, y3, B4, W6, m6, h6, L3, K3, d13, function(e37) {
    h6 && b5 && !F6 && h6.handleBodyClick(e37);
  }, s15, b5, P6, v3, F6, k5, R7, U6, V2, z5, q6, D4, function() {
    return b5;
  }, function(e37) {
    t23(13, b5 = e37);
  }, function(e37, n18) {
    return h6.setAbsolutePosition(e37, n18);
  }, function(e37) {
    return h6.setIsHoisted(e37);
  }, function() {
    return h6.isFixed();
  }, G5, a13, l6, u8, c11, r14, function(e37) {
    tt[e37 ? "unshift" : "push"](() => {
      m6 = e37, t23(6, m6);
    });
  }];
}
var U5 = class extends Mt {
  constructor(e36) {
    super(), At(this, e36, R6, k4, u3, { use: 0, class: 1, style: 2, static: 3, anchor: 15, fixed: 4, open: 13, managed: 16, fullWidth: 5, quickOpen: 17, anchorElement: 14, anchorCorner: 18, anchorMargin: 19, maxHeight: 20, horizontallyCenteredOnViewport: 21, openBottomBias: 22, neverRestoreFocus: 23, isOpen: 24, setOpen: 25, setAbsolutePosition: 26, setIsHoisted: 27, isFixed: 28, getElement: 29 }, null, [-1, -1]);
  }
  get isOpen() {
    return this.$$.ctx[24];
  }
  get setOpen() {
    return this.$$.ctx[25];
  }
  get setAbsolutePosition() {
    return this.$$.ctx[26];
  }
  get setIsHoisted() {
    return this.$$.ctx[27];
  }
  get isFixed() {
    return this.$$.ctx[28];
  }
  get getElement() {
    return this.$$.ctx[29];
  }
};

// node_modules/@cosmograph/ui/ext/@material/menu/constants.js
var E7;
var T6 = { MENU_SELECTED_LIST_ITEM: "mdc-menu-item--selected", MENU_SELECTION_GROUP: "mdc-menu__selection-group", ROOT: "mdc-menu" };
var e27 = { ARIA_CHECKED_ATTR: "aria-checked", ARIA_DISABLED_ATTR: "aria-disabled", CHECKBOX_SELECTOR: 'input[type="checkbox"]', LIST_SELECTOR: ".mdc-list,.mdc-deprecated-list", SELECTED_EVENT: "MDCMenu:selected", SKIP_RESTORE_FOCUS: "data-menu-item-skip-restore-focus" };
var _6 = { FOCUS_ROOT_INDEX: -1 };
!function(E8) {
  E8[E8.NONE = 0] = "NONE", E8[E8.LIST_ROOT = 1] = "LIST_ROOT", E8[E8.FIRST_ITEM = 2] = "FIRST_ITEM", E8[E8.LAST_ITEM = 3] = "LAST_ITEM";
}(E7 || (E7 = {}));

// node_modules/@cosmograph/ui/ext/@material/menu/foundation.js
var u7 = function(n17) {
  function u8(e36) {
    var r14 = n17.call(this, o8(o8({}, u8.defaultAdapter), e36)) || this;
    return r14.closeAnimationEndTimerId = 0, r14.defaultFocusState = E7.LIST_ROOT, r14.selectedIndex = -1, r14;
  }
  return t9(u8, n17), Object.defineProperty(u8, "cssClasses", { get: function() {
    return T6;
  }, enumerable: false, configurable: true }), Object.defineProperty(u8, "strings", { get: function() {
    return e27;
  }, enumerable: false, configurable: true }), Object.defineProperty(u8, "numbers", { get: function() {
    return _6;
  }, enumerable: false, configurable: true }), Object.defineProperty(u8, "defaultAdapter", { get: function() {
    return { addClassToElementAtIndex: function() {
    }, removeClassFromElementAtIndex: function() {
    }, addAttributeToElementAtIndex: function() {
    }, removeAttributeFromElementAtIndex: function() {
    }, getAttributeFromElementAtIndex: function() {
      return null;
    }, elementContainsClass: function() {
      return false;
    }, closeSurface: function() {
    }, getElementIndex: function() {
      return -1;
    }, notifySelected: function() {
    }, getMenuItemCount: function() {
      return 0;
    }, focusItemAtIndex: function() {
    }, focusListRoot: function() {
    }, getSelectedSiblingOfItemAtIndex: function() {
      return -1;
    }, isSelectableItemAtIndex: function() {
      return false;
    } };
  }, enumerable: false, configurable: true }), u8.prototype.destroy = function() {
    this.closeAnimationEndTimerId && clearTimeout(this.closeAnimationEndTimerId), this.adapter.closeSurface();
  }, u8.prototype.handleKeydown = function(e36) {
    var t23 = e36.key, n18 = e36.keyCode;
    ("Tab" === t23 || 9 === n18) && this.adapter.closeSurface(true);
  }, u8.prototype.handleItemAction = function(e36) {
    var t23 = this, n18 = this.adapter.getElementIndex(e36);
    if (!(n18 < 0)) {
      this.adapter.notifySelected({ index: n18 });
      var r14 = "true" === this.adapter.getAttributeFromElementAtIndex(n18, e27.SKIP_RESTORE_FOCUS);
      this.adapter.closeSurface(r14), this.closeAnimationEndTimerId = setTimeout(function() {
        var n19 = t23.adapter.getElementIndex(e36);
        n19 >= 0 && t23.adapter.isSelectableItemAtIndex(n19) && t23.setSelectedIndex(n19);
      }, c7.numbers.TRANSITION_CLOSE_DURATION);
    }
  }, u8.prototype.handleMenuSurfaceOpened = function() {
    switch (this.defaultFocusState) {
      case E7.FIRST_ITEM:
        this.adapter.focusItemAtIndex(0);
        break;
      case E7.LAST_ITEM:
        this.adapter.focusItemAtIndex(this.adapter.getMenuItemCount() - 1);
        break;
      case E7.NONE:
        break;
      default:
        this.adapter.focusListRoot();
    }
  }, u8.prototype.setDefaultFocusState = function(e36) {
    this.defaultFocusState = e36;
  }, u8.prototype.getSelectedIndex = function() {
    return this.selectedIndex;
  }, u8.prototype.setSelectedIndex = function(e36) {
    if (this.validatedIndex(e36), !this.adapter.isSelectableItemAtIndex(e36)) throw new Error("MDCMenuFoundation: No selection group at specified index.");
    var t23 = this.adapter.getSelectedSiblingOfItemAtIndex(e36);
    t23 >= 0 && (this.adapter.removeAttributeFromElementAtIndex(t23, e27.ARIA_CHECKED_ATTR), this.adapter.removeClassFromElementAtIndex(t23, T6.MENU_SELECTED_LIST_ITEM)), this.adapter.addClassToElementAtIndex(e36, T6.MENU_SELECTED_LIST_ITEM), this.adapter.addAttributeToElementAtIndex(e36, e27.ARIA_CHECKED_ATTR, "true"), this.selectedIndex = e36;
  }, u8.prototype.setEnabled = function(e36, t23) {
    this.validatedIndex(e36), t23 ? (this.adapter.removeClassFromElementAtIndex(e36, e14.LIST_ITEM_DISABLED_CLASS), this.adapter.addAttributeToElementAtIndex(e36, e27.ARIA_DISABLED_ATTR, "false")) : (this.adapter.addClassToElementAtIndex(e36, e14.LIST_ITEM_DISABLED_CLASS), this.adapter.addAttributeToElementAtIndex(e36, e27.ARIA_DISABLED_ATTR, "true"));
  }, u8.prototype.validatedIndex = function(e36) {
    var t23 = this.adapter.getMenuItemCount();
    if (!(e36 >= 0 && e36 < t23)) throw new Error("MDCMenuFoundation: No list item at specified index.");
  }, u8;
}(e12);

// node_modules/@cosmograph/ui/ext/@smui/menu/dist/Menu.svelte.js
function C8(e36) {
  let t23;
  const n17 = e36[17].default, s15 = l(n17, e36, e36[22], null);
  return { c() {
    s15 && s15.c();
  }, m(e37, n18) {
    s15 && s15.m(e37, n18), t23 = true;
  }, p(e37, o22) {
    s15 && s15.p && (!t23 || 4194304 & o22) && h(s15, n17, e37, e37[22], t23 ? d2(n17, e37[22], o22, null) : p2(e37[22]), null);
  }, i(e37) {
    t23 || (bt(s15, e37), t23 = true);
  }, o(e37) {
    mt(s15, e37), t23 = false;
  }, d(e37) {
    s15 && s15.d(e37);
  } };
}
function j5(e36) {
  let t23, n17, $2;
  const p5 = [{ use: e36[5] }, { class: e8({ [e36[1]]: true, "mdc-menu": true }) }, e36[9]];
  function x3(t24) {
    e36[19](t24);
  }
  let I8 = { $$slots: { default: [C8] }, $$scope: { ctx: e36 } };
  for (let e37 = 0; e37 < p5.length; e37 += 1) I8 = n5(I8, p5[e37]);
  return void 0 !== e36[0] && (I8.open = e36[0]), t23 = new U5({ props: I8 }), e36[18](t23), tt.push(() => Et(t23, "open", x3)), t23.$on("SMUIMenuSurface:mount", e36[7]), t23.$on("SMUIList:mount", e36[8]), t23.$on("SMUIMenuSurface:opened", e36[20]), t23.$on("keydown", e36[6]), t23.$on("SMUIList:action", e36[21]), { c() {
    Ot(t23.$$.fragment);
  }, m(e37, n18) {
    jt(t23, e37, n18), $2 = true;
  }, p(e37, [s15]) {
    const o22 = 546 & s15 ? vt(p5, [32 & s15 && { use: e37[5] }, 2 & s15 && { class: e8({ [e37[1]]: true, "mdc-menu": true }) }, 512 & s15 && kt(e37[9])]) : {};
    4194304 & s15 && (o22.$$scope = { dirty: s15, ctx: e37 }), !n17 && 1 & s15 && (n17 = true, o22.open = e37[0], ft(() => n17 = false)), t23.$set(o22);
  }, i(e37) {
    $2 || (bt(t23.$$.fragment, e37), $2 = true);
  }, o(e37) {
    mt(t23.$$.fragment, e37), $2 = false;
  }, d(n18) {
    e36[18](null), St(t23, n18);
  } };
}
function y2(e36, t23, n17) {
  let r14;
  const l6 = ["use", "class", "open", "isOpen", "setOpen", "setDefaultFocusState", "getSelectedIndex", "getMenuSurface", "getElement"];
  let u8 = y(t23, l6), { $$slots: i11 = {}, $$scope: c11 } = t23;
  const { closest: m6 } = ponyfill_exports, d13 = n6(Q());
  let a13, f6, g2, S4, { use: E8 = [] } = t23, { class: M3 = "" } = t23, { open: h6 = false } = t23;
  function F6() {
    return a13.getElement();
  }
  R(() => (n17(3, f6 = new u7({ addClassToElementAtIndex: (e37, t24) => {
    S4.addClassForElementIndex(e37, t24);
  }, removeClassFromElementAtIndex: (e37, t24) => {
    S4.removeClassForElementIndex(e37, t24);
  }, addAttributeToElementAtIndex: (e37, t24, n18) => {
    S4.setAttributeForElementIndex(e37, t24, n18);
  }, removeAttributeFromElementAtIndex: (e37, t24) => {
    S4.removeAttributeForElementIndex(e37, t24);
  }, getAttributeFromElementAtIndex: (e37, t24) => S4.getAttributeFromElementIndex(e37, t24), elementContainsClass: (e37, t24) => e37.classList.contains(t24), closeSurface: (e37) => {
    g2.closeProgrammatic(e37), e9(F6(), "SMUIMenu:closedProgrammatically");
  }, getElementIndex: (e37) => S4.getOrderedList().map((e38) => e38.element).indexOf(e37), notifySelected: (e37) => e9(F6(), "SMUIMenu:selected", { index: e37.index, item: S4.getOrderedList()[e37.index].element }, void 0, true), getMenuItemCount: () => S4.items.length, focusItemAtIndex: (e37) => S4.focusItemAtIndex(e37), focusListRoot: () => "focus" in S4.element && S4.element.focus(), isSelectableItemAtIndex: (e37) => !!m6(S4.getOrderedList()[e37].element, `.${T6.MENU_SELECTION_GROUP}`), getSelectedSiblingOfItemAtIndex: (e37) => {
    const t24 = S4.getOrderedList(), n18 = m6(t24[e37].element, `.${T6.MENU_SELECTION_GROUP}`), s15 = null == n18 ? void 0 : n18.querySelector(`.${T6.MENU_SELECTED_LIST_ITEM}`);
    return s15 ? t24.map((e38) => e38.element).indexOf(s15) : -1;
  } })), e9(F6(), "SMUIMenu:mount", f6), f6.init(), () => {
    f6.destroy();
  }));
  return e36.$$set = (e37) => {
    t23 = n5(n5({}, t23), $(e37)), n17(9, u8 = y(t23, l6)), "use" in e37 && n17(10, E8 = e37.use), "class" in e37 && n17(1, M3 = e37.class), "open" in e37 && n17(0, h6 = e37.open), "$$scope" in e37 && n17(22, c11 = e37.$$scope);
  }, e36.$$.update = () => {
    1024 & e36.$$.dirty && n17(5, r14 = [d13, ...E8]);
  }, [h6, M3, a13, f6, S4, r14, function(e37) {
    f6 && f6.handleKeydown(e37);
  }, function(e37) {
    g2 || (g2 = e37.detail);
  }, function(e37) {
    S4 || n17(4, S4 = e37.detail);
  }, u8, E8, function() {
    return h6;
  }, function(e37) {
    n17(0, h6 = e37);
  }, function(e37) {
    f6.setDefaultFocusState(e37);
  }, function() {
    return f6.getSelectedIndex();
  }, function() {
    return a13;
  }, F6, i11, function(e37) {
    tt[e37 ? "unshift" : "push"](() => {
      a13 = e37, n17(2, a13);
    });
  }, function(e37) {
    h6 = e37, n17(0, h6);
  }, () => f6 && f6.handleMenuSurfaceOpened(), (e37) => f6 && f6.handleItemAction(S4.getOrderedList()[e37.detail.index].element), c11];
}
var b4 = class extends Mt {
  constructor(e36) {
    super(), At(this, e36, y2, j5, u3, { use: 10, class: 1, open: 0, isOpen: 11, setOpen: 12, setDefaultFocusState: 13, getSelectedIndex: 14, getMenuSurface: 15, getElement: 16 });
  }
  get isOpen() {
    return this.$$.ctx[11];
  }
  get setOpen() {
    return this.$$.ctx[12];
  }
  get setDefaultFocusState() {
    return this.$$.ctx[13];
  }
  get getSelectedIndex() {
    return this.$$.ctx[14];
  }
  get getMenuSurface() {
    return this.$$.ctx[15];
  }
  get getElement() {
    return this.$$.ctx[16];
  }
};

// node_modules/@cosmograph/ui/ext/@smui/list/dist/Graphic.svelte.js
function B3(e36) {
  let t23, s15, _7, j6, x3, E8;
  const v3 = e36[8].default, w3 = l(v3, e36, e36[7], null);
  let B4 = [{ class: s15 = e8({ [e36[1]]: true, "mdc-deprecated-list-item__graphic": true, "mdc-menu__selection-group-icon": e36[4] }) }, e36[5]], I8 = {};
  for (let e37 = 0; e37 < B4.length; e37 += 1) I8 = n5(I8, B4[e37]);
  return { c() {
    t23 = k("span"), w3 && w3.c(), P(t23, I8);
  }, m(s16, n17) {
    w2(s16, t23, n17), w3 && w3.m(t23, null), e36[9](t23), j6 = true, x3 || (E8 = [m(_7 = t8.call(null, t23, e36[0])), m(e36[3].call(null, t23))], x3 = true);
  }, p(e37, [n17]) {
    w3 && w3.p && (!j6 || 128 & n17) && h(w3, v3, e37, e37[7], j6 ? d2(v3, e37[7], n17, null) : p2(e37[7]), null), P(t23, I8 = vt(B4, [(!j6 || 2 & n17 && s15 !== (s15 = e8({ [e37[1]]: true, "mdc-deprecated-list-item__graphic": true, "mdc-menu__selection-group-icon": e37[4] }))) && { class: s15 }, 32 & n17 && e37[5]])), _7 && c5(_7.update) && 1 & n17 && _7.update.call(null, e37[0]);
  }, i(e37) {
    j6 || (bt(w3, e37), j6 = true);
  }, o(e37) {
    mt(w3, e37), j6 = false;
  }, d(s16) {
    s16 && v(t23), w3 && w3.d(s16), e36[9](null), x3 = false, r3(E8);
  } };
}
function I6(e36, t23, s15) {
  const n17 = ["use", "class", "getElement"];
  let c11 = y(t23, n17), { $$slots: o22 = {}, $$scope: i11 } = t23;
  const u8 = n6(Q());
  let r14, { use: a13 = [] } = t23, { class: m6 = "" } = t23, p5 = X("SMUI:list:graphic:menu-selection-group");
  return e36.$$set = (e37) => {
    t23 = n5(n5({}, t23), $(e37)), s15(5, c11 = y(t23, n17)), "use" in e37 && s15(0, a13 = e37.use), "class" in e37 && s15(1, m6 = e37.class), "$$scope" in e37 && s15(7, i11 = e37.$$scope);
  }, [a13, m6, r14, u8, p5, c11, function() {
    return r14;
  }, i11, o22, function(e37) {
    tt[e37 ? "unshift" : "push"](() => {
      r14 = e37, s15(2, r14);
    });
  }];
}
var S3 = class extends Mt {
  constructor(e36) {
    super(), At(this, e36, I6, B3, u3, { use: 0, class: 1, getElement: 6 });
  }
  get getElement() {
    return this.$$.ctx[6];
  }
};

// node_modules/@cosmograph/ui/ext/@smui/menu/dist/SelectionGroupIcon.js
r8({ class: "mdc-menu__selection-group-icon", component: S3 });

// node_modules/@cosmograph/ui/modules/search/search-svg.svelte.js
function d12(e36) {
  let s15, t23;
  return { c() {
    s15 = E("svg"), t23 = E("path"), M(t23, "fill", "currentColor"), M(t23, "d", "M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z"), M(s15, "aria-hidden", "true"), M(s15, "focusable", "false"), M(s15, "data-prefix", "fas"), M(s15, "data-icon", "search"), M(s15, "class", "svg-inline--fa fa-search fa-w-16"), M(s15, "role", "img"), M(s15, "xmlns", "http://www.w3.org/2000/svg"), F(s15, "width", "16px"), F(s15, "height", "16px"), M(s15, "viewBox", "0 0 512 512");
  }, m(e37, a13) {
    w2(e37, s15, a13), x(s15, t23);
  }, p: t5, i: t5, o: t5, d(e37) {
    e37 && v(s15);
  } };
}
var f5 = class extends Mt {
  constructor(e36) {
    super(), At(this, e36, null, d12, u3, {});
  }
};

// node_modules/@cosmograph/ui/modules/search/smui.css.js
var e28 = '.mdc-floating-label{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;cursor:text;font-family:Roboto,sans-serif;font-family:var(--mdc-typography-subtitle1-font-family,var(--mdc-typography-font-family,Roboto,sans-serif));font-size:1rem;font-size:var(--mdc-typography-subtitle1-font-size,1rem);font-weight:400;font-weight:var(--mdc-typography-subtitle1-font-weight,400);left:0;letter-spacing:.009375em;letter-spacing:var(--mdc-typography-subtitle1-letter-spacing,.009375em);line-height:1.15rem;overflow:hidden;position:absolute;text-align:left;text-decoration:inherit;text-decoration:var(--mdc-typography-subtitle1-text-decoration,inherit);text-overflow:ellipsis;text-transform:inherit;text-transform:var(--mdc-typography-subtitle1-text-transform,inherit);-webkit-transform-origin:left top;transform-origin:left top;transition:transform .15s cubic-bezier(.4,0,.2,1),color .15s cubic-bezier(.4,0,.2,1);white-space:nowrap;will-change:transform}.mdc-floating-label[dir=rtl],[dir=rtl] .mdc-floating-label{left:auto;right:0;text-align:right;-webkit-transform-origin:right top;transform-origin:right top}.mdc-floating-label--float-above{cursor:auto}.mdc-floating-label--required:after{content:"*";margin-left:1px;margin-right:0}.mdc-floating-label--required[dir=rtl]:after,[dir=rtl] .mdc-floating-label--required:after{margin-left:0;margin-right:1px}.mdc-floating-label--float-above{transform:translateY(-106%) scale(.75)}.mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-standard .25s 1}@keyframes mdc-floating-label-shake-float-above-standard{0%{transform:translateX(0) translateY(-106%) scale(.75)}33%{animation-timing-function:cubic-bezier(.5,0,.701732,.495819);transform:translateX(4%) translateY(-106%) scale(.75)}66%{animation-timing-function:cubic-bezier(.302435,.381352,.55,.956352);transform:translateX(-4%) translateY(-106%) scale(.75)}to{transform:translateX(0) translateY(-106%) scale(.75)}}.smui-floating-label--remove-transition{transition:unset!important}.smui-floating-label--force-size{position:absolute!important;transform:unset!important}.mdc-line-ripple:after,.mdc-line-ripple:before{border-bottom-style:solid;bottom:0;content:"";left:0;position:absolute;width:100%}.mdc-line-ripple:before{border-bottom-width:1px;z-index:1}.mdc-line-ripple:after{border-bottom-width:2px;opacity:0;transform:scaleX(0);transition:transform .18s cubic-bezier(.4,0,.2,1),opacity .18s cubic-bezier(.4,0,.2,1);z-index:2}.mdc-line-ripple--active:after{opacity:1;transform:scaleX(1)}.mdc-line-ripple--deactivating:after{opacity:0}.mdc-deprecated-list{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:rgba(0,0,0,.87);color:var(--mdc-theme-text-primary-on-background,rgba(0,0,0,.87));font-family:Roboto,sans-serif;font-family:var(--mdc-typography-subtitle1-font-family,var(--mdc-typography-font-family,Roboto,sans-serif));font-size:1rem;font-size:var(--mdc-typography-subtitle1-font-size,1rem);font-weight:400;font-weight:var(--mdc-typography-subtitle1-font-weight,400);letter-spacing:.009375em;letter-spacing:var(--mdc-typography-subtitle1-letter-spacing,.009375em);line-height:1.75rem;line-height:var(--mdc-typography-subtitle1-line-height,1.75rem);line-height:1.5rem;list-style-type:none;margin:0;padding:8px 0;text-decoration:inherit;text-decoration:var(--mdc-typography-subtitle1-text-decoration,inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle1-text-transform,inherit)}.mdc-deprecated-list:focus{outline:none}.mdc-deprecated-list-item__secondary-text{color:rgba(0,0,0,.54);color:var(--mdc-theme-text-secondary-on-background,rgba(0,0,0,.54))}.mdc-deprecated-list-item__graphic{background-color:transparent;color:rgba(0,0,0,.38);color:var(--mdc-theme-text-icon-on-background,rgba(0,0,0,.38))}.mdc-deprecated-list-item__meta{color:rgba(0,0,0,.38);color:var(--mdc-theme-text-hint-on-background,rgba(0,0,0,.38))}.mdc-deprecated-list-item--disabled .mdc-deprecated-list-item__text{opacity:.38}.mdc-deprecated-list-item--disabled .mdc-deprecated-list-item__primary-text,.mdc-deprecated-list-item--disabled .mdc-deprecated-list-item__secondary-text,.mdc-deprecated-list-item--disabled .mdc-deprecated-list-item__text{color:#000;color:var(--mdc-theme-on-surface,#000)}.mdc-deprecated-list-item--activated,.mdc-deprecated-list-item--activated .mdc-deprecated-list-item__graphic,.mdc-deprecated-list-item--selected,.mdc-deprecated-list-item--selected .mdc-deprecated-list-item__graphic{color:#6200ee;color:var(--mdc-theme-primary,#6200ee)}.mdc-deprecated-list--dense{font-size:.812rem;padding-bottom:4px;padding-top:4px}.mdc-deprecated-list-item__wrapper{display:block}.mdc-deprecated-list-item{align-items:center;display:flex;height:48px;justify-content:flex-start;overflow:hidden;padding:0 16px;position:relative}.mdc-deprecated-list-item:focus{outline:none}.mdc-deprecated-list-item.mdc-ripple-upgraded--background-focused:before,.mdc-deprecated-list-item:not(.mdc-deprecated-list-item--selected):focus:before{border:1px solid transparent;border-radius:inherit;box-sizing:border-box;content:"";height:100%;left:0;pointer-events:none;position:absolute;top:0;width:100%}@media screen and (forced-colors:active){.mdc-deprecated-list-item.mdc-ripple-upgraded--background-focused:before,.mdc-deprecated-list-item:not(.mdc-deprecated-list-item--selected):focus:before{border-color:CanvasText}}.mdc-deprecated-list-item.mdc-deprecated-list-item--selected:before{border:3px double transparent;border-radius:inherit;box-sizing:border-box;content:"";height:100%;left:0;pointer-events:none;position:absolute;top:0;width:100%}@media screen and (forced-colors:active){.mdc-deprecated-list-item.mdc-deprecated-list-item--selected:before{border-color:CanvasText}}.mdc-deprecated-list-item[dir=rtl],[dir=rtl] .mdc-deprecated-list-item{padding-left:16px;padding-right:16px}.mdc-deprecated-list--icon-list .mdc-deprecated-list-item{height:56px;padding-left:16px;padding-right:16px}.mdc-deprecated-list--icon-list .mdc-deprecated-list-item[dir=rtl],[dir=rtl] .mdc-deprecated-list--icon-list .mdc-deprecated-list-item{padding-left:16px;padding-right:16px}.mdc-deprecated-list--avatar-list .mdc-deprecated-list-item{height:56px;padding-left:16px;padding-right:16px}.mdc-deprecated-list--avatar-list .mdc-deprecated-list-item[dir=rtl],[dir=rtl] .mdc-deprecated-list--avatar-list .mdc-deprecated-list-item{padding-left:16px;padding-right:16px}.mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-item{height:56px;padding-left:16px;padding-right:16px}.mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-item[dir=rtl],[dir=rtl] .mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-item{padding-left:16px;padding-right:16px}.mdc-deprecated-list--image-list .mdc-deprecated-list-item{height:72px;padding-left:16px;padding-right:16px}.mdc-deprecated-list--image-list .mdc-deprecated-list-item[dir=rtl],[dir=rtl] .mdc-deprecated-list--image-list .mdc-deprecated-list-item{padding-left:16px;padding-right:16px}.mdc-deprecated-list--video-list .mdc-deprecated-list-item{height:72px;padding-left:0;padding-right:16px}.mdc-deprecated-list--video-list .mdc-deprecated-list-item[dir=rtl],[dir=rtl] .mdc-deprecated-list--video-list .mdc-deprecated-list-item{padding-left:16px;padding-right:0}.mdc-deprecated-list--dense .mdc-deprecated-list-item__graphic{height:20px;margin-left:0;margin-right:16px;width:20px}.mdc-deprecated-list--dense .mdc-deprecated-list-item__graphic[dir=rtl],[dir=rtl] .mdc-deprecated-list--dense .mdc-deprecated-list-item__graphic{margin-left:16px;margin-right:0}.mdc-deprecated-list-item__graphic{fill:currentColor;align-items:center;flex-shrink:0;height:24px;justify-content:center;margin-left:0;margin-right:32px;object-fit:cover;width:24px}.mdc-deprecated-list-item__graphic[dir=rtl],[dir=rtl] .mdc-deprecated-list-item__graphic{margin-left:32px;margin-right:0}.mdc-deprecated-list--icon-list .mdc-deprecated-list-item__graphic{height:24px;margin-left:0;margin-right:32px;width:24px}.mdc-deprecated-list--icon-list .mdc-deprecated-list-item__graphic[dir=rtl],[dir=rtl] .mdc-deprecated-list--icon-list .mdc-deprecated-list-item__graphic{margin-left:32px;margin-right:0}.mdc-deprecated-list--avatar-list .mdc-deprecated-list-item__graphic{border-radius:50%;height:40px;margin-left:0;margin-right:16px;width:40px}.mdc-deprecated-list--avatar-list .mdc-deprecated-list-item__graphic[dir=rtl],[dir=rtl] .mdc-deprecated-list--avatar-list .mdc-deprecated-list-item__graphic{margin-left:16px;margin-right:0}.mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-item__graphic{height:40px;margin-left:0;margin-right:16px;width:40px}.mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-item__graphic[dir=rtl],[dir=rtl] .mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-item__graphic{margin-left:16px;margin-right:0}.mdc-deprecated-list--image-list .mdc-deprecated-list-item__graphic{height:56px;margin-left:0;margin-right:16px;width:56px}.mdc-deprecated-list--image-list .mdc-deprecated-list-item__graphic[dir=rtl],[dir=rtl] .mdc-deprecated-list--image-list .mdc-deprecated-list-item__graphic{margin-left:16px;margin-right:0}.mdc-deprecated-list--video-list .mdc-deprecated-list-item__graphic{height:56px;margin-left:0;margin-right:16px;width:100px}.mdc-deprecated-list--video-list .mdc-deprecated-list-item__graphic[dir=rtl],[dir=rtl] .mdc-deprecated-list--video-list .mdc-deprecated-list-item__graphic{margin-left:16px;margin-right:0}.mdc-deprecated-list .mdc-deprecated-list-item__graphic{display:inline-flex}.mdc-deprecated-list-item__meta{margin-left:auto;margin-right:0}.mdc-deprecated-list-item__meta:not(.material-icons){-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto,sans-serif;font-family:var(--mdc-typography-caption-font-family,var(--mdc-typography-font-family,Roboto,sans-serif));font-size:.75rem;font-size:var(--mdc-typography-caption-font-size,.75rem);font-weight:400;font-weight:var(--mdc-typography-caption-font-weight,400);letter-spacing:.0333333333em;letter-spacing:var(--mdc-typography-caption-letter-spacing,.0333333333em);line-height:1.25rem;line-height:var(--mdc-typography-caption-line-height,1.25rem);text-decoration:inherit;text-decoration:var(--mdc-typography-caption-text-decoration,inherit);text-transform:inherit;text-transform:var(--mdc-typography-caption-text-transform,inherit)}.mdc-deprecated-list-item[dir=rtl] .mdc-deprecated-list-item__meta,[dir=rtl] .mdc-deprecated-list-item .mdc-deprecated-list-item__meta{margin-left:0;margin-right:auto}.mdc-deprecated-list-item__text{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mdc-deprecated-list-item__text[for]{pointer-events:none}.mdc-deprecated-list-item__primary-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mdc-deprecated-list-item__primary-text:before{content:"";display:inline-block;height:28px;vertical-align:0;width:0}.mdc-deprecated-list-item__primary-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-deprecated-list--avatar-list .mdc-deprecated-list-item__primary-text,.mdc-deprecated-list--icon-list .mdc-deprecated-list-item__primary-text,.mdc-deprecated-list--image-list .mdc-deprecated-list-item__primary-text,.mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-item__primary-text,.mdc-deprecated-list--video-list .mdc-deprecated-list-item__primary-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0}.mdc-deprecated-list--avatar-list .mdc-deprecated-list-item__primary-text:before,.mdc-deprecated-list--icon-list .mdc-deprecated-list-item__primary-text:before,.mdc-deprecated-list--image-list .mdc-deprecated-list-item__primary-text:before,.mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-item__primary-text:before,.mdc-deprecated-list--video-list .mdc-deprecated-list-item__primary-text:before{content:"";display:inline-block;height:32px;vertical-align:0;width:0}.mdc-deprecated-list--avatar-list .mdc-deprecated-list-item__primary-text:after,.mdc-deprecated-list--icon-list .mdc-deprecated-list-item__primary-text:after,.mdc-deprecated-list--image-list .mdc-deprecated-list-item__primary-text:after,.mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-item__primary-text:after,.mdc-deprecated-list--video-list .mdc-deprecated-list-item__primary-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-deprecated-list--dense .mdc-deprecated-list-item__primary-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0}.mdc-deprecated-list--dense .mdc-deprecated-list-item__primary-text:before{content:"";display:inline-block;height:24px;vertical-align:0;width:0}.mdc-deprecated-list--dense .mdc-deprecated-list-item__primary-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-deprecated-list-item__secondary-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:block;font-family:Roboto,sans-serif;font-family:var(--mdc-typography-body2-font-family,var(--mdc-typography-font-family,Roboto,sans-serif));font-size:.875rem;font-size:var(--mdc-typography-body2-font-size,.875rem);font-weight:400;font-weight:var(--mdc-typography-body2-font-weight,400);letter-spacing:.0178571429em;letter-spacing:var(--mdc-typography-body2-letter-spacing,.0178571429em);line-height:1.25rem;line-height:var(--mdc-typography-body2-line-height,1.25rem);line-height:normal;margin-top:0;overflow:hidden;text-decoration:inherit;text-decoration:var(--mdc-typography-body2-text-decoration,inherit);text-overflow:ellipsis;text-transform:inherit;text-transform:var(--mdc-typography-body2-text-transform,inherit);white-space:nowrap}.mdc-deprecated-list-item__secondary-text:before{content:"";display:inline-block;height:20px;vertical-align:0;width:0}.mdc-deprecated-list--dense .mdc-deprecated-list-item__secondary-text{font-size:inherit}.mdc-deprecated-list--dense .mdc-deprecated-list-item{height:40px}.mdc-deprecated-list--two-line .mdc-deprecated-list-item__text{align-self:flex-start}.mdc-deprecated-list--two-line .mdc-deprecated-list-item{height:64px}.mdc-deprecated-list--two-line.mdc-deprecated-list--avatar-list .mdc-deprecated-list-item,.mdc-deprecated-list--two-line.mdc-deprecated-list--icon-list .mdc-deprecated-list-item,.mdc-deprecated-list--two-line.mdc-deprecated-list--image-list .mdc-deprecated-list-item,.mdc-deprecated-list--two-line.mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-item,.mdc-deprecated-list--two-line.mdc-deprecated-list--video-list .mdc-deprecated-list-item{height:72px}.mdc-deprecated-list--two-line.mdc-deprecated-list--icon-list .mdc-deprecated-list-item__graphic{align-self:flex-start;margin-top:16px}.mdc-deprecated-list--avatar-list.mdc-deprecated-list--dense .mdc-deprecated-list-item,.mdc-deprecated-list--two-line.mdc-deprecated-list--dense .mdc-deprecated-list-item{height:60px}.mdc-deprecated-list--avatar-list.mdc-deprecated-list--dense .mdc-deprecated-list-item__graphic{height:36px;margin-left:0;margin-right:16px;width:36px}.mdc-deprecated-list--avatar-list.mdc-deprecated-list--dense .mdc-deprecated-list-item__graphic[dir=rtl],[dir=rtl] .mdc-deprecated-list--avatar-list.mdc-deprecated-list--dense .mdc-deprecated-list-item__graphic{margin-left:16px;margin-right:0}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item{cursor:pointer}a.mdc-deprecated-list-item{color:inherit;text-decoration:none}.mdc-deprecated-list-divider{border:none;border-bottom:1px solid;border-bottom-color:rgba(0,0,0,.12);height:0;margin:0}.mdc-deprecated-list-divider--padded{margin-left:16px;margin-right:0;width:calc(100% - 32px)}.mdc-deprecated-list-divider--padded[dir=rtl],[dir=rtl] .mdc-deprecated-list-divider--padded{margin-left:0;margin-right:16px}.mdc-deprecated-list-divider--inset{margin-left:72px;margin-right:0;width:calc(100% - 72px)}.mdc-deprecated-list-divider--inset[dir=rtl],[dir=rtl] .mdc-deprecated-list-divider--inset{margin-left:0;margin-right:72px}.mdc-deprecated-list-divider--inset.mdc-deprecated-list-divider--padded{margin-left:72px;margin-right:0;width:calc(100% - 88px)}.mdc-deprecated-list-divider--inset.mdc-deprecated-list-divider--padded[dir=rtl],[dir=rtl] .mdc-deprecated-list-divider--inset.mdc-deprecated-list-divider--padded{margin-left:0;margin-right:72px}.mdc-deprecated-list .mdc-deprecated-list-divider--inset-leading{margin-left:16px;margin-right:0;width:calc(100% - 16px)}.mdc-deprecated-list .mdc-deprecated-list-divider--inset-leading[dir=rtl],[dir=rtl] .mdc-deprecated-list .mdc-deprecated-list-divider--inset-leading{margin-left:0;margin-right:16px}.mdc-deprecated-list .mdc-deprecated-list-divider--inset-trailing{width:calc(100% - 16px)}.mdc-deprecated-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing{margin-left:16px;margin-right:0;width:calc(100% - 32px)}.mdc-deprecated-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing[dir=rtl],[dir=rtl] .mdc-deprecated-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing{margin-left:0;margin-right:16px}.mdc-deprecated-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--padding{margin-left:16px;margin-right:0;width:calc(100% - 16px)}.mdc-deprecated-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--padding[dir=rtl],[dir=rtl] .mdc-deprecated-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--padding{margin-left:0;margin-right:16px}.mdc-deprecated-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing.mdc-deprecated-list-divider--inset-padding{margin-left:16px;margin-right:0;width:calc(100% - 32px)}.mdc-deprecated-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing.mdc-deprecated-list-divider--inset-padding[dir=rtl],[dir=rtl] .mdc-deprecated-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing.mdc-deprecated-list-divider--inset-padding{margin-left:0;margin-right:16px}.mdc-deprecated-list--icon-list .mdc-deprecated-list-divider--inset-leading{margin-left:72px;margin-right:0;width:calc(100% - 72px)}.mdc-deprecated-list--icon-list .mdc-deprecated-list-divider--inset-leading[dir=rtl],[dir=rtl] .mdc-deprecated-list--icon-list .mdc-deprecated-list-divider--inset-leading{margin-left:0;margin-right:72px}.mdc-deprecated-list--icon-list .mdc-deprecated-list-divider--inset-trailing{width:calc(100% - 16px)}.mdc-deprecated-list--icon-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing{margin-left:72px;margin-right:0;width:calc(100% - 88px)}.mdc-deprecated-list--icon-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing[dir=rtl],[dir=rtl] .mdc-deprecated-list--icon-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing{margin-left:0;margin-right:72px}.mdc-deprecated-list--icon-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--padding{margin-left:16px;margin-right:0;width:calc(100% - 16px)}.mdc-deprecated-list--icon-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--padding[dir=rtl],[dir=rtl] .mdc-deprecated-list--icon-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--padding{margin-left:0;margin-right:16px}.mdc-deprecated-list--icon-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing.mdc-deprecated-list-divider--inset-padding{margin-left:16px;margin-right:0;width:calc(100% - 32px)}.mdc-deprecated-list--icon-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing.mdc-deprecated-list-divider--inset-padding[dir=rtl],[dir=rtl] .mdc-deprecated-list--icon-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing.mdc-deprecated-list-divider--inset-padding{margin-left:0;margin-right:16px}.mdc-deprecated-list--avatar-list .mdc-deprecated-list-divider--inset-leading{margin-left:72px;margin-right:0;width:calc(100% - 72px)}.mdc-deprecated-list--avatar-list .mdc-deprecated-list-divider--inset-leading[dir=rtl],[dir=rtl] .mdc-deprecated-list--avatar-list .mdc-deprecated-list-divider--inset-leading{margin-left:0;margin-right:72px}.mdc-deprecated-list--avatar-list .mdc-deprecated-list-divider--inset-trailing{width:calc(100% - 16px)}.mdc-deprecated-list--avatar-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing{margin-left:72px;margin-right:0;width:calc(100% - 88px)}.mdc-deprecated-list--avatar-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing[dir=rtl],[dir=rtl] .mdc-deprecated-list--avatar-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing{margin-left:0;margin-right:72px}.mdc-deprecated-list--avatar-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--padding{margin-left:16px;margin-right:0;width:calc(100% - 16px)}.mdc-deprecated-list--avatar-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--padding[dir=rtl],[dir=rtl] .mdc-deprecated-list--avatar-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--padding{margin-left:0;margin-right:16px}.mdc-deprecated-list--avatar-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing.mdc-deprecated-list-divider--inset-padding{margin-left:16px;margin-right:0;width:calc(100% - 32px)}.mdc-deprecated-list--avatar-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing.mdc-deprecated-list-divider--inset-padding[dir=rtl],[dir=rtl] .mdc-deprecated-list--avatar-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing.mdc-deprecated-list-divider--inset-padding{margin-left:0;margin-right:16px}.mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-divider--inset-leading{margin-left:72px;margin-right:0;width:calc(100% - 72px)}.mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-divider--inset-leading[dir=rtl],[dir=rtl] .mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-divider--inset-leading{margin-left:0;margin-right:72px}.mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-divider--inset-trailing{width:calc(100% - 16px)}.mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing{margin-left:72px;margin-right:0;width:calc(100% - 88px)}.mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing[dir=rtl],[dir=rtl] .mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing{margin-left:0;margin-right:72px}.mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--padding{margin-left:16px;margin-right:0;width:calc(100% - 16px)}.mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--padding[dir=rtl],[dir=rtl] .mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--padding{margin-left:0;margin-right:16px}.mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing.mdc-deprecated-list-divider--inset-padding{margin-left:16px;margin-right:0;width:calc(100% - 32px)}.mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing.mdc-deprecated-list-divider--inset-padding[dir=rtl],[dir=rtl] .mdc-deprecated-list--thumbnail-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing.mdc-deprecated-list-divider--inset-padding{margin-left:0;margin-right:16px}.mdc-deprecated-list--image-list .mdc-deprecated-list-divider--inset-leading{margin-left:88px;margin-right:0;width:calc(100% - 88px)}.mdc-deprecated-list--image-list .mdc-deprecated-list-divider--inset-leading[dir=rtl],[dir=rtl] .mdc-deprecated-list--image-list .mdc-deprecated-list-divider--inset-leading{margin-left:0;margin-right:88px}.mdc-deprecated-list--image-list .mdc-deprecated-list-divider--inset-trailing{width:calc(100% - 16px)}.mdc-deprecated-list--image-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing{margin-left:88px;margin-right:0;width:calc(100% - 104px)}.mdc-deprecated-list--image-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing[dir=rtl],[dir=rtl] .mdc-deprecated-list--image-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing{margin-left:0;margin-right:88px}.mdc-deprecated-list--image-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--padding{margin-left:16px;margin-right:0;width:calc(100% - 16px)}.mdc-deprecated-list--image-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--padding[dir=rtl],[dir=rtl] .mdc-deprecated-list--image-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--padding{margin-left:0;margin-right:16px}.mdc-deprecated-list--image-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing.mdc-deprecated-list-divider--inset-padding{margin-left:16px;margin-right:0;width:calc(100% - 32px)}.mdc-deprecated-list--image-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing.mdc-deprecated-list-divider--inset-padding[dir=rtl],[dir=rtl] .mdc-deprecated-list--image-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing.mdc-deprecated-list-divider--inset-padding{margin-left:0;margin-right:16px}.mdc-deprecated-list--video-list .mdc-deprecated-list-divider--inset-leading{margin-left:116px;margin-right:0;width:calc(100% - 116px)}.mdc-deprecated-list--video-list .mdc-deprecated-list-divider--inset-leading[dir=rtl],[dir=rtl] .mdc-deprecated-list--video-list .mdc-deprecated-list-divider--inset-leading{margin-left:0;margin-right:116px}.mdc-deprecated-list--video-list .mdc-deprecated-list-divider--inset-trailing{width:calc(100% - 16px)}.mdc-deprecated-list--video-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing{margin-left:116px;margin-right:0;width:calc(100% - 132px)}.mdc-deprecated-list--video-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing[dir=rtl],[dir=rtl] .mdc-deprecated-list--video-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing{margin-left:0;margin-right:116px}.mdc-deprecated-list--video-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--padding{margin-left:0;margin-right:0;width:100%}.mdc-deprecated-list--video-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--padding[dir=rtl],[dir=rtl] .mdc-deprecated-list--video-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--padding{margin-left:0;margin-right:0}.mdc-deprecated-list--video-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing.mdc-deprecated-list-divider--inset-padding{margin-left:0;margin-right:0;width:calc(100% - 16px)}.mdc-deprecated-list--video-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing.mdc-deprecated-list-divider--inset-padding[dir=rtl],[dir=rtl] .mdc-deprecated-list--video-list .mdc-deprecated-list-divider--inset-leading.mdc-deprecated-list-divider--inset-trailing.mdc-deprecated-list-divider--inset-padding{margin-left:0;margin-right:0}.mdc-deprecated-list-group .mdc-deprecated-list{padding:0}.mdc-deprecated-list-group__subheader{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto,sans-serif;font-family:var(--mdc-typography-subtitle1-font-family,var(--mdc-typography-font-family,Roboto,sans-serif));font-size:1rem;font-size:var(--mdc-typography-subtitle1-font-size,1rem);font-weight:400;font-weight:var(--mdc-typography-subtitle1-font-weight,400);letter-spacing:.009375em;letter-spacing:var(--mdc-typography-subtitle1-letter-spacing,.009375em);line-height:1.75rem;line-height:var(--mdc-typography-subtitle1-line-height,1.75rem);margin:.75rem 16px;text-decoration:inherit;text-decoration:var(--mdc-typography-subtitle1-text-decoration,inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle1-text-transform,inherit)}.mdc-list-item__primary-text{color:rgba(0,0,0,.87);color:var(--mdc-theme-text-primary-on-background,rgba(0,0,0,.87))}.mdc-list-item__secondary-text{color:rgba(0,0,0,.54);color:var(--mdc-theme-text-secondary-on-background,rgba(0,0,0,.54))}.mdc-list-item__overline-text{color:rgba(0,0,0,.38);color:var(--mdc-theme-text-hint-on-background,rgba(0,0,0,.38))}.mdc-list-item--with-leading-icon .mdc-list-item__start,.mdc-list-item--with-trailing-icon .mdc-list-item__end{background-color:transparent;color:rgba(0,0,0,.38);color:var(--mdc-theme-text-icon-on-background,rgba(0,0,0,.38))}.mdc-list-item__end{color:rgba(0,0,0,.38);color:var(--mdc-theme-text-hint-on-background,rgba(0,0,0,.38))}.mdc-list-item--disabled .mdc-list-item__content,.mdc-list-item--disabled .mdc-list-item__end,.mdc-list-item--disabled .mdc-list-item__start{opacity:.38}.mdc-list-item--disabled .mdc-list-item__overline-text,.mdc-list-item--disabled .mdc-list-item__primary-text,.mdc-list-item--disabled .mdc-list-item__secondary-text,.mdc-list-item--disabled.mdc-list-item--with-leading-icon .mdc-list-item__start,.mdc-list-item--disabled.mdc-list-item--with-trailing-icon .mdc-list-item__end,.mdc-list-item--disabled.mdc-list-item--with-trailing-meta .mdc-list-item__end{color:#000;color:var(--mdc-theme-on-surface,#000)}.mdc-list-item--activated .mdc-list-item__primary-text,.mdc-list-item--activated.mdc-list-item--with-leading-icon .mdc-list-item__start,.mdc-list-item--selected .mdc-list-item__primary-text,.mdc-list-item--selected.mdc-list-item--with-leading-icon .mdc-list-item__start{color:#6200ee;color:var(--mdc-theme-primary,#6200ee)}.mdc-deprecated-list-group__subheader{color:rgba(0,0,0,.87);color:var(--mdc-theme-text-primary-on-background,rgba(0,0,0,.87))}@media (-ms-high-contrast:active),screen and (forced-colors:active){.mdc-list-divider:after{border-bottom:1px solid #fff;content:"";display:block}}.mdc-list{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto,sans-serif;font-family:var(--mdc-typography-subtitle1-font-family,var(--mdc-typography-font-family,Roboto,sans-serif));font-size:1rem;font-size:var(--mdc-typography-subtitle1-font-size,1rem);font-weight:400;font-weight:var(--mdc-typography-subtitle1-font-weight,400);letter-spacing:.009375em;letter-spacing:var(--mdc-typography-subtitle1-letter-spacing,.009375em);line-height:1.75rem;line-height:var(--mdc-typography-subtitle1-line-height,1.75rem);line-height:1.5rem;list-style-type:none;margin:0;padding:8px 0;text-decoration:inherit;text-decoration:var(--mdc-typography-subtitle1-text-decoration,inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle1-text-transform,inherit)}.mdc-list:focus{outline:none}.mdc-list-item__wrapper{display:block}.mdc-list-item{align-items:center;align-items:stretch;cursor:pointer;display:flex;justify-content:flex-start;overflow:hidden;padding:0;position:relative}.mdc-list-item:focus{outline:none}.mdc-list-item.mdc-list-item--with-one-line{height:48px}.mdc-list-item.mdc-list-item--with-two-lines{height:64px}.mdc-list-item.mdc-list-item--with-three-lines{height:88px}.mdc-list-item.mdc-list-item--with-one-line .mdc-list-item__start{align-self:center;margin-top:0}.mdc-list-item.mdc-list-item--with-three-lines .mdc-list-item__start,.mdc-list-item.mdc-list-item--with-two-lines .mdc-list-item__start{align-self:flex-start;margin-top:16px}.mdc-list-item.mdc-list-item--with-one-line .mdc-list-item__end,.mdc-list-item.mdc-list-item--with-two-lines .mdc-list-item__end{align-self:center;margin-top:0}.mdc-list-item.mdc-list-item--with-three-lines .mdc-list-item__end{align-self:flex-start;margin-top:16px}.mdc-list-item.mdc-list-item--disabled,.mdc-list-item.mdc-list-item--non-interactive{cursor:auto}.mdc-list-item.mdc-ripple-upgraded--background-focused:before,.mdc-list-item:not(.mdc-list-item--selected):focus:before{border:1px solid transparent;border-radius:inherit;box-sizing:border-box;content:"";height:100%;left:0;pointer-events:none;position:absolute;top:0;width:100%}@media screen and (forced-colors:active){.mdc-list-item.mdc-ripple-upgraded--background-focused:before,.mdc-list-item:not(.mdc-list-item--selected):focus:before{border-color:CanvasText}}.mdc-list-item.mdc-list-item--selected:before{border:3px double transparent;border-radius:inherit;box-sizing:border-box;content:"";height:100%;left:0;pointer-events:none;position:absolute;top:0;width:100%}@media screen and (forced-colors:active){.mdc-list-item.mdc-list-item--selected:before{border-color:CanvasText}}.mdc-list-item.mdc-list-item--selected:focus:before{border:3px solid transparent;border-radius:inherit;box-sizing:border-box;content:"";height:100%;left:0;pointer-events:none;position:absolute;top:0;width:100%}@media screen and (forced-colors:active){.mdc-list-item.mdc-list-item--selected:focus:before{border-color:CanvasText}}a.mdc-list-item{color:inherit;text-decoration:none}.mdc-list-item__start{fill:currentColor}.mdc-list-item__end,.mdc-list-item__start{flex-shrink:0;pointer-events:none}.mdc-list-item__content{align-self:center;flex:1;overflow:hidden;pointer-events:none;text-overflow:ellipsis;white-space:nowrap}.mdc-list-item--with-three-lines .mdc-list-item__content,.mdc-list-item--with-two-lines .mdc-list-item__content{align-self:stretch}.mdc-list-item__content[for]{pointer-events:none}.mdc-list-item__primary-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto,sans-serif;font-family:var(--mdc-typography-subtitle1-font-family,var(--mdc-typography-font-family,Roboto,sans-serif));font-size:1rem;font-size:var(--mdc-typography-subtitle1-font-size,1rem);font-weight:400;font-weight:var(--mdc-typography-subtitle1-font-weight,400);letter-spacing:.009375em;letter-spacing:var(--mdc-typography-subtitle1-letter-spacing,.009375em);line-height:1.75rem;line-height:var(--mdc-typography-subtitle1-line-height,1.75rem);overflow:hidden;text-decoration:inherit;text-decoration:var(--mdc-typography-subtitle1-text-decoration,inherit);text-overflow:ellipsis;text-transform:inherit;text-transform:var(--mdc-typography-subtitle1-text-transform,inherit);white-space:nowrap}.mdc-list-item--with-three-lines .mdc-list-item__primary-text,.mdc-list-item--with-two-lines .mdc-list-item__primary-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0}.mdc-list-item--with-three-lines .mdc-list-item__primary-text:before,.mdc-list-item--with-two-lines .mdc-list-item__primary-text:before{content:"";display:inline-block;height:28px;vertical-align:0;width:0}.mdc-list-item--with-three-lines .mdc-list-item__primary-text:after,.mdc-list-item--with-two-lines .mdc-list-item__primary-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-list-item__secondary-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:block;font-family:Roboto,sans-serif;font-family:var(--mdc-typography-body2-font-family,var(--mdc-typography-font-family,Roboto,sans-serif));font-size:.875rem;font-size:var(--mdc-typography-body2-font-size,.875rem);font-weight:400;font-weight:var(--mdc-typography-body2-font-weight,400);letter-spacing:.0178571429em;letter-spacing:var(--mdc-typography-body2-letter-spacing,.0178571429em);line-height:1.25rem;line-height:var(--mdc-typography-body2-line-height,1.25rem);line-height:normal;margin-top:0;overflow:hidden;text-decoration:inherit;text-decoration:var(--mdc-typography-body2-text-decoration,inherit);text-overflow:ellipsis;text-transform:inherit;text-transform:var(--mdc-typography-body2-text-transform,inherit);white-space:nowrap}.mdc-list-item__secondary-text:before{content:"";display:inline-block;height:20px;vertical-align:0;width:0}.mdc-list-item--with-three-lines .mdc-list-item__secondary-text{line-height:20px;white-space:normal}.mdc-list-item--with-overline .mdc-list-item__secondary-text{line-height:auto;white-space:nowrap}.mdc-list-item__overline-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto,sans-serif;font-family:var(--mdc-typography-overline-font-family,var(--mdc-typography-font-family,Roboto,sans-serif));font-size:.75rem;font-size:var(--mdc-typography-overline-font-size,.75rem);font-weight:500;font-weight:var(--mdc-typography-overline-font-weight,500);letter-spacing:.1666666667em;letter-spacing:var(--mdc-typography-overline-letter-spacing,.1666666667em);line-height:2rem;line-height:var(--mdc-typography-overline-line-height,2rem);overflow:hidden;text-decoration:none;text-decoration:var(--mdc-typography-overline-text-decoration,none);text-overflow:ellipsis;text-transform:uppercase;text-transform:var(--mdc-typography-overline-text-transform,uppercase);white-space:nowrap}.mdc-list-item--with-two-lines .mdc-list-item__overline-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0}.mdc-list-item--with-two-lines .mdc-list-item__overline-text:before{content:"";display:inline-block;height:24px;vertical-align:0;width:0}.mdc-list-item--with-two-lines .mdc-list-item__overline-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-list-item--with-three-lines .mdc-list-item__overline-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0}.mdc-list-item--with-three-lines .mdc-list-item__overline-text:before{content:"";display:inline-block;height:28px;vertical-align:0;width:0}.mdc-list-item--with-three-lines .mdc-list-item__overline-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-list-item--with-leading-avatar.mdc-list-item{padding-left:0;padding-right:auto}.mdc-list-item--with-leading-avatar.mdc-list-item[dir=rtl],[dir=rtl] .mdc-list-item--with-leading-avatar.mdc-list-item{padding-left:auto;padding-right:0}.mdc-list-item--with-leading-avatar .mdc-list-item__start,.mdc-list-item--with-leading-avatar .mdc-list-item__start[dir=rtl],[dir=rtl] .mdc-list-item--with-leading-avatar .mdc-list-item__start{margin-left:16px;margin-right:16px}.mdc-list-item--with-leading-avatar .mdc-list-item__start{height:40px;width:40px}.mdc-list-item--with-leading-avatar.mdc-list-item--with-two-lines .mdc-list-item__primary-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0}.mdc-list-item--with-leading-avatar.mdc-list-item--with-two-lines .mdc-list-item__primary-text:before{content:"";display:inline-block;height:32px;vertical-align:0;width:0}.mdc-list-item--with-leading-avatar.mdc-list-item--with-two-lines .mdc-list-item__primary-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-list-item--with-leading-avatar.mdc-list-item--with-two-lines .mdc-list-item__overline-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0}.mdc-list-item--with-leading-avatar.mdc-list-item--with-two-lines .mdc-list-item__overline-text:before{content:"";display:inline-block;height:28px;vertical-align:0;width:0}.mdc-list-item--with-leading-avatar.mdc-list-item--with-two-lines .mdc-list-item__overline-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-list-item--with-leading-avatar.mdc-list-item--with-two-lines.mdc-list-item--with-trailing-meta .mdc-list-item__end{display:block;line-height:normal;margin-top:0}.mdc-list-item--with-leading-avatar.mdc-list-item--with-two-lines.mdc-list-item--with-trailing-meta .mdc-list-item__end:before{content:"";display:inline-block;height:32px;vertical-align:0;width:0}.mdc-list-item--with-leading-avatar.mdc-list-item--with-one-line{height:56px}.mdc-list-item--with-leading-avatar.mdc-list-item--with-two-lines{height:72px}.mdc-list-item--with-leading-avatar .mdc-list-item__start{border-radius:50%}.mdc-list-item--with-leading-icon .mdc-list-item__start{height:24px;width:24px}.mdc-list-item--with-leading-icon.mdc-list-item{padding-left:0;padding-right:auto}.mdc-list-item--with-leading-icon.mdc-list-item[dir=rtl],[dir=rtl] .mdc-list-item--with-leading-icon.mdc-list-item{padding-left:auto;padding-right:0}.mdc-list-item--with-leading-icon .mdc-list-item__start{margin-left:16px;margin-right:32px}.mdc-list-item--with-leading-icon .mdc-list-item__start[dir=rtl],[dir=rtl] .mdc-list-item--with-leading-icon .mdc-list-item__start{margin-left:32px;margin-right:16px}.mdc-list-item--with-leading-icon.mdc-list-item--with-two-lines .mdc-list-item__primary-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0}.mdc-list-item--with-leading-icon.mdc-list-item--with-two-lines .mdc-list-item__primary-text:before{content:"";display:inline-block;height:32px;vertical-align:0;width:0}.mdc-list-item--with-leading-icon.mdc-list-item--with-two-lines .mdc-list-item__primary-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-list-item--with-leading-icon.mdc-list-item--with-two-lines .mdc-list-item__overline-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0}.mdc-list-item--with-leading-icon.mdc-list-item--with-two-lines .mdc-list-item__overline-text:before{content:"";display:inline-block;height:28px;vertical-align:0;width:0}.mdc-list-item--with-leading-icon.mdc-list-item--with-two-lines .mdc-list-item__overline-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-list-item--with-leading-icon.mdc-list-item--with-two-lines.mdc-list-item--with-trailing-meta .mdc-list-item__end{display:block;line-height:normal;margin-top:0}.mdc-list-item--with-leading-icon.mdc-list-item--with-two-lines.mdc-list-item--with-trailing-meta .mdc-list-item__end:before{content:"";display:inline-block;height:32px;vertical-align:0;width:0}.mdc-list-item--with-leading-icon.mdc-list-item--with-one-line{height:56px}.mdc-list-item--with-leading-icon.mdc-list-item--with-two-lines{height:72px}.mdc-list-item--with-leading-thumbnail.mdc-list-item{padding-left:0;padding-right:auto}.mdc-list-item--with-leading-thumbnail.mdc-list-item[dir=rtl],[dir=rtl] .mdc-list-item--with-leading-thumbnail.mdc-list-item{padding-left:auto;padding-right:0}.mdc-list-item--with-leading-thumbnail .mdc-list-item__start,.mdc-list-item--with-leading-thumbnail .mdc-list-item__start[dir=rtl],[dir=rtl] .mdc-list-item--with-leading-thumbnail .mdc-list-item__start{margin-left:16px;margin-right:16px}.mdc-list-item--with-leading-thumbnail .mdc-list-item__start{height:40px;width:40px}.mdc-list-item--with-leading-thumbnail.mdc-list-item--with-two-lines .mdc-list-item__primary-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0}.mdc-list-item--with-leading-thumbnail.mdc-list-item--with-two-lines .mdc-list-item__primary-text:before{content:"";display:inline-block;height:32px;vertical-align:0;width:0}.mdc-list-item--with-leading-thumbnail.mdc-list-item--with-two-lines .mdc-list-item__primary-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-list-item--with-leading-thumbnail.mdc-list-item--with-two-lines .mdc-list-item__overline-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0}.mdc-list-item--with-leading-thumbnail.mdc-list-item--with-two-lines .mdc-list-item__overline-text:before{content:"";display:inline-block;height:28px;vertical-align:0;width:0}.mdc-list-item--with-leading-thumbnail.mdc-list-item--with-two-lines .mdc-list-item__overline-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-list-item--with-leading-thumbnail.mdc-list-item--with-two-lines.mdc-list-item--with-trailing-meta .mdc-list-item__end{display:block;line-height:normal;margin-top:0}.mdc-list-item--with-leading-thumbnail.mdc-list-item--with-two-lines.mdc-list-item--with-trailing-meta .mdc-list-item__end:before{content:"";display:inline-block;height:32px;vertical-align:0;width:0}.mdc-list-item--with-leading-thumbnail.mdc-list-item--with-one-line{height:56px}.mdc-list-item--with-leading-thumbnail.mdc-list-item--with-two-lines{height:72px}.mdc-list-item--with-leading-image.mdc-list-item{padding-left:0;padding-right:auto}.mdc-list-item--with-leading-image.mdc-list-item[dir=rtl],[dir=rtl] .mdc-list-item--with-leading-image.mdc-list-item{padding-left:auto;padding-right:0}.mdc-list-item--with-leading-image .mdc-list-item__start,.mdc-list-item--with-leading-image .mdc-list-item__start[dir=rtl],[dir=rtl] .mdc-list-item--with-leading-image .mdc-list-item__start{margin-left:16px;margin-right:16px}.mdc-list-item--with-leading-image .mdc-list-item__start{height:56px;width:56px}.mdc-list-item--with-leading-image.mdc-list-item--with-two-lines .mdc-list-item__primary-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0}.mdc-list-item--with-leading-image.mdc-list-item--with-two-lines .mdc-list-item__primary-text:before{content:"";display:inline-block;height:32px;vertical-align:0;width:0}.mdc-list-item--with-leading-image.mdc-list-item--with-two-lines .mdc-list-item__primary-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-list-item--with-leading-image.mdc-list-item--with-two-lines .mdc-list-item__overline-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0}.mdc-list-item--with-leading-image.mdc-list-item--with-two-lines .mdc-list-item__overline-text:before{content:"";display:inline-block;height:28px;vertical-align:0;width:0}.mdc-list-item--with-leading-image.mdc-list-item--with-two-lines .mdc-list-item__overline-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-list-item--with-leading-image.mdc-list-item--with-two-lines.mdc-list-item--with-trailing-meta .mdc-list-item__end{display:block;line-height:normal;margin-top:0}.mdc-list-item--with-leading-image.mdc-list-item--with-two-lines.mdc-list-item--with-trailing-meta .mdc-list-item__end:before{content:"";display:inline-block;height:32px;vertical-align:0;width:0}.mdc-list-item--with-leading-image.mdc-list-item--with-one-line,.mdc-list-item--with-leading-image.mdc-list-item--with-two-lines{height:72px}.mdc-list-item--with-leading-video.mdc-list-item--with-two-lines .mdc-list-item__start{align-self:flex-start;margin-top:8px}.mdc-list-item--with-leading-video.mdc-list-item{padding-left:0;padding-right:auto}.mdc-list-item--with-leading-video.mdc-list-item[dir=rtl],[dir=rtl] .mdc-list-item--with-leading-video.mdc-list-item{padding-left:auto;padding-right:0}.mdc-list-item--with-leading-video .mdc-list-item__start{margin-left:0;margin-right:16px}.mdc-list-item--with-leading-video .mdc-list-item__start[dir=rtl],[dir=rtl] .mdc-list-item--with-leading-video .mdc-list-item__start{margin-left:16px;margin-right:0}.mdc-list-item--with-leading-video .mdc-list-item__start{height:56px;width:100px}.mdc-list-item--with-leading-video.mdc-list-item--with-two-lines .mdc-list-item__primary-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0}.mdc-list-item--with-leading-video.mdc-list-item--with-two-lines .mdc-list-item__primary-text:before{content:"";display:inline-block;height:32px;vertical-align:0;width:0}.mdc-list-item--with-leading-video.mdc-list-item--with-two-lines .mdc-list-item__primary-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-list-item--with-leading-video.mdc-list-item--with-two-lines .mdc-list-item__overline-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0}.mdc-list-item--with-leading-video.mdc-list-item--with-two-lines .mdc-list-item__overline-text:before{content:"";display:inline-block;height:28px;vertical-align:0;width:0}.mdc-list-item--with-leading-video.mdc-list-item--with-two-lines .mdc-list-item__overline-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-list-item--with-leading-video.mdc-list-item--with-two-lines.mdc-list-item--with-trailing-meta .mdc-list-item__end{display:block;line-height:normal;margin-top:0}.mdc-list-item--with-leading-video.mdc-list-item--with-two-lines.mdc-list-item--with-trailing-meta .mdc-list-item__end:before{content:"";display:inline-block;height:32px;vertical-align:0;width:0}.mdc-list-item--with-leading-video.mdc-list-item--with-one-line,.mdc-list-item--with-leading-video.mdc-list-item--with-two-lines{height:72px}.mdc-list-item--with-leading-checkbox.mdc-list-item{padding-left:0;padding-right:auto}.mdc-list-item--with-leading-checkbox.mdc-list-item[dir=rtl],[dir=rtl] .mdc-list-item--with-leading-checkbox.mdc-list-item{padding-left:auto;padding-right:0}.mdc-list-item--with-leading-checkbox .mdc-list-item__start{margin-left:8px;margin-right:24px}.mdc-list-item--with-leading-checkbox .mdc-list-item__start[dir=rtl],[dir=rtl] .mdc-list-item--with-leading-checkbox .mdc-list-item__start{margin-left:24px;margin-right:8px}.mdc-list-item--with-leading-checkbox .mdc-list-item__start{height:40px;width:40px}.mdc-list-item--with-leading-checkbox.mdc-list-item--with-two-lines .mdc-list-item__start{align-self:flex-start;margin-top:8px}.mdc-list-item--with-leading-checkbox.mdc-list-item--with-two-lines .mdc-list-item__primary-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0}.mdc-list-item--with-leading-checkbox.mdc-list-item--with-two-lines .mdc-list-item__primary-text:before{content:"";display:inline-block;height:32px;vertical-align:0;width:0}.mdc-list-item--with-leading-checkbox.mdc-list-item--with-two-lines .mdc-list-item__primary-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-list-item--with-leading-checkbox.mdc-list-item--with-two-lines .mdc-list-item__overline-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0}.mdc-list-item--with-leading-checkbox.mdc-list-item--with-two-lines .mdc-list-item__overline-text:before{content:"";display:inline-block;height:28px;vertical-align:0;width:0}.mdc-list-item--with-leading-checkbox.mdc-list-item--with-two-lines .mdc-list-item__overline-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-list-item--with-leading-checkbox.mdc-list-item--with-two-lines.mdc-list-item--with-trailing-meta .mdc-list-item__end{display:block;line-height:normal;margin-top:0}.mdc-list-item--with-leading-checkbox.mdc-list-item--with-two-lines.mdc-list-item--with-trailing-meta .mdc-list-item__end:before{content:"";display:inline-block;height:32px;vertical-align:0;width:0}.mdc-list-item--with-leading-checkbox.mdc-list-item--with-one-line{height:56px}.mdc-list-item--with-leading-checkbox.mdc-list-item--with-two-lines{height:72px}.mdc-list-item--with-leading-radio.mdc-list-item{padding-left:0;padding-right:auto}.mdc-list-item--with-leading-radio.mdc-list-item[dir=rtl],[dir=rtl] .mdc-list-item--with-leading-radio.mdc-list-item{padding-left:auto;padding-right:0}.mdc-list-item--with-leading-radio .mdc-list-item__start{margin-left:8px;margin-right:24px}.mdc-list-item--with-leading-radio .mdc-list-item__start[dir=rtl],[dir=rtl] .mdc-list-item--with-leading-radio .mdc-list-item__start{margin-left:24px;margin-right:8px}.mdc-list-item--with-leading-radio .mdc-list-item__start{height:40px;width:40px}.mdc-list-item--with-leading-radio.mdc-list-item--with-two-lines .mdc-list-item__start{align-self:flex-start;margin-top:8px}.mdc-list-item--with-leading-radio.mdc-list-item--with-two-lines .mdc-list-item__primary-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0}.mdc-list-item--with-leading-radio.mdc-list-item--with-two-lines .mdc-list-item__primary-text:before{content:"";display:inline-block;height:32px;vertical-align:0;width:0}.mdc-list-item--with-leading-radio.mdc-list-item--with-two-lines .mdc-list-item__primary-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-list-item--with-leading-radio.mdc-list-item--with-two-lines .mdc-list-item__overline-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0}.mdc-list-item--with-leading-radio.mdc-list-item--with-two-lines .mdc-list-item__overline-text:before{content:"";display:inline-block;height:28px;vertical-align:0;width:0}.mdc-list-item--with-leading-radio.mdc-list-item--with-two-lines .mdc-list-item__overline-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-list-item--with-leading-radio.mdc-list-item--with-two-lines.mdc-list-item--with-trailing-meta .mdc-list-item__end{display:block;line-height:normal;margin-top:0}.mdc-list-item--with-leading-radio.mdc-list-item--with-two-lines.mdc-list-item--with-trailing-meta .mdc-list-item__end:before{content:"";display:inline-block;height:32px;vertical-align:0;width:0}.mdc-list-item--with-leading-radio.mdc-list-item--with-one-line{height:56px}.mdc-list-item--with-leading-radio.mdc-list-item--with-two-lines{height:72px}.mdc-list-item--with-leading-switch.mdc-list-item{padding-left:0;padding-right:auto}.mdc-list-item--with-leading-switch.mdc-list-item[dir=rtl],[dir=rtl] .mdc-list-item--with-leading-switch.mdc-list-item{padding-left:auto;padding-right:0}.mdc-list-item--with-leading-switch .mdc-list-item__start,.mdc-list-item--with-leading-switch .mdc-list-item__start[dir=rtl],[dir=rtl] .mdc-list-item--with-leading-switch .mdc-list-item__start{margin-left:16px;margin-right:16px}.mdc-list-item--with-leading-switch .mdc-list-item__start{height:20px;width:36px}.mdc-list-item--with-leading-switch.mdc-list-item--with-two-lines .mdc-list-item__start{align-self:flex-start;margin-top:16px}.mdc-list-item--with-leading-switch.mdc-list-item--with-two-lines .mdc-list-item__primary-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0}.mdc-list-item--with-leading-switch.mdc-list-item--with-two-lines .mdc-list-item__primary-text:before{content:"";display:inline-block;height:32px;vertical-align:0;width:0}.mdc-list-item--with-leading-switch.mdc-list-item--with-two-lines .mdc-list-item__primary-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-list-item--with-leading-switch.mdc-list-item--with-two-lines .mdc-list-item__overline-text{display:block;line-height:normal;margin-bottom:-20px;margin-top:0}.mdc-list-item--with-leading-switch.mdc-list-item--with-two-lines .mdc-list-item__overline-text:before{content:"";display:inline-block;height:28px;vertical-align:0;width:0}.mdc-list-item--with-leading-switch.mdc-list-item--with-two-lines .mdc-list-item__overline-text:after{content:"";display:inline-block;height:20px;vertical-align:-20px;width:0}.mdc-list-item--with-leading-switch.mdc-list-item--with-two-lines.mdc-list-item--with-trailing-meta .mdc-list-item__end{display:block;line-height:normal;margin-top:0}.mdc-list-item--with-leading-switch.mdc-list-item--with-two-lines.mdc-list-item--with-trailing-meta .mdc-list-item__end:before{content:"";display:inline-block;height:32px;vertical-align:0;width:0}.mdc-list-item--with-leading-switch.mdc-list-item--with-one-line{height:56px}.mdc-list-item--with-leading-switch.mdc-list-item--with-two-lines{height:72px}.mdc-list-item--with-trailing-icon.mdc-list-item{padding-left:auto;padding-right:0}.mdc-list-item--with-trailing-icon.mdc-list-item[dir=rtl],[dir=rtl] .mdc-list-item--with-trailing-icon.mdc-list-item{padding-left:0;padding-right:auto}.mdc-list-item--with-trailing-icon .mdc-list-item__end,.mdc-list-item--with-trailing-icon .mdc-list-item__end[dir=rtl],[dir=rtl] .mdc-list-item--with-trailing-icon .mdc-list-item__end{margin-left:16px;margin-right:16px}.mdc-list-item--with-trailing-icon .mdc-list-item__end{height:24px;width:24px}.mdc-list-item--with-trailing-meta.mdc-list-item--with-three-lines .mdc-list-item__end,.mdc-list-item--with-trailing-meta.mdc-list-item--with-two-lines .mdc-list-item__end{align-self:flex-start}.mdc-list-item--with-trailing-meta.mdc-list-item{padding-left:auto;padding-right:0}.mdc-list-item--with-trailing-meta.mdc-list-item[dir=rtl],[dir=rtl] .mdc-list-item--with-trailing-meta.mdc-list-item{padding-left:0;padding-right:auto}.mdc-list-item--with-trailing-meta .mdc-list-item__end{margin-left:28px;margin-right:16px}.mdc-list-item--with-trailing-meta .mdc-list-item__end[dir=rtl],[dir=rtl] .mdc-list-item--with-trailing-meta .mdc-list-item__end{margin-left:16px;margin-right:28px}.mdc-list-item--with-trailing-meta.mdc-list-item--with-two-lines .mdc-list-item__end{display:block;line-height:normal;margin-top:0}.mdc-list-item--with-trailing-meta.mdc-list-item--with-two-lines .mdc-list-item__end:before{content:"";display:inline-block;height:28px;vertical-align:0;width:0}.mdc-list-item--with-trailing-meta.mdc-list-item--with-three-lines .mdc-list-item__end{display:block;line-height:normal;margin-top:0}.mdc-list-item--with-trailing-meta.mdc-list-item--with-three-lines .mdc-list-item__end:before{content:"";display:inline-block;height:28px;vertical-align:0;width:0}.mdc-list-item--with-trailing-meta .mdc-list-item__end{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto,sans-serif;font-family:var(--mdc-typography-caption-font-family,var(--mdc-typography-font-family,Roboto,sans-serif));font-size:.75rem;font-size:var(--mdc-typography-caption-font-size,.75rem);font-weight:400;font-weight:var(--mdc-typography-caption-font-weight,400);letter-spacing:.0333333333em;letter-spacing:var(--mdc-typography-caption-letter-spacing,.0333333333em);line-height:1.25rem;line-height:var(--mdc-typography-caption-line-height,1.25rem);text-decoration:inherit;text-decoration:var(--mdc-typography-caption-text-decoration,inherit);text-transform:inherit;text-transform:var(--mdc-typography-caption-text-transform,inherit)}.mdc-list-item--with-trailing-checkbox.mdc-list-item{padding-left:auto;padding-right:0}.mdc-list-item--with-trailing-checkbox.mdc-list-item[dir=rtl],[dir=rtl] .mdc-list-item--with-trailing-checkbox.mdc-list-item{padding-left:0;padding-right:auto}.mdc-list-item--with-trailing-checkbox .mdc-list-item__end{margin-left:24px;margin-right:8px}.mdc-list-item--with-trailing-checkbox .mdc-list-item__end[dir=rtl],[dir=rtl] .mdc-list-item--with-trailing-checkbox .mdc-list-item__end{margin-left:8px;margin-right:24px}.mdc-list-item--with-trailing-checkbox .mdc-list-item__end{height:40px;width:40px}.mdc-list-item--with-trailing-checkbox.mdc-list-item--with-three-lines .mdc-list-item__end{align-self:flex-start;margin-top:8px}.mdc-list-item--with-trailing-radio.mdc-list-item{padding-left:auto;padding-right:0}.mdc-list-item--with-trailing-radio.mdc-list-item[dir=rtl],[dir=rtl] .mdc-list-item--with-trailing-radio.mdc-list-item{padding-left:0;padding-right:auto}.mdc-list-item--with-trailing-radio .mdc-list-item__end{margin-left:24px;margin-right:8px}.mdc-list-item--with-trailing-radio .mdc-list-item__end[dir=rtl],[dir=rtl] .mdc-list-item--with-trailing-radio .mdc-list-item__end{margin-left:8px;margin-right:24px}.mdc-list-item--with-trailing-radio .mdc-list-item__end{height:40px;width:40px}.mdc-list-item--with-trailing-radio.mdc-list-item--with-three-lines .mdc-list-item__end{align-self:flex-start;margin-top:8px}.mdc-list-item--with-trailing-switch.mdc-list-item{padding-left:auto;padding-right:0}.mdc-list-item--with-trailing-switch.mdc-list-item[dir=rtl],[dir=rtl] .mdc-list-item--with-trailing-switch.mdc-list-item{padding-left:0;padding-right:auto}.mdc-list-item--with-trailing-switch .mdc-list-item__end,.mdc-list-item--with-trailing-switch .mdc-list-item__end[dir=rtl],[dir=rtl] .mdc-list-item--with-trailing-switch .mdc-list-item__end{margin-left:16px;margin-right:16px}.mdc-list-item--with-trailing-switch .mdc-list-item__end{height:20px;width:36px}.mdc-list-item--with-trailing-switch.mdc-list-item--with-three-lines .mdc-list-item__end{align-self:flex-start;margin-top:16px}.mdc-list-item--with-overline.mdc-list-item--with-two-lines .mdc-list-item__primary-text{display:block;line-height:normal;margin-top:0}.mdc-list-item--with-overline.mdc-list-item--with-two-lines .mdc-list-item__primary-text:before{content:"";display:inline-block;height:20px;vertical-align:0;width:0}.mdc-list-item--with-overline.mdc-list-item--with-three-lines .mdc-list-item__primary-text{display:block;line-height:normal;margin-top:0}.mdc-list-item--with-overline.mdc-list-item--with-three-lines .mdc-list-item__primary-text:before{content:"";display:inline-block;height:20px;vertical-align:0;width:0}.mdc-list-item,.mdc-list-item[dir=rtl],[dir=rtl] .mdc-list-item{padding-left:16px;padding-right:16px}.mdc-list-group .mdc-deprecated-list{padding:0}.mdc-list-group__subheader{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto,sans-serif;font-family:var(--mdc-typography-subtitle1-font-family,var(--mdc-typography-font-family,Roboto,sans-serif));font-size:1rem;font-size:var(--mdc-typography-subtitle1-font-size,1rem);font-weight:400;font-weight:var(--mdc-typography-subtitle1-font-weight,400);letter-spacing:.009375em;letter-spacing:var(--mdc-typography-subtitle1-letter-spacing,.009375em);line-height:1.75rem;line-height:var(--mdc-typography-subtitle1-line-height,1.75rem);margin:.75rem 16px;text-decoration:inherit;text-decoration:var(--mdc-typography-subtitle1-text-decoration,inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle1-text-transform,inherit)}.mdc-list-divider{background-clip:content-box;background-color:rgba(0,0,0,.12);height:1px;padding:0}.mdc-list-divider--with-leading-avatar.mdc-list-divider--with-leading-inset,.mdc-list-divider--with-leading-checkbox.mdc-list-divider--with-leading-inset,.mdc-list-divider--with-leading-icon.mdc-list-divider--with-leading-inset,.mdc-list-divider--with-leading-image.mdc-list-divider--with-leading-inset,.mdc-list-divider--with-leading-radio.mdc-list-divider--with-leading-inset,.mdc-list-divider--with-leading-switch.mdc-list-divider--with-leading-inset,.mdc-list-divider--with-leading-text.mdc-list-divider--with-leading-inset,.mdc-list-divider--with-leading-thumbnail.mdc-list-divider--with-leading-inset,.mdc-list-divider.mdc-list-divider--with-leading-inset{padding-left:16px;padding-right:auto}.mdc-list-divider--with-leading-avatar.mdc-list-divider--with-leading-inset[dir=rtl],.mdc-list-divider--with-leading-avatar.mdc-list-divider--with-trailing-inset,.mdc-list-divider--with-leading-checkbox.mdc-list-divider--with-leading-inset[dir=rtl],.mdc-list-divider--with-leading-checkbox.mdc-list-divider--with-trailing-inset,.mdc-list-divider--with-leading-icon.mdc-list-divider--with-leading-inset[dir=rtl],.mdc-list-divider--with-leading-icon.mdc-list-divider--with-trailing-inset,.mdc-list-divider--with-leading-image.mdc-list-divider--with-leading-inset[dir=rtl],.mdc-list-divider--with-leading-image.mdc-list-divider--with-trailing-inset,.mdc-list-divider--with-leading-radio.mdc-list-divider--with-leading-inset[dir=rtl],.mdc-list-divider--with-leading-radio.mdc-list-divider--with-trailing-inset,.mdc-list-divider--with-leading-switch.mdc-list-divider--with-leading-inset[dir=rtl],.mdc-list-divider--with-leading-switch.mdc-list-divider--with-trailing-inset,.mdc-list-divider--with-leading-text.mdc-list-divider--with-leading-inset[dir=rtl],.mdc-list-divider--with-leading-text.mdc-list-divider--with-trailing-inset,.mdc-list-divider--with-leading-thumbnail.mdc-list-divider--with-leading-inset[dir=rtl],.mdc-list-divider--with-leading-thumbnail.mdc-list-divider--with-trailing-inset,.mdc-list-divider.mdc-list-divider--with-leading-inset[dir=rtl],.mdc-list-divider.mdc-list-divider--with-trailing-inset,[dir=rtl] .mdc-list-divider--with-leading-avatar.mdc-list-divider--with-leading-inset,[dir=rtl] .mdc-list-divider--with-leading-checkbox.mdc-list-divider--with-leading-inset,[dir=rtl] .mdc-list-divider--with-leading-icon.mdc-list-divider--with-leading-inset,[dir=rtl] .mdc-list-divider--with-leading-image.mdc-list-divider--with-leading-inset,[dir=rtl] .mdc-list-divider--with-leading-radio.mdc-list-divider--with-leading-inset,[dir=rtl] .mdc-list-divider--with-leading-switch.mdc-list-divider--with-leading-inset,[dir=rtl] .mdc-list-divider--with-leading-text.mdc-list-divider--with-leading-inset,[dir=rtl] .mdc-list-divider--with-leading-thumbnail.mdc-list-divider--with-leading-inset,[dir=rtl] .mdc-list-divider.mdc-list-divider--with-leading-inset{padding-left:auto;padding-right:16px}.mdc-list-divider--with-leading-avatar.mdc-list-divider--with-trailing-inset[dir=rtl],.mdc-list-divider--with-leading-checkbox.mdc-list-divider--with-trailing-inset[dir=rtl],.mdc-list-divider--with-leading-icon.mdc-list-divider--with-trailing-inset[dir=rtl],.mdc-list-divider--with-leading-image.mdc-list-divider--with-trailing-inset[dir=rtl],.mdc-list-divider--with-leading-radio.mdc-list-divider--with-trailing-inset[dir=rtl],.mdc-list-divider--with-leading-switch.mdc-list-divider--with-trailing-inset[dir=rtl],.mdc-list-divider--with-leading-text.mdc-list-divider--with-trailing-inset[dir=rtl],.mdc-list-divider--with-leading-thumbnail.mdc-list-divider--with-trailing-inset[dir=rtl],.mdc-list-divider.mdc-list-divider--with-trailing-inset[dir=rtl],[dir=rtl] .mdc-list-divider--with-leading-avatar.mdc-list-divider--with-trailing-inset,[dir=rtl] .mdc-list-divider--with-leading-checkbox.mdc-list-divider--with-trailing-inset,[dir=rtl] .mdc-list-divider--with-leading-icon.mdc-list-divider--with-trailing-inset,[dir=rtl] .mdc-list-divider--with-leading-image.mdc-list-divider--with-trailing-inset,[dir=rtl] .mdc-list-divider--with-leading-radio.mdc-list-divider--with-trailing-inset,[dir=rtl] .mdc-list-divider--with-leading-switch.mdc-list-divider--with-trailing-inset,[dir=rtl] .mdc-list-divider--with-leading-text.mdc-list-divider--with-trailing-inset,[dir=rtl] .mdc-list-divider--with-leading-thumbnail.mdc-list-divider--with-trailing-inset,[dir=rtl] .mdc-list-divider.mdc-list-divider--with-trailing-inset{padding-left:16px;padding-right:auto}.mdc-list-divider--with-leading-video.mdc-list-divider--with-leading-inset{padding-left:0;padding-right:auto}.mdc-list-divider--with-leading-video.mdc-list-divider--with-leading-inset[dir=rtl],[dir=rtl] .mdc-list-divider--with-leading-video.mdc-list-divider--with-leading-inset{padding-left:auto;padding-right:0}.mdc-list-divider[dir=rtl],[dir=rtl] .mdc-list-divider{padding:0}@keyframes mdc-ripple-fg-radius-in{0%{animation-timing-function:cubic-bezier(.4,0,.2,1);transform:translate(var(--mdc-ripple-fg-translate-start,0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end,0)) scale(var(--mdc-ripple-fg-scale,1))}}@keyframes mdc-ripple-fg-opacity-in{0%{animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity,0)}}@keyframes mdc-ripple-fg-opacity-out{0%{animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity,0)}to{opacity:0}}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item{--mdc-ripple-fg-size:0;--mdc-ripple-left:0;--mdc-ripple-top:0;--mdc-ripple-fg-scale:1;--mdc-ripple-fg-translate-end:0;--mdc-ripple-fg-translate-start:0;-webkit-tap-highlight-color:rgba(0,0,0,0);will-change:transform,opacity}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item .mdc-deprecated-list-item__ripple:after,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item .mdc-deprecated-list-item__ripple:before{border-radius:50%;content:"";opacity:0;pointer-events:none;position:absolute}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item .mdc-deprecated-list-item__ripple:before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1;z-index:var(--mdc-ripple-z-index,1)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item .mdc-deprecated-list-item__ripple:after{z-index:0;z-index:var(--mdc-ripple-z-index,0)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item.mdc-ripple-upgraded .mdc-deprecated-list-item__ripple:before{transform:scale(var(--mdc-ripple-fg-scale,1))}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item.mdc-ripple-upgraded .mdc-deprecated-list-item__ripple:after{left:0;top:0;transform:scale(0);transform-origin:center center}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item.mdc-ripple-upgraded--unbounded .mdc-deprecated-list-item__ripple:after{left:var(--mdc-ripple-left,0);top:var(--mdc-ripple-top,0)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item.mdc-ripple-upgraded--foreground-activation .mdc-deprecated-list-item__ripple:after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item.mdc-ripple-upgraded--foreground-deactivation .mdc-deprecated-list-item__ripple:after{animation:mdc-ripple-fg-opacity-out .15s;transform:translate(var(--mdc-ripple-fg-translate-end,0)) scale(var(--mdc-ripple-fg-scale,1))}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item .mdc-list-item__ripple:after,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item .mdc-list-item__ripple:before{border-radius:50%;content:"";opacity:0;pointer-events:none;position:absolute}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item .mdc-list-item__ripple:before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1;z-index:var(--mdc-ripple-z-index,1)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item .mdc-list-item__ripple:after{z-index:0;z-index:var(--mdc-ripple-z-index,0)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item.mdc-ripple-upgraded .mdc-list-item__ripple:before{transform:scale(var(--mdc-ripple-fg-scale,1))}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item.mdc-ripple-upgraded .mdc-list-item__ripple:after{left:0;top:0;transform:scale(0);transform-origin:center center}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item.mdc-ripple-upgraded--unbounded .mdc-list-item__ripple:after{left:var(--mdc-ripple-left,0);top:var(--mdc-ripple-top,0)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item.mdc-ripple-upgraded--foreground-activation .mdc-list-item__ripple:after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item.mdc-ripple-upgraded--foreground-deactivation .mdc-list-item__ripple:after{animation:mdc-ripple-fg-opacity-out .15s;transform:translate(var(--mdc-ripple-fg-translate-end,0)) scale(var(--mdc-ripple-fg-scale,1))}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item .mdc-deprecated-list-item__ripple:after,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item .mdc-deprecated-list-item__ripple:before{height:200%;left:-50%;top:-50%;width:200%}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item.mdc-ripple-upgraded .mdc-deprecated-list-item__ripple:after{height:var(--mdc-ripple-fg-size,100%);width:var(--mdc-ripple-fg-size,100%)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item .mdc-list-item__ripple:after,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item .mdc-list-item__ripple:before{height:200%;left:-50%;top:-50%;width:200%}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item.mdc-ripple-upgraded .mdc-list-item__ripple:after{height:var(--mdc-ripple-fg-size,100%);width:var(--mdc-ripple-fg-size,100%)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item .mdc-deprecated-list-item__ripple:after,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item .mdc-deprecated-list-item__ripple:before{background-color:#000;background-color:var(--mdc-ripple-color,#000)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item.mdc-ripple-surface--hover .mdc-deprecated-list-item__ripple:before,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item:hover .mdc-deprecated-list-item__ripple:before{opacity:.04;opacity:var(--mdc-ripple-hover-opacity,.04)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item.mdc-ripple-upgraded--background-focused .mdc-deprecated-list-item__ripple:before,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item:not(.mdc-ripple-upgraded):focus .mdc-deprecated-list-item__ripple:before{opacity:.12;opacity:var(--mdc-ripple-focus-opacity,.12);transition-duration:75ms}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item:not(.mdc-ripple-upgraded) .mdc-deprecated-list-item__ripple:after{transition:opacity .15s linear}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item:not(.mdc-ripple-upgraded):active .mdc-deprecated-list-item__ripple:after{opacity:.12;opacity:var(--mdc-ripple-press-opacity,.12);transition-duration:75ms}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item .mdc-list-item__ripple:after,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item .mdc-list-item__ripple:before{background-color:#000;background-color:var(--mdc-ripple-color,#000)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item.mdc-ripple-surface--hover .mdc-list-item__ripple:before,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item:hover .mdc-list-item__ripple:before{opacity:.04;opacity:var(--mdc-ripple-hover-opacity,.04)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item.mdc-ripple-upgraded--background-focused .mdc-list-item__ripple:before,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item:not(.mdc-ripple-upgraded):focus .mdc-list-item__ripple:before{opacity:.12;opacity:var(--mdc-ripple-focus-opacity,.12);transition-duration:75ms}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item:not(.mdc-ripple-upgraded) .mdc-list-item__ripple:after{transition:opacity .15s linear}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item:not(.mdc-ripple-upgraded):active .mdc-list-item__ripple:after{opacity:.12;opacity:var(--mdc-ripple-press-opacity,.12);transition-duration:75ms}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity,0.12)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--activated .mdc-deprecated-list-item__ripple:before{opacity:.12;opacity:var(--mdc-ripple-activated-opacity,.12)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--activated .mdc-deprecated-list-item__ripple:after,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--activated .mdc-deprecated-list-item__ripple:before{background-color:#6200ee;background-color:var(--mdc-ripple-color,var(--mdc-theme-primary,#6200ee))}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--activated.mdc-ripple-surface--hover .mdc-deprecated-list-item__ripple:before,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--activated:hover .mdc-deprecated-list-item__ripple:before{opacity:.16;opacity:var(--mdc-ripple-hover-opacity,.16)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--activated.mdc-ripple-upgraded--background-focused .mdc-deprecated-list-item__ripple:before,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--activated:not(.mdc-ripple-upgraded):focus .mdc-deprecated-list-item__ripple:before{opacity:.24;opacity:var(--mdc-ripple-focus-opacity,.24);transition-duration:75ms}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--activated:not(.mdc-ripple-upgraded) .mdc-deprecated-list-item__ripple:after{transition:opacity .15s linear}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--activated:not(.mdc-ripple-upgraded):active .mdc-deprecated-list-item__ripple:after{opacity:.24;opacity:var(--mdc-ripple-press-opacity,.24);transition-duration:75ms}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--activated .mdc-list-item__ripple:before{opacity:.12;opacity:var(--mdc-ripple-activated-opacity,.12)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--activated .mdc-list-item__ripple:after,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--activated .mdc-list-item__ripple:before{background-color:#6200ee;background-color:var(--mdc-ripple-color,var(--mdc-theme-primary,#6200ee))}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--activated.mdc-ripple-surface--hover .mdc-list-item__ripple:before,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--activated:hover .mdc-list-item__ripple:before{opacity:.16;opacity:var(--mdc-ripple-hover-opacity,.16)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--activated.mdc-ripple-upgraded--background-focused .mdc-list-item__ripple:before,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--activated:not(.mdc-ripple-upgraded):focus .mdc-list-item__ripple:before{opacity:.24;opacity:var(--mdc-ripple-focus-opacity,.24);transition-duration:75ms}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--activated:not(.mdc-ripple-upgraded) .mdc-list-item__ripple:after{transition:opacity .15s linear}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--activated:not(.mdc-ripple-upgraded):active .mdc-list-item__ripple:after{opacity:.24;opacity:var(--mdc-ripple-press-opacity,.24);transition-duration:75ms}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--activated.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity,0.24)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--selected .mdc-deprecated-list-item__ripple:before{opacity:.08;opacity:var(--mdc-ripple-selected-opacity,.08)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--selected .mdc-deprecated-list-item__ripple:after,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--selected .mdc-deprecated-list-item__ripple:before{background-color:#6200ee;background-color:var(--mdc-ripple-color,var(--mdc-theme-primary,#6200ee))}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--selected.mdc-ripple-surface--hover .mdc-deprecated-list-item__ripple:before,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--selected:hover .mdc-deprecated-list-item__ripple:before{opacity:.12;opacity:var(--mdc-ripple-hover-opacity,.12)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--selected.mdc-ripple-upgraded--background-focused .mdc-deprecated-list-item__ripple:before,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--selected:not(.mdc-ripple-upgraded):focus .mdc-deprecated-list-item__ripple:before{opacity:.2;opacity:var(--mdc-ripple-focus-opacity,.2);transition-duration:75ms}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--selected:not(.mdc-ripple-upgraded) .mdc-deprecated-list-item__ripple:after{transition:opacity .15s linear}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--selected:not(.mdc-ripple-upgraded):active .mdc-deprecated-list-item__ripple:after{opacity:.2;opacity:var(--mdc-ripple-press-opacity,.2);transition-duration:75ms}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--selected .mdc-list-item__ripple:before{opacity:.08;opacity:var(--mdc-ripple-selected-opacity,.08)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--selected .mdc-list-item__ripple:after,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--selected .mdc-list-item__ripple:before{background-color:#6200ee;background-color:var(--mdc-ripple-color,var(--mdc-theme-primary,#6200ee))}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--selected.mdc-ripple-surface--hover .mdc-list-item__ripple:before,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--selected:hover .mdc-list-item__ripple:before{opacity:.12;opacity:var(--mdc-ripple-hover-opacity,.12)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--selected.mdc-ripple-upgraded--background-focused .mdc-list-item__ripple:before,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--selected:not(.mdc-ripple-upgraded):focus .mdc-list-item__ripple:before{opacity:.2;opacity:var(--mdc-ripple-focus-opacity,.2);transition-duration:75ms}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--selected:not(.mdc-ripple-upgraded) .mdc-list-item__ripple:after{transition:opacity .15s linear}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--selected:not(.mdc-ripple-upgraded):active .mdc-list-item__ripple:after{opacity:.2;opacity:var(--mdc-ripple-press-opacity,.2);transition-duration:75ms}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item--selected.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity,0.2)}:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item .mdc-deprecated-list-item__ripple,:not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item .mdc-list-item__ripple{height:100%;left:0;pointer-events:none;position:absolute;top:0;width:100%}.mdc-deprecated-list-item--disabled{--mdc-ripple-fg-size:0;--mdc-ripple-left:0;--mdc-ripple-top:0;--mdc-ripple-fg-scale:1;--mdc-ripple-fg-translate-end:0;--mdc-ripple-fg-translate-start:0;-webkit-tap-highlight-color:rgba(0,0,0,0);will-change:transform,opacity}.mdc-deprecated-list-item--disabled .mdc-deprecated-list-item__ripple:after,.mdc-deprecated-list-item--disabled .mdc-deprecated-list-item__ripple:before{border-radius:50%;content:"";opacity:0;pointer-events:none;position:absolute}.mdc-deprecated-list-item--disabled .mdc-deprecated-list-item__ripple:before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1;z-index:var(--mdc-ripple-z-index,1)}.mdc-deprecated-list-item--disabled .mdc-deprecated-list-item__ripple:after{z-index:0;z-index:var(--mdc-ripple-z-index,0)}.mdc-deprecated-list-item--disabled.mdc-ripple-upgraded .mdc-deprecated-list-item__ripple:before{transform:scale(var(--mdc-ripple-fg-scale,1))}.mdc-deprecated-list-item--disabled.mdc-ripple-upgraded .mdc-deprecated-list-item__ripple:after{left:0;top:0;transform:scale(0);transform-origin:center center}.mdc-deprecated-list-item--disabled.mdc-ripple-upgraded--unbounded .mdc-deprecated-list-item__ripple:after{left:var(--mdc-ripple-left,0);top:var(--mdc-ripple-top,0)}.mdc-deprecated-list-item--disabled.mdc-ripple-upgraded--foreground-activation .mdc-deprecated-list-item__ripple:after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-deprecated-list-item--disabled.mdc-ripple-upgraded--foreground-deactivation .mdc-deprecated-list-item__ripple:after{animation:mdc-ripple-fg-opacity-out .15s;transform:translate(var(--mdc-ripple-fg-translate-end,0)) scale(var(--mdc-ripple-fg-scale,1))}.mdc-deprecated-list-item--disabled .mdc-list-item__ripple:after,.mdc-deprecated-list-item--disabled .mdc-list-item__ripple:before{border-radius:50%;content:"";opacity:0;pointer-events:none;position:absolute}.mdc-deprecated-list-item--disabled .mdc-list-item__ripple:before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1;z-index:var(--mdc-ripple-z-index,1)}.mdc-deprecated-list-item--disabled .mdc-list-item__ripple:after{z-index:0;z-index:var(--mdc-ripple-z-index,0)}.mdc-deprecated-list-item--disabled.mdc-ripple-upgraded .mdc-list-item__ripple:before{transform:scale(var(--mdc-ripple-fg-scale,1))}.mdc-deprecated-list-item--disabled.mdc-ripple-upgraded .mdc-list-item__ripple:after{left:0;top:0;transform:scale(0);transform-origin:center center}.mdc-deprecated-list-item--disabled.mdc-ripple-upgraded--unbounded .mdc-list-item__ripple:after{left:var(--mdc-ripple-left,0);top:var(--mdc-ripple-top,0)}.mdc-deprecated-list-item--disabled.mdc-ripple-upgraded--foreground-activation .mdc-list-item__ripple:after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-deprecated-list-item--disabled.mdc-ripple-upgraded--foreground-deactivation .mdc-list-item__ripple:after{animation:mdc-ripple-fg-opacity-out .15s;transform:translate(var(--mdc-ripple-fg-translate-end,0)) scale(var(--mdc-ripple-fg-scale,1))}.mdc-deprecated-list-item--disabled .mdc-deprecated-list-item__ripple:after,.mdc-deprecated-list-item--disabled .mdc-deprecated-list-item__ripple:before{height:200%;left:-50%;top:-50%;width:200%}.mdc-deprecated-list-item--disabled.mdc-ripple-upgraded .mdc-deprecated-list-item__ripple:after{height:var(--mdc-ripple-fg-size,100%);width:var(--mdc-ripple-fg-size,100%)}.mdc-deprecated-list-item--disabled .mdc-list-item__ripple:after,.mdc-deprecated-list-item--disabled .mdc-list-item__ripple:before{height:200%;left:-50%;top:-50%;width:200%}.mdc-deprecated-list-item--disabled.mdc-ripple-upgraded .mdc-list-item__ripple:after{height:var(--mdc-ripple-fg-size,100%);width:var(--mdc-ripple-fg-size,100%)}.mdc-deprecated-list-item--disabled .mdc-deprecated-list-item__ripple:after,.mdc-deprecated-list-item--disabled .mdc-deprecated-list-item__ripple:before,.mdc-deprecated-list-item--disabled .mdc-list-item__ripple:after,.mdc-deprecated-list-item--disabled .mdc-list-item__ripple:before{background-color:#000;background-color:var(--mdc-ripple-color,#000)}.mdc-deprecated-list-item--disabled.mdc-ripple-upgraded--background-focused .mdc-deprecated-list-item__ripple:before,.mdc-deprecated-list-item--disabled.mdc-ripple-upgraded--background-focused .mdc-list-item__ripple:before,.mdc-deprecated-list-item--disabled:not(.mdc-ripple-upgraded):focus .mdc-deprecated-list-item__ripple:before,.mdc-deprecated-list-item--disabled:not(.mdc-ripple-upgraded):focus .mdc-list-item__ripple:before{opacity:.12;opacity:var(--mdc-ripple-focus-opacity,.12);transition-duration:75ms}.mdc-deprecated-list-item--disabled .mdc-deprecated-list-item__ripple,.mdc-deprecated-list-item--disabled .mdc-list-item__ripple{height:100%;left:0;pointer-events:none;position:absolute;top:0;width:100%}:not(.mdc-list-item--disabled).mdc-list-item{--mdc-ripple-fg-size:0;--mdc-ripple-left:0;--mdc-ripple-top:0;--mdc-ripple-fg-scale:1;--mdc-ripple-fg-translate-end:0;--mdc-ripple-fg-translate-start:0;-webkit-tap-highlight-color:rgba(0,0,0,0);will-change:transform,opacity}:not(.mdc-list-item--disabled).mdc-list-item .mdc-list-item__ripple:after,:not(.mdc-list-item--disabled).mdc-list-item .mdc-list-item__ripple:before{border-radius:50%;content:"";opacity:0;pointer-events:none;position:absolute}:not(.mdc-list-item--disabled).mdc-list-item .mdc-list-item__ripple:before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1;z-index:var(--mdc-ripple-z-index,1)}:not(.mdc-list-item--disabled).mdc-list-item .mdc-list-item__ripple:after{z-index:0;z-index:var(--mdc-ripple-z-index,0)}:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded .mdc-list-item__ripple:before{transform:scale(var(--mdc-ripple-fg-scale,1))}:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded .mdc-list-item__ripple:after{left:0;top:0;transform:scale(0);transform-origin:center center}:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded--unbounded .mdc-list-item__ripple:after{left:var(--mdc-ripple-left,0);top:var(--mdc-ripple-top,0)}:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded--foreground-activation .mdc-list-item__ripple:after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded--foreground-deactivation .mdc-list-item__ripple:after{animation:mdc-ripple-fg-opacity-out .15s;transform:translate(var(--mdc-ripple-fg-translate-end,0)) scale(var(--mdc-ripple-fg-scale,1))}:not(.mdc-list-item--disabled).mdc-list-item .mdc-list-item__ripple:after,:not(.mdc-list-item--disabled).mdc-list-item .mdc-list-item__ripple:before{height:200%;left:-50%;top:-50%;width:200%}:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded .mdc-list-item__ripple:after{height:var(--mdc-ripple-fg-size,100%);width:var(--mdc-ripple-fg-size,100%)}:not(.mdc-list-item--disabled).mdc-list-item .mdc-list-item__ripple:after,:not(.mdc-list-item--disabled).mdc-list-item .mdc-list-item__ripple:before{background-color:#000;background-color:var(--mdc-ripple-color,#000)}:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-surface--hover .mdc-list-item__ripple:before,:not(.mdc-list-item--disabled).mdc-list-item:hover .mdc-list-item__ripple:before{opacity:.04;opacity:var(--mdc-ripple-hover-opacity,.04)}:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded--background-focused .mdc-list-item__ripple:before,:not(.mdc-list-item--disabled).mdc-list-item:not(.mdc-ripple-upgraded):focus .mdc-list-item__ripple:before{opacity:.12;opacity:var(--mdc-ripple-focus-opacity,.12);transition-duration:75ms}:not(.mdc-list-item--disabled).mdc-list-item:not(.mdc-ripple-upgraded) .mdc-list-item__ripple:after{transition:opacity .15s linear}:not(.mdc-list-item--disabled).mdc-list-item:not(.mdc-ripple-upgraded):active .mdc-list-item__ripple:after{opacity:.12;opacity:var(--mdc-ripple-press-opacity,.12);transition-duration:75ms}:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity,0.12)}:not(.mdc-list-item--disabled).mdc-list-item--activated .mdc-list-item__ripple:before{opacity:.12;opacity:var(--mdc-ripple-activated-opacity,.12)}:not(.mdc-list-item--disabled).mdc-list-item--activated .mdc-list-item__ripple:after,:not(.mdc-list-item--disabled).mdc-list-item--activated .mdc-list-item__ripple:before{background-color:#6200ee;background-color:var(--mdc-ripple-color,var(--mdc-theme-primary,#6200ee))}:not(.mdc-list-item--disabled).mdc-list-item--activated.mdc-ripple-surface--hover .mdc-list-item__ripple:before,:not(.mdc-list-item--disabled).mdc-list-item--activated:hover .mdc-list-item__ripple:before{opacity:.16;opacity:var(--mdc-ripple-hover-opacity,.16)}:not(.mdc-list-item--disabled).mdc-list-item--activated.mdc-ripple-upgraded--background-focused .mdc-list-item__ripple:before,:not(.mdc-list-item--disabled).mdc-list-item--activated:not(.mdc-ripple-upgraded):focus .mdc-list-item__ripple:before{opacity:.24;opacity:var(--mdc-ripple-focus-opacity,.24);transition-duration:75ms}:not(.mdc-list-item--disabled).mdc-list-item--activated:not(.mdc-ripple-upgraded) .mdc-list-item__ripple:after{transition:opacity .15s linear}:not(.mdc-list-item--disabled).mdc-list-item--activated:not(.mdc-ripple-upgraded):active .mdc-list-item__ripple:after{opacity:.24;opacity:var(--mdc-ripple-press-opacity,.24);transition-duration:75ms}:not(.mdc-list-item--disabled).mdc-list-item--activated.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity,0.24)}:not(.mdc-list-item--disabled).mdc-list-item--selected .mdc-list-item__ripple:before{opacity:.08;opacity:var(--mdc-ripple-selected-opacity,.08)}:not(.mdc-list-item--disabled).mdc-list-item--selected .mdc-list-item__ripple:after,:not(.mdc-list-item--disabled).mdc-list-item--selected .mdc-list-item__ripple:before{background-color:#6200ee;background-color:var(--mdc-ripple-color,var(--mdc-theme-primary,#6200ee))}:not(.mdc-list-item--disabled).mdc-list-item--selected.mdc-ripple-surface--hover .mdc-list-item__ripple:before,:not(.mdc-list-item--disabled).mdc-list-item--selected:hover .mdc-list-item__ripple:before{opacity:.12;opacity:var(--mdc-ripple-hover-opacity,.12)}:not(.mdc-list-item--disabled).mdc-list-item--selected.mdc-ripple-upgraded--background-focused .mdc-list-item__ripple:before,:not(.mdc-list-item--disabled).mdc-list-item--selected:not(.mdc-ripple-upgraded):focus .mdc-list-item__ripple:before{opacity:.2;opacity:var(--mdc-ripple-focus-opacity,.2);transition-duration:75ms}:not(.mdc-list-item--disabled).mdc-list-item--selected:not(.mdc-ripple-upgraded) .mdc-list-item__ripple:after{transition:opacity .15s linear}:not(.mdc-list-item--disabled).mdc-list-item--selected:not(.mdc-ripple-upgraded):active .mdc-list-item__ripple:after{opacity:.2;opacity:var(--mdc-ripple-press-opacity,.2);transition-duration:75ms}:not(.mdc-list-item--disabled).mdc-list-item--selected.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity,0.2)}:not(.mdc-list-item--disabled).mdc-list-item .mdc-list-item__ripple{height:100%;left:0;pointer-events:none;position:absolute;top:0;width:100%}.mdc-list-item--disabled{--mdc-ripple-fg-size:0;--mdc-ripple-left:0;--mdc-ripple-top:0;--mdc-ripple-fg-scale:1;--mdc-ripple-fg-translate-end:0;--mdc-ripple-fg-translate-start:0;-webkit-tap-highlight-color:rgba(0,0,0,0);will-change:transform,opacity}.mdc-list-item--disabled .mdc-list-item__ripple:after,.mdc-list-item--disabled .mdc-list-item__ripple:before{border-radius:50%;content:"";opacity:0;pointer-events:none;position:absolute}.mdc-list-item--disabled .mdc-list-item__ripple:before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1;z-index:var(--mdc-ripple-z-index,1)}.mdc-list-item--disabled .mdc-list-item__ripple:after{z-index:0;z-index:var(--mdc-ripple-z-index,0)}.mdc-list-item--disabled.mdc-ripple-upgraded .mdc-list-item__ripple:before{transform:scale(var(--mdc-ripple-fg-scale,1))}.mdc-list-item--disabled.mdc-ripple-upgraded .mdc-list-item__ripple:after{left:0;top:0;transform:scale(0);transform-origin:center center}.mdc-list-item--disabled.mdc-ripple-upgraded--unbounded .mdc-list-item__ripple:after{left:var(--mdc-ripple-left,0);top:var(--mdc-ripple-top,0)}.mdc-list-item--disabled.mdc-ripple-upgraded--foreground-activation .mdc-list-item__ripple:after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-list-item--disabled.mdc-ripple-upgraded--foreground-deactivation .mdc-list-item__ripple:after{animation:mdc-ripple-fg-opacity-out .15s;transform:translate(var(--mdc-ripple-fg-translate-end,0)) scale(var(--mdc-ripple-fg-scale,1))}.mdc-list-item--disabled .mdc-list-item__ripple:after,.mdc-list-item--disabled .mdc-list-item__ripple:before{height:200%;left:-50%;top:-50%;width:200%}.mdc-list-item--disabled.mdc-ripple-upgraded .mdc-list-item__ripple:after{height:var(--mdc-ripple-fg-size,100%);width:var(--mdc-ripple-fg-size,100%)}.mdc-list-item--disabled .mdc-list-item__ripple:after,.mdc-list-item--disabled .mdc-list-item__ripple:before{background-color:#000;background-color:var(--mdc-ripple-color,#000)}.mdc-list-item--disabled.mdc-ripple-upgraded--background-focused .mdc-list-item__ripple:before,.mdc-list-item--disabled:not(.mdc-ripple-upgraded):focus .mdc-list-item__ripple:before{opacity:.12;opacity:var(--mdc-ripple-focus-opacity,.12);transition-duration:75ms}.mdc-list-item--disabled .mdc-list-item__ripple{height:100%;left:0;pointer-events:none;position:absolute;top:0;width:100%}.mdc-ripple-surface{--mdc-ripple-fg-size:0;--mdc-ripple-left:0;--mdc-ripple-top:0;--mdc-ripple-fg-scale:1;--mdc-ripple-fg-translate-end:0;--mdc-ripple-fg-translate-start:0;-webkit-tap-highlight-color:rgba(0,0,0,0);outline:none;overflow:hidden;position:relative;will-change:transform,opacity}.mdc-ripple-surface:after,.mdc-ripple-surface:before{border-radius:50%;content:"";opacity:0;pointer-events:none;position:absolute}.mdc-ripple-surface:before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1;z-index:var(--mdc-ripple-z-index,1)}.mdc-ripple-surface:after{z-index:0;z-index:var(--mdc-ripple-z-index,0)}.mdc-ripple-surface.mdc-ripple-upgraded:before{transform:scale(var(--mdc-ripple-fg-scale,1))}.mdc-ripple-surface.mdc-ripple-upgraded:after{left:0;top:0;transform:scale(0);transform-origin:center center}.mdc-ripple-surface.mdc-ripple-upgraded--unbounded:after{left:var(--mdc-ripple-left,0);top:var(--mdc-ripple-top,0)}.mdc-ripple-surface.mdc-ripple-upgraded--foreground-activation:after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-ripple-surface.mdc-ripple-upgraded--foreground-deactivation:after{animation:mdc-ripple-fg-opacity-out .15s;transform:translate(var(--mdc-ripple-fg-translate-end,0)) scale(var(--mdc-ripple-fg-scale,1))}.mdc-ripple-surface:after,.mdc-ripple-surface:before{height:200%;left:-50%;top:-50%;width:200%}.mdc-ripple-surface.mdc-ripple-upgraded:after{height:var(--mdc-ripple-fg-size,100%);width:var(--mdc-ripple-fg-size,100%)}.mdc-ripple-surface[data-mdc-ripple-is-unbounded],.mdc-ripple-upgraded--unbounded{overflow:visible}.mdc-ripple-surface[data-mdc-ripple-is-unbounded]:after,.mdc-ripple-surface[data-mdc-ripple-is-unbounded]:before,.mdc-ripple-upgraded--unbounded:after,.mdc-ripple-upgraded--unbounded:before{height:100%;left:0;top:0;width:100%}.mdc-ripple-surface[data-mdc-ripple-is-unbounded].mdc-ripple-upgraded:after,.mdc-ripple-surface[data-mdc-ripple-is-unbounded].mdc-ripple-upgraded:before,.mdc-ripple-upgraded--unbounded.mdc-ripple-upgraded:after,.mdc-ripple-upgraded--unbounded.mdc-ripple-upgraded:before{height:var(--mdc-ripple-fg-size,100%);left:var(--mdc-ripple-left,0);top:var(--mdc-ripple-top,0);width:var(--mdc-ripple-fg-size,100%)}.mdc-ripple-surface[data-mdc-ripple-is-unbounded].mdc-ripple-upgraded:after,.mdc-ripple-upgraded--unbounded.mdc-ripple-upgraded:after{height:var(--mdc-ripple-fg-size,100%);width:var(--mdc-ripple-fg-size,100%)}.mdc-ripple-surface:after,.mdc-ripple-surface:before{background-color:#000;background-color:var(--mdc-ripple-color,#000)}.mdc-ripple-surface.mdc-ripple-surface--hover:before,.mdc-ripple-surface:hover:before{opacity:.04;opacity:var(--mdc-ripple-hover-opacity,.04)}.mdc-ripple-surface.mdc-ripple-upgraded--background-focused:before,.mdc-ripple-surface:not(.mdc-ripple-upgraded):focus:before{opacity:.12;opacity:var(--mdc-ripple-focus-opacity,.12);transition-duration:75ms}.mdc-ripple-surface:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}.mdc-ripple-surface:not(.mdc-ripple-upgraded):active:after{opacity:.12;opacity:var(--mdc-ripple-press-opacity,.12);transition-duration:75ms}.mdc-ripple-surface.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity,0.12)}.smui-ripple-surface--primary:after,.smui-ripple-surface--primary:before{background-color:#6200ee;background-color:var(--mdc-ripple-color,var(--mdc-theme-primary,#6200ee))}.smui-ripple-surface--primary.mdc-ripple-surface--hover:before,.smui-ripple-surface--primary:hover:before{opacity:.04;opacity:var(--mdc-ripple-hover-opacity,.04)}.smui-ripple-surface--primary.mdc-ripple-upgraded--background-focused:before,.smui-ripple-surface--primary:not(.mdc-ripple-upgraded):focus:before{opacity:.12;opacity:var(--mdc-ripple-focus-opacity,.12);transition-duration:75ms}.smui-ripple-surface--primary:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}.smui-ripple-surface--primary:not(.mdc-ripple-upgraded):active:after{opacity:.12;opacity:var(--mdc-ripple-press-opacity,.12);transition-duration:75ms}.smui-ripple-surface--primary.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity,0.12)}.smui-ripple-surface--secondary:after,.smui-ripple-surface--secondary:before{background-color:#018786;background-color:var(--mdc-ripple-color,var(--mdc-theme-secondary,#018786))}.smui-ripple-surface--secondary.mdc-ripple-surface--hover:before,.smui-ripple-surface--secondary:hover:before{opacity:.04;opacity:var(--mdc-ripple-hover-opacity,.04)}.smui-ripple-surface--secondary.mdc-ripple-upgraded--background-focused:before,.smui-ripple-surface--secondary:not(.mdc-ripple-upgraded):focus:before{opacity:.12;opacity:var(--mdc-ripple-focus-opacity,.12);transition-duration:75ms}.smui-ripple-surface--secondary:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}.smui-ripple-surface--secondary:not(.mdc-ripple-upgraded):active:after{opacity:.12;opacity:var(--mdc-ripple-press-opacity,.12);transition-duration:75ms}.smui-ripple-surface--secondary.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity,0.12)}.smui-list--three-line .mdc-deprecated-list-item__text{align-self:flex-start}.smui-list--three-line .mdc-deprecated-list-item{height:88px}.smui-list--three-line.mdc-deprecated-list--dense .mdc-deprecated-list-item{height:76px}.mdc-deprecated-list-item.smui-menu-item--non-interactive{cursor:auto}.mdc-elevation-overlay{background-color:#fff;background-color:var(--mdc-elevation-overlay-color,#fff);border-radius:inherit;opacity:0;opacity:var(--mdc-elevation-overlay-opacity,0);pointer-events:none;position:absolute;transition:opacity .28s cubic-bezier(.4,0,.2,1)}.mdc-menu{min-width:112px;min-width:var(--mdc-menu-min-width,112px)}.mdc-menu .mdc-deprecated-list-item__graphic,.mdc-menu .mdc-deprecated-list-item__meta{color:rgba(0,0,0,.87)}.mdc-menu .mdc-menu-item--submenu-open .mdc-deprecated-list-item__ripple:before,.mdc-menu .mdc-menu-item--submenu-open .mdc-list-item__ripple:before{opacity:.04}.mdc-menu .mdc-deprecated-list{color:rgba(0,0,0,.87)}.mdc-menu .mdc-deprecated-list,.mdc-menu .mdc-list{position:relative}.mdc-menu .mdc-deprecated-list .mdc-elevation-overlay,.mdc-menu .mdc-list .mdc-elevation-overlay{height:100%;left:0;top:0;width:100%}.mdc-menu .mdc-deprecated-list-divider{margin:8px 0}.mdc-menu .mdc-deprecated-list-item{user-select:none}.mdc-menu .mdc-deprecated-list-item--disabled{cursor:auto}.mdc-menu a.mdc-deprecated-list-item .mdc-deprecated-list-item__graphic,.mdc-menu a.mdc-deprecated-list-item .mdc-deprecated-list-item__text{pointer-events:none}.mdc-menu__selection-group{fill:currentColor;padding:0}.mdc-menu__selection-group .mdc-deprecated-list-item{padding-left:56px;padding-right:16px}.mdc-menu__selection-group .mdc-deprecated-list-item[dir=rtl],[dir=rtl] .mdc-menu__selection-group .mdc-deprecated-list-item{padding-left:16px;padding-right:56px}.mdc-menu__selection-group .mdc-menu__selection-group-icon{display:none;left:16px;position:absolute;right:auto;top:50%;transform:translateY(-50%)}.mdc-menu__selection-group .mdc-menu__selection-group-icon[dir=rtl],[dir=rtl] .mdc-menu__selection-group .mdc-menu__selection-group-icon{left:auto;right:16px}.mdc-menu-item--selected .mdc-menu__selection-group-icon{display:inline}.mdc-menu-surface{transform-origin-left:top left;transform-origin-right:top right;background-color:#fff;background-color:var(--mdc-theme-surface,#fff);border-radius:4px;border-radius:var(--mdc-shape-medium,4px);box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);box-sizing:border-box;color:#000;color:var(--mdc-theme-on-surface,#000);display:none;margin:0;max-height:calc(100vh - 32px);max-height:var(--mdc-menu-max-height,calc(100vh - 32px));max-width:calc(100vw - 32px);max-width:var(--mdc-menu-max-width,calc(100vw - 32px));opacity:0;overflow:auto;padding:0;position:absolute;transform:scale(1);transform-origin:top left;transition:opacity .03s linear,transform .12s cubic-bezier(0,0,.2,1),height .25s cubic-bezier(0,0,.2,1);will-change:transform,opacity;z-index:8}.mdc-menu-surface:focus{outline:none}.mdc-menu-surface--animating-open{display:inline-block;opacity:0;transform:scale(.8)}.mdc-menu-surface--open{display:inline-block;opacity:1;transform:scale(1)}.mdc-menu-surface--animating-closed{display:inline-block;opacity:0;transition:opacity 75ms linear}.mdc-menu-surface[dir=rtl],[dir=rtl] .mdc-menu-surface{transform-origin-left:top right;transform-origin-right:top left}.mdc-menu-surface--anchor{overflow:visible;position:relative}.mdc-menu-surface--fixed{position:fixed}.mdc-menu-surface--fullwidth{width:100%}.smui-menu-surface--static{display:inline-block;opacity:1;position:static;transform:scale(1);z-index:0}.mdc-menu__selection-group .mdc-list-item__graphic.mdc-menu__selection-group-icon{display:none}.mdc-menu-item--selected .mdc-list-item__graphic.mdc-menu__selection-group-icon{display:inline}.mdc-notched-outline{box-sizing:border-box;display:flex;height:100%;left:0;max-width:100%;pointer-events:none;position:absolute;right:0;text-align:left;top:0;width:100%}.mdc-notched-outline[dir=rtl],[dir=rtl] .mdc-notched-outline{text-align:right}.mdc-notched-outline__leading,.mdc-notched-outline__notch,.mdc-notched-outline__trailing{border-bottom:1px solid;border-top:1px solid;box-sizing:border-box;height:100%;pointer-events:none}.mdc-notched-outline__leading{border-left:1px solid;border-right:none;width:12px}.mdc-notched-outline__leading[dir=rtl],.mdc-notched-outline__trailing,[dir=rtl] .mdc-notched-outline__leading{border-left:none;border-right:1px solid}.mdc-notched-outline__trailing{flex-grow:1}.mdc-notched-outline__trailing[dir=rtl],[dir=rtl] .mdc-notched-outline__trailing{border-left:1px solid;border-right:none}.mdc-notched-outline__notch{flex:0 0 auto;max-width:calc(100% - 24px);width:auto}.mdc-notched-outline .mdc-floating-label{display:inline-block;max-width:100%;position:relative}.mdc-notched-outline .mdc-floating-label--float-above{text-overflow:clip}.mdc-notched-outline--upgraded .mdc-floating-label--float-above{max-width:133.3333333333%}.mdc-notched-outline--notched .mdc-notched-outline__notch{border-top:none;padding-left:0;padding-right:8px}.mdc-notched-outline--notched .mdc-notched-outline__notch[dir=rtl],[dir=rtl] .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-left:8px;padding-right:0}.mdc-notched-outline--no-label .mdc-notched-outline__notch{display:none}.mdc-text-field--filled{--mdc-ripple-fg-size:0;--mdc-ripple-left:0;--mdc-ripple-top:0;--mdc-ripple-fg-scale:1;--mdc-ripple-fg-translate-end:0;--mdc-ripple-fg-translate-start:0;-webkit-tap-highlight-color:rgba(0,0,0,0);will-change:transform,opacity}.mdc-text-field--filled .mdc-text-field__ripple:after,.mdc-text-field--filled .mdc-text-field__ripple:before{border-radius:50%;content:"";opacity:0;pointer-events:none;position:absolute}.mdc-text-field--filled .mdc-text-field__ripple:before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1;z-index:var(--mdc-ripple-z-index,1)}.mdc-text-field--filled .mdc-text-field__ripple:after{z-index:0;z-index:var(--mdc-ripple-z-index,0)}.mdc-text-field--filled.mdc-ripple-upgraded .mdc-text-field__ripple:before{transform:scale(var(--mdc-ripple-fg-scale,1))}.mdc-text-field--filled.mdc-ripple-upgraded .mdc-text-field__ripple:after{left:0;top:0;transform:scale(0);transform-origin:center center}.mdc-text-field--filled.mdc-ripple-upgraded--unbounded .mdc-text-field__ripple:after{left:var(--mdc-ripple-left,0);top:var(--mdc-ripple-top,0)}.mdc-text-field--filled.mdc-ripple-upgraded--foreground-activation .mdc-text-field__ripple:after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-text-field--filled.mdc-ripple-upgraded--foreground-deactivation .mdc-text-field__ripple:after{animation:mdc-ripple-fg-opacity-out .15s;transform:translate(var(--mdc-ripple-fg-translate-end,0)) scale(var(--mdc-ripple-fg-scale,1))}.mdc-text-field--filled .mdc-text-field__ripple:after,.mdc-text-field--filled .mdc-text-field__ripple:before{height:200%;left:-50%;top:-50%;width:200%}.mdc-text-field--filled.mdc-ripple-upgraded .mdc-text-field__ripple:after{height:var(--mdc-ripple-fg-size,100%);width:var(--mdc-ripple-fg-size,100%)}.mdc-text-field__ripple{height:100%;left:0;pointer-events:none;position:absolute;top:0;width:100%}.mdc-text-field{align-items:baseline;border-bottom-left-radius:0;border-bottom-right-radius:0;border-top-left-radius:4px;border-top-left-radius:var(--mdc-shape-small,4px);border-top-right-radius:4px;border-top-right-radius:var(--mdc-shape-small,4px);box-sizing:border-box;display:inline-flex;overflow:hidden;padding:0 16px;position:relative;will-change:opacity,transform,color}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-floating-label{color:rgba(0,0,0,.6)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__input{color:rgba(0,0,0,.87)}@media{.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__input::placeholder{color:rgba(0,0,0,.54)}}@media{.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__input:-ms-input-placeholder{color:rgba(0,0,0,.54)}}.mdc-text-field .mdc-text-field__input{caret-color:#6200ee;caret-color:var(--mdc-theme-primary,#6200ee)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field-character-counter,.mdc-text-field:not(.mdc-text-field--disabled)+.mdc-text-field-helper-line .mdc-text-field-character-counter,.mdc-text-field:not(.mdc-text-field--disabled)+.mdc-text-field-helper-line .mdc-text-field-helper-text{color:rgba(0,0,0,.6)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__icon--leading,.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__icon--trailing{color:rgba(0,0,0,.54)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__affix--prefix,.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__affix--suffix{color:rgba(0,0,0,.6)}.mdc-text-field .mdc-floating-label{pointer-events:none;top:50%;transform:translateY(-50%)}.mdc-text-field__input{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;appearance:none;background:none;border:none;border-radius:0;font-family:Roboto,sans-serif;font-family:var(--mdc-typography-subtitle1-font-family,var(--mdc-typography-font-family,Roboto,sans-serif));font-size:1rem;font-size:var(--mdc-typography-subtitle1-font-size,1rem);font-weight:400;font-weight:var(--mdc-typography-subtitle1-font-weight,400);height:28px;letter-spacing:.009375em;letter-spacing:var(--mdc-typography-subtitle1-letter-spacing,.009375em);min-width:0;padding:0;text-decoration:inherit;text-decoration:var(--mdc-typography-subtitle1-text-decoration,inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle1-text-transform,inherit);transition:opacity .15s cubic-bezier(.4,0,.2,1) 0ms;width:100%}.mdc-text-field__input::-ms-clear{display:none}.mdc-text-field__input::-webkit-calendar-picker-indicator{display:none}.mdc-text-field__input:focus{outline:none}.mdc-text-field__input:invalid{box-shadow:none}@media{.mdc-text-field__input::placeholder{opacity:0;transition:opacity 67ms cubic-bezier(.4,0,.2,1) 0ms}}@media{.mdc-text-field__input:-ms-input-placeholder{opacity:0;transition:opacity 67ms cubic-bezier(.4,0,.2,1) 0ms}}@media{.mdc-text-field--focused .mdc-text-field__input::placeholder,.mdc-text-field--no-label .mdc-text-field__input::placeholder{opacity:1;transition-delay:40ms;transition-duration:.11s}}@media{.mdc-text-field--focused .mdc-text-field__input:-ms-input-placeholder,.mdc-text-field--no-label .mdc-text-field__input:-ms-input-placeholder{opacity:1;transition-delay:40ms;transition-duration:.11s}}.mdc-text-field__affix{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto,sans-serif;font-family:var(--mdc-typography-subtitle1-font-family,var(--mdc-typography-font-family,Roboto,sans-serif));font-size:1rem;font-size:var(--mdc-typography-subtitle1-font-size,1rem);font-weight:400;font-weight:var(--mdc-typography-subtitle1-font-weight,400);height:28px;letter-spacing:.009375em;letter-spacing:var(--mdc-typography-subtitle1-letter-spacing,.009375em);opacity:0;text-decoration:inherit;text-decoration:var(--mdc-typography-subtitle1-text-decoration,inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle1-text-transform,inherit);transition:opacity .15s cubic-bezier(.4,0,.2,1) 0ms;white-space:nowrap}.mdc-text-field--label-floating .mdc-text-field__affix,.mdc-text-field--no-label .mdc-text-field__affix{opacity:1}@supports(-webkit-hyphens:none){.mdc-text-field--outlined .mdc-text-field__affix{align-items:center;align-self:center;display:inline-flex;height:100%}}.mdc-text-field__affix--prefix{padding-left:0;padding-right:2px}.mdc-text-field__affix--prefix[dir=rtl],[dir=rtl] .mdc-text-field__affix--prefix{padding-left:2px;padding-right:0}.mdc-text-field--end-aligned .mdc-text-field__affix--prefix{padding-left:0;padding-right:12px}.mdc-text-field--end-aligned .mdc-text-field__affix--prefix[dir=rtl],.mdc-text-field__affix--suffix,[dir=rtl] .mdc-text-field--end-aligned .mdc-text-field__affix--prefix{padding-left:12px;padding-right:0}.mdc-text-field__affix--suffix[dir=rtl],[dir=rtl] .mdc-text-field__affix--suffix{padding-left:0;padding-right:12px}.mdc-text-field--end-aligned .mdc-text-field__affix--suffix{padding-left:2px;padding-right:0}.mdc-text-field--end-aligned .mdc-text-field__affix--suffix[dir=rtl],[dir=rtl] .mdc-text-field--end-aligned .mdc-text-field__affix--suffix{padding-left:0;padding-right:2px}.mdc-text-field--filled{height:56px}.mdc-text-field--filled .mdc-text-field__ripple:after,.mdc-text-field--filled .mdc-text-field__ripple:before{background-color:rgba(0,0,0,.87);background-color:var(--mdc-ripple-color,rgba(0,0,0,.87))}.mdc-text-field--filled.mdc-ripple-surface--hover .mdc-text-field__ripple:before,.mdc-text-field--filled:hover .mdc-text-field__ripple:before{opacity:.04;opacity:var(--mdc-ripple-hover-opacity,.04)}.mdc-text-field--filled.mdc-ripple-upgraded--background-focused .mdc-text-field__ripple:before,.mdc-text-field--filled:not(.mdc-ripple-upgraded):focus .mdc-text-field__ripple:before{opacity:.12;opacity:var(--mdc-ripple-focus-opacity,.12);transition-duration:75ms}.mdc-text-field--filled:before{content:"";display:inline-block;height:40px;vertical-align:0;width:0}.mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:#f5f5f5}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-line-ripple:before{border-bottom-color:rgba(0,0,0,.42)}.mdc-text-field--filled:not(.mdc-text-field--disabled):hover .mdc-line-ripple:before{border-bottom-color:rgba(0,0,0,.87)}.mdc-text-field--filled .mdc-line-ripple:after{border-bottom-color:#6200ee;border-bottom-color:var(--mdc-theme-primary,#6200ee)}.mdc-text-field--filled .mdc-floating-label{left:16px;right:auto}.mdc-text-field--filled .mdc-floating-label[dir=rtl],[dir=rtl] .mdc-text-field--filled .mdc-floating-label{left:auto;right:16px}.mdc-text-field--filled .mdc-floating-label--float-above{transform:translateY(-106%) scale(.75)}.mdc-text-field--filled.mdc-text-field--no-label .mdc-text-field__input{height:100%}.mdc-text-field--filled.mdc-text-field--no-label .mdc-floating-label,.mdc-text-field--filled.mdc-text-field--no-label:before{display:none}@supports(-webkit-hyphens:none){.mdc-text-field--filled.mdc-text-field--no-label .mdc-text-field__affix{align-items:center;align-self:center;display:inline-flex;height:100%}}.mdc-text-field--outlined{height:56px;overflow:visible}.mdc-text-field--outlined .mdc-floating-label--float-above{font-size:.75rem;transform:translateY(-37.25px) scale(1)}.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem;transform:translateY(-34.75px) scale(.75)}.mdc-text-field--outlined .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined .25s 1}@keyframes mdc-floating-label-shake-float-above-text-field-outlined{0%{transform:translateX(0) translateY(-34.75px) scale(.75)}33%{animation-timing-function:cubic-bezier(.5,0,.701732,.495819);transform:translateX(4%) translateY(-34.75px) scale(.75)}66%{animation-timing-function:cubic-bezier(.302435,.381352,.55,.956352);transform:translateX(-4%) translateY(-34.75px) scale(.75)}to{transform:translateX(0) translateY(-34.75px) scale(.75)}}.mdc-text-field--outlined .mdc-text-field__input{height:100%}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__leading,.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__notch,.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.38)}.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.87)}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__trailing{border-color:#6200ee;border-color:var(--mdc-theme-primary,#6200ee)}.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading{border-bottom-left-radius:4px;border-bottom-left-radius:var(--mdc-shape-small,4px);border-bottom-right-radius:0;border-top-left-radius:4px;border-top-left-radius:var(--mdc-shape-small,4px);border-top-right-radius:0}.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading[dir=rtl],[dir=rtl] .mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading{border-bottom-left-radius:0;border-bottom-right-radius:4px;border-bottom-right-radius:var(--mdc-shape-small,4px);border-top-left-radius:0;border-top-right-radius:4px;border-top-right-radius:var(--mdc-shape-small,4px)}@supports(top:max(0%)){.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading{width:max(12px,var(--mdc-shape-small,4px))}.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__notch{max-width:calc(100% - max(12px, var(--mdc-shape-small, 4px))*2)}}.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__trailing{border-bottom-left-radius:0;border-bottom-right-radius:4px;border-bottom-right-radius:var(--mdc-shape-small,4px);border-top-left-radius:0;border-top-right-radius:4px;border-top-right-radius:var(--mdc-shape-small,4px)}.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__trailing[dir=rtl],[dir=rtl] .mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__trailing{border-bottom-left-radius:4px;border-bottom-left-radius:var(--mdc-shape-small,4px);border-bottom-right-radius:0;border-top-left-radius:4px;border-top-left-radius:var(--mdc-shape-small,4px);border-top-right-radius:0}@supports(top:max(0%)){.mdc-text-field--outlined{padding-right:max(16px,var(--mdc-shape-small,4px))}.mdc-text-field--outlined,.mdc-text-field--outlined+.mdc-text-field-helper-line{padding-left:max(16px,calc(var(--mdc-shape-small, 4px) + 4px))}.mdc-text-field--outlined+.mdc-text-field-helper-line{padding-right:max(16px,var(--mdc-shape-small,4px))}}.mdc-text-field--outlined.mdc-text-field--with-leading-icon{padding-left:0}@supports(top:max(0%)){.mdc-text-field--outlined.mdc-text-field--with-leading-icon{padding-right:max(16px,var(--mdc-shape-small,4px))}}.mdc-text-field--outlined.mdc-text-field--with-leading-icon[dir=rtl],[dir=rtl] .mdc-text-field--outlined.mdc-text-field--with-leading-icon{padding-right:0}@supports(top:max(0%)){.mdc-text-field--outlined.mdc-text-field--with-leading-icon[dir=rtl],[dir=rtl] .mdc-text-field--outlined.mdc-text-field--with-leading-icon{padding-left:max(16px,var(--mdc-shape-small,4px))}}.mdc-text-field--outlined.mdc-text-field--with-trailing-icon{padding-right:0}@supports(top:max(0%)){.mdc-text-field--outlined.mdc-text-field--with-trailing-icon{padding-left:max(16px,calc(var(--mdc-shape-small, 4px) + 4px))}}.mdc-text-field--outlined.mdc-text-field--with-trailing-icon[dir=rtl],[dir=rtl] .mdc-text-field--outlined.mdc-text-field--with-trailing-icon{padding-left:0}@supports(top:max(0%)){.mdc-text-field--outlined.mdc-text-field--with-trailing-icon[dir=rtl],[dir=rtl] .mdc-text-field--outlined.mdc-text-field--with-trailing-icon{padding-right:max(16px,calc(var(--mdc-shape-small, 4px) + 4px))}}.mdc-text-field--outlined.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon{padding-left:0;padding-right:0}.mdc-text-field--outlined .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:1px}.mdc-text-field--outlined .mdc-text-field__ripple:after,.mdc-text-field--outlined .mdc-text-field__ripple:before{background-color:transparent;background-color:var(--mdc-ripple-color,transparent)}.mdc-text-field--outlined .mdc-floating-label{left:4px;right:auto}.mdc-text-field--outlined .mdc-floating-label[dir=rtl],[dir=rtl] .mdc-text-field--outlined .mdc-floating-label{left:auto;right:4px}.mdc-text-field--outlined .mdc-text-field__input{background-color:transparent;border:none!important;display:flex}.mdc-text-field--outlined .mdc-notched-outline{z-index:1}.mdc-text-field--textarea{align-items:center;flex-direction:column;height:auto;padding:0;transition:none;width:auto}.mdc-text-field--textarea .mdc-floating-label{top:19px}.mdc-text-field--textarea .mdc-floating-label:not(.mdc-floating-label--float-above){transform:none}.mdc-text-field--textarea .mdc-text-field__input{box-sizing:border-box;flex-grow:1;height:auto;line-height:1.5rem;min-height:1.5rem;overflow-x:hidden;overflow-y:auto;padding:0 16px;resize:none}.mdc-text-field--textarea.mdc-text-field--filled:before{display:none}.mdc-text-field--textarea.mdc-text-field--filled .mdc-floating-label--float-above{transform:translateY(-10.25px) scale(.75)}.mdc-text-field--textarea.mdc-text-field--filled .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-textarea-filled .25s 1}@keyframes mdc-floating-label-shake-float-above-textarea-filled{0%{transform:translateX(0) translateY(-10.25px) scale(.75)}33%{animation-timing-function:cubic-bezier(.5,0,.701732,.495819);transform:translateX(4%) translateY(-10.25px) scale(.75)}66%{animation-timing-function:cubic-bezier(.302435,.381352,.55,.956352);transform:translateX(-4%) translateY(-10.25px) scale(.75)}to{transform:translateX(0) translateY(-10.25px) scale(.75)}}.mdc-text-field--textarea.mdc-text-field--filled .mdc-text-field__input{margin-bottom:9px;margin-top:23px}.mdc-text-field--textarea.mdc-text-field--filled.mdc-text-field--no-label .mdc-text-field__input{margin-bottom:16px;margin-top:16px}.mdc-text-field--textarea.mdc-text-field--outlined .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:0}.mdc-text-field--textarea.mdc-text-field--outlined .mdc-floating-label--float-above{font-size:.75rem;transform:translateY(-27.25px) scale(1)}.mdc-text-field--textarea.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--textarea.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem;transform:translateY(-24.75px) scale(.75)}.mdc-text-field--textarea.mdc-text-field--outlined .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-textarea-outlined .25s 1}@keyframes mdc-floating-label-shake-float-above-textarea-outlined{0%{transform:translateX(0) translateY(-24.75px) scale(.75)}33%{animation-timing-function:cubic-bezier(.5,0,.701732,.495819);transform:translateX(4%) translateY(-24.75px) scale(.75)}66%{animation-timing-function:cubic-bezier(.302435,.381352,.55,.956352);transform:translateX(-4%) translateY(-24.75px) scale(.75)}to{transform:translateX(0) translateY(-24.75px) scale(.75)}}.mdc-text-field--textarea.mdc-text-field--outlined .mdc-text-field__input{margin-bottom:16px;margin-top:16px}.mdc-text-field--textarea.mdc-text-field--outlined .mdc-floating-label{top:18px}.mdc-text-field--textarea.mdc-text-field--with-internal-counter .mdc-text-field__input{margin-bottom:2px}.mdc-text-field--textarea.mdc-text-field--with-internal-counter .mdc-text-field-character-counter{align-self:flex-end;padding:0 16px}.mdc-text-field--textarea.mdc-text-field--with-internal-counter .mdc-text-field-character-counter:after{content:"";display:inline-block;height:16px;vertical-align:-16px;width:0}.mdc-text-field--textarea.mdc-text-field--with-internal-counter .mdc-text-field-character-counter:before{display:none}.mdc-text-field__resizer{align-self:stretch;display:inline-flex;flex-direction:column;flex-grow:1;max-height:100%;max-width:100%;min-height:56px;min-width:fit-content;min-width:-moz-available;min-width:-webkit-fill-available;overflow:hidden;resize:both}.mdc-text-field--filled .mdc-text-field__resizer{transform:translateY(-1px)}.mdc-text-field--filled .mdc-text-field__resizer .mdc-text-field-character-counter,.mdc-text-field--filled .mdc-text-field__resizer .mdc-text-field__input{transform:translateY(1px)}.mdc-text-field--outlined .mdc-text-field__resizer{transform:translateX(-1px) translateY(-1px)}.mdc-text-field--outlined .mdc-text-field__resizer[dir=rtl],[dir=rtl] .mdc-text-field--outlined .mdc-text-field__resizer{transform:translateX(1px) translateY(-1px)}.mdc-text-field--outlined .mdc-text-field__resizer .mdc-text-field-character-counter,.mdc-text-field--outlined .mdc-text-field__resizer .mdc-text-field__input{transform:translateX(1px) translateY(1px)}.mdc-text-field--outlined .mdc-text-field__resizer .mdc-text-field-character-counter[dir=rtl],.mdc-text-field--outlined .mdc-text-field__resizer .mdc-text-field__input[dir=rtl],[dir=rtl] .mdc-text-field--outlined .mdc-text-field__resizer .mdc-text-field-character-counter,[dir=rtl] .mdc-text-field--outlined .mdc-text-field__resizer .mdc-text-field__input{transform:translateX(-1px) translateY(1px)}.mdc-text-field--with-leading-icon{padding-left:0;padding-right:16px}.mdc-text-field--with-leading-icon[dir=rtl],[dir=rtl] .mdc-text-field--with-leading-icon{padding-left:16px;padding-right:0}.mdc-text-field--with-leading-icon.mdc-text-field--filled .mdc-floating-label{left:48px;max-width:calc(100% - 48px);right:auto}.mdc-text-field--with-leading-icon.mdc-text-field--filled .mdc-floating-label[dir=rtl],[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--filled .mdc-floating-label{left:auto;right:48px}.mdc-text-field--with-leading-icon.mdc-text-field--filled .mdc-floating-label--float-above{max-width:calc(133.33333% - 85.33333px)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label{left:36px;right:auto}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label[dir=rtl],[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label{left:auto;right:36px}.mdc-text-field--with-leading-icon.mdc-text-field--outlined :not(.mdc-notched-outline--notched) .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above{transform:translateY(-37.25px) translateX(-32px) scale(1)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above[dir=rtl],[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above{transform:translateY(-37.25px) translateX(32px) scale(1)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above{font-size:.75rem}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-34.75px) translateX(-32px) scale(.75)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above[dir=rtl],.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above[dir=rtl],[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above,[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-34.75px) translateX(32px) scale(.75)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined-leading-icon .25s 1}@keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon{0%{transform:translateX(-32px) translateY(-34.75px) scale(.75)}33%{animation-timing-function:cubic-bezier(.5,0,.701732,.495819);transform:translateX(calc(4% - 32px)) translateY(-34.75px) scale(.75)}66%{animation-timing-function:cubic-bezier(.302435,.381352,.55,.956352);transform:translateX(calc(-4% - 32px)) translateY(-34.75px) scale(.75)}to{transform:translateX(-32px) translateY(-34.75px) scale(.75)}}.mdc-text-field--with-leading-icon.mdc-text-field--outlined[dir=rtl] .mdc-floating-label--shake,[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined-leading-icon .25s 1}@keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-rtl{0%{transform:translateX(32px) translateY(-34.75px) scale(.75)}33%{animation-timing-function:cubic-bezier(.5,0,.701732,.495819);transform:translateX(calc(4% + 32px)) translateY(-34.75px) scale(.75)}66%{animation-timing-function:cubic-bezier(.302435,.381352,.55,.956352);transform:translateX(calc(-4% + 32px)) translateY(-34.75px) scale(.75)}to{transform:translateX(32px) translateY(-34.75px) scale(.75)}}.mdc-text-field--with-trailing-icon{padding-left:16px;padding-right:0}.mdc-text-field--with-trailing-icon[dir=rtl],[dir=rtl] .mdc-text-field--with-trailing-icon{padding-left:0;padding-right:16px}.mdc-text-field--with-trailing-icon.mdc-text-field--filled .mdc-floating-label{max-width:calc(100% - 64px)}.mdc-text-field--with-trailing-icon.mdc-text-field--filled .mdc-floating-label--float-above{max-width:calc(133.33333% - 85.33333px)}.mdc-text-field--with-trailing-icon.mdc-text-field--outlined :not(.mdc-notched-outline--notched) .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon{padding-left:0;padding-right:0}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--filled .mdc-floating-label{max-width:calc(100% - 96px)}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--filled .mdc-floating-label--float-above{max-width:calc(133.33333% - 128px)}.mdc-text-field-helper-line{box-sizing:border-box;display:flex;justify-content:space-between}.mdc-text-field+.mdc-text-field-helper-line{padding-left:16px;padding-right:16px}.mdc-form-field>.mdc-text-field+label{align-self:flex-start}.mdc-text-field--focused:not(.mdc-text-field--disabled) .mdc-floating-label{color:rgba(98,0,238,.87)}.mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--focused .mdc-notched-outline__trailing{border-width:2px}.mdc-text-field--focused+.mdc-text-field-helper-line .mdc-text-field-helper-text:not(.mdc-text-field-helper-text--validation-msg){opacity:1}.mdc-text-field--focused.mdc-text-field--outlined .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:2px}.mdc-text-field--focused.mdc-text-field--outlined.mdc-text-field--textarea .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:0}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-line-ripple:after,.mdc-text-field--invalid:not(.mdc-text-field--disabled):hover .mdc-line-ripple:before{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error,#b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-floating-label,.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--invalid+.mdc-text-field-helper-line .mdc-text-field-helper-text--validation-msg{color:#b00020;color:var(--mdc-theme-error,#b00020)}.mdc-text-field--invalid .mdc-text-field__input{caret-color:#b00020;caret-color:var(--mdc-theme-error,#b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-text-field__icon--trailing{color:#b00020;color:var(--mdc-theme-error,#b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-line-ripple:before{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error,#b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__leading,.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__notch,.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__trailing,.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__trailing,.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error,#b00020)}.mdc-text-field--invalid+.mdc-text-field-helper-line .mdc-text-field-helper-text--validation-msg{opacity:1}.mdc-text-field--disabled{pointer-events:none}.mdc-text-field--disabled .mdc-text-field__input{color:rgba(0,0,0,.38)}@media{.mdc-text-field--disabled .mdc-text-field__input::placeholder{color:rgba(0,0,0,.38)}}@media{.mdc-text-field--disabled .mdc-text-field__input:-ms-input-placeholder{color:rgba(0,0,0,.38)}}.mdc-text-field--disabled .mdc-floating-label,.mdc-text-field--disabled .mdc-text-field-character-counter,.mdc-text-field--disabled+.mdc-text-field-helper-line .mdc-text-field-character-counter,.mdc-text-field--disabled+.mdc-text-field-helper-line .mdc-text-field-helper-text{color:rgba(0,0,0,.38)}.mdc-text-field--disabled .mdc-text-field__icon--leading,.mdc-text-field--disabled .mdc-text-field__icon--trailing{color:rgba(0,0,0,.3)}.mdc-text-field--disabled .mdc-text-field__affix--prefix,.mdc-text-field--disabled .mdc-text-field__affix--suffix{color:rgba(0,0,0,.38)}.mdc-text-field--disabled .mdc-line-ripple:before{border-bottom-color:rgba(0,0,0,.06)}.mdc-text-field--disabled .mdc-notched-outline__leading,.mdc-text-field--disabled .mdc-notched-outline__notch,.mdc-text-field--disabled .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.06)}@media (-ms-high-contrast:active),screen and (forced-colors:active){.mdc-text-field--disabled .mdc-text-field__input::placeholder{color:GrayText}}@media (-ms-high-contrast:active),screen and (forced-colors:active){.mdc-text-field--disabled .mdc-text-field__input:-ms-input-placeholder{color:GrayText}}@media (-ms-high-contrast:active),screen and (forced-colors:active){.mdc-text-field--disabled .mdc-floating-label,.mdc-text-field--disabled .mdc-text-field-character-counter,.mdc-text-field--disabled .mdc-text-field__affix--prefix,.mdc-text-field--disabled .mdc-text-field__affix--suffix,.mdc-text-field--disabled .mdc-text-field__icon--leading,.mdc-text-field--disabled .mdc-text-field__icon--trailing,.mdc-text-field--disabled+.mdc-text-field-helper-line .mdc-text-field-character-counter,.mdc-text-field--disabled+.mdc-text-field-helper-line .mdc-text-field-helper-text{color:GrayText}.mdc-text-field--disabled .mdc-line-ripple:before{border-bottom-color:GrayText}.mdc-text-field--disabled .mdc-notched-outline__leading,.mdc-text-field--disabled .mdc-notched-outline__notch,.mdc-text-field--disabled .mdc-notched-outline__trailing{border-color:GrayText}}@media screen and (forced-colors:active){.mdc-text-field--disabled .mdc-text-field__input{background-color:Window}.mdc-text-field--disabled .mdc-floating-label{z-index:1}}.mdc-text-field--disabled .mdc-floating-label{cursor:default}.mdc-text-field--disabled.mdc-text-field--filled{background-color:#fafafa}.mdc-text-field--disabled.mdc-text-field--filled .mdc-text-field__ripple{display:none}.mdc-text-field--disabled .mdc-text-field__input{pointer-events:auto}.mdc-text-field--end-aligned .mdc-text-field__input{text-align:right}.mdc-text-field--end-aligned .mdc-text-field__input[dir=rtl],[dir=rtl] .mdc-text-field--end-aligned .mdc-text-field__input{text-align:left}.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__affix,.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__input,[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__affix,[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__input{direction:ltr}.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__affix--prefix,[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__affix--prefix{padding-left:0;padding-right:2px}.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__affix--suffix,[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__affix--suffix{padding-left:12px;padding-right:0}.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__icon--leading,[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__icon--leading{order:1}.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__affix--suffix,[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__affix--suffix{order:2}.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__input,[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__input{order:3}.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__affix--prefix,[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__affix--prefix{order:4}.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__icon--trailing,[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__icon--trailing{order:5}.mdc-text-field--ltr-text.mdc-text-field--end-aligned[dir=rtl] .mdc-text-field__input,[dir=rtl] .mdc-text-field--ltr-text.mdc-text-field--end-aligned .mdc-text-field__input{text-align:right}.mdc-text-field--ltr-text.mdc-text-field--end-aligned[dir=rtl] .mdc-text-field__affix--prefix,[dir=rtl] .mdc-text-field--ltr-text.mdc-text-field--end-aligned .mdc-text-field__affix--prefix{padding-right:12px}.mdc-text-field--ltr-text.mdc-text-field--end-aligned[dir=rtl] .mdc-text-field__affix--suffix,[dir=rtl] .mdc-text-field--ltr-text.mdc-text-field--end-aligned .mdc-text-field__affix--suffix{padding-left:2px}.smui-text-field--standard{height:56px;padding:0}.smui-text-field--standard:before{content:"";display:inline-block;height:40px;vertical-align:0;width:0}.smui-text-field--standard:not(.mdc-text-field--disabled){background-color:transparent}.smui-text-field--standard:not(.mdc-text-field--disabled) .mdc-line-ripple:before{border-bottom-color:rgba(0,0,0,.42)}.smui-text-field--standard:not(.mdc-text-field--disabled):hover .mdc-line-ripple:before{border-bottom-color:rgba(0,0,0,.87)}.smui-text-field--standard .mdc-line-ripple:after{border-bottom-color:#6200ee;border-bottom-color:var(--mdc-theme-primary,#6200ee)}.smui-text-field--standard .mdc-floating-label{left:0;right:auto}.smui-text-field--standard .mdc-floating-label[dir=rtl],[dir=rtl] .smui-text-field--standard .mdc-floating-label{left:auto;right:0}.smui-text-field--standard .mdc-floating-label--float-above{transform:translateY(-106%) scale(.75)}.smui-text-field--standard.mdc-text-field--no-label .mdc-text-field__input{height:100%}.smui-text-field--standard.mdc-text-field--no-label .mdc-floating-label,.smui-text-field--standard.mdc-text-field--no-label:before{display:none}@supports(-webkit-hyphens:none){.smui-text-field--standard.mdc-text-field--no-label .mdc-text-field__affix{align-items:center;align-self:center;display:inline-flex;height:100%}}.mdc-text-field--with-leading-icon.smui-text-field--standard .mdc-floating-label{left:32px;max-width:calc(100% - 32px);right:auto}.mdc-text-field--with-leading-icon.smui-text-field--standard .mdc-floating-label[dir=rtl],[dir=rtl] .mdc-text-field--with-leading-icon.smui-text-field--standard .mdc-floating-label{left:auto;right:32px}.mdc-text-field--with-leading-icon.smui-text-field--standard .mdc-floating-label--float-above{max-width:calc(133.33333% - 64px)}.mdc-text-field--with-trailing-icon.smui-text-field--standard .mdc-floating-label{max-width:calc(100% - 36px)}.mdc-text-field--with-trailing-icon.smui-text-field--standard .mdc-floating-label--float-above{max-width:calc(133.33333% - 48px)}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.smui-text-field--standard .mdc-floating-label{max-width:calc(100% - 68px)}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.smui-text-field--standard .mdc-floating-label--float-above{max-width:calc(133.33333% - 90.66667px)}.mdc-text-field+.mdc-text-field-helper-line{padding-left:0;padding-right:0}.mdc-text-field-character-counter{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:block;font-family:Roboto,sans-serif;font-family:var(--mdc-typography-caption-font-family,var(--mdc-typography-font-family,Roboto,sans-serif));font-size:.75rem;font-size:var(--mdc-typography-caption-font-size,.75rem);font-weight:400;font-weight:var(--mdc-typography-caption-font-weight,400);letter-spacing:.0333333333em;letter-spacing:var(--mdc-typography-caption-letter-spacing,.0333333333em);line-height:1.25rem;line-height:var(--mdc-typography-caption-line-height,1.25rem);line-height:normal;margin-left:auto;margin-right:0;margin-top:0;padding-left:16px;padding-right:0;text-decoration:inherit;text-decoration:var(--mdc-typography-caption-text-decoration,inherit);text-transform:inherit;text-transform:var(--mdc-typography-caption-text-transform,inherit);white-space:nowrap}.mdc-text-field-character-counter:before{content:"";display:inline-block;height:16px;vertical-align:0;width:0}.mdc-text-field-character-counter[dir=rtl],[dir=rtl] .mdc-text-field-character-counter{margin-left:0;margin-right:auto;padding-left:0;padding-right:16px}.mdc-text-field-helper-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:block;font-family:Roboto,sans-serif;font-family:var(--mdc-typography-caption-font-family,var(--mdc-typography-font-family,Roboto,sans-serif));font-size:.75rem;font-size:var(--mdc-typography-caption-font-size,.75rem);font-weight:400;font-weight:var(--mdc-typography-caption-font-weight,400);letter-spacing:.0333333333em;letter-spacing:var(--mdc-typography-caption-letter-spacing,.0333333333em);line-height:1.25rem;line-height:var(--mdc-typography-caption-line-height,1.25rem);line-height:normal;margin:0;opacity:0;text-decoration:inherit;text-decoration:var(--mdc-typography-caption-text-decoration,inherit);text-transform:inherit;text-transform:var(--mdc-typography-caption-text-transform,inherit);transition:opacity .15s cubic-bezier(.4,0,.2,1) 0ms;will-change:opacity}.mdc-text-field-helper-text:before{content:"";display:inline-block;height:16px;vertical-align:0;width:0}.mdc-text-field-helper-text--persistent{opacity:1;transition:none;will-change:auto}.mdc-text-field__icon{align-self:center;cursor:pointer}.mdc-text-field__icon:not([tabindex]),.mdc-text-field__icon[tabindex="-1"]{cursor:default;pointer-events:none}.mdc-text-field__icon svg{display:block}.mdc-text-field__icon--leading{margin-left:16px;margin-right:8px}.mdc-text-field__icon--leading[dir=rtl],[dir=rtl] .mdc-text-field__icon--leading{margin-left:8px;margin-right:16px}.mdc-text-field__icon--trailing{margin-left:0;margin-right:0;padding:12px}.mdc-text-field__icon--trailing[dir=rtl],[dir=rtl] .mdc-text-field__icon--trailing{margin-left:0;margin-right:0}.smui-text-field--standard .mdc-text-field__icon--leading{margin-left:0;margin-right:8px}.smui-text-field--standard .mdc-text-field__icon--leading[dir=rtl],[dir=rtl] .smui-text-field--standard .mdc-text-field__icon--leading{margin-left:8px;margin-right:0}.smui-text-field--standard .mdc-text-field__icon--trailing{margin-left:0;margin-right:0;padding:12px 0 12px 12px}.smui-text-field--standard .mdc-text-field__icon--trailing[dir=rtl],[dir=rtl] .smui-text-field--standard .mdc-text-field__icon--trailing{margin-left:0;margin-right:0;padding-left:0;padding-right:12px}';
n4(e28, {});

// node_modules/@cosmograph/ui/scrollbar.css.js
var o13 = ":root *{--scrollbar-background:hsla(0,0%,100%,.1);scrollbar-track-color:transparent;scrollbar-face-color:var(--scrollbar-background);scrollbar-color:var(--scrollbar-background) transparent;scrollbar-width:thin;text-underline-offset:.5px}:root ::-webkit-scrollbar{border-radius:.3rem;height:5px;width:5px}:root ::-webkit-scrollbar-track{border-radius:.3rem}:root ::-webkit-scrollbar-corner{background:none!important}:root ::-webkit-scrollbar-thumb{background-color:var(--scrollbar-background);border:3px solid var(--scrollbar-background);border-radius:20px;transition:background-color .5s}";
n4(o13, {});

// node_modules/@cosmograph/ui/modules/search/search.css.js
var a10 = ":root{--cosmograph-search-text-color:#fff;--cosmograph-search-list-background:#222;--cosmograph-search-font-family:inherit;--cosmograph-search-input-background:#222;--cosmograph-search-mark-background:hsla(0,0%,100%,.2);--cosmograph-search-accessor-background:hsla(0,0%,100%,.2);--cosmograph-search-interactive-background:hsla(0,0%,100%,.4);--cosmograph-search-hover-color:hsla(0,0%,100%,.05)}.search-icon.svelte-1xknafk.svelte-1xknafk{color:var(--cosmograph-search-text-color)!important;opacity:.6}.search.svelte-1xknafk .cosmograph-search-accessor{align-content:center;background-color:var(--cosmograph-search-accessor-background);border-radius:10px;color:var(--cosmograph-search-text-color);cursor:pointer;display:flex;display:block;font-size:12px;font-style:normal;justify-content:center;line-height:1;margin-right:.5rem;overflow:hidden;padding:5px 8px;text-overflow:ellipsis;transition:background .15s linear;white-space:nowrap;z-index:1}.search.svelte-1xknafk .cosmograph-search-accessor.active,.search.svelte-1xknafk .cosmograph-search-accessor:hover{background-color:var(--cosmograph-search-interactive-background)}.search.svelte-1xknafk .disabled{cursor:default;pointer-events:none}.search.svelte-1xknafk.svelte-1xknafk{background:var(--cosmograph-search-input-background);display:flex;flex-direction:column;font-family:var(--cosmograph-search-font-family),sans-serif;text-align:left;width:100%}.search.svelte-1xknafk mark{background:var(--cosmograph-search-mark-background);border-radius:2px;color:var(--cosmograph-search-text-color);padding:1px 0}.search.svelte-1xknafk .cosmograph-search-match{-webkit-box-orient:vertical;cursor:pointer;display:-webkit-box;line-height:1.35;overflow:hidden;padding:calc(var(--margin-v)*1px) calc(var(--margin-h)*1px);text-overflow:ellipsis;white-space:normal}.search.svelte-1xknafk .cosmograph-search-match:hover{background:var(--cosmograph-search-hover-color)}.search.svelte-1xknafk .cosmograph-search-result{display:inline;font-size:12px;font-weight:600;text-transform:uppercase}.search.svelte-1xknafk .cosmograph-search-result>span{font-weight:400;letter-spacing:1;margin-left:4px}.search.svelte-1xknafk .cosmograph-search-result>span>t{margin-right:4px}.search.svelte-1xknafk .mdc-menu-surface{background-color:var(--cosmograph-search-list-background)!important;max-height:none!important}.search.svelte-1xknafk .openListUpwards.svelte-1xknafk .mdc-menu-surface{bottom:55px!important;top:unset!important}.search.svelte-1xknafk .mdc-text-field__input{caret-color:var(--cosmograph-search-text-color)!important;height:100%;letter-spacing:-.01em;line-height:2;line-height:2!important;padding-top:15px!important}.search.svelte-1xknafk .mdc-floating-label,.search.svelte-1xknafk .mdc-text-field__input{color:var(--cosmograph-search-text-color)!important;font-family:var(--cosmograph-search-font-family),sans-serif!important}.search.svelte-1xknafk .mdc-floating-label{opacity:.65;pointer-events:none!important}.search.svelte-1xknafk .mdc-line-ripple:after,.search.svelte-1xknafk .mdc-line-ripple:before{border-bottom-color:var(--cosmograph-search-text-color)!important;opacity:.1}.search.svelte-1xknafk .mdc-deprecated-list{background:var(--cosmograph-search-list-background);color:var(--cosmograph-search-text-color)!important;font-size:14px!important;padding-top:4px!important}.search.svelte-1xknafk .mdc-deprecated-list-item{height:28px!important}.search.svelte-1xknafk .mdc-text-field__icon--leading{margin-right:10px!important}.search.svelte-1xknafk .mdc-floating-label--float-above{left:26px!important;pointer-events:none!important}.search.svelte-1xknafk .mdc-text-field__icon--trailing{cursor:default!important;max-width:35%}.search.svelte-1xknafk .cosmograph-search-first-field{font-size:12.5px;font-weight:400;opacity:.8;text-transform:uppercase}";
n4(a10, {});

// node_modules/@cosmograph/ui/modules/search/search.svelte.js
function F5(t23, e36, n17) {
  const s15 = t23.slice();
  return s15[53] = e36[n17], s15[52] = n17, s15;
}
function G4(t23, e36, n17) {
  const s15 = t23.slice();
  return s15[50] = e36[n17], s15[52] = n17, s15;
}
function J2(t23) {
  let e36, n17, s15;
  return n17 = new f5({}), { c() {
    e36 = k("div"), Ot(n17.$$.fragment), M(e36, "class", "search-icon svelte-1xknafk");
  }, m(t24, o22) {
    w2(t24, e36, o22), jt(n17, e36, null), s15 = true;
  }, p: t5, i(t24) {
    s15 || (bt(n17.$$.fragment, t24), s15 = true);
  }, o(t24) {
    mt(n17.$$.fragment, t24), s15 = false;
  }, d(t24) {
    t24 && v(e36), St(n17);
  } };
}
function Y2(t23) {
  let e36, n17;
  return e36 = new z4({ props: { slot: "leadingIcon", $$slots: { default: [J2] }, $$scope: { ctx: t23 } } }), { c() {
    Ot(e36.$$.fragment);
  }, m(t24, s15) {
    jt(e36, t24, s15), n17 = true;
  }, p(t24, n18) {
    const s15 = {};
    16777216 & n18[1] && (s15.$$scope = { dirty: n18, ctx: t24 }), e36.$set(s15);
  }, i(t24) {
    n17 || (bt(e36.$$.fragment, t24), n17 = true);
  }, o(t24) {
    mt(e36.$$.fragment, t24), n17 = false;
  }, d(t24) {
    St(e36, t24);
  } };
}
function K2(t23) {
  let e36, n17, s15 = t23[11].label + "";
  return { c() {
    e36 = k("div"), n17 = O(s15), M(e36, "class", "cosmograph-search-accessor"), G(e36, "active", t23[2]), G(e36, "disabled", !t23[9]);
  }, m(t24, s16) {
    w2(t24, e36, s16), x(e36, n17);
  }, p(t24, o22) {
    2048 & o22[0] && s15 !== (s15 = t24[11].label + "") && B(n17, s15), 4 & o22[0] && G(e36, "active", t24[2]), 512 & o22[0] && G(e36, "disabled", !t24[9]);
  }, d(t24) {
    t24 && v(e36);
  } };
}
function Q2(t23) {
  let e36, n17 = t23[11] && K2(t23);
  return { c() {
    n17 && n17.c(), e36 = S();
  }, m(t24, s15) {
    n17 && n17.m(t24, s15), w2(t24, e36, s15);
  }, p(t24, s15) {
    t24[11] ? n17 ? n17.p(t24, s15) : (n17 = K2(t24), n17.c(), n17.m(e36.parentNode, e36)) : n17 && (n17.d(1), n17 = null);
  }, d(t24) {
    n17 && n17.d(t24), t24 && v(e36);
  } };
}
function W5(t23) {
  let e36, n17;
  return e36 = new z4({ props: { role: "button", style: "display: flex;", slot: "trailingIcon", $$slots: { default: [Q2] }, $$scope: { ctx: t23 } } }), e36.$on("SMUITextField:icon", t23[14]), { c() {
    Ot(e36.$$.fragment);
  }, m(t24, s15) {
    jt(e36, t24, s15), n17 = true;
  }, p(t24, n18) {
    const s15 = {};
    2564 & n18[0] | 16777216 & n18[1] && (s15.$$scope = { dirty: n18, ctx: t24 }), e36.$set(s15);
  }, i(t24) {
    n17 || (bt(e36.$$.fragment, t24), n17 = true);
  }, o(t24) {
    mt(e36.$$.fragment, t24), n17 = false;
  }, d(t24) {
    St(e36, t24);
  } };
}
function X2(t23) {
  let e36, n17, s15;
  return n17 = new B2({ props: { $$slots: { default: [nt3] }, $$scope: { ctx: t23 } } }), { c() {
    e36 = k("div"), Ot(n17.$$.fragment), F(e36, "pointer-events", "none");
  }, m(t24, o22) {
    w2(t24, e36, o22), jt(n17, e36, null), s15 = true;
  }, p(t24, e37) {
    const s16 = {};
    16777216 & e37[1] && (s16.$$scope = { dirty: e37, ctx: t24 }), n17.$set(s16);
  }, i(t24) {
    s15 || (bt(n17.$$.fragment, t24), s15 = true);
  }, o(t24) {
    mt(n17.$$.fragment, t24), s15 = false;
  }, d(t24) {
    t24 && v(e36), St(n17);
  } };
}
function Z2(t23) {
  let e36, n17 = [], s15 = /* @__PURE__ */ new Map(), o22 = t23[4];
  const i11 = (t24) => t24[52];
  for (let e37 = 0; e37 < o22.length; e37 += 1) {
    let r14 = F5(t23, o22, e37), l6 = i11(r14);
    s15.set(l6, n17[e37] = st2(l6, r14));
  }
  return { c() {
    for (let t24 = 0; t24 < n17.length; t24 += 1) n17[t24].c();
    e36 = S();
  }, m(t24, s16) {
    for (let e37 = 0; e37 < n17.length; e37 += 1) n17[e37] && n17[e37].m(t24, s16);
    w2(t24, e36, s16);
  }, p(t24, r14) {
    655376 & r14[0] && (o22 = t24[4], n17 = wt(n17, r14, i11, 1, t24, o22, s15, e36.parentNode, _t, st2, e36, F5));
  }, i: t5, o: t5, d(t24) {
    for (let e37 = 0; e37 < n17.length; e37 += 1) n17[e37].d(t24);
    t24 && v(e36);
  } };
}
function tt3(t23) {
  var _a, _b;
  let e36, n17, s15 = ((_b = (_a = t23[1]) == null ? void 0 : _a.accessors) == null ? void 0 : _b.length) && ot2(t23);
  return { c() {
    s15 && s15.c(), e36 = S();
  }, m(t24, o22) {
    s15 && s15.m(t24, o22), w2(t24, e36, o22), n17 = true;
  }, p(t24, n18) {
    var _a2, _b2;
    ((_b2 = (_a2 = t24[1]) == null ? void 0 : _a2.accessors) == null ? void 0 : _b2.length) ? s15 ? (s15.p(t24, n18), 2 & n18[0] && bt(s15, 1)) : (s15 = ot2(t24), s15.c(), bt(s15, 1), s15.m(e36.parentNode, e36)) : s15 && (yt(), mt(s15, 1, 1, () => {
      s15 = null;
    }), gt());
  }, i(t24) {
    n17 || (bt(s15), n17 = true);
  }, o(t24) {
    mt(s15), n17 = false;
  }, d(t24) {
    s15 && s15.d(t24), t24 && v(e36);
  } };
}
function et3(t23) {
  let e36;
  return { c() {
    e36 = O("No matches found");
  }, m(t24, n17) {
    w2(t24, e36, n17);
  }, d(t24) {
    t24 && v(e36);
  } };
}
function nt3(t23) {
  let e36, n17;
  return e36 = new a7({ props: { $$slots: { default: [et3] }, $$scope: { ctx: t23 } } }), { c() {
    Ot(e36.$$.fragment);
  }, m(t24, s15) {
    jt(e36, t24, s15), n17 = true;
  }, p(t24, n18) {
    const s15 = {};
    16777216 & n18[1] && (s15.$$scope = { dirty: n18, ctx: t24 }), e36.$set(s15);
  }, i(t24) {
    n17 || (bt(e36.$$.fragment, t24), n17 = true);
  }, o(t24) {
    mt(e36.$$.fragment, t24), n17 = false;
  }, d(t24) {
    St(e36, t24);
  } };
}
function st2(t23, e36) {
  let n17, s15, o22, r14, u8, m6 = e36[19](e36[53]) + "";
  return { key: t23, first: null, c() {
    n17 = k("div"), s15 = k("div"), o22 = j(), M(n17, "class", "cosmograph-search-match"), F(n17, "--margin-v", mt2), F(n17, "--margin-h", pt2), this.first = n17;
  }, m(t24, i11) {
    w2(t24, n17, i11), x(n17, s15), s15.innerHTML = m6, x(n17, o22), r14 || (u8 = [A(n17, "click", function() {
      c5(e36[17](e36[53])) && e36[17](e36[53]).apply(this, arguments);
    }), A(n17, "keydown", function() {
      c5(e36[17](e36[53])) && e36[17](e36[53]).apply(this, arguments);
    })], r14 = true);
  }, p(t24, n18) {
    e36 = t24, 16 & n18[0] && m6 !== (m6 = e36[19](e36[53]) + "") && (s15.innerHTML = m6);
  }, d(t24) {
    t24 && v(n17), r14 = false, r3(u8);
  } };
}
function ot2(t23) {
  var _a;
  let e36, n17, s15, o22, a13, u8 = [], p5 = /* @__PURE__ */ new Map();
  n17 = new B2({ props: { $$slots: { default: [it2] }, $$scope: { ctx: t23 } } });
  let $2 = (_a = t23[1]) == null ? void 0 : _a.accessors;
  const v3 = (t24) => t24[52];
  for (let e37 = 0; e37 < $2.length; e37 += 1) {
    let n18 = G4(t23, $2, e37), s16 = v3(n18);
    p5.set(s16, u8[e37] = ct2(s16, n18));
  }
  return { c() {
    e36 = k("div"), Ot(n17.$$.fragment), s15 = j();
    for (let t24 = 0; t24 < u8.length; t24 += 1) u8[t24].c();
    o22 = S(), F(e36, "pointer-events", "none"), F(e36, "font-size", "10px", 1);
  }, m(t24, i11) {
    w2(t24, e36, i11), jt(n17, e36, null), w2(t24, s15, i11);
    for (let e37 = 0; e37 < u8.length; e37 += 1) u8[e37] && u8[e37].m(t24, i11);
    w2(t24, o22, i11), a13 = true;
  }, p(t24, e37) {
    var _a2;
    const s16 = {};
    16777216 & e37[1] && (s16.$$scope = { dirty: e37, ctx: t24 }), n17.$set(s16), 8194 & e37[0] && ($2 = (_a2 = t24[1]) == null ? void 0 : _a2.accessors, yt(), u8 = wt(u8, e37, v3, 1, t24, $2, p5, o22.parentNode, xt, ct2, o22, G4), gt());
  }, i(t24) {
    if (!a13) {
      bt(n17.$$.fragment, t24);
      for (let t25 = 0; t25 < $2.length; t25 += 1) bt(u8[t25]);
      a13 = true;
    }
  }, o(t24) {
    mt(n17.$$.fragment, t24);
    for (let t25 = 0; t25 < u8.length; t25 += 1) mt(u8[t25]);
    a13 = false;
  }, d(t24) {
    t24 && v(e36), St(n17), t24 && v(s15);
    for (let e37 = 0; e37 < u8.length; e37 += 1) u8[e37].d(t24);
    t24 && v(o22);
  } };
}
function it2(t23) {
  let e36;
  return { c() {
    e36 = k("div"), e36.textContent = "select accessor to search", M(e36, "class", "cosmograph-search-result");
  }, m(t24, n17) {
    w2(t24, e36, n17);
  }, p: t5, d(t24) {
    t24 && v(e36);
  } };
}
function rt2(t23) {
  let e36, n17 = t23[50].label + "";
  return { c() {
    e36 = O(n17);
  }, m(t24, n18) {
    w2(t24, e36, n18);
  }, p(t24, s15) {
    2 & s15[0] && n17 !== (n17 = t24[50].label + "") && B(e36, n17);
  }, d(t24) {
    t24 && v(e36);
  } };
}
function lt3(t23) {
  let e36, n17, s15;
  return e36 = new a7({ props: { $$slots: { default: [rt2] }, $$scope: { ctx: t23 } } }), { c() {
    Ot(e36.$$.fragment), n17 = j();
  }, m(t24, o22) {
    jt(e36, t24, o22), w2(t24, n17, o22), s15 = true;
  }, p(t24, n18) {
    const s16 = {};
    2 & n18[0] | 16777216 & n18[1] && (s16.$$scope = { dirty: n18, ctx: t24 }), e36.$set(s16);
  }, i(t24) {
    s15 || (bt(e36.$$.fragment, t24), s15 = true);
  }, o(t24) {
    mt(e36.$$.fragment, t24), s15 = false;
  }, d(t24) {
    St(e36, t24), t24 && v(n17);
  } };
}
function ct2(t23, e36) {
  let n17, s15, o22;
  return s15 = new B2({ props: { $$slots: { default: [lt3] }, $$scope: { ctx: e36 } } }), s15.$on("click", function() {
    c5(e36[13](e36[50], e36[52])) && e36[13](e36[50], e36[52]).apply(this, arguments);
  }), { key: t23, first: null, c() {
    n17 = S(), Ot(s15.$$.fragment), this.first = n17;
  }, m(t24, e37) {
    w2(t24, n17, e37), jt(s15, t24, e37), o22 = true;
  }, p(t24, n18) {
    e36 = t24;
    const o23 = {};
    2 & n18[0] | 16777216 & n18[1] && (o23.$$scope = { dirty: n18, ctx: e36 }), s15.$set(o23);
  }, i(t24) {
    o22 || (bt(s15.$$.fragment, t24), o22 = true);
  }, o(t24) {
    mt(s15.$$.fragment, t24), o22 = false;
  }, d(t24) {
    t24 && v(n17), St(s15, t24);
  } };
}
function at2(t23) {
  let e36, n17, s15, o22;
  const r14 = [tt3, Z2, X2], l6 = [];
  function c11(t24, e37) {
    return t24[2] ? 0 : t24[4].length ? 1 : 2;
  }
  return n17 = c11(t23), s15 = l6[n17] = r14[n17](t23), { c() {
    e36 = k("div"), s15.c();
  }, m(s16, i11) {
    w2(s16, e36, i11), l6[n17].m(e36, null), t23[28](e36), o22 = true;
  }, p(t24, o23) {
    let i11 = n17;
    n17 = c11(t24), n17 === i11 ? l6[n17].p(t24, o23) : (yt(), mt(l6[i11], 1, 1, () => {
      l6[i11] = null;
    }), gt(), s15 = l6[n17], s15 ? s15.p(t24, o23) : (s15 = l6[n17] = r14[n17](t24), s15.c()), bt(s15, 1), s15.m(e36, null));
  }, i(t24) {
    o22 || (bt(s15), o22 = true);
  }, o(t24) {
    mt(s15), o22 = false;
  }, d(s16) {
    s16 && v(e36), l6[n17].d(), t23[28](null);
  } };
}
function ut2(t23) {
  let e36, n17;
  return e36 = new _4({ props: { style: "max-height: " + t23[8] + "px; transition: max-height 0.1s linear;", $$slots: { default: [at2] }, $$scope: { ctx: t23 } } }), { c() {
    Ot(e36.$$.fragment);
  }, m(t24, s15) {
    jt(e36, t24, s15), n17 = true;
  }, p(t24, n18) {
    const s15 = {};
    256 & n18[0] && (s15.style = "max-height: " + t24[8] + "px; transition: max-height 0.1s linear;"), 86 & n18[0] | 16777216 & n18[1] && (s15.$$scope = { dirty: n18, ctx: t24 }), e36.$set(s15);
  }, i(t24) {
    n17 || (bt(e36.$$.fragment, t24), n17 = true);
  }, o(t24) {
    mt(e36.$$.fragment, t24), n17 = false;
  }, d(t24) {
    St(e36, t24);
  } };
}
function dt2(t23) {
  let e36, n17, v3, y3, b5, w3, j6, I8, S4;
  function k5(e37) {
    t23[26](e37);
  }
  function O8(e37) {
    t23[27](e37);
  }
  let M3 = { style: "opacity: " + (t23[1].isDisabled ? 0.5 : 1), label: t23[1].placeholder, $$slots: { trailingIcon: [W5], leadingIcon: [Y2] }, $$scope: { ctx: t23 } };
  function _7(e37) {
    t23[29](e37);
  }
  void 0 !== t23[0] && (M3.value = t23[0]), void 0 !== t23[12] && (M3.disabled = t23[12]), n17 = new lt2({ props: M3 }), t23[25](n17), tt.push(() => Et(n17, "value", k5)), tt.push(() => Et(n17, "disabled", O8)), n17.$on("click", t23[18]), n17.$on("focus", t23[20]), n17.$on("input", t23[16]), n17.$on("keydown", t23[15]);
  let L3 = { style: "width: 100%; bottom: initial;", $$slots: { default: [ut2] }, $$scope: { ctx: t23 } };
  return void 0 !== t23[3] && (L3.open = t23[3]), j6 = new b4({ props: L3 }), tt.push(() => Et(j6, "open", _7)), t23[30](j6), { c() {
    e36 = k("div"), Ot(n17.$$.fragment), b5 = j(), w3 = k("div"), Ot(j6.$$.fragment), F(w3, "position", "relative"), M(w3, "class", "svelte-1xknafk"), G(w3, "openListUpwards", t23[1].openListUpwards), G(w3, "accessors", t23[2]), M(e36, "class", "search svelte-1xknafk");
  }, m(s15, o22) {
    w2(s15, e36, o22), jt(n17, e36, null), x(e36, b5), x(e36, w3), jt(j6, w3, null), t23[31](e36), S4 = true;
  }, p(t24, e37) {
    const s15 = {};
    2 & e37[0] && (s15.style = "opacity: " + (t24[1].isDisabled ? 0.5 : 1)), 2 & e37[0] && (s15.label = t24[1].placeholder), 2564 & e37[0] | 16777216 & e37[1] && (s15.$$scope = { dirty: e37, ctx: t24 }), !v3 && 1 & e37[0] && (v3 = true, s15.value = t24[0], ft(() => v3 = false)), !y3 && 4096 & e37[0] && (y3 = true, s15.disabled = t24[12], ft(() => y3 = false)), n17.$set(s15);
    const o22 = {};
    342 & e37[0] | 16777216 & e37[1] && (o22.$$scope = { dirty: e37, ctx: t24 }), !I8 && 8 & e37[0] && (I8 = true, o22.open = t24[3], ft(() => I8 = false)), j6.$set(o22), (!S4 || 2 & e37[0]) && G(w3, "openListUpwards", t24[1].openListUpwards), (!S4 || 4 & e37[0]) && G(w3, "accessors", t24[2]);
  }, i(t24) {
    S4 || (bt(n17.$$.fragment, t24), bt(j6.$$.fragment, t24), S4 = true);
  }, o(t24) {
    mt(n17.$$.fragment, t24), mt(j6.$$.fragment, t24), S4 = false;
  }, d(s15) {
    s15 && v(e36), t23[25](null), St(n17), t23[30](null), St(j6), t23[31](null);
  } };
}
var mt2 = 4;
var pt2 = 12;
function $t2(t23, e36, n17) {
  let o22;
  var i11, r14;
  const l6 = V();
  let c11, a13, u8, d13, m6, p5, { config: $2 } = e36, { data: f6 = [] } = e36, { textInput: g2 = "" } = e36, h6 = true, x3 = false, w3 = false, j6 = [];
  const I8 = /* @__PURE__ */ new Set(), S4 = new DOMParser();
  let k5;
  const O8 = (t24) => {
    if (!f6) return;
    if (!t24.trim()) return void n17(4, j6 = []);
    let e37 = 0;
    const s15 = new RegExp(escapeStringRegexp(t24), "i"), o23 = (t25) => String(k5.accessor(t25));
    n17(4, j6 = f6.filter((t25) => {
      if ($2.limitSuggestions && e37 >= $2.limitSuggestions) return false;
      const n18 = o23(t25).match(s15);
      return n18 && (e37 += 1), n18;
    })), j6.length > 0 && j6.sort((e38, n18) => {
      const s16 = o23(e38).toLowerCase(), i12 = o23(n18).toLowerCase(), r15 = t24.toLowerCase();
      if (s16 === r15 && i12 !== r15) return -1;
      if (i12 === r15 && s16 !== r15) return 1;
      const l7 = s16.indexOf(r15), c12 = i12.indexOf(r15);
      return l7 !== c12 ? l7 - c12 : s16.localeCompare(i12);
    }), l6(e5.Input, j6);
  }, M3 = (t24) => {
    return RegExp.prototype.test.bind(/(<([^>]+)>)/i)(t24) ? (e37 = t24, S4.parseFromString(e37, "text/html").documentElement.textContent || "") : t24;
    var e37;
  }, _7 = (t24) => t24.replace(/[&<>]/g, (t25) => ({ "&": "&amp;", "<": "&lt;", ">": "&gt;" })[t25] || t25), L3 = (t24, e37) => {
    const n18 = M3(t24), s15 = $2 && $2.truncateValues ? $2.truncateValues : n18.length, o23 = ((t25) => new RegExp(escapeStringRegexp(t25), "i"))(g2), i12 = e37 ? ((t25, e38) => t25.search(e38))(n18, o23) : -1;
    if (-1 === i12) return n18.substring(0, +s15) + (n18.length > s15 ? "..." : "");
    const { startPosition: r15, endPosition: l7 } = ((t25, e38, n19) => {
      let s16 = Math.max(0, t25 - Math.floor(e38 / 2));
      const o24 = Math.min(n19, s16 + e38);
      return o24 - t25 < e38 / 2 && (s16 = Math.max(0, o24 - e38)), { startPosition: s16, endPosition: o24 };
    })(i12, +s15, n18.length), c12 = n18.substring(r15, l7), a14 = r15 > 0 ? "..." : "", u9 = l7 < n18.length ? "..." : "";
    return `${a14}${e37 ? c12.replace(o23, (t25) => `<mark>${t25}</mark>`) : c12}${u9}`;
  }, T7 = () => {
    setTimeout(() => {
      var t24;
      let e37, s15 = 0;
      const o23 = null !== (t24 = $2.maxVisibleItems) && void 0 !== t24 ? t24 : e4.maxVisibleItems;
      a13.querySelectorAll(`.cosmograph-search-match:nth-child(-n+${o23})`).forEach((t25) => {
        s15 += t25.offsetHeight;
      }), s15 = j6.length ? s15 + 6 : 46, e37 = $2.openListUpwards ? u8.getBoundingClientRect().top - window.scrollY - 60 : window.innerHeight - u8.getBoundingClientRect().bottom - 60, s15 > e37 && (s15 = e37), n17(8, m6 = s15);
    }, 0);
  }, E8 = () => {
    setTimeout(() => {
      var t24;
      let e37 = 0;
      const s15 = null !== (t24 = $2.maxVisibleItems) && void 0 !== t24 ? t24 : e4.maxVisibleItems;
      a13.querySelectorAll(`li:nth-child(-n+${s15})`).forEach((t25) => {
        e37 += t25.offsetHeight;
      }), n17(8, m6 = e37 + 24);
    }, 0);
  };
  R(() => {
    d13 = new ResizeObserver2(() => {
      d13 && a13 && (j6 && T7(), x3 && E8());
    }), d13.observe(u8);
  }), U(() => {
    d13.disconnect();
  });
  return t23.$$set = (t24) => {
    "config" in t24 && n17(1, $2 = t24.config), "data" in t24 && n17(21, f6 = t24.data), "textInput" in t24 && n17(0, g2 = t24.textInput);
  }, t23.$$.update = () => {
    if (25165826 & t23.$$.dirty[0]) {
      n17(11, k5 = (() => {
        var t25, e37, n18;
        return null != $2.activeAccessorIndex && (null === (t25 = $2.accessors) || void 0 === t25 ? void 0 : t25[$2.activeAccessorIndex]) ? $2.accessors[$2.activeAccessorIndex] : k5 && $2.accessors ? $2.accessors.find((t26) => t26 === k5) || (null === (e37 = $2.accessors) || void 0 === e37 ? void 0 : e37[0]) : null === (n18 = $2.accessors) || void 0 === n18 ? void 0 : n18[0];
      })());
      const t24 = null !== n17(24, r14 = null === n17(23, i11 = $2.accessors) || void 0 === i11 ? void 0 : i11.length) && void 0 !== r14 ? r14 : 0;
      n17(9, h6 = t24 > 1);
    }
    12 & t23.$$.dirty[0] && x3 && !w3 && setTimeout(() => {
      n17(2, x3 = false);
    }, 100), 2097158 & t23.$$.dirty[0] && n17(12, o22 = !f6.length || x3 || !!$2.isDisabled), 16 & t23.$$.dirty[0] && j6 && T7(), 4 & t23.$$.dirty[0] && x3 && E8();
  }, [g2, $2, x3, w3, j6, c11, a13, u8, m6, h6, p5, k5, o22, (t24, e37) => {
    void 0 === $2.activeAccessorIndex && n17(11, k5 = t24), null == p5 || p5.setOpen(false), setTimeout(() => {
      n17(2, x3 = false);
    }, 100), l6(e5.AccessorSelect, { index: e37, accessor: k5 });
  }, () => {
    h6 && (n17(0, g2 = ""), null == p5 || p5.setOpen(false), setTimeout(() => {
      null == p5 || p5.setOpen(true), n17(2, x3 = true);
    }, 100));
  }, (t24) => {
    "Enter" === t24.key && void 0 !== $2.minMatch && g2.length >= $2.minMatch && l6(e5.Enter, { textInput: g2, accessor: k5 });
  }, (t24) => {
    const e37 = null == t24 ? void 0 : t24.target;
    x3 || (void 0 !== $2.minMatch && e37.value.length < $2.minMatch ? null == p5 || p5.setOpen(false) : (null == p5 || p5.setOpen(true), O8(e37.value)));
  }, (t24) => (e37) => {
    null !== document.activeElement && document.activeElement.blur(), p5.setOpen(false), I8.size >= 5 && I8.delete(I8.values().next().value), I8.add(t24), l6(e5.Select, t24);
  }, () => {
    setTimeout(() => {
      x3 || w3 || 0 !== g2.length || (I8.size ? n17(4, j6 = Array.from(I8)) : f6.length && n17(4, j6 = f6.slice(0, $2.maxVisibleItems)), p5.setOpen(true));
    }, 110);
  }, (t24) => ((t25) => {
    var e37;
    const { [k5.label]: n18, ...s15 } = t25;
    if (Object.keys(s15).length > 0) {
      const t26 = null !== (e37 = $2.matchPalette) && void 0 !== e37 ? e37 : e4.matchPalette, o23 = (e38) => `color: ${t26[e38 % t26.length]}`, i12 = Object.entries(s15).map(([t27, e38], n19) => {
        const s16 = L3("object" == typeof e38 ? JSON.stringify(e38) : String(e38));
        return `<span style="${o23(n19)}"><t>·</t><b>${_7(t27)}</b>: ${s16}</span>`;
      });
      return `
      <span class="cosmograph-search-first-field"><b>${_7(k5.label)}</b>:</span>
      ${L3(String(n18), true)}
      <div class='cosmograph-search-result'>
        ${i12.join("")} 
      </div>
    `;
    }
    return L3(String(n18), true);
  })(((t25) => {
    const e37 = {}, n18 = Object.keys(t25), s15 = k5.accessor(t25);
    if (s15 && (e37[k5.label] = s15), !$2.ordering || !$2.ordering.order && !$2.ordering.include) {
      const s16 = Object.entries(t25).findIndex(([t26, e38]) => k5.accessor({ [t26]: e38 }));
      -1 !== s16 && n18.splice(s16, 1);
      for (const s17 of n18) e37[s17] = t25[s17];
      return e37;
    }
    const o23 = $2.ordering.order || [];
    let i12 = $2.ordering.include ? new Set($2.ordering.include) : null;
    if (i12 || (i12 = new Set(n18)), o23.length > 0) for (const n19 of o23) n19 in t25 && (e37[n19] = t25[n19]);
    for (const n19 in t25) !Object.prototype.hasOwnProperty.call(e37, n19) && i12.has(n19) && (e37[n19] = t25[n19]);
    return e37;
  })(t24)), (t24) => {
    t24.preventDefault();
  }, f6, (t24) => {
    null == p5 || p5.setOpen(t24);
  }, i11, r14, function(t24) {
    tt[t24 ? "unshift" : "push"](() => {
      c11 = t24, n17(5, c11);
    });
  }, function(t24) {
    g2 = t24, n17(0, g2);
  }, function(t24) {
    o22 = t24, n17(12, o22), n17(21, f6), n17(2, x3), n17(1, $2), n17(3, w3);
  }, function(t24) {
    tt[t24 ? "unshift" : "push"](() => {
      a13 = t24, n17(6, a13);
    });
  }, function(t24) {
    w3 = t24, n17(3, w3);
  }, function(t24) {
    tt[t24 ? "unshift" : "push"](() => {
      p5 = t24, n17(10, p5);
    });
  }, function(t24) {
    tt[t24 ? "unshift" : "push"](() => {
      u8 = t24, n17(7, u8);
    });
  }];
}
var ft2 = class extends Mt {
  constructor(t23) {
    super(), At(this, t23, $t2, dt2, u3, { config: 1, data: 21, textInput: 0, setListState: 22 }, null, [-1, -1]);
  }
  get setListState() {
    return this.$$.ctx[22];
  }
};

// node_modules/@cosmograph/ui/modules/search/index.js
var o14 = class {
  constructor(o22, n17) {
    this._config = {}, this._containerNode = o22, this._config = a2(e4, null != n17 ? n17 : {}), this._search = new ft2({ target: o22, props: { config: this._config } }), this._search.$on(e5.Input, ({ detail: t23 }) => {
      var e36, i11;
      return null === (i11 = null === (e36 = this._config.events) || void 0 === e36 ? void 0 : e36.onSearch) || void 0 === i11 ? void 0 : i11.call(e36, t23);
    }), this._search.$on(e5.Select, ({ detail: t23 }) => {
      var e36, i11;
      return null === (i11 = null === (e36 = this._config.events) || void 0 === e36 ? void 0 : e36.onSelect) || void 0 === i11 ? void 0 : i11.call(e36, t23);
    }), this._search.$on(e5.Enter, ({ detail: t23 }) => {
      var e36, i11;
      return null === (i11 = null === (e36 = this._config.events) || void 0 === e36 ? void 0 : e36.onEnter) || void 0 === i11 ? void 0 : i11.call(e36, t23);
    }), this._search.$on(e5.AccessorSelect, ({ detail: t23 }) => {
      var e36, i11;
      return null === (i11 = null === (e36 = this._config.events) || void 0 === e36 ? void 0 : e36.onAccessorSelect) || void 0 === i11 ? void 0 : i11.call(e36, t23);
    });
  }
  setData(t23) {
    this._search.$set({ data: t23, textInput: "" });
  }
  setConfig(e36) {
    this._config = a2(e4, null != e36 ? e36 : {}), this._search.$set({ config: this._config, textInput: "" });
  }
  setListState(t23) {
    this._search.setListState(t23);
  }
  clearInput() {
    this._search.$set({ textInput: "" });
  }
  getConfig() {
    return this._config;
  }
  destroy() {
    this._containerNode.innerHTML = "";
  }
};

// node_modules/@cosmograph/cosmograph/modules/cosmograph/watermark.js
var c8 = '<svg fill="currentColor" height="11" viewBox="0 0 163 11" width="163" xmlns="http://www.w3.org/2000/svg"><g fill="currentColor"><path d="m2.45674 8-1.925002-5.379h.924002l1.617 4.73h.154l1.617-4.73h.924l-1.925 5.379z"/><path d="m7.02243 8v-5.379h.869v5.379zm.44-6.215c-.19067 0-.352-.06233-.484-.187-.12467-.12467-.187-.28233-.187-.473 0-.198.06233-.359333.187-.484.132-.124667.29333-.187.484-.187.19066 0 .34833.062333.473.187.12466.124667.187.286.187.484 0 .19067-.06234.34833-.187.473-.12467.12467-.28234.187-.473.187z"/><path d="m11.8857 8.154c-.6673 0-1.232-.154-1.694-.462-.45465-.308-.72965-.79567-.82499-1.463l.82499-.187c.0587.352.1687.63067.33.836.1613.198.3593.341.594.429.242.08067.4987.121.77.121.4033 0 .7223-.08067.957-.242s.352-.37767.352-.649c0-.27867-.1137-.473-.341-.583-.22-.11733-.5243-.21267-.913-.286l-.451-.077c-.3447-.05867-.66-.15033-.946-.275s-.5133-.29333-.68199-.506c-.16866-.21267-.25299-.48033-.25299-.803 0-.484.18699-.86167.56098-1.133.374-.27133.869-.407 1.485-.407.6087 0 1.1.13933 1.474.418.3813.27133.627.65633.737 1.155l-.814.209c-.066-.38867-.2237-.66-.473-.814-.2493-.16133-.5573-.242-.924-.242s-.6563.06967-.869.209c-.2127.132-.319.33-.319.594 0 .25667.099.44733.297.572.2053.11733.4767.20533.814.264l.451.077c.3813.066.7223.15767 1.023.275.308.11.55.27133.726.484.1833.21267.275.49133.275.836 0 .528-.198.935-.594 1.221-.3887.286-.913.429-1.573.429z"/><path d="m17.5765 8.099c-.3887 0-.748-.08433-1.078-.253-.3227-.16867-.5793-.418-.77-.748-.1833-.33733-.275-.74433-.275-1.221v-3.256h.869v3.19c0 .53533.132.924.396 1.166.2713.242.6343.363 1.089.363.5133 0 .935-.16867 1.265-.506s.495-.83967.495-1.507v-2.706h.869v5.379h-.847v-.913h-.154c-.1173.25667-.319.49133-.605.704-.286.20533-.704.308-1.254.308z"/><path d="m23.9048 8.154c-.374 0-.715-.066-1.023-.198s-.55-.32267-.726-.572-.264-.55367-.264-.913c0-.36667.088-.66733.264-.902.176-.242.418-.42167.726-.539.308-.12467.6527-.187 1.034-.187h1.815v-.396c0-.38133-.1136-.682-.341-.902-.22-.22-.55-.33-.99-.33-.4326 0-.77.10633-1.012.319-.242.20533-.407.484-.495.836l-.814-.264c.088-.30067.2274-.572.418-.814.1907-.24933.4437-.44733.759-.594.3227-.154.7077-.231 1.155-.231.6894 0 1.2247.17967 1.606.539.3814.352.572.85067.572 1.496v2.431c0 .22.1027.33.308.33h.495v.737h-.759c-.242 0-.4363-.066-.583-.198-.1466-.13933-.22-.32267-.22-.55v-.055h-.132c-.0806.13933-.1906.286-.33.44-.132.14667-.3153.26767-.55.363-.2346.10267-.539.154-.913.154zm.099-.748c.5134 0 .9277-.15033 1.243-.451.3227-.308.484-.737.484-1.287v-.121h-1.782c-.3446 0-.6306.077-.858.231-.22.14667-.33.37033-.33.671s.1137.53533.341.704c.2347.16867.5354.253.902.253z"/><path d="m28.582 8v-7.7h.869v7.7z"/><path d="m31.2783 8v-5.379h.869v5.379zm.44-6.215c-.1907 0-.352-.06233-.484-.187-.1247-.12467-.187-.28233-.187-.473 0-.198.0623-.359333.187-.484.132-.124667.2933-.187.484-.187s.3483.062333.473.187.187.286.187.484c0 .19067-.0623.34833-.187.473s-.2823.187-.473.187z"/><path d="m33.7326 8v-1.122l3.421-3.377v-.121h-3.311v-.759h4.224v1.122l-3.432 3.377v.132h3.52v.748z"/><path d="m41.9601 8.154c-.5427 0-1.0194-.11367-1.43-.341-.4107-.23467-.7297-.561-.957-.979-.2274-.418-.341-.902-.341-1.452v-.132c0-.55733.1136-1.045.341-1.463.2273-.418.5426-.74067.946-.968.4033-.23467.8653-.352 1.386-.352.506 0 .9533.11 1.342.33.3886.21267.693.52067.913.924s.33.87633.33 1.419v.396h-4.389c.022.57933.209 1.034.561 1.364.352.32267.792.484 1.32.484.462 0 .8176-.10633 1.067-.319.2493-.21267.44-.46567.572-.759l.748.363c-.11.22733-.264.45467-.462.682-.1907.22733-.4437.418-.759.572-.308.154-.704.231-1.188.231zm-1.848-3.333h3.498c-.0294-.49867-.2017-.88733-.517-1.166-.308-.27867-.704-.418-1.188-.418-.4914 0-.8947.13933-1.21.418-.3154.27867-.5097.66733-.583 1.166z"/><path d="m48.2828 8.154c-.462 0-.8873-.11-1.276-.33-.3886-.22-.6966-.539-.924-.957-.2273-.418-.341-.913-.341-1.485v-.143c0-.572.1137-1.06333.341-1.474.2274-.418.5317-.737.913-.957.3887-.22733.8177-.341 1.287-.341.374 0 .6894.05133.946.154.264.09533.4767.22.638.374.1614.14667.286.30433.374.473h.154v-3.168h.869v7.7h-.847v-.891h-.154c-.1466.27133-.374.51333-.682.726s-.7406.319-1.298.319zm.231-.77c.5574 0 1.0084-.176 1.353-.528.352-.35933.528-.858.528-1.496v-.099c0-.638-.176-1.133-.528-1.485-.3446-.35933-.7956-.539-1.353-.539-.55 0-1.0046.17967-1.364.539-.352.352-.528.847-.528 1.485v.099c0 .638.176 1.13667.528 1.496.3594.352.814.528 1.364.528z"/><path d="m58.8911 8.154c-.5573 0-.9936-.10633-1.309-.319-.308-.21267-.5316-.45467-.671-.726h-.154v.891h-.847v-7.7h.869v3.168h.154c.088-.16867.2127-.32633.374-.473.1614-.154.3704-.27867.627-.374.264-.10267.583-.154.957-.154.4694 0 .8947.11367 1.276.341.3887.22.6967.539.924.957.2274.41067.341.902.341 1.474v.143c0 .572-.1173 1.067-.352 1.485-.2273.418-.5353.737-.924.957-.3813.22-.803.33-1.265.33zm-.231-.77c.5574 0 1.0084-.176 1.353-.528.352-.35933.528-.858.528-1.496v-.099c0-.638-.176-1.133-.528-1.485-.3446-.35933-.7956-.539-1.353-.539-.55 0-1.0046.17967-1.364.539-.352.352-.528.847-.528 1.485v.099c0 .638.176 1.13667.528 1.496.3594.352.814.528 1.364.528z"/><path d="m63.6382 10.2v-.77h3.08c.2127 0 .319-.11.319-.33v-1.958h-.154c-.0733.154-.187.308-.341.462-.1466.14667-.341.26767-.583.363-.242.088-.5463.132-.913.132-.3886 0-.748-.08433-1.078-.253-.3226-.16867-.5793-.418-.77-.748-.1833-.33-.275-.73333-.275-1.21v-3.267h.869v3.201c0 .528.132.913.396 1.155.2714.242.6344.363 1.089.363.5134 0 .935-.16867 1.265-.506s.495-.83967.495-1.507v-2.706h.869v6.633c0 .29333-.0843.52433-.253.693-.1613.1687-.3996.253-.715.253z"/><path d="m75.2998 8.154c-.9167 0-1.6464-.264-2.189-.792-.5427-.53533-.814-1.31267-.814-2.332v-1.76c0-1.01933.2713-1.793.814-2.321.5426-.535333 1.2723-.803 2.189-.803.9093 0 1.606.253 2.09.759.4913.506.737 1.199.737 2.079v.055h-.913v-.088c0-.57933-.1577-1.05233-.473-1.419-.308-.374-.7884-.561-1.441-.561-.6527 0-1.1624.20167-1.529.605-.3667.396-.55.95333-.55 1.672v1.804c0 .71867.1833 1.27967.55 1.683.3666.396.8763.594 1.529.594.6526 0 1.133-.18333 1.441-.55.3153-.374.473-.85067.473-1.43v-.176h.913v.143c0 .88-.2457 1.573-.737 2.079-.484.506-1.1807.759-2.09.759z"/><path d="m82.0934 8.154c-.5427 0-1.023-.11367-1.441-.341-.4107-.22733-.7333-.54633-.968-.957-.2273-.418-.341-.90933-.341-1.474v-.143c0-.55733.1137-1.045.341-1.463.2347-.418.5573-.74067.968-.968.418-.22733.8983-.341 1.441-.341s1.0193.11367 1.43.341c.418.22733.7407.55.968.968.2347.418.352.90567.352 1.463v.143c0 .56467-.1173 1.056-.352 1.474-.2273.41067-.55.72967-.968.957-.4107.22733-.8873.341-1.43.341zm0-.781c.572 0 1.0267-.17967 1.364-.539.3447-.36667.517-.858.517-1.474v-.099c0-.616-.1723-1.10367-.517-1.463-.3373-.36667-.792-.55-1.364-.55-.5647 0-1.0193.18333-1.364.55-.3447.35933-.517.847-.517 1.463v.099c0 .616.1723 1.10733.517 1.474.3447.35933.7993.539 1.364.539z"/><path d="m88.5742 8.154c-.6673 0-1.232-.154-1.694-.462-.4547-.308-.7297-.79567-.825-1.463l.825-.187c.0587.352.1687.63067.33.836.1613.198.3593.341.594.429.242.08067.4987.121.77.121.4033 0 .7223-.08067.957-.242s.352-.37767.352-.649c0-.27867-.1137-.473-.341-.583-.22-.11733-.5243-.21267-.913-.286l-.451-.077c-.3447-.05867-.66-.15033-.946-.275s-.5133-.29333-.682-.506-.253-.48033-.253-.803c0-.484.187-.86167.561-1.133s.869-.407 1.485-.407c.6087 0 1.1.13933 1.474.418.3813.27133.627.65633.737 1.155l-.814.209c-.066-.38867-.2237-.66-.473-.814-.2493-.16133-.5573-.242-.924-.242s-.6563.06967-.869.209c-.2127.132-.319.33-.319.594 0 .25667.099.44733.297.572.2053.11733.4767.20533.814.264l.451.077c.3813.066.7223.15767 1.023.275.308.11.55.27133.726.484.1833.21267.275.49133.275.836 0 .528-.198.935-.594 1.221-.3887.286-.913.429-1.573.429z"/><path d="m92.208 8v-5.379h.847v.671h.154c.1026-.19067.2713-.36667.506-.528.2346-.16133.5646-.242.99-.242.418 0 .7553.09167 1.012.275.264.18333.4546.407.572.671h.154c.1246-.264.3116-.48767.561-.671.2566-.18333.6123-.275 1.067-.275.3593 0 .6746.07333.946.22.2713.14667.484.35933.638.638.1613.27133.242.59767.242.979v3.641h-.869v-3.564c0-.35933-.1064-.64167-.319-.847-.2054-.21267-.495-.319-.869-.319-.396 0-.7224.12833-.979.385-.2494.25667-.374.627-.374 1.111v3.234h-.869v-3.564c0-.35933-.1064-.64167-.319-.847-.2054-.21267-.495-.319-.869-.319-.396 0-.7224.12833-.979.385-.2494.25667-.374.627-.374 1.111v3.234z"/><path d="m104.158 8.154c-.543 0-1.023-.11367-1.441-.341-.411-.22733-.733-.54633-.968-.957-.227-.418-.341-.90933-.341-1.474v-.143c0-.55733.114-1.045.341-1.463.235-.418.557-.74067.968-.968.418-.22733.898-.341 1.441-.341s1.019.11367 1.43.341c.418.22733.741.55.968.968.235.418.352.90567.352 1.463v.143c0 .56467-.117 1.056-.352 1.474-.227.41067-.55.72967-.968.957-.411.22733-.887.341-1.43.341zm0-.781c.572 0 1.027-.17967 1.364-.539.345-.36667.517-.858.517-1.474v-.099c0-.616-.172-1.10367-.517-1.463-.337-.36667-.792-.55-1.364-.55-.565 0-1.019.18333-1.364.55-.345.35933-.517.847-.517 1.463v.099c0 .616.172 1.10733.517 1.474.345.35933.799.539 1.364.539z"/><path d="m108.208 5.338v-.154c0-.56467.113-1.04867.341-1.452.227-.40333.535-.715.924-.935.388-.22.814-.33 1.276-.33.564 0 .997.11 1.298.33.308.21267.535.451.682.715h.154v-.891h.825v6.633c0 .29333-.081.52433-.242.693-.162.1687-.396.253-.704.253h-3.652v-.77h3.421c.22 0 .33-.11.33-.33v-2.046h-.154c-.088.16133-.213.319-.374.473-.162.154-.371.28233-.627.385-.257.09533-.576.143-.957.143-.462 0-.888-.11-1.276-.33-.389-.22-.697-.53167-.924-.935-.228-.41067-.341-.89467-.341-1.452zm2.772 1.947c.557 0 1.008-.176 1.353-.528.352-.352.528-.836.528-1.452v-.088c0-.62333-.176-1.10733-.528-1.452-.345-.352-.796-.528-1.353-.528-.55 0-1.005.176-1.364.528-.352.34467-.528.82867-.528 1.452v.088c0 .616.176 1.1.528 1.452.359.352.814.528 1.364.528z"/><path d="m115.529 8v-5.379h.847v.66h.154c.096-.23467.242-.407.44-.517s.459-.165.781-.165h.638v.792h-.693c-.388 0-.704.11-.946.33-.234.21267-.352.54633-.352 1.001v3.278z"/><path d="m121.143 8.154c-.374 0-.715-.066-1.023-.198s-.55-.32267-.726-.572-.264-.55367-.264-.913c0-.36667.088-.66733.264-.902.176-.242.418-.42167.726-.539.308-.12467.653-.187 1.034-.187h1.815v-.396c0-.38133-.114-.682-.341-.902-.22-.22-.55-.33-.99-.33-.433 0-.77.10633-1.012.319-.242.20533-.407.484-.495.836l-.814-.264c.088-.30067.227-.572.418-.814.191-.24933.444-.44733.759-.594.323-.154.708-.231 1.155-.231.689 0 1.225.17967 1.606.539.381.352.572.85067.572 1.496v2.431c0 .22.103.33.308.33h.495v.737h-.759c-.242 0-.436-.066-.583-.198-.147-.13933-.22-.32267-.22-.55v-.055h-.132c-.081.13933-.191.286-.33.44-.132.14667-.315.26767-.55.363-.235.10267-.539.154-.913.154zm.099-.748c.513 0 .928-.15033 1.243-.451.323-.308.484-.737.484-1.287v-.121h-1.782c-.345 0-.631.077-.858.231-.22.14667-.33.37033-.33.671s.114.53533.341.704c.235.16867.535.253.902.253z"/><path d="m125.82 10.2v-7.579h.847v.891h.154c.14-.27133.363-.51333.671-.726.316-.21267.752-.319 1.309-.319.462 0 .884.11367 1.265.341.389.22.697.53533.924.946.235.41067.352.90567.352 1.485v.143c0 .572-.113 1.067-.341 1.485-.227.418-.535.737-.924.957-.381.22-.806.33-1.276.33-.374 0-.693-.05133-.957-.154-.256-.09533-.465-.22-.627-.374-.161-.154-.286-.31167-.374-.473h-.154v3.047zm2.75-2.816c.558 0 1.009-.176 1.353-.528.352-.35933.528-.858.528-1.496v-.099c0-.638-.176-1.133-.528-1.485-.344-.35933-.795-.539-1.353-.539-.55 0-1.004.17967-1.364.539-.352.352-.528.847-.528 1.485v.099c0 .638.176 1.13667.528 1.496.36.352.814.528 1.364.528z"/><path d="m132.899 8v-7.7h.869v3.179h.154c.074-.16133.184-.31167.33-.451.154-.14667.349-.26767.583-.363.242-.09533.547-.143.913-.143.404 0 .763.088 1.078.264.323.16867.58.418.77.748.191.32267.286.726.286 1.21v3.256h-.869v-3.19c0-.53533-.135-.924-.407-1.166-.264-.242-.623-.363-1.078-.363-.52 0-.946.16867-1.276.506-.322.33733-.484.83967-.484 1.507v2.706z"/><path d="m140.118 8.154c-.212 0-.392-.06967-.539-.209-.139-.13933-.209-.319-.209-.539s.07-.39967.209-.539c.147-.13933.327-.209.539-.209.22 0 .4.06967.539.209.14.13933.209.319.209.539s-.069.39967-.209.539c-.139.13933-.319.209-.539.209z"/><path d="m144.078 8.154c-.374 0-.715-.066-1.023-.198s-.55-.32267-.726-.572-.264-.55367-.264-.913c0-.36667.088-.66733.264-.902.176-.242.418-.42167.726-.539.308-.12467.652-.187 1.034-.187h1.815v-.396c0-.38133-.114-.682-.341-.902-.22-.22-.55-.33-.99-.33-.433 0-.77.10633-1.012.319-.242.20533-.407.484-.495.836l-.814-.264c.088-.30067.227-.572.418-.814.19-.24933.443-.44733.759-.594.322-.154.707-.231 1.155-.231.689 0 1.224.17967 1.606.539.381.352.572.85067.572 1.496v2.431c0 .22.102.33.308.33h.495v.737h-.759c-.242 0-.437-.066-.583-.198-.147-.13933-.22-.32267-.22-.55v-.055h-.132c-.081.13933-.191.286-.33.44-.132.14667-.316.26767-.55.363-.235.10267-.539.154-.913.154zm.099-.748c.513 0 .927-.15033 1.243-.451.322-.308.484-.737.484-1.287v-.121h-1.782c-.345 0-.631.077-.858.231-.22.14667-.33.37033-.33.671s.113.53533.341.704c.234.16867.535.253.902.253z"/><path d="m148.755 10.2v-7.579h.847v.891h.154c.139-.27133.363-.51333.671-.726.315-.21267.752-.319 1.309-.319.462 0 .884.11367 1.265.341.389.22.697.53533.924.946.235.41067.352.90567.352 1.485v.143c0 .572-.114 1.067-.341 1.485s-.535.737-.924.957c-.381.22-.807.33-1.276.33-.374 0-.693-.05133-.957-.154-.257-.09533-.466-.22-.627-.374s-.286-.31167-.374-.473h-.154v3.047zm2.75-2.816c.557 0 1.008-.176 1.353-.528.352-.35933.528-.858.528-1.496v-.099c0-.638-.176-1.133-.528-1.485-.345-.35933-.796-.539-1.353-.539-.55 0-1.005.17967-1.364.539-.352.352-.528.847-.528 1.485v.099c0 .638.176 1.13667.528 1.496.359.352.814.528 1.364.528z"/><path d="m155.834 10.2v-7.579h.847v.891h.154c.139-.27133.363-.51333.671-.726.315-.21267.752-.319 1.309-.319.462 0 .884.11367 1.265.341.389.22.697.53533.924.946.235.41067.352.90567.352 1.485v.143c0 .572-.114 1.067-.341 1.485s-.535.737-.924.957c-.381.22-.807.33-1.276.33-.374 0-.693-.05133-.957-.154-.257-.09533-.466-.22-.627-.374s-.286-.31167-.374-.473h-.154v3.047zm2.75-2.816c.557 0 1.008-.176 1.353-.528.352-.35933.528-.858.528-1.496v-.099c0-.638-.176-1.133-.528-1.485-.345-.35933-.796-.539-1.353-.539-.55 0-1.005.17967-1.364.539-.352.352-.528.847-.528 1.485v.099c0 .638.176 1.13667.528 1.496.359.352.814.528 1.364.528z"/><path d="m71.6368 9.375h90.3682v.55h-90.3682z"/></g></svg>';

// node_modules/@supabase/functions-js/dist/module/helper.js
var resolveFetch = (customFetch) => {
  let _fetch;
  if (customFetch) {
    _fetch = customFetch;
  } else if (typeof fetch === "undefined") {
    _fetch = (...args) => import("./browser-EMB7CRMN.js").then(({ default: fetch2 }) => fetch2(...args));
  } else {
    _fetch = fetch;
  }
  return (...args) => _fetch(...args);
};

// node_modules/@supabase/functions-js/dist/module/types.js
var FunctionsError = class extends Error {
  constructor(message, name = "FunctionsError", context) {
    super(message);
    this.name = name;
    this.context = context;
  }
};
var FunctionsFetchError = class extends FunctionsError {
  constructor(context) {
    super("Failed to send a request to the Edge Function", "FunctionsFetchError", context);
  }
};
var FunctionsRelayError = class extends FunctionsError {
  constructor(context) {
    super("Relay Error invoking the Edge Function", "FunctionsRelayError", context);
  }
};
var FunctionsHttpError = class extends FunctionsError {
  constructor(context) {
    super("Edge Function returned a non-2xx status code", "FunctionsHttpError", context);
  }
};
var FunctionRegion;
(function(FunctionRegion2) {
  FunctionRegion2["Any"] = "any";
  FunctionRegion2["ApNortheast1"] = "ap-northeast-1";
  FunctionRegion2["ApNortheast2"] = "ap-northeast-2";
  FunctionRegion2["ApSouth1"] = "ap-south-1";
  FunctionRegion2["ApSoutheast1"] = "ap-southeast-1";
  FunctionRegion2["ApSoutheast2"] = "ap-southeast-2";
  FunctionRegion2["CaCentral1"] = "ca-central-1";
  FunctionRegion2["EuCentral1"] = "eu-central-1";
  FunctionRegion2["EuWest1"] = "eu-west-1";
  FunctionRegion2["EuWest2"] = "eu-west-2";
  FunctionRegion2["EuWest3"] = "eu-west-3";
  FunctionRegion2["SaEast1"] = "sa-east-1";
  FunctionRegion2["UsEast1"] = "us-east-1";
  FunctionRegion2["UsWest1"] = "us-west-1";
  FunctionRegion2["UsWest2"] = "us-west-2";
})(FunctionRegion || (FunctionRegion = {}));

// node_modules/@supabase/functions-js/dist/module/FunctionsClient.js
var __awaiter = function(thisArg, _arguments, P6, generator) {
  function adopt(value) {
    return value instanceof P6 ? value : new P6(function(resolve) {
      resolve(value);
    });
  }
  return new (P6 || (P6 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e36) {
        reject(e36);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e36) {
        reject(e36);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var FunctionsClient = class {
  constructor(url, { headers = {}, customFetch, region = FunctionRegion.Any } = {}) {
    this.url = url;
    this.headers = headers;
    this.region = region;
    this.fetch = resolveFetch(customFetch);
  }
  /**
   * Updates the authorization header
   * @param token - the new jwt token sent in the authorisation header
   */
  setAuth(token) {
    this.headers.Authorization = `Bearer ${token}`;
  }
  /**
   * Invokes a function
   * @param functionName - The name of the Function to invoke.
   * @param options - Options for invoking the Function.
   */
  invoke(functionName, options = {}) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      try {
        const { headers, method, body: functionArgs } = options;
        let _headers = {};
        let { region } = options;
        if (!region) {
          region = this.region;
        }
        if (region && region !== "any") {
          _headers["x-region"] = region;
        }
        let body;
        if (functionArgs && (headers && !Object.prototype.hasOwnProperty.call(headers, "Content-Type") || !headers)) {
          if (typeof Blob !== "undefined" && functionArgs instanceof Blob || functionArgs instanceof ArrayBuffer) {
            _headers["Content-Type"] = "application/octet-stream";
            body = functionArgs;
          } else if (typeof functionArgs === "string") {
            _headers["Content-Type"] = "text/plain";
            body = functionArgs;
          } else if (typeof FormData !== "undefined" && functionArgs instanceof FormData) {
            body = functionArgs;
          } else {
            _headers["Content-Type"] = "application/json";
            body = JSON.stringify(functionArgs);
          }
        }
        const response = yield this.fetch(`${this.url}/${functionName}`, {
          method: method || "POST",
          // headers priority is (high to low):
          // 1. invoke-level headers
          // 2. client-level headers
          // 3. default Content-Type header
          headers: Object.assign(Object.assign(Object.assign({}, _headers), this.headers), headers),
          body
        }).catch((fetchError) => {
          throw new FunctionsFetchError(fetchError);
        });
        const isRelayError = response.headers.get("x-relay-error");
        if (isRelayError && isRelayError === "true") {
          throw new FunctionsRelayError(response);
        }
        if (!response.ok) {
          throw new FunctionsHttpError(response);
        }
        let responseType = ((_a = response.headers.get("Content-Type")) !== null && _a !== void 0 ? _a : "text/plain").split(";")[0].trim();
        let data;
        if (responseType === "application/json") {
          data = yield response.json();
        } else if (responseType === "application/octet-stream") {
          data = yield response.blob();
        } else if (responseType === "text/event-stream") {
          data = response;
        } else if (responseType === "multipart/form-data") {
          data = yield response.formData();
        } else {
          data = yield response.text();
        }
        return { data, error: null };
      } catch (error) {
        return { data: null, error };
      }
    });
  }
};

// node_modules/@supabase/postgrest-js/dist/esm/wrapper.mjs
var import_cjs = __toESM(require_cjs(), 1);
var {
  PostgrestClient,
  PostgrestQueryBuilder,
  PostgrestFilterBuilder,
  PostgrestTransformBuilder,
  PostgrestBuilder
} = import_cjs.default;

// node_modules/@supabase/realtime-js/dist/module/lib/version.js
var version = "2.10.7";

// node_modules/@supabase/realtime-js/dist/module/lib/constants.js
var DEFAULT_HEADERS = { "X-Client-Info": `realtime-js/${version}` };
var VSN = "1.0.0";
var DEFAULT_TIMEOUT = 1e4;
var WS_CLOSE_NORMAL = 1e3;
var SOCKET_STATES;
(function(SOCKET_STATES2) {
  SOCKET_STATES2[SOCKET_STATES2["connecting"] = 0] = "connecting";
  SOCKET_STATES2[SOCKET_STATES2["open"] = 1] = "open";
  SOCKET_STATES2[SOCKET_STATES2["closing"] = 2] = "closing";
  SOCKET_STATES2[SOCKET_STATES2["closed"] = 3] = "closed";
})(SOCKET_STATES || (SOCKET_STATES = {}));
var CHANNEL_STATES;
(function(CHANNEL_STATES2) {
  CHANNEL_STATES2["closed"] = "closed";
  CHANNEL_STATES2["errored"] = "errored";
  CHANNEL_STATES2["joined"] = "joined";
  CHANNEL_STATES2["joining"] = "joining";
  CHANNEL_STATES2["leaving"] = "leaving";
})(CHANNEL_STATES || (CHANNEL_STATES = {}));
var CHANNEL_EVENTS;
(function(CHANNEL_EVENTS2) {
  CHANNEL_EVENTS2["close"] = "phx_close";
  CHANNEL_EVENTS2["error"] = "phx_error";
  CHANNEL_EVENTS2["join"] = "phx_join";
  CHANNEL_EVENTS2["reply"] = "phx_reply";
  CHANNEL_EVENTS2["leave"] = "phx_leave";
  CHANNEL_EVENTS2["access_token"] = "access_token";
})(CHANNEL_EVENTS || (CHANNEL_EVENTS = {}));
var TRANSPORTS;
(function(TRANSPORTS2) {
  TRANSPORTS2["websocket"] = "websocket";
})(TRANSPORTS || (TRANSPORTS = {}));
var CONNECTION_STATE;
(function(CONNECTION_STATE2) {
  CONNECTION_STATE2["Connecting"] = "connecting";
  CONNECTION_STATE2["Open"] = "open";
  CONNECTION_STATE2["Closing"] = "closing";
  CONNECTION_STATE2["Closed"] = "closed";
})(CONNECTION_STATE || (CONNECTION_STATE = {}));

// node_modules/@supabase/realtime-js/dist/module/lib/serializer.js
var Serializer = class {
  constructor() {
    this.HEADER_LENGTH = 1;
  }
  decode(rawPayload, callback) {
    if (rawPayload.constructor === ArrayBuffer) {
      return callback(this._binaryDecode(rawPayload));
    }
    if (typeof rawPayload === "string") {
      return callback(JSON.parse(rawPayload));
    }
    return callback({});
  }
  _binaryDecode(buffer) {
    const view = new DataView(buffer);
    const decoder = new TextDecoder();
    return this._decodeBroadcast(buffer, view, decoder);
  }
  _decodeBroadcast(buffer, view, decoder) {
    const topicSize = view.getUint8(1);
    const eventSize = view.getUint8(2);
    let offset = this.HEADER_LENGTH + 2;
    const topic = decoder.decode(buffer.slice(offset, offset + topicSize));
    offset = offset + topicSize;
    const event = decoder.decode(buffer.slice(offset, offset + eventSize));
    offset = offset + eventSize;
    const data = JSON.parse(decoder.decode(buffer.slice(offset, buffer.byteLength)));
    return { ref: null, topic, event, payload: data };
  }
};

// node_modules/@supabase/realtime-js/dist/module/lib/timer.js
var Timer = class {
  constructor(callback, timerCalc) {
    this.callback = callback;
    this.timerCalc = timerCalc;
    this.timer = void 0;
    this.tries = 0;
    this.callback = callback;
    this.timerCalc = timerCalc;
  }
  reset() {
    this.tries = 0;
    clearTimeout(this.timer);
  }
  // Cancels any previous scheduleTimeout and schedules callback
  scheduleTimeout() {
    clearTimeout(this.timer);
    this.timer = setTimeout(() => {
      this.tries = this.tries + 1;
      this.callback();
    }, this.timerCalc(this.tries + 1));
  }
};

// node_modules/@supabase/realtime-js/dist/module/lib/transformers.js
var PostgresTypes;
(function(PostgresTypes2) {
  PostgresTypes2["abstime"] = "abstime";
  PostgresTypes2["bool"] = "bool";
  PostgresTypes2["date"] = "date";
  PostgresTypes2["daterange"] = "daterange";
  PostgresTypes2["float4"] = "float4";
  PostgresTypes2["float8"] = "float8";
  PostgresTypes2["int2"] = "int2";
  PostgresTypes2["int4"] = "int4";
  PostgresTypes2["int4range"] = "int4range";
  PostgresTypes2["int8"] = "int8";
  PostgresTypes2["int8range"] = "int8range";
  PostgresTypes2["json"] = "json";
  PostgresTypes2["jsonb"] = "jsonb";
  PostgresTypes2["money"] = "money";
  PostgresTypes2["numeric"] = "numeric";
  PostgresTypes2["oid"] = "oid";
  PostgresTypes2["reltime"] = "reltime";
  PostgresTypes2["text"] = "text";
  PostgresTypes2["time"] = "time";
  PostgresTypes2["timestamp"] = "timestamp";
  PostgresTypes2["timestamptz"] = "timestamptz";
  PostgresTypes2["timetz"] = "timetz";
  PostgresTypes2["tsrange"] = "tsrange";
  PostgresTypes2["tstzrange"] = "tstzrange";
})(PostgresTypes || (PostgresTypes = {}));
var convertChangeData = (columns, record, options = {}) => {
  var _a;
  const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];
  return Object.keys(record).reduce((acc, rec_key) => {
    acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);
    return acc;
  }, {});
};
var convertColumn = (columnName, columns, record, skipTypes) => {
  const column = columns.find((x3) => x3.name === columnName);
  const colType = column === null || column === void 0 ? void 0 : column.type;
  const value = record[columnName];
  if (colType && !skipTypes.includes(colType)) {
    return convertCell(colType, value);
  }
  return noop(value);
};
var convertCell = (type, value) => {
  if (type.charAt(0) === "_") {
    const dataType = type.slice(1, type.length);
    return toArray(value, dataType);
  }
  switch (type) {
    case PostgresTypes.bool:
      return toBoolean(value);
    case PostgresTypes.float4:
    case PostgresTypes.float8:
    case PostgresTypes.int2:
    case PostgresTypes.int4:
    case PostgresTypes.int8:
    case PostgresTypes.numeric:
    case PostgresTypes.oid:
      return toNumber(value);
    case PostgresTypes.json:
    case PostgresTypes.jsonb:
      return toJson(value);
    case PostgresTypes.timestamp:
      return toTimestampString(value);
    case PostgresTypes.abstime:
    case PostgresTypes.date:
    case PostgresTypes.daterange:
    case PostgresTypes.int4range:
    case PostgresTypes.int8range:
    case PostgresTypes.money:
    case PostgresTypes.reltime:
    case PostgresTypes.text:
    case PostgresTypes.time:
    case PostgresTypes.timestamptz:
    case PostgresTypes.timetz:
    case PostgresTypes.tsrange:
    case PostgresTypes.tstzrange:
      return noop(value);
    default:
      return noop(value);
  }
};
var noop = (value) => {
  return value;
};
var toBoolean = (value) => {
  switch (value) {
    case "t":
      return true;
    case "f":
      return false;
    default:
      return value;
  }
};
var toNumber = (value) => {
  if (typeof value === "string") {
    const parsedValue = parseFloat(value);
    if (!Number.isNaN(parsedValue)) {
      return parsedValue;
    }
  }
  return value;
};
var toJson = (value) => {
  if (typeof value === "string") {
    try {
      return JSON.parse(value);
    } catch (error) {
      console.log(`JSON parse error: ${error}`);
      return value;
    }
  }
  return value;
};
var toArray = (value, type) => {
  if (typeof value !== "string") {
    return value;
  }
  const lastIdx = value.length - 1;
  const closeBrace = value[lastIdx];
  const openBrace = value[0];
  if (openBrace === "{" && closeBrace === "}") {
    let arr;
    const valTrim = value.slice(1, lastIdx);
    try {
      arr = JSON.parse("[" + valTrim + "]");
    } catch (_7) {
      arr = valTrim ? valTrim.split(",") : [];
    }
    return arr.map((val) => convertCell(type, val));
  }
  return value;
};
var toTimestampString = (value) => {
  if (typeof value === "string") {
    return value.replace(" ", "T");
  }
  return value;
};
var httpEndpointURL = (socketUrl) => {
  let url = socketUrl;
  url = url.replace(/^ws/i, "http");
  url = url.replace(/(\/socket\/websocket|\/socket|\/websocket)\/?$/i, "");
  return url.replace(/\/+$/, "");
};

// node_modules/@supabase/realtime-js/dist/module/lib/push.js
var Push = class {
  /**
   * Initializes the Push
   *
   * @param channel The Channel
   * @param event The event, for example `"phx_join"`
   * @param payload The payload, for example `{user_id: 123}`
   * @param timeout The push timeout in milliseconds
   */
  constructor(channel, event, payload = {}, timeout = DEFAULT_TIMEOUT) {
    this.channel = channel;
    this.event = event;
    this.payload = payload;
    this.timeout = timeout;
    this.sent = false;
    this.timeoutTimer = void 0;
    this.ref = "";
    this.receivedResp = null;
    this.recHooks = [];
    this.refEvent = null;
  }
  resend(timeout) {
    this.timeout = timeout;
    this._cancelRefEvent();
    this.ref = "";
    this.refEvent = null;
    this.receivedResp = null;
    this.sent = false;
    this.send();
  }
  send() {
    if (this._hasReceived("timeout")) {
      return;
    }
    this.startTimeout();
    this.sent = true;
    this.channel.socket.push({
      topic: this.channel.topic,
      event: this.event,
      payload: this.payload,
      ref: this.ref,
      join_ref: this.channel._joinRef()
    });
  }
  updatePayload(payload) {
    this.payload = Object.assign(Object.assign({}, this.payload), payload);
  }
  receive(status, callback) {
    var _a;
    if (this._hasReceived(status)) {
      callback((_a = this.receivedResp) === null || _a === void 0 ? void 0 : _a.response);
    }
    this.recHooks.push({ status, callback });
    return this;
  }
  startTimeout() {
    if (this.timeoutTimer) {
      return;
    }
    this.ref = this.channel.socket._makeRef();
    this.refEvent = this.channel._replyEventName(this.ref);
    const callback = (payload) => {
      this._cancelRefEvent();
      this._cancelTimeout();
      this.receivedResp = payload;
      this._matchReceive(payload);
    };
    this.channel._on(this.refEvent, {}, callback);
    this.timeoutTimer = setTimeout(() => {
      this.trigger("timeout", {});
    }, this.timeout);
  }
  trigger(status, response) {
    if (this.refEvent)
      this.channel._trigger(this.refEvent, { status, response });
  }
  destroy() {
    this._cancelRefEvent();
    this._cancelTimeout();
  }
  _cancelRefEvent() {
    if (!this.refEvent) {
      return;
    }
    this.channel._off(this.refEvent, {});
  }
  _cancelTimeout() {
    clearTimeout(this.timeoutTimer);
    this.timeoutTimer = void 0;
  }
  _matchReceive({ status, response }) {
    this.recHooks.filter((h6) => h6.status === status).forEach((h6) => h6.callback(response));
  }
  _hasReceived(status) {
    return this.receivedResp && this.receivedResp.status === status;
  }
};

// node_modules/@supabase/realtime-js/dist/module/RealtimePresence.js
var REALTIME_PRESENCE_LISTEN_EVENTS;
(function(REALTIME_PRESENCE_LISTEN_EVENTS2) {
  REALTIME_PRESENCE_LISTEN_EVENTS2["SYNC"] = "sync";
  REALTIME_PRESENCE_LISTEN_EVENTS2["JOIN"] = "join";
  REALTIME_PRESENCE_LISTEN_EVENTS2["LEAVE"] = "leave";
})(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));
var RealtimePresence = class _RealtimePresence {
  /**
   * Initializes the Presence.
   *
   * @param channel - The RealtimeChannel
   * @param opts - The options,
   *        for example `{events: {state: 'state', diff: 'diff'}}`
   */
  constructor(channel, opts) {
    this.channel = channel;
    this.state = {};
    this.pendingDiffs = [];
    this.joinRef = null;
    this.caller = {
      onJoin: () => {
      },
      onLeave: () => {
      },
      onSync: () => {
      }
    };
    const events2 = (opts === null || opts === void 0 ? void 0 : opts.events) || {
      state: "presence_state",
      diff: "presence_diff"
    };
    this.channel._on(events2.state, {}, (newState) => {
      const { onJoin, onLeave, onSync } = this.caller;
      this.joinRef = this.channel._joinRef();
      this.state = _RealtimePresence.syncState(this.state, newState, onJoin, onLeave);
      this.pendingDiffs.forEach((diff) => {
        this.state = _RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);
      });
      this.pendingDiffs = [];
      onSync();
    });
    this.channel._on(events2.diff, {}, (diff) => {
      const { onJoin, onLeave, onSync } = this.caller;
      if (this.inPendingSyncState()) {
        this.pendingDiffs.push(diff);
      } else {
        this.state = _RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);
        onSync();
      }
    });
    this.onJoin((key, currentPresences, newPresences) => {
      this.channel._trigger("presence", {
        event: "join",
        key,
        currentPresences,
        newPresences
      });
    });
    this.onLeave((key, currentPresences, leftPresences) => {
      this.channel._trigger("presence", {
        event: "leave",
        key,
        currentPresences,
        leftPresences
      });
    });
    this.onSync(() => {
      this.channel._trigger("presence", { event: "sync" });
    });
  }
  /**
   * Used to sync the list of presences on the server with the
   * client's state.
   *
   * An optional `onJoin` and `onLeave` callback can be provided to
   * react to changes in the client's local presences across
   * disconnects and reconnects with the server.
   *
   * @internal
   */
  static syncState(currentState, newState, onJoin, onLeave) {
    const state = this.cloneDeep(currentState);
    const transformedState = this.transformState(newState);
    const joins = {};
    const leaves = {};
    this.map(state, (key, presences) => {
      if (!transformedState[key]) {
        leaves[key] = presences;
      }
    });
    this.map(transformedState, (key, newPresences) => {
      const currentPresences = state[key];
      if (currentPresences) {
        const newPresenceRefs = newPresences.map((m6) => m6.presence_ref);
        const curPresenceRefs = currentPresences.map((m6) => m6.presence_ref);
        const joinedPresences = newPresences.filter((m6) => curPresenceRefs.indexOf(m6.presence_ref) < 0);
        const leftPresences = currentPresences.filter((m6) => newPresenceRefs.indexOf(m6.presence_ref) < 0);
        if (joinedPresences.length > 0) {
          joins[key] = joinedPresences;
        }
        if (leftPresences.length > 0) {
          leaves[key] = leftPresences;
        }
      } else {
        joins[key] = newPresences;
      }
    });
    return this.syncDiff(state, { joins, leaves }, onJoin, onLeave);
  }
  /**
   * Used to sync a diff of presence join and leave events from the
   * server, as they happen.
   *
   * Like `syncState`, `syncDiff` accepts optional `onJoin` and
   * `onLeave` callbacks to react to a user joining or leaving from a
   * device.
   *
   * @internal
   */
  static syncDiff(state, diff, onJoin, onLeave) {
    const { joins, leaves } = {
      joins: this.transformState(diff.joins),
      leaves: this.transformState(diff.leaves)
    };
    if (!onJoin) {
      onJoin = () => {
      };
    }
    if (!onLeave) {
      onLeave = () => {
      };
    }
    this.map(joins, (key, newPresences) => {
      var _a;
      const currentPresences = (_a = state[key]) !== null && _a !== void 0 ? _a : [];
      state[key] = this.cloneDeep(newPresences);
      if (currentPresences.length > 0) {
        const joinedPresenceRefs = state[key].map((m6) => m6.presence_ref);
        const curPresences = currentPresences.filter((m6) => joinedPresenceRefs.indexOf(m6.presence_ref) < 0);
        state[key].unshift(...curPresences);
      }
      onJoin(key, currentPresences, newPresences);
    });
    this.map(leaves, (key, leftPresences) => {
      let currentPresences = state[key];
      if (!currentPresences)
        return;
      const presenceRefsToRemove = leftPresences.map((m6) => m6.presence_ref);
      currentPresences = currentPresences.filter((m6) => presenceRefsToRemove.indexOf(m6.presence_ref) < 0);
      state[key] = currentPresences;
      onLeave(key, currentPresences, leftPresences);
      if (currentPresences.length === 0)
        delete state[key];
    });
    return state;
  }
  /** @internal */
  static map(obj, func) {
    return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]));
  }
  /**
   * Remove 'metas' key
   * Change 'phx_ref' to 'presence_ref'
   * Remove 'phx_ref' and 'phx_ref_prev'
   *
   * @example
   * // returns {
   *  abc123: [
   *    { presence_ref: '2', user_id: 1 },
   *    { presence_ref: '3', user_id: 2 }
   *  ]
   * }
   * RealtimePresence.transformState({
   *  abc123: {
   *    metas: [
   *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },
   *      { phx_ref: '3', user_id: 2 }
   *    ]
   *  }
   * })
   *
   * @internal
   */
  static transformState(state) {
    state = this.cloneDeep(state);
    return Object.getOwnPropertyNames(state).reduce((newState, key) => {
      const presences = state[key];
      if ("metas" in presences) {
        newState[key] = presences.metas.map((presence) => {
          presence["presence_ref"] = presence["phx_ref"];
          delete presence["phx_ref"];
          delete presence["phx_ref_prev"];
          return presence;
        });
      } else {
        newState[key] = presences;
      }
      return newState;
    }, {});
  }
  /** @internal */
  static cloneDeep(obj) {
    return JSON.parse(JSON.stringify(obj));
  }
  /** @internal */
  onJoin(callback) {
    this.caller.onJoin = callback;
  }
  /** @internal */
  onLeave(callback) {
    this.caller.onLeave = callback;
  }
  /** @internal */
  onSync(callback) {
    this.caller.onSync = callback;
  }
  /** @internal */
  inPendingSyncState() {
    return !this.joinRef || this.joinRef !== this.channel._joinRef();
  }
};

// node_modules/@supabase/realtime-js/dist/module/RealtimeChannel.js
var REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;
(function(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2) {
  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["ALL"] = "*";
  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["INSERT"] = "INSERT";
  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["UPDATE"] = "UPDATE";
  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["DELETE"] = "DELETE";
})(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));
var REALTIME_LISTEN_TYPES;
(function(REALTIME_LISTEN_TYPES2) {
  REALTIME_LISTEN_TYPES2["BROADCAST"] = "broadcast";
  REALTIME_LISTEN_TYPES2["PRESENCE"] = "presence";
  REALTIME_LISTEN_TYPES2["POSTGRES_CHANGES"] = "postgres_changes";
  REALTIME_LISTEN_TYPES2["SYSTEM"] = "system";
})(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));
var REALTIME_SUBSCRIBE_STATES;
(function(REALTIME_SUBSCRIBE_STATES2) {
  REALTIME_SUBSCRIBE_STATES2["SUBSCRIBED"] = "SUBSCRIBED";
  REALTIME_SUBSCRIBE_STATES2["TIMED_OUT"] = "TIMED_OUT";
  REALTIME_SUBSCRIBE_STATES2["CLOSED"] = "CLOSED";
  REALTIME_SUBSCRIBE_STATES2["CHANNEL_ERROR"] = "CHANNEL_ERROR";
})(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));
var RealtimeChannel = class _RealtimeChannel {
  constructor(topic, params = { config: {} }, socket) {
    this.topic = topic;
    this.params = params;
    this.socket = socket;
    this.bindings = {};
    this.state = CHANNEL_STATES.closed;
    this.joinedOnce = false;
    this.pushBuffer = [];
    this.subTopic = topic.replace(/^realtime:/i, "");
    this.params.config = Object.assign({
      broadcast: { ack: false, self: false },
      presence: { key: "" },
      private: false
    }, params.config);
    this.timeout = this.socket.timeout;
    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);
    this.rejoinTimer = new Timer(() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs);
    this.joinPush.receive("ok", () => {
      this.state = CHANNEL_STATES.joined;
      this.rejoinTimer.reset();
      this.pushBuffer.forEach((pushEvent) => pushEvent.send());
      this.pushBuffer = [];
    });
    this._onClose(() => {
      this.rejoinTimer.reset();
      this.socket.log("channel", `close ${this.topic} ${this._joinRef()}`);
      this.state = CHANNEL_STATES.closed;
      this.socket._remove(this);
    });
    this._onError((reason) => {
      if (this._isLeaving() || this._isClosed()) {
        return;
      }
      this.socket.log("channel", `error ${this.topic}`, reason);
      this.state = CHANNEL_STATES.errored;
      this.rejoinTimer.scheduleTimeout();
    });
    this.joinPush.receive("timeout", () => {
      if (!this._isJoining()) {
        return;
      }
      this.socket.log("channel", `timeout ${this.topic}`, this.joinPush.timeout);
      this.state = CHANNEL_STATES.errored;
      this.rejoinTimer.scheduleTimeout();
    });
    this._on(CHANNEL_EVENTS.reply, {}, (payload, ref) => {
      this._trigger(this._replyEventName(ref), payload);
    });
    this.presence = new RealtimePresence(this);
    this.broadcastEndpointURL = httpEndpointURL(this.socket.endPoint) + "/api/broadcast";
    this.private = this.params.config.private || false;
  }
  /** Subscribe registers your client with the server */
  subscribe(callback, timeout = this.timeout) {
    var _a, _b;
    if (!this.socket.isConnected()) {
      this.socket.connect();
    }
    if (this.joinedOnce) {
      throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`;
    } else {
      const { config: { broadcast, presence, private: isPrivate } } = this.params;
      this._onError((e36) => callback && callback("CHANNEL_ERROR", e36));
      this._onClose(() => callback && callback("CLOSED"));
      const accessTokenPayload = {};
      const config = {
        broadcast,
        presence,
        postgres_changes: (_b = (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.map((r14) => r14.filter)) !== null && _b !== void 0 ? _b : [],
        private: isPrivate
      };
      if (this.socket.accessToken) {
        accessTokenPayload.access_token = this.socket.accessToken;
      }
      this.updateJoinPayload(Object.assign({ config }, accessTokenPayload));
      this.joinedOnce = true;
      this._rejoin(timeout);
      this.joinPush.receive("ok", ({ postgres_changes: serverPostgresFilters }) => {
        var _a2;
        this.socket.accessToken && this.socket.setAuth(this.socket.accessToken);
        if (serverPostgresFilters === void 0) {
          callback && callback("SUBSCRIBED");
          return;
        } else {
          const clientPostgresBindings = this.bindings.postgres_changes;
          const bindingsLen = (_a2 = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a2 !== void 0 ? _a2 : 0;
          const newPostgresBindings = [];
          for (let i11 = 0; i11 < bindingsLen; i11++) {
            const clientPostgresBinding = clientPostgresBindings[i11];
            const { filter: { event, schema, table, filter } } = clientPostgresBinding;
            const serverPostgresFilter = serverPostgresFilters && serverPostgresFilters[i11];
            if (serverPostgresFilter && serverPostgresFilter.event === event && serverPostgresFilter.schema === schema && serverPostgresFilter.table === table && serverPostgresFilter.filter === filter) {
              newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), { id: serverPostgresFilter.id }));
            } else {
              this.unsubscribe();
              callback && callback("CHANNEL_ERROR", new Error("mismatch between server and client bindings for postgres changes"));
              return;
            }
          }
          this.bindings.postgres_changes = newPostgresBindings;
          callback && callback("SUBSCRIBED");
          return;
        }
      }).receive("error", (error) => {
        callback && callback("CHANNEL_ERROR", new Error(JSON.stringify(Object.values(error).join(", ") || "error")));
        return;
      }).receive("timeout", () => {
        callback && callback("TIMED_OUT");
        return;
      });
    }
    return this;
  }
  presenceState() {
    return this.presence.state;
  }
  async track(payload, opts = {}) {
    return await this.send({
      type: "presence",
      event: "track",
      payload
    }, opts.timeout || this.timeout);
  }
  async untrack(opts = {}) {
    return await this.send({
      type: "presence",
      event: "untrack"
    }, opts);
  }
  on(type, filter, callback) {
    return this._on(type, filter, callback);
  }
  /**
   * Sends a message into the channel.
   *
   * @param args Arguments to send to channel
   * @param args.type The type of event to send
   * @param args.event The name of the event being sent
   * @param args.payload Payload to be sent
   * @param opts Options to be used during the send process
   */
  async send(args, opts = {}) {
    var _a, _b;
    if (!this._canPush() && args.type === "broadcast") {
      const { event, payload: endpoint_payload } = args;
      const options = {
        method: "POST",
        headers: {
          Authorization: this.socket.accessToken ? `Bearer ${this.socket.accessToken}` : "",
          apikey: this.socket.apiKey ? this.socket.apiKey : "",
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          messages: [
            {
              topic: this.subTopic,
              event,
              payload: endpoint_payload,
              private: this.private
            }
          ]
        })
      };
      try {
        const response = await this._fetchWithTimeout(this.broadcastEndpointURL, options, (_a = opts.timeout) !== null && _a !== void 0 ? _a : this.timeout);
        await ((_b = response.body) === null || _b === void 0 ? void 0 : _b.cancel());
        return response.ok ? "ok" : "error";
      } catch (error) {
        if (error.name === "AbortError") {
          return "timed out";
        } else {
          return "error";
        }
      }
    } else {
      return new Promise((resolve) => {
        var _a2, _b2, _c;
        const push = this._push(args.type, args, opts.timeout || this.timeout);
        if (args.type === "broadcast" && !((_c = (_b2 = (_a2 = this.params) === null || _a2 === void 0 ? void 0 : _a2.config) === null || _b2 === void 0 ? void 0 : _b2.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {
          resolve("ok");
        }
        push.receive("ok", () => resolve("ok"));
        push.receive("error", () => resolve("error"));
        push.receive("timeout", () => resolve("timed out"));
      });
    }
  }
  updateJoinPayload(payload) {
    this.joinPush.updatePayload(payload);
  }
  /**
   * Leaves the channel.
   *
   * Unsubscribes from server events, and instructs channel to terminate on server.
   * Triggers onClose() hooks.
   *
   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:
   * channel.unsubscribe().receive("ok", () => alert("left!") )
   */
  unsubscribe(timeout = this.timeout) {
    this.state = CHANNEL_STATES.leaving;
    const onClose = () => {
      this.socket.log("channel", `leave ${this.topic}`);
      this._trigger(CHANNEL_EVENTS.close, "leave", this._joinRef());
    };
    this.rejoinTimer.reset();
    this.joinPush.destroy();
    return new Promise((resolve) => {
      const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);
      leavePush.receive("ok", () => {
        onClose();
        resolve("ok");
      }).receive("timeout", () => {
        onClose();
        resolve("timed out");
      }).receive("error", () => {
        resolve("error");
      });
      leavePush.send();
      if (!this._canPush()) {
        leavePush.trigger("ok", {});
      }
    });
  }
  /** @internal */
  async _fetchWithTimeout(url, options, timeout) {
    const controller = new AbortController();
    const id = setTimeout(() => controller.abort(), timeout);
    const response = await this.socket.fetch(url, Object.assign(Object.assign({}, options), { signal: controller.signal }));
    clearTimeout(id);
    return response;
  }
  /** @internal */
  _push(event, payload, timeout = this.timeout) {
    if (!this.joinedOnce) {
      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;
    }
    let pushEvent = new Push(this, event, payload, timeout);
    if (this._canPush()) {
      pushEvent.send();
    } else {
      pushEvent.startTimeout();
      this.pushBuffer.push(pushEvent);
    }
    return pushEvent;
  }
  /**
   * Overridable message hook
   *
   * Receives all events for specialized message handling before dispatching to the channel callbacks.
   * Must return the payload, modified or unmodified.
   *
   * @internal
   */
  _onMessage(_event, payload, _ref) {
    return payload;
  }
  /** @internal */
  _isMember(topic) {
    return this.topic === topic;
  }
  /** @internal */
  _joinRef() {
    return this.joinPush.ref;
  }
  /** @internal */
  _trigger(type, payload, ref) {
    var _a, _b;
    const typeLower = type.toLocaleLowerCase();
    const { close, error, leave, join } = CHANNEL_EVENTS;
    const events2 = [close, error, leave, join];
    if (ref && events2.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {
      return;
    }
    let handledPayload = this._onMessage(typeLower, payload, ref);
    if (payload && !handledPayload) {
      throw "channel onMessage callbacks must return the payload, modified or unmodified";
    }
    if (["insert", "update", "delete"].includes(typeLower)) {
      (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.filter((bind) => {
        var _a2, _b2, _c;
        return ((_a2 = bind.filter) === null || _a2 === void 0 ? void 0 : _a2.event) === "*" || ((_c = (_b2 = bind.filter) === null || _b2 === void 0 ? void 0 : _b2.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower;
      }).map((bind) => bind.callback(handledPayload, ref));
    } else {
      (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter((bind) => {
        var _a2, _b2, _c, _d, _e2, _f;
        if (["broadcast", "presence", "postgres_changes"].includes(typeLower)) {
          if ("id" in bind) {
            const bindId = bind.id;
            const bindEvent = (_a2 = bind.filter) === null || _a2 === void 0 ? void 0 : _a2.event;
            return bindId && ((_b2 = payload.ids) === null || _b2 === void 0 ? void 0 : _b2.includes(bindId)) && (bindEvent === "*" || (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) === ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase()));
          } else {
            const bindEvent = (_e2 = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e2 === void 0 ? void 0 : _e2.toLocaleLowerCase();
            return bindEvent === "*" || bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase());
          }
        } else {
          return bind.type.toLocaleLowerCase() === typeLower;
        }
      }).map((bind) => {
        if (typeof handledPayload === "object" && "ids" in handledPayload) {
          const postgresChanges = handledPayload.data;
          const { schema, table, commit_timestamp, type: type2, errors } = postgresChanges;
          const enrichedPayload = {
            schema,
            table,
            commit_timestamp,
            eventType: type2,
            new: {},
            old: {},
            errors
          };
          handledPayload = Object.assign(Object.assign({}, enrichedPayload), this._getPayloadRecords(postgresChanges));
        }
        bind.callback(handledPayload, ref);
      });
    }
  }
  /** @internal */
  _isClosed() {
    return this.state === CHANNEL_STATES.closed;
  }
  /** @internal */
  _isJoined() {
    return this.state === CHANNEL_STATES.joined;
  }
  /** @internal */
  _isJoining() {
    return this.state === CHANNEL_STATES.joining;
  }
  /** @internal */
  _isLeaving() {
    return this.state === CHANNEL_STATES.leaving;
  }
  /** @internal */
  _replyEventName(ref) {
    return `chan_reply_${ref}`;
  }
  /** @internal */
  _on(type, filter, callback) {
    const typeLower = type.toLocaleLowerCase();
    const binding = {
      type: typeLower,
      filter,
      callback
    };
    if (this.bindings[typeLower]) {
      this.bindings[typeLower].push(binding);
    } else {
      this.bindings[typeLower] = [binding];
    }
    return this;
  }
  /** @internal */
  _off(type, filter) {
    const typeLower = type.toLocaleLowerCase();
    this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {
      var _a;
      return !(((_a = bind.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === typeLower && _RealtimeChannel.isEqual(bind.filter, filter));
    });
    return this;
  }
  /** @internal */
  static isEqual(obj1, obj2) {
    if (Object.keys(obj1).length !== Object.keys(obj2).length) {
      return false;
    }
    for (const k5 in obj1) {
      if (obj1[k5] !== obj2[k5]) {
        return false;
      }
    }
    return true;
  }
  /** @internal */
  _rejoinUntilConnected() {
    this.rejoinTimer.scheduleTimeout();
    if (this.socket.isConnected()) {
      this._rejoin();
    }
  }
  /**
   * Registers a callback that will be executed when the channel closes.
   *
   * @internal
   */
  _onClose(callback) {
    this._on(CHANNEL_EVENTS.close, {}, callback);
  }
  /**
   * Registers a callback that will be executed when the channel encounteres an error.
   *
   * @internal
   */
  _onError(callback) {
    this._on(CHANNEL_EVENTS.error, {}, (reason) => callback(reason));
  }
  /**
   * Returns `true` if the socket is connected and the channel has been joined.
   *
   * @internal
   */
  _canPush() {
    return this.socket.isConnected() && this._isJoined();
  }
  /** @internal */
  _rejoin(timeout = this.timeout) {
    if (this._isLeaving()) {
      return;
    }
    this.socket._leaveOpenTopic(this.topic);
    this.state = CHANNEL_STATES.joining;
    this.joinPush.resend(timeout);
  }
  /** @internal */
  _getPayloadRecords(payload) {
    const records = {
      new: {},
      old: {}
    };
    if (payload.type === "INSERT" || payload.type === "UPDATE") {
      records.new = convertChangeData(payload.columns, payload.record);
    }
    if (payload.type === "UPDATE" || payload.type === "DELETE") {
      records.old = convertChangeData(payload.columns, payload.old_record);
    }
    return records;
  }
};

// node_modules/@supabase/realtime-js/dist/module/RealtimeClient.js
var noop2 = () => {
};
var NATIVE_WEBSOCKET_AVAILABLE = typeof WebSocket !== "undefined";
var WORKER_SCRIPT = `
  addEventListener("message", (e) => {
    if (e.data.event === "start") {
      setInterval(() => postMessage({ event: "keepAlive" }), e.data.interval);
    }
  });`;
var RealtimeClient = class {
  /**
   * Initializes the Socket.
   *
   * @param endPoint The string WebSocket endpoint, ie, "ws://example.com/socket", "wss://example.com", "/socket" (inherited host & protocol)
   * @param httpEndpoint The string HTTP endpoint, ie, "https://example.com", "/" (inherited host & protocol)
   * @param options.transport The Websocket Transport, for example WebSocket.
   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.
   * @param options.params The optional params to pass when connecting.
   * @param options.headers The optional headers to pass when connecting.
   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.
   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }
   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))
   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.
   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.
   * @param options.worker Use Web Worker to set a side flow. Defaults to false.
   * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.
   */
  constructor(endPoint, options) {
    var _a;
    this.accessToken = null;
    this.apiKey = null;
    this.channels = [];
    this.endPoint = "";
    this.httpEndpoint = "";
    this.headers = DEFAULT_HEADERS;
    this.params = {};
    this.timeout = DEFAULT_TIMEOUT;
    this.heartbeatIntervalMs = 3e4;
    this.heartbeatTimer = void 0;
    this.pendingHeartbeatRef = null;
    this.ref = 0;
    this.logger = noop2;
    this.conn = null;
    this.sendBuffer = [];
    this.serializer = new Serializer();
    this.stateChangeCallbacks = {
      open: [],
      close: [],
      error: [],
      message: []
    };
    this._resolveFetch = (customFetch) => {
      let _fetch;
      if (customFetch) {
        _fetch = customFetch;
      } else if (typeof fetch === "undefined") {
        _fetch = (...args) => import("./browser-EMB7CRMN.js").then(({ default: fetch2 }) => fetch2(...args));
      } else {
        _fetch = fetch;
      }
      return (...args) => _fetch(...args);
    };
    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;
    this.httpEndpoint = httpEndpointURL(endPoint);
    if (options === null || options === void 0 ? void 0 : options.transport) {
      this.transport = options.transport;
    } else {
      this.transport = null;
    }
    if (options === null || options === void 0 ? void 0 : options.params)
      this.params = options.params;
    if (options === null || options === void 0 ? void 0 : options.headers)
      this.headers = Object.assign(Object.assign({}, this.headers), options.headers);
    if (options === null || options === void 0 ? void 0 : options.timeout)
      this.timeout = options.timeout;
    if (options === null || options === void 0 ? void 0 : options.logger)
      this.logger = options.logger;
    if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs)
      this.heartbeatIntervalMs = options.heartbeatIntervalMs;
    const accessToken = (_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey;
    if (accessToken) {
      this.accessToken = accessToken;
      this.apiKey = accessToken;
    }
    this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs) ? options.reconnectAfterMs : (tries) => {
      return [1e3, 2e3, 5e3, 1e4][tries - 1] || 1e4;
    };
    this.encode = (options === null || options === void 0 ? void 0 : options.encode) ? options.encode : (payload, callback) => {
      return callback(JSON.stringify(payload));
    };
    this.decode = (options === null || options === void 0 ? void 0 : options.decode) ? options.decode : this.serializer.decode.bind(this.serializer);
    this.reconnectTimer = new Timer(async () => {
      this.disconnect();
      this.connect();
    }, this.reconnectAfterMs);
    this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);
    if (options === null || options === void 0 ? void 0 : options.worker) {
      if (typeof window !== "undefined" && !window.Worker) {
        throw new Error("Web Worker is not supported");
      }
      this.worker = (options === null || options === void 0 ? void 0 : options.worker) || false;
      this.workerUrl = options === null || options === void 0 ? void 0 : options.workerUrl;
    }
  }
  /**
   * Connects the socket, unless already connected.
   */
  connect() {
    if (this.conn) {
      return;
    }
    if (this.transport) {
      this.conn = new this.transport(this._endPointURL(), void 0, {
        headers: this.headers
      });
      return;
    }
    if (NATIVE_WEBSOCKET_AVAILABLE) {
      this.conn = new WebSocket(this._endPointURL());
      this.setupConnection();
      return;
    }
    this.conn = new WSWebSocketDummy(this._endPointURL(), void 0, {
      close: () => {
        this.conn = null;
      }
    });
    import("./browser-QO5QDEMX.js").then(({ default: WS }) => {
      this.conn = new WS(this._endPointURL(), void 0, {
        headers: this.headers
      });
      this.setupConnection();
    });
  }
  /**
   * Disconnects the socket.
   *
   * @param code A numeric status code to send on disconnect.
   * @param reason A custom reason for the disconnect.
   */
  disconnect(code, reason) {
    if (this.conn) {
      this.conn.onclose = function() {
      };
      if (code) {
        this.conn.close(code, reason !== null && reason !== void 0 ? reason : "");
      } else {
        this.conn.close();
      }
      this.conn = null;
      this.heartbeatTimer && clearInterval(this.heartbeatTimer);
      this.reconnectTimer.reset();
    }
  }
  /**
   * Returns all created channels
   */
  getChannels() {
    return this.channels;
  }
  /**
   * Unsubscribes and removes a single channel
   * @param channel A RealtimeChannel instance
   */
  async removeChannel(channel) {
    const status = await channel.unsubscribe();
    if (this.channels.length === 0) {
      this.disconnect();
    }
    return status;
  }
  /**
   * Unsubscribes and removes all channels
   */
  async removeAllChannels() {
    const values_1 = await Promise.all(this.channels.map((channel) => channel.unsubscribe()));
    this.disconnect();
    return values_1;
  }
  /**
   * Logs the message.
   *
   * For customized logging, `this.logger` can be overridden.
   */
  log(kind, msg2, data) {
    this.logger(kind, msg2, data);
  }
  /**
   * Returns the current state of the socket.
   */
  connectionState() {
    switch (this.conn && this.conn.readyState) {
      case SOCKET_STATES.connecting:
        return CONNECTION_STATE.Connecting;
      case SOCKET_STATES.open:
        return CONNECTION_STATE.Open;
      case SOCKET_STATES.closing:
        return CONNECTION_STATE.Closing;
      default:
        return CONNECTION_STATE.Closed;
    }
  }
  /**
   * Returns `true` is the connection is open.
   */
  isConnected() {
    return this.connectionState() === CONNECTION_STATE.Open;
  }
  channel(topic, params = { config: {} }) {
    const chan = new RealtimeChannel(`realtime:${topic}`, params, this);
    this.channels.push(chan);
    return chan;
  }
  /**
   * Push out a message if the socket is connected.
   *
   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.
   */
  push(data) {
    const { topic, event, payload, ref } = data;
    const callback = () => {
      this.encode(data, (result) => {
        var _a;
        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);
      });
    };
    this.log("push", `${topic} ${event} (${ref})`, payload);
    if (this.isConnected()) {
      callback();
    } else {
      this.sendBuffer.push(callback);
    }
  }
  /**
   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.
   *
   * @param token A JWT string.
   */
  setAuth(token) {
    this.accessToken = token;
    this.channels.forEach((channel) => {
      token && channel.updateJoinPayload({ access_token: token });
      if (channel.joinedOnce && channel._isJoined()) {
        channel._push(CHANNEL_EVENTS.access_token, { access_token: token });
      }
    });
  }
  /**
   * Return the next message ref, accounting for overflows
   *
   * @internal
   */
  _makeRef() {
    let newRef = this.ref + 1;
    if (newRef === this.ref) {
      this.ref = 0;
    } else {
      this.ref = newRef;
    }
    return this.ref.toString();
  }
  /**
   * Unsubscribe from channels with the specified topic.
   *
   * @internal
   */
  _leaveOpenTopic(topic) {
    let dupChannel = this.channels.find((c11) => c11.topic === topic && (c11._isJoined() || c11._isJoining()));
    if (dupChannel) {
      this.log("transport", `leaving duplicate topic "${topic}"`);
      dupChannel.unsubscribe();
    }
  }
  /**
   * Removes a subscription from the socket.
   *
   * @param channel An open subscription.
   *
   * @internal
   */
  _remove(channel) {
    this.channels = this.channels.filter((c11) => c11._joinRef() !== channel._joinRef());
  }
  /**
   * Sets up connection handlers.
   *
   * @internal
   */
  setupConnection() {
    if (this.conn) {
      this.conn.binaryType = "arraybuffer";
      this.conn.onopen = () => this._onConnOpen();
      this.conn.onerror = (error) => this._onConnError(error);
      this.conn.onmessage = (event) => this._onConnMessage(event);
      this.conn.onclose = (event) => this._onConnClose(event);
    }
  }
  /**
   * Returns the URL of the websocket.
   *
   * @internal
   */
  _endPointURL() {
    return this._appendParams(this.endPoint, Object.assign({}, this.params, { vsn: VSN }));
  }
  /** @internal */
  _onConnMessage(rawMessage) {
    this.decode(rawMessage.data, (msg2) => {
      let { topic, event, payload, ref } = msg2;
      if (ref && ref === this.pendingHeartbeatRef || event === (payload === null || payload === void 0 ? void 0 : payload.type)) {
        this.pendingHeartbeatRef = null;
      }
      this.log("receive", `${payload.status || ""} ${topic} ${event} ${ref && "(" + ref + ")" || ""}`, payload);
      this.channels.filter((channel) => channel._isMember(topic)).forEach((channel) => channel._trigger(event, payload, ref));
      this.stateChangeCallbacks.message.forEach((callback) => callback(msg2));
    });
  }
  /** @internal */
  async _onConnOpen() {
    this.log("transport", `connected to ${this._endPointURL()}`);
    this._flushSendBuffer();
    this.reconnectTimer.reset();
    if (!this.worker) {
      this.heartbeatTimer && clearInterval(this.heartbeatTimer);
      this.heartbeatTimer = setInterval(() => this._sendHeartbeat(), this.heartbeatIntervalMs);
    } else {
      if (this.workerUrl) {
        this.log("worker", `starting worker for from ${this.workerUrl}`);
      } else {
        this.log("worker", `starting default worker`);
      }
      const objectUrl = this._workerObjectUrl(this.workerUrl);
      this.workerRef = new Worker(objectUrl);
      this.workerRef.onerror = (error) => {
        this.log("worker", "worker error", error.message);
        this.workerRef.terminate();
      };
      this.workerRef.onmessage = (event) => {
        if (event.data.event === "keepAlive") {
          this._sendHeartbeat();
        }
      };
      this.workerRef.postMessage({
        event: "start",
        interval: this.heartbeatIntervalMs
      });
    }
    this.stateChangeCallbacks.open.forEach((callback) => callback());
  }
  /** @internal */
  _onConnClose(event) {
    this.log("transport", "close", event);
    this._triggerChanError();
    this.heartbeatTimer && clearInterval(this.heartbeatTimer);
    this.reconnectTimer.scheduleTimeout();
    this.stateChangeCallbacks.close.forEach((callback) => callback(event));
  }
  /** @internal */
  _onConnError(error) {
    this.log("transport", error.message);
    this._triggerChanError();
    this.stateChangeCallbacks.error.forEach((callback) => callback(error));
  }
  /** @internal */
  _triggerChanError() {
    this.channels.forEach((channel) => channel._trigger(CHANNEL_EVENTS.error));
  }
  /** @internal */
  _appendParams(url, params) {
    if (Object.keys(params).length === 0) {
      return url;
    }
    const prefix = url.match(/\?/) ? "&" : "?";
    const query = new URLSearchParams(params);
    return `${url}${prefix}${query}`;
  }
  /** @internal */
  _flushSendBuffer() {
    if (this.isConnected() && this.sendBuffer.length > 0) {
      this.sendBuffer.forEach((callback) => callback());
      this.sendBuffer = [];
    }
  }
  /** @internal */
  _sendHeartbeat() {
    var _a;
    if (!this.isConnected()) {
      return;
    }
    if (this.pendingHeartbeatRef) {
      this.pendingHeartbeatRef = null;
      this.log("transport", "heartbeat timeout. Attempting to re-establish connection");
      (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, "hearbeat timeout");
      return;
    }
    this.pendingHeartbeatRef = this._makeRef();
    this.push({
      topic: "phoenix",
      event: "heartbeat",
      payload: {},
      ref: this.pendingHeartbeatRef
    });
    this.setAuth(this.accessToken);
  }
  _workerObjectUrl(url) {
    let result_url;
    if (url) {
      result_url = url;
    } else {
      const blob = new Blob([WORKER_SCRIPT], { type: "application/javascript" });
      result_url = URL.createObjectURL(blob);
    }
    return result_url;
  }
};
var WSWebSocketDummy = class {
  constructor(address, _protocols, options) {
    this.binaryType = "arraybuffer";
    this.onclose = () => {
    };
    this.onerror = () => {
    };
    this.onmessage = () => {
    };
    this.onopen = () => {
    };
    this.readyState = SOCKET_STATES.connecting;
    this.send = () => {
    };
    this.url = null;
    this.url = address;
    this.close = options.close;
  }
};

// node_modules/@supabase/storage-js/dist/module/lib/errors.js
var StorageError = class extends Error {
  constructor(message) {
    super(message);
    this.__isStorageError = true;
    this.name = "StorageError";
  }
};
function isStorageError(error) {
  return typeof error === "object" && error !== null && "__isStorageError" in error;
}
var StorageApiError = class extends StorageError {
  constructor(message, status) {
    super(message);
    this.name = "StorageApiError";
    this.status = status;
  }
  toJSON() {
    return {
      name: this.name,
      message: this.message,
      status: this.status
    };
  }
};
var StorageUnknownError = class extends StorageError {
  constructor(message, originalError) {
    super(message);
    this.name = "StorageUnknownError";
    this.originalError = originalError;
  }
};

// node_modules/@supabase/storage-js/dist/module/lib/helpers.js
var __awaiter2 = function(thisArg, _arguments, P6, generator) {
  function adopt(value) {
    return value instanceof P6 ? value : new P6(function(resolve) {
      resolve(value);
    });
  }
  return new (P6 || (P6 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e36) {
        reject(e36);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e36) {
        reject(e36);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var resolveFetch2 = (customFetch) => {
  let _fetch;
  if (customFetch) {
    _fetch = customFetch;
  } else if (typeof fetch === "undefined") {
    _fetch = (...args) => import("./browser-EMB7CRMN.js").then(({ default: fetch2 }) => fetch2(...args));
  } else {
    _fetch = fetch;
  }
  return (...args) => _fetch(...args);
};
var resolveResponse = () => __awaiter2(void 0, void 0, void 0, function* () {
  if (typeof Response === "undefined") {
    return (yield import("./browser-EMB7CRMN.js")).Response;
  }
  return Response;
});
var recursiveToCamel = (item) => {
  if (Array.isArray(item)) {
    return item.map((el) => recursiveToCamel(el));
  } else if (typeof item === "function" || item !== Object(item)) {
    return item;
  }
  const result = {};
  Object.entries(item).forEach(([key, value]) => {
    const newKey = key.replace(/([-_][a-z])/gi, (c11) => c11.toUpperCase().replace(/[-_]/g, ""));
    result[newKey] = recursiveToCamel(value);
  });
  return result;
};

// node_modules/@supabase/storage-js/dist/module/lib/fetch.js
var __awaiter3 = function(thisArg, _arguments, P6, generator) {
  function adopt(value) {
    return value instanceof P6 ? value : new P6(function(resolve) {
      resolve(value);
    });
  }
  return new (P6 || (P6 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e36) {
        reject(e36);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e36) {
        reject(e36);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var _getErrorMessage = (err) => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);
var handleError = (error, reject, options) => __awaiter3(void 0, void 0, void 0, function* () {
  const Res = yield resolveResponse();
  if (error instanceof Res && !(options === null || options === void 0 ? void 0 : options.noResolveJson)) {
    error.json().then((err) => {
      reject(new StorageApiError(_getErrorMessage(err), error.status || 500));
    }).catch((err) => {
      reject(new StorageUnknownError(_getErrorMessage(err), err));
    });
  } else {
    reject(new StorageUnknownError(_getErrorMessage(error), error));
  }
});
var _getRequestParams = (method, options, parameters, body) => {
  const params = { method, headers: (options === null || options === void 0 ? void 0 : options.headers) || {} };
  if (method === "GET") {
    return params;
  }
  params.headers = Object.assign({ "Content-Type": "application/json" }, options === null || options === void 0 ? void 0 : options.headers);
  if (body) {
    params.body = JSON.stringify(body);
  }
  return Object.assign(Object.assign({}, params), parameters);
};
function _handleRequest(fetcher, method, url, options, parameters, body) {
  return __awaiter3(this, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
      fetcher(url, _getRequestParams(method, options, parameters, body)).then((result) => {
        if (!result.ok)
          throw result;
        if (options === null || options === void 0 ? void 0 : options.noResolveJson)
          return result;
        return result.json();
      }).then((data) => resolve(data)).catch((error) => handleError(error, reject, options));
    });
  });
}
function get(fetcher, url, options, parameters) {
  return __awaiter3(this, void 0, void 0, function* () {
    return _handleRequest(fetcher, "GET", url, options, parameters);
  });
}
function post(fetcher, url, body, options, parameters) {
  return __awaiter3(this, void 0, void 0, function* () {
    return _handleRequest(fetcher, "POST", url, options, parameters, body);
  });
}
function put(fetcher, url, body, options, parameters) {
  return __awaiter3(this, void 0, void 0, function* () {
    return _handleRequest(fetcher, "PUT", url, options, parameters, body);
  });
}
function head(fetcher, url, options, parameters) {
  return __awaiter3(this, void 0, void 0, function* () {
    return _handleRequest(fetcher, "HEAD", url, Object.assign(Object.assign({}, options), { noResolveJson: true }), parameters);
  });
}
function remove(fetcher, url, body, options, parameters) {
  return __awaiter3(this, void 0, void 0, function* () {
    return _handleRequest(fetcher, "DELETE", url, options, parameters, body);
  });
}

// node_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.js
var __awaiter4 = function(thisArg, _arguments, P6, generator) {
  function adopt(value) {
    return value instanceof P6 ? value : new P6(function(resolve) {
      resolve(value);
    });
  }
  return new (P6 || (P6 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e36) {
        reject(e36);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e36) {
        reject(e36);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var DEFAULT_SEARCH_OPTIONS = {
  limit: 100,
  offset: 0,
  sortBy: {
    column: "name",
    order: "asc"
  }
};
var DEFAULT_FILE_OPTIONS = {
  cacheControl: "3600",
  contentType: "text/plain;charset=UTF-8",
  upsert: false
};
var StorageFileApi = class {
  constructor(url, headers = {}, bucketId, fetch2) {
    this.url = url;
    this.headers = headers;
    this.bucketId = bucketId;
    this.fetch = resolveFetch2(fetch2);
  }
  /**
   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.
   *
   * @param method HTTP method.
   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.
   * @param fileBody The body of the file to be stored in the bucket.
   */
  uploadOrUpdate(method, path, fileBody, fileOptions) {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        let body;
        const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);
        let headers = Object.assign(Object.assign({}, this.headers), method === "POST" && { "x-upsert": String(options.upsert) });
        const metadata = options.metadata;
        if (typeof Blob !== "undefined" && fileBody instanceof Blob) {
          body = new FormData();
          body.append("cacheControl", options.cacheControl);
          if (metadata) {
            body.append("metadata", this.encodeMetadata(metadata));
          }
          body.append("", fileBody);
        } else if (typeof FormData !== "undefined" && fileBody instanceof FormData) {
          body = fileBody;
          body.append("cacheControl", options.cacheControl);
          if (metadata) {
            body.append("metadata", this.encodeMetadata(metadata));
          }
        } else {
          body = fileBody;
          headers["cache-control"] = `max-age=${options.cacheControl}`;
          headers["content-type"] = options.contentType;
          if (metadata) {
            headers["x-metadata"] = this.toBase64(this.encodeMetadata(metadata));
          }
        }
        if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {
          headers = Object.assign(Object.assign({}, headers), fileOptions.headers);
        }
        const cleanPath = this._removeEmptyFolders(path);
        const _path = this._getFinalPath(cleanPath);
        const res = yield this.fetch(`${this.url}/object/${_path}`, Object.assign({ method, body, headers }, (options === null || options === void 0 ? void 0 : options.duplex) ? { duplex: options.duplex } : {}));
        const data = yield res.json();
        if (res.ok) {
          return {
            data: { path: cleanPath, id: data.Id, fullPath: data.Key },
            error: null
          };
        } else {
          const error = data;
          return { data: null, error };
        }
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Uploads a file to an existing bucket.
   *
   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.
   * @param fileBody The body of the file to be stored in the bucket.
   */
  upload(path, fileBody, fileOptions) {
    return __awaiter4(this, void 0, void 0, function* () {
      return this.uploadOrUpdate("POST", path, fileBody, fileOptions);
    });
  }
  /**
   * Upload a file with a token generated from `createSignedUploadUrl`.
   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.
   * @param token The token generated from `createSignedUploadUrl`
   * @param fileBody The body of the file to be stored in the bucket.
   */
  uploadToSignedUrl(path, token, fileBody, fileOptions) {
    return __awaiter4(this, void 0, void 0, function* () {
      const cleanPath = this._removeEmptyFolders(path);
      const _path = this._getFinalPath(cleanPath);
      const url = new URL(this.url + `/object/upload/sign/${_path}`);
      url.searchParams.set("token", token);
      try {
        let body;
        const options = Object.assign({ upsert: DEFAULT_FILE_OPTIONS.upsert }, fileOptions);
        const headers = Object.assign(Object.assign({}, this.headers), { "x-upsert": String(options.upsert) });
        if (typeof Blob !== "undefined" && fileBody instanceof Blob) {
          body = new FormData();
          body.append("cacheControl", options.cacheControl);
          body.append("", fileBody);
        } else if (typeof FormData !== "undefined" && fileBody instanceof FormData) {
          body = fileBody;
          body.append("cacheControl", options.cacheControl);
        } else {
          body = fileBody;
          headers["cache-control"] = `max-age=${options.cacheControl}`;
          headers["content-type"] = options.contentType;
        }
        const res = yield this.fetch(url.toString(), {
          method: "PUT",
          body,
          headers
        });
        const data = yield res.json();
        if (res.ok) {
          return {
            data: { path: cleanPath, fullPath: data.Key },
            error: null
          };
        } else {
          const error = data;
          return { data: null, error };
        }
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Creates a signed upload URL.
   * Signed upload URLs can be used to upload files to the bucket without further authentication.
   * They are valid for 2 hours.
   * @param path The file path, including the current file name. For example `folder/image.png`.
   * @param options.upsert If set to true, allows the file to be overwritten if it already exists.
   */
  createSignedUploadUrl(path, options) {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        let _path = this._getFinalPath(path);
        const headers = Object.assign({}, this.headers);
        if (options === null || options === void 0 ? void 0 : options.upsert) {
          headers["x-upsert"] = "true";
        }
        const data = yield post(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, { headers });
        const url = new URL(this.url + data.url);
        const token = url.searchParams.get("token");
        if (!token) {
          throw new StorageError("No token returned by API");
        }
        return { data: { signedUrl: url.toString(), path, token }, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Replaces an existing file at the specified path with a new one.
   *
   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.
   * @param fileBody The body of the file to be stored in the bucket.
   */
  update(path, fileBody, fileOptions) {
    return __awaiter4(this, void 0, void 0, function* () {
      return this.uploadOrUpdate("PUT", path, fileBody, fileOptions);
    });
  }
  /**
   * Moves an existing file to a new path in the same bucket.
   *
   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.
   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.
   * @param options The destination options.
   */
  move(fromPath, toPath, options) {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const data = yield post(this.fetch, `${this.url}/object/move`, {
          bucketId: this.bucketId,
          sourceKey: fromPath,
          destinationKey: toPath,
          destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket
        }, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Copies an existing file to a new path in the same bucket.
   *
   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.
   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.
   * @param options The destination options.
   */
  copy(fromPath, toPath, options) {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const data = yield post(this.fetch, `${this.url}/object/copy`, {
          bucketId: this.bucketId,
          sourceKey: fromPath,
          destinationKey: toPath,
          destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket
        }, { headers: this.headers });
        return { data: { path: data.Key }, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.
   *
   * @param path The file path, including the current file name. For example `folder/image.png`.
   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.
   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.
   * @param options.transform Transform the asset before serving it to the client.
   */
  createSignedUrl(path, expiresIn, options) {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        let _path = this._getFinalPath(path);
        let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({ expiresIn }, (options === null || options === void 0 ? void 0 : options.transform) ? { transform: options.transform } : {}), { headers: this.headers });
        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? "" : options.download}` : "";
        const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);
        data = { signedUrl };
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.
   *
   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.
   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.
   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.
   */
  createSignedUrls(paths, expiresIn, options) {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, { expiresIn, paths }, { headers: this.headers });
        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? "" : options.download}` : "";
        return {
          data: data.map((datum) => Object.assign(Object.assign({}, datum), { signedUrl: datum.signedURL ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`) : null })),
          error: null
        };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.
   *
   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.
   * @param options.transform Transform the asset before serving it to the client.
   */
  download(path, options) {
    return __awaiter4(this, void 0, void 0, function* () {
      const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== "undefined";
      const renderPath = wantsTransformation ? "render/image/authenticated" : "object";
      const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});
      const queryString = transformationQuery ? `?${transformationQuery}` : "";
      try {
        const _path = this._getFinalPath(path);
        const res = yield get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {
          headers: this.headers,
          noResolveJson: true
        });
        const data = yield res.blob();
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Retrieves the details of an existing file.
   * @param path
   */
  info(path) {
    return __awaiter4(this, void 0, void 0, function* () {
      const _path = this._getFinalPath(path);
      try {
        const data = yield get(this.fetch, `${this.url}/object/info/${_path}`, {
          headers: this.headers
        });
        return { data: recursiveToCamel(data), error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Checks the existence of a file.
   * @param path
   */
  exists(path) {
    return __awaiter4(this, void 0, void 0, function* () {
      const _path = this._getFinalPath(path);
      try {
        yield head(this.fetch, `${this.url}/object/${_path}`, {
          headers: this.headers
        });
        return { data: true, error: null };
      } catch (error) {
        if (isStorageError(error) && error instanceof StorageUnknownError) {
          const originalError = error.originalError;
          if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {
            return { data: false, error };
          }
        }
        throw error;
      }
    });
  }
  /**
   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.
   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.
   *
   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.
   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.
   * @param options.transform Transform the asset before serving it to the client.
   */
  getPublicUrl(path, options) {
    const _path = this._getFinalPath(path);
    const _queryString = [];
    const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `download=${options.download === true ? "" : options.download}` : "";
    if (downloadQueryParam !== "") {
      _queryString.push(downloadQueryParam);
    }
    const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== "undefined";
    const renderPath = wantsTransformation ? "render/image" : "object";
    const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});
    if (transformationQuery !== "") {
      _queryString.push(transformationQuery);
    }
    let queryString = _queryString.join("&");
    if (queryString !== "") {
      queryString = `?${queryString}`;
    }
    return {
      data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) }
    };
  }
  /**
   * Deletes files within the same bucket
   *
   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].
   */
  remove(paths) {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Get file metadata
   * @param id the file id to retrieve metadata
   */
  // async getMetadata(
  //   id: string
  // ): Promise<
  //   | {
  //       data: Metadata
  //       error: null
  //     }
  //   | {
  //       data: null
  //       error: StorageError
  //     }
  // > {
  //   try {
  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })
  //     return { data, error: null }
  //   } catch (error) {
  //     if (isStorageError(error)) {
  //       return { data: null, error }
  //     }
  //     throw error
  //   }
  // }
  /**
   * Update file metadata
   * @param id the file id to update metadata
   * @param meta the new file metadata
   */
  // async updateMetadata(
  //   id: string,
  //   meta: Metadata
  // ): Promise<
  //   | {
  //       data: Metadata
  //       error: null
  //     }
  //   | {
  //       data: null
  //       error: StorageError
  //     }
  // > {
  //   try {
  //     const data = await post(
  //       this.fetch,
  //       `${this.url}/metadata/${id}`,
  //       { ...meta },
  //       { headers: this.headers }
  //     )
  //     return { data, error: null }
  //   } catch (error) {
  //     if (isStorageError(error)) {
  //       return { data: null, error }
  //     }
  //     throw error
  //   }
  // }
  /**
   * Lists all the files within a bucket.
   * @param path The folder path.
   */
  list(path, options, parameters) {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), { prefix: path || "" });
        const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  encodeMetadata(metadata) {
    return JSON.stringify(metadata);
  }
  toBase64(data) {
    if (typeof Buffer !== "undefined") {
      return Buffer.from(data).toString("base64");
    }
    return btoa(data);
  }
  _getFinalPath(path) {
    return `${this.bucketId}/${path}`;
  }
  _removeEmptyFolders(path) {
    return path.replace(/^\/|\/$/g, "").replace(/\/+/g, "/");
  }
  transformOptsToQueryString(transform) {
    const params = [];
    if (transform.width) {
      params.push(`width=${transform.width}`);
    }
    if (transform.height) {
      params.push(`height=${transform.height}`);
    }
    if (transform.resize) {
      params.push(`resize=${transform.resize}`);
    }
    if (transform.format) {
      params.push(`format=${transform.format}`);
    }
    if (transform.quality) {
      params.push(`quality=${transform.quality}`);
    }
    return params.join("&");
  }
};

// node_modules/@supabase/storage-js/dist/module/lib/version.js
var version2 = "2.7.1";

// node_modules/@supabase/storage-js/dist/module/lib/constants.js
var DEFAULT_HEADERS2 = { "X-Client-Info": `storage-js/${version2}` };

// node_modules/@supabase/storage-js/dist/module/packages/StorageBucketApi.js
var __awaiter5 = function(thisArg, _arguments, P6, generator) {
  function adopt(value) {
    return value instanceof P6 ? value : new P6(function(resolve) {
      resolve(value);
    });
  }
  return new (P6 || (P6 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e36) {
        reject(e36);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e36) {
        reject(e36);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var StorageBucketApi = class {
  constructor(url, headers = {}, fetch2) {
    this.url = url;
    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS2), headers);
    this.fetch = resolveFetch2(fetch2);
  }
  /**
   * Retrieves the details of all Storage buckets within an existing project.
   */
  listBuckets() {
    return __awaiter5(this, void 0, void 0, function* () {
      try {
        const data = yield get(this.fetch, `${this.url}/bucket`, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Retrieves the details of an existing Storage bucket.
   *
   * @param id The unique identifier of the bucket you would like to retrieve.
   */
  getBucket(id) {
    return __awaiter5(this, void 0, void 0, function* () {
      try {
        const data = yield get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Creates a new Storage bucket
   *
   * @param id A unique identifier for the bucket you are creating.
   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.
   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.
   * The global file size limit takes precedence over this value.
   * The default value is null, which doesn't set a per bucket file size limit.
   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.
   * The default value is null, which allows files with all mime types to be uploaded.
   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.
   * @returns newly created bucket id
   */
  createBucket(id, options = {
    public: false
  }) {
    return __awaiter5(this, void 0, void 0, function* () {
      try {
        const data = yield post(this.fetch, `${this.url}/bucket`, {
          id,
          name: id,
          public: options.public,
          file_size_limit: options.fileSizeLimit,
          allowed_mime_types: options.allowedMimeTypes
        }, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Updates a Storage bucket
   *
   * @param id A unique identifier for the bucket you are updating.
   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.
   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.
   * The global file size limit takes precedence over this value.
   * The default value is null, which doesn't set a per bucket file size limit.
   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.
   * The default value is null, which allows files with all mime types to be uploaded.
   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.
   */
  updateBucket(id, options) {
    return __awaiter5(this, void 0, void 0, function* () {
      try {
        const data = yield put(this.fetch, `${this.url}/bucket/${id}`, {
          id,
          name: id,
          public: options.public,
          file_size_limit: options.fileSizeLimit,
          allowed_mime_types: options.allowedMimeTypes
        }, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Removes all objects inside a single bucket.
   *
   * @param id The unique identifier of the bucket you would like to empty.
   */
  emptyBucket(id) {
    return __awaiter5(this, void 0, void 0, function* () {
      try {
        const data = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.
   * You must first `empty()` the bucket.
   *
   * @param id The unique identifier of the bucket you would like to delete.
   */
  deleteBucket(id) {
    return __awaiter5(this, void 0, void 0, function* () {
      try {
        const data = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
};

// node_modules/@supabase/storage-js/dist/module/StorageClient.js
var StorageClient = class extends StorageBucketApi {
  constructor(url, headers = {}, fetch2) {
    super(url, headers, fetch2);
  }
  /**
   * Perform file operation in a bucket.
   *
   * @param id The bucket id to operate on.
   */
  from(id) {
    return new StorageFileApi(this.url, this.headers, id, this.fetch);
  }
};

// node_modules/@supabase/supabase-js/dist/module/lib/version.js
var version3 = "2.46.1";

// node_modules/@supabase/supabase-js/dist/module/lib/constants.js
var JS_ENV = "";
if (typeof Deno !== "undefined") {
  JS_ENV = "deno";
} else if (typeof document !== "undefined") {
  JS_ENV = "web";
} else if (typeof navigator !== "undefined" && navigator.product === "ReactNative") {
  JS_ENV = "react-native";
} else {
  JS_ENV = "node";
}
var DEFAULT_HEADERS3 = { "X-Client-Info": `supabase-js-${JS_ENV}/${version3}` };
var DEFAULT_GLOBAL_OPTIONS = {
  headers: DEFAULT_HEADERS3
};
var DEFAULT_DB_OPTIONS = {
  schema: "public"
};
var DEFAULT_AUTH_OPTIONS = {
  autoRefreshToken: true,
  persistSession: true,
  detectSessionInUrl: true,
  flowType: "implicit"
};
var DEFAULT_REALTIME_OPTIONS = {};

// node_modules/@supabase/supabase-js/dist/module/lib/fetch.js
init_browser();
var __awaiter6 = function(thisArg, _arguments, P6, generator) {
  function adopt(value) {
    return value instanceof P6 ? value : new P6(function(resolve) {
      resolve(value);
    });
  }
  return new (P6 || (P6 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e36) {
        reject(e36);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e36) {
        reject(e36);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var resolveFetch3 = (customFetch) => {
  let _fetch;
  if (customFetch) {
    _fetch = customFetch;
  } else if (typeof fetch === "undefined") {
    _fetch = browser_default;
  } else {
    _fetch = fetch;
  }
  return (...args) => _fetch(...args);
};
var resolveHeadersConstructor = () => {
  if (typeof Headers === "undefined") {
    return Headers2;
  }
  return Headers;
};
var fetchWithAuth = (supabaseKey, getAccessToken, customFetch) => {
  const fetch2 = resolveFetch3(customFetch);
  const HeadersConstructor = resolveHeadersConstructor();
  return (input, init) => __awaiter6(void 0, void 0, void 0, function* () {
    var _a;
    const accessToken = (_a = yield getAccessToken()) !== null && _a !== void 0 ? _a : supabaseKey;
    let headers = new HeadersConstructor(init === null || init === void 0 ? void 0 : init.headers);
    if (!headers.has("apikey")) {
      headers.set("apikey", supabaseKey);
    }
    if (!headers.has("Authorization")) {
      headers.set("Authorization", `Bearer ${accessToken}`);
    }
    return fetch2(input, Object.assign(Object.assign({}, init), { headers }));
  });
};

// node_modules/@supabase/supabase-js/dist/module/lib/helpers.js
var __awaiter7 = function(thisArg, _arguments, P6, generator) {
  function adopt(value) {
    return value instanceof P6 ? value : new P6(function(resolve) {
      resolve(value);
    });
  }
  return new (P6 || (P6 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e36) {
        reject(e36);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e36) {
        reject(e36);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
function stripTrailingSlash(url) {
  return url.replace(/\/$/, "");
}
function applySettingDefaults(options, defaults) {
  const { db: dbOptions, auth: authOptions, realtime: realtimeOptions, global: globalOptions } = options;
  const { db: DEFAULT_DB_OPTIONS2, auth: DEFAULT_AUTH_OPTIONS2, realtime: DEFAULT_REALTIME_OPTIONS2, global: DEFAULT_GLOBAL_OPTIONS2 } = defaults;
  const result = {
    db: Object.assign(Object.assign({}, DEFAULT_DB_OPTIONS2), dbOptions),
    auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS2), authOptions),
    realtime: Object.assign(Object.assign({}, DEFAULT_REALTIME_OPTIONS2), realtimeOptions),
    global: Object.assign(Object.assign({}, DEFAULT_GLOBAL_OPTIONS2), globalOptions),
    accessToken: () => __awaiter7(this, void 0, void 0, function* () {
      return "";
    })
  };
  if (options.accessToken) {
    result.accessToken = options.accessToken;
  } else {
    delete result.accessToken;
  }
  return result;
}

// node_modules/@supabase/auth-js/dist/module/lib/version.js
var version4 = "2.65.1";

// node_modules/@supabase/auth-js/dist/module/lib/constants.js
var GOTRUE_URL = "http://localhost:9999";
var STORAGE_KEY = "supabase.auth.token";
var DEFAULT_HEADERS4 = { "X-Client-Info": `gotrue-js/${version4}` };
var EXPIRY_MARGIN = 10;
var API_VERSION_HEADER_NAME = "X-Supabase-Api-Version";
var API_VERSIONS = {
  "2024-01-01": {
    timestamp: Date.parse("2024-01-01T00:00:00.0Z"),
    name: "2024-01-01"
  }
};

// node_modules/@supabase/auth-js/dist/module/lib/helpers.js
function expiresAt(expiresIn) {
  const timeNow = Math.round(Date.now() / 1e3);
  return timeNow + expiresIn;
}
function uuid() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c11) {
    const r14 = Math.random() * 16 | 0, v3 = c11 == "x" ? r14 : r14 & 3 | 8;
    return v3.toString(16);
  });
}
var isBrowser = () => typeof document !== "undefined";
var localStorageWriteTests = {
  tested: false,
  writable: false
};
var supportsLocalStorage = () => {
  if (!isBrowser()) {
    return false;
  }
  try {
    if (typeof globalThis.localStorage !== "object") {
      return false;
    }
  } catch (e36) {
    return false;
  }
  if (localStorageWriteTests.tested) {
    return localStorageWriteTests.writable;
  }
  const randomKey = `lswt-${Math.random()}${Math.random()}`;
  try {
    globalThis.localStorage.setItem(randomKey, randomKey);
    globalThis.localStorage.removeItem(randomKey);
    localStorageWriteTests.tested = true;
    localStorageWriteTests.writable = true;
  } catch (e36) {
    localStorageWriteTests.tested = true;
    localStorageWriteTests.writable = false;
  }
  return localStorageWriteTests.writable;
};
function parseParametersFromURL(href) {
  const result = {};
  const url = new URL(href);
  if (url.hash && url.hash[0] === "#") {
    try {
      const hashSearchParams = new URLSearchParams(url.hash.substring(1));
      hashSearchParams.forEach((value, key) => {
        result[key] = value;
      });
    } catch (e36) {
    }
  }
  url.searchParams.forEach((value, key) => {
    result[key] = value;
  });
  return result;
}
var resolveFetch4 = (customFetch) => {
  let _fetch;
  if (customFetch) {
    _fetch = customFetch;
  } else if (typeof fetch === "undefined") {
    _fetch = (...args) => import("./browser-EMB7CRMN.js").then(({ default: fetch2 }) => fetch2(...args));
  } else {
    _fetch = fetch;
  }
  return (...args) => _fetch(...args);
};
var looksLikeFetchResponse = (maybeResponse) => {
  return typeof maybeResponse === "object" && maybeResponse !== null && "status" in maybeResponse && "ok" in maybeResponse && "json" in maybeResponse && typeof maybeResponse.json === "function";
};
var setItemAsync = async (storage, key, data) => {
  await storage.setItem(key, JSON.stringify(data));
};
var getItemAsync = async (storage, key) => {
  const value = await storage.getItem(key);
  if (!value) {
    return null;
  }
  try {
    return JSON.parse(value);
  } catch (_a) {
    return value;
  }
};
var removeItemAsync = async (storage, key) => {
  await storage.removeItem(key);
};
function decodeBase64URL(value) {
  const key = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  let base64 = "";
  let chr1, chr2, chr3;
  let enc1, enc2, enc3, enc4;
  let i11 = 0;
  value = value.replace("-", "+").replace("_", "/");
  while (i11 < value.length) {
    enc1 = key.indexOf(value.charAt(i11++));
    enc2 = key.indexOf(value.charAt(i11++));
    enc3 = key.indexOf(value.charAt(i11++));
    enc4 = key.indexOf(value.charAt(i11++));
    chr1 = enc1 << 2 | enc2 >> 4;
    chr2 = (enc2 & 15) << 4 | enc3 >> 2;
    chr3 = (enc3 & 3) << 6 | enc4;
    base64 = base64 + String.fromCharCode(chr1);
    if (enc3 != 64 && chr2 != 0) {
      base64 = base64 + String.fromCharCode(chr2);
    }
    if (enc4 != 64 && chr3 != 0) {
      base64 = base64 + String.fromCharCode(chr3);
    }
  }
  return base64;
}
var Deferred = class _Deferred {
  constructor() {
    ;
    this.promise = new _Deferred.promiseConstructor((res, rej) => {
      ;
      this.resolve = res;
      this.reject = rej;
    });
  }
};
Deferred.promiseConstructor = Promise;
function decodeJWTPayload(token) {
  const base64UrlRegex = /^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}=?$|[a-z0-9_-]{2}(==)?$)$/i;
  const parts = token.split(".");
  if (parts.length !== 3) {
    throw new Error("JWT is not valid: not a JWT structure");
  }
  if (!base64UrlRegex.test(parts[1])) {
    throw new Error("JWT is not valid: payload is not in base64url format");
  }
  const base64Url = parts[1];
  return JSON.parse(decodeBase64URL(base64Url));
}
async function sleep(time3) {
  return await new Promise((accept) => {
    setTimeout(() => accept(null), time3);
  });
}
function retryable(fn, isRetryable) {
  const promise = new Promise((accept, reject) => {
    ;
    (async () => {
      for (let attempt = 0; attempt < Infinity; attempt++) {
        try {
          const result = await fn(attempt);
          if (!isRetryable(attempt, null, result)) {
            accept(result);
            return;
          }
        } catch (e36) {
          if (!isRetryable(attempt, e36)) {
            reject(e36);
            return;
          }
        }
      }
    })();
  });
  return promise;
}
function dec2hex(dec) {
  return ("0" + dec.toString(16)).substr(-2);
}
function generatePKCEVerifier() {
  const verifierLength = 56;
  const array = new Uint32Array(verifierLength);
  if (typeof crypto === "undefined") {
    const charSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~";
    const charSetLen = charSet.length;
    let verifier = "";
    for (let i11 = 0; i11 < verifierLength; i11++) {
      verifier += charSet.charAt(Math.floor(Math.random() * charSetLen));
    }
    return verifier;
  }
  crypto.getRandomValues(array);
  return Array.from(array, dec2hex).join("");
}
async function sha256(randomString) {
  const encoder = new TextEncoder();
  const encodedData = encoder.encode(randomString);
  const hash = await crypto.subtle.digest("SHA-256", encodedData);
  const bytes = new Uint8Array(hash);
  return Array.from(bytes).map((c11) => String.fromCharCode(c11)).join("");
}
function base64urlencode(str2) {
  return btoa(str2).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
}
async function generatePKCEChallenge(verifier) {
  const hasCryptoSupport = typeof crypto !== "undefined" && typeof crypto.subtle !== "undefined" && typeof TextEncoder !== "undefined";
  if (!hasCryptoSupport) {
    console.warn("WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256.");
    return verifier;
  }
  const hashed = await sha256(verifier);
  return base64urlencode(hashed);
}
async function getCodeChallengeAndMethod(storage, storageKey, isPasswordRecovery = false) {
  const codeVerifier = generatePKCEVerifier();
  let storedCodeVerifier = codeVerifier;
  if (isPasswordRecovery) {
    storedCodeVerifier += "/PASSWORD_RECOVERY";
  }
  await setItemAsync(storage, `${storageKey}-code-verifier`, storedCodeVerifier);
  const codeChallenge = await generatePKCEChallenge(codeVerifier);
  const codeChallengeMethod = codeVerifier === codeChallenge ? "plain" : "s256";
  return [codeChallenge, codeChallengeMethod];
}
var API_VERSION_REGEX = /^2[0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])$/i;
function parseResponseAPIVersion(response) {
  const apiVersion = response.headers.get(API_VERSION_HEADER_NAME);
  if (!apiVersion) {
    return null;
  }
  if (!apiVersion.match(API_VERSION_REGEX)) {
    return null;
  }
  try {
    const date = /* @__PURE__ */ new Date(`${apiVersion}T00:00:00.0Z`);
    return date;
  } catch (e36) {
    return null;
  }
}

// node_modules/@supabase/auth-js/dist/module/lib/errors.js
var AuthError = class extends Error {
  constructor(message, status, code) {
    super(message);
    this.__isAuthError = true;
    this.name = "AuthError";
    this.status = status;
    this.code = code;
  }
};
function isAuthError(error) {
  return typeof error === "object" && error !== null && "__isAuthError" in error;
}
var AuthApiError = class extends AuthError {
  constructor(message, status, code) {
    super(message, status, code);
    this.name = "AuthApiError";
    this.status = status;
    this.code = code;
  }
};
function isAuthApiError(error) {
  return isAuthError(error) && error.name === "AuthApiError";
}
var AuthUnknownError = class extends AuthError {
  constructor(message, originalError) {
    super(message);
    this.name = "AuthUnknownError";
    this.originalError = originalError;
  }
};
var CustomAuthError = class extends AuthError {
  constructor(message, name, status, code) {
    super(message, status, code);
    this.name = name;
    this.status = status;
  }
};
var AuthSessionMissingError = class extends CustomAuthError {
  constructor() {
    super("Auth session missing!", "AuthSessionMissingError", 400, void 0);
  }
};
function isAuthSessionMissingError(error) {
  return isAuthError(error) && error.name === "AuthSessionMissingError";
}
var AuthInvalidTokenResponseError = class extends CustomAuthError {
  constructor() {
    super("Auth session or user missing", "AuthInvalidTokenResponseError", 500, void 0);
  }
};
var AuthInvalidCredentialsError = class extends CustomAuthError {
  constructor(message) {
    super(message, "AuthInvalidCredentialsError", 400, void 0);
  }
};
var AuthImplicitGrantRedirectError = class extends CustomAuthError {
  constructor(message, details = null) {
    super(message, "AuthImplicitGrantRedirectError", 500, void 0);
    this.details = null;
    this.details = details;
  }
  toJSON() {
    return {
      name: this.name,
      message: this.message,
      status: this.status,
      details: this.details
    };
  }
};
var AuthPKCEGrantCodeExchangeError = class extends CustomAuthError {
  constructor(message, details = null) {
    super(message, "AuthPKCEGrantCodeExchangeError", 500, void 0);
    this.details = null;
    this.details = details;
  }
  toJSON() {
    return {
      name: this.name,
      message: this.message,
      status: this.status,
      details: this.details
    };
  }
};
var AuthRetryableFetchError = class extends CustomAuthError {
  constructor(message, status) {
    super(message, "AuthRetryableFetchError", status, void 0);
  }
};
function isAuthRetryableFetchError(error) {
  return isAuthError(error) && error.name === "AuthRetryableFetchError";
}
var AuthWeakPasswordError = class extends CustomAuthError {
  constructor(message, status, reasons) {
    super(message, "AuthWeakPasswordError", status, "weak_password");
    this.reasons = reasons;
  }
};

// node_modules/@supabase/auth-js/dist/module/lib/fetch.js
var __rest = function(s15, e36) {
  var t23 = {};
  for (var p5 in s15) if (Object.prototype.hasOwnProperty.call(s15, p5) && e36.indexOf(p5) < 0)
    t23[p5] = s15[p5];
  if (s15 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i11 = 0, p5 = Object.getOwnPropertySymbols(s15); i11 < p5.length; i11++) {
      if (e36.indexOf(p5[i11]) < 0 && Object.prototype.propertyIsEnumerable.call(s15, p5[i11]))
        t23[p5[i11]] = s15[p5[i11]];
    }
  return t23;
};
var _getErrorMessage2 = (err) => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);
var NETWORK_ERROR_CODES = [502, 503, 504];
async function handleError2(error) {
  var _a;
  if (!looksLikeFetchResponse(error)) {
    throw new AuthRetryableFetchError(_getErrorMessage2(error), 0);
  }
  if (NETWORK_ERROR_CODES.includes(error.status)) {
    throw new AuthRetryableFetchError(_getErrorMessage2(error), error.status);
  }
  let data;
  try {
    data = await error.json();
  } catch (e36) {
    throw new AuthUnknownError(_getErrorMessage2(e36), e36);
  }
  let errorCode = void 0;
  const responseAPIVersion = parseResponseAPIVersion(error);
  if (responseAPIVersion && responseAPIVersion.getTime() >= API_VERSIONS["2024-01-01"].timestamp && typeof data === "object" && data && typeof data.code === "string") {
    errorCode = data.code;
  } else if (typeof data === "object" && data && typeof data.error_code === "string") {
    errorCode = data.error_code;
  }
  if (!errorCode) {
    if (typeof data === "object" && data && typeof data.weak_password === "object" && data.weak_password && Array.isArray(data.weak_password.reasons) && data.weak_password.reasons.length && data.weak_password.reasons.reduce((a13, i11) => a13 && typeof i11 === "string", true)) {
      throw new AuthWeakPasswordError(_getErrorMessage2(data), error.status, data.weak_password.reasons);
    }
  } else if (errorCode === "weak_password") {
    throw new AuthWeakPasswordError(_getErrorMessage2(data), error.status, ((_a = data.weak_password) === null || _a === void 0 ? void 0 : _a.reasons) || []);
  } else if (errorCode === "session_not_found") {
    throw new AuthSessionMissingError();
  }
  throw new AuthApiError(_getErrorMessage2(data), error.status || 500, errorCode);
}
var _getRequestParams2 = (method, options, parameters, body) => {
  const params = { method, headers: (options === null || options === void 0 ? void 0 : options.headers) || {} };
  if (method === "GET") {
    return params;
  }
  params.headers = Object.assign({ "Content-Type": "application/json;charset=UTF-8" }, options === null || options === void 0 ? void 0 : options.headers);
  params.body = JSON.stringify(body);
  return Object.assign(Object.assign({}, params), parameters);
};
async function _request(fetcher, method, url, options) {
  var _a;
  const headers = Object.assign({}, options === null || options === void 0 ? void 0 : options.headers);
  if (!headers[API_VERSION_HEADER_NAME]) {
    headers[API_VERSION_HEADER_NAME] = API_VERSIONS["2024-01-01"].name;
  }
  if (options === null || options === void 0 ? void 0 : options.jwt) {
    headers["Authorization"] = `Bearer ${options.jwt}`;
  }
  const qs = (_a = options === null || options === void 0 ? void 0 : options.query) !== null && _a !== void 0 ? _a : {};
  if (options === null || options === void 0 ? void 0 : options.redirectTo) {
    qs["redirect_to"] = options.redirectTo;
  }
  const queryString = Object.keys(qs).length ? "?" + new URLSearchParams(qs).toString() : "";
  const data = await _handleRequest2(fetcher, method, url + queryString, {
    headers,
    noResolveJson: options === null || options === void 0 ? void 0 : options.noResolveJson
  }, {}, options === null || options === void 0 ? void 0 : options.body);
  return (options === null || options === void 0 ? void 0 : options.xform) ? options === null || options === void 0 ? void 0 : options.xform(data) : { data: Object.assign({}, data), error: null };
}
async function _handleRequest2(fetcher, method, url, options, parameters, body) {
  const requestParams = _getRequestParams2(method, options, parameters, body);
  let result;
  try {
    result = await fetcher(url, Object.assign({}, requestParams));
  } catch (e36) {
    console.error(e36);
    throw new AuthRetryableFetchError(_getErrorMessage2(e36), 0);
  }
  if (!result.ok) {
    await handleError2(result);
  }
  if (options === null || options === void 0 ? void 0 : options.noResolveJson) {
    return result;
  }
  try {
    return await result.json();
  } catch (e36) {
    await handleError2(e36);
  }
}
function _sessionResponse(data) {
  var _a;
  let session = null;
  if (hasSession(data)) {
    session = Object.assign({}, data);
    if (!data.expires_at) {
      session.expires_at = expiresAt(data.expires_in);
    }
  }
  const user = (_a = data.user) !== null && _a !== void 0 ? _a : data;
  return { data: { session, user }, error: null };
}
function _sessionResponsePassword(data) {
  const response = _sessionResponse(data);
  if (!response.error && data.weak_password && typeof data.weak_password === "object" && Array.isArray(data.weak_password.reasons) && data.weak_password.reasons.length && data.weak_password.message && typeof data.weak_password.message === "string" && data.weak_password.reasons.reduce((a13, i11) => a13 && typeof i11 === "string", true)) {
    response.data.weak_password = data.weak_password;
  }
  return response;
}
function _userResponse(data) {
  var _a;
  const user = (_a = data.user) !== null && _a !== void 0 ? _a : data;
  return { data: { user }, error: null };
}
function _ssoResponse(data) {
  return { data, error: null };
}
function _generateLinkResponse(data) {
  const { action_link, email_otp, hashed_token, redirect_to, verification_type } = data, rest = __rest(data, ["action_link", "email_otp", "hashed_token", "redirect_to", "verification_type"]);
  const properties = {
    action_link,
    email_otp,
    hashed_token,
    redirect_to,
    verification_type
  };
  const user = Object.assign({}, rest);
  return {
    data: {
      properties,
      user
    },
    error: null
  };
}
function _noResolveJsonResponse(data) {
  return data;
}
function hasSession(data) {
  return data.access_token && data.refresh_token && data.expires_in;
}

// node_modules/@supabase/auth-js/dist/module/GoTrueAdminApi.js
var __rest2 = function(s15, e36) {
  var t23 = {};
  for (var p5 in s15) if (Object.prototype.hasOwnProperty.call(s15, p5) && e36.indexOf(p5) < 0)
    t23[p5] = s15[p5];
  if (s15 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i11 = 0, p5 = Object.getOwnPropertySymbols(s15); i11 < p5.length; i11++) {
      if (e36.indexOf(p5[i11]) < 0 && Object.prototype.propertyIsEnumerable.call(s15, p5[i11]))
        t23[p5[i11]] = s15[p5[i11]];
    }
  return t23;
};
var GoTrueAdminApi = class {
  constructor({ url = "", headers = {}, fetch: fetch2 }) {
    this.url = url;
    this.headers = headers;
    this.fetch = resolveFetch4(fetch2);
    this.mfa = {
      listFactors: this._listFactors.bind(this),
      deleteFactor: this._deleteFactor.bind(this)
    };
  }
  /**
   * Removes a logged-in session.
   * @param jwt A valid, logged-in JWT.
   * @param scope The logout sope.
   */
  async signOut(jwt, scope = "global") {
    try {
      await _request(this.fetch, "POST", `${this.url}/logout?scope=${scope}`, {
        headers: this.headers,
        jwt,
        noResolveJson: true
      });
      return { data: null, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  /**
   * Sends an invite link to an email address.
   * @param email The email address of the user.
   * @param options Additional options to be included when inviting.
   */
  async inviteUserByEmail(email, options = {}) {
    try {
      return await _request(this.fetch, "POST", `${this.url}/invite`, {
        body: { email, data: options.data },
        headers: this.headers,
        redirectTo: options.redirectTo,
        xform: _userResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  /**
   * Generates email links and OTPs to be sent via a custom email provider.
   * @param email The user's email.
   * @param options.password User password. For signup only.
   * @param options.data Optional user metadata. For signup only.
   * @param options.redirectTo The redirect url which should be appended to the generated link
   */
  async generateLink(params) {
    try {
      const { options } = params, rest = __rest2(params, ["options"]);
      const body = Object.assign(Object.assign({}, rest), options);
      if ("newEmail" in rest) {
        body.new_email = rest === null || rest === void 0 ? void 0 : rest.newEmail;
        delete body["newEmail"];
      }
      return await _request(this.fetch, "POST", `${this.url}/admin/generate_link`, {
        body,
        headers: this.headers,
        xform: _generateLinkResponse,
        redirectTo: options === null || options === void 0 ? void 0 : options.redirectTo
      });
    } catch (error) {
      if (isAuthError(error)) {
        return {
          data: {
            properties: null,
            user: null
          },
          error
        };
      }
      throw error;
    }
  }
  // User Admin API
  /**
   * Creates a new user.
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   */
  async createUser(attributes) {
    try {
      return await _request(this.fetch, "POST", `${this.url}/admin/users`, {
        body: attributes,
        headers: this.headers,
        xform: _userResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  /**
   * Get a list of users.
   *
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.
   */
  async listUsers(params) {
    var _a, _b, _c, _d, _e2, _f, _g;
    try {
      const pagination = { nextPage: null, lastPage: 0, total: 0 };
      const response = await _request(this.fetch, "GET", `${this.url}/admin/users`, {
        headers: this.headers,
        noResolveJson: true,
        query: {
          page: (_b = (_a = params === null || params === void 0 ? void 0 : params.page) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : "",
          per_page: (_d = (_c = params === null || params === void 0 ? void 0 : params.perPage) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ""
        },
        xform: _noResolveJsonResponse
      });
      if (response.error)
        throw response.error;
      const users = await response.json();
      const total = (_e2 = response.headers.get("x-total-count")) !== null && _e2 !== void 0 ? _e2 : 0;
      const links = (_g = (_f = response.headers.get("link")) === null || _f === void 0 ? void 0 : _f.split(",")) !== null && _g !== void 0 ? _g : [];
      if (links.length > 0) {
        links.forEach((link) => {
          const page = parseInt(link.split(";")[0].split("=")[1].substring(0, 1));
          const rel = JSON.parse(link.split(";")[1].split("=")[1]);
          pagination[`${rel}Page`] = page;
        });
        pagination.total = parseInt(total);
      }
      return { data: Object.assign(Object.assign({}, users), pagination), error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { users: [] }, error };
      }
      throw error;
    }
  }
  /**
   * Get user by id.
   *
   * @param uid The user's unique identifier
   *
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   */
  async getUserById(uid) {
    try {
      return await _request(this.fetch, "GET", `${this.url}/admin/users/${uid}`, {
        headers: this.headers,
        xform: _userResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  /**
   * Updates the user data.
   *
   * @param attributes The data you want to update.
   *
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   */
  async updateUserById(uid, attributes) {
    try {
      return await _request(this.fetch, "PUT", `${this.url}/admin/users/${uid}`, {
        body: attributes,
        headers: this.headers,
        xform: _userResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  /**
   * Delete a user. Requires a `service_role` key.
   *
   * @param id The user id you want to remove.
   * @param shouldSoftDelete If true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema.
   * Defaults to false for backward compatibility.
   *
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   */
  async deleteUser(id, shouldSoftDelete = false) {
    try {
      return await _request(this.fetch, "DELETE", `${this.url}/admin/users/${id}`, {
        headers: this.headers,
        body: {
          should_soft_delete: shouldSoftDelete
        },
        xform: _userResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  async _listFactors(params) {
    try {
      const { data, error } = await _request(this.fetch, "GET", `${this.url}/admin/users/${params.userId}/factors`, {
        headers: this.headers,
        xform: (factors) => {
          return { data: { factors }, error: null };
        }
      });
      return { data, error };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  async _deleteFactor(params) {
    try {
      const data = await _request(this.fetch, "DELETE", `${this.url}/admin/users/${params.userId}/factors/${params.id}`, {
        headers: this.headers
      });
      return { data, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
};

// node_modules/@supabase/auth-js/dist/module/lib/local-storage.js
var localStorageAdapter = {
  getItem: (key) => {
    if (!supportsLocalStorage()) {
      return null;
    }
    return globalThis.localStorage.getItem(key);
  },
  setItem: (key, value) => {
    if (!supportsLocalStorage()) {
      return;
    }
    globalThis.localStorage.setItem(key, value);
  },
  removeItem: (key) => {
    if (!supportsLocalStorage()) {
      return;
    }
    globalThis.localStorage.removeItem(key);
  }
};
function memoryLocalStorageAdapter(store = {}) {
  return {
    getItem: (key) => {
      return store[key] || null;
    },
    setItem: (key, value) => {
      store[key] = value;
    },
    removeItem: (key) => {
      delete store[key];
    }
  };
}

// node_modules/@supabase/auth-js/dist/module/lib/polyfills.js
function polyfillGlobalThis() {
  if (typeof globalThis === "object")
    return;
  try {
    Object.defineProperty(Object.prototype, "__magic__", {
      get: function() {
        return this;
      },
      configurable: true
    });
    __magic__.globalThis = __magic__;
    delete Object.prototype.__magic__;
  } catch (e36) {
    if (typeof self !== "undefined") {
      self.globalThis = self;
    }
  }
}

// node_modules/@supabase/auth-js/dist/module/lib/locks.js
var internals = {
  /**
   * @experimental
   */
  debug: !!(globalThis && supportsLocalStorage() && globalThis.localStorage && globalThis.localStorage.getItem("supabase.gotrue-js.locks.debug") === "true")
};
var LockAcquireTimeoutError = class extends Error {
  constructor(message) {
    super(message);
    this.isAcquireTimeout = true;
  }
};
var NavigatorLockAcquireTimeoutError = class extends LockAcquireTimeoutError {
};
async function navigatorLock(name, acquireTimeout, fn) {
  if (internals.debug) {
    console.log("@supabase/gotrue-js: navigatorLock: acquire lock", name, acquireTimeout);
  }
  const abortController = new globalThis.AbortController();
  if (acquireTimeout > 0) {
    setTimeout(() => {
      abortController.abort();
      if (internals.debug) {
        console.log("@supabase/gotrue-js: navigatorLock acquire timed out", name);
      }
    }, acquireTimeout);
  }
  return await globalThis.navigator.locks.request(name, acquireTimeout === 0 ? {
    mode: "exclusive",
    ifAvailable: true
  } : {
    mode: "exclusive",
    signal: abortController.signal
  }, async (lock) => {
    if (lock) {
      if (internals.debug) {
        console.log("@supabase/gotrue-js: navigatorLock: acquired", name, lock.name);
      }
      try {
        return await fn();
      } finally {
        if (internals.debug) {
          console.log("@supabase/gotrue-js: navigatorLock: released", name, lock.name);
        }
      }
    } else {
      if (acquireTimeout === 0) {
        if (internals.debug) {
          console.log("@supabase/gotrue-js: navigatorLock: not immediately available", name);
        }
        throw new NavigatorLockAcquireTimeoutError(`Acquiring an exclusive Navigator LockManager lock "${name}" immediately failed`);
      } else {
        if (internals.debug) {
          try {
            const result = await globalThis.navigator.locks.query();
            console.log("@supabase/gotrue-js: Navigator LockManager state", JSON.stringify(result, null, "  "));
          } catch (e36) {
            console.warn("@supabase/gotrue-js: Error when querying Navigator LockManager state", e36);
          }
        }
        console.warn("@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request");
        return await fn();
      }
    }
  });
}

// node_modules/@supabase/auth-js/dist/module/GoTrueClient.js
polyfillGlobalThis();
var DEFAULT_OPTIONS = {
  url: GOTRUE_URL,
  storageKey: STORAGE_KEY,
  autoRefreshToken: true,
  persistSession: true,
  detectSessionInUrl: true,
  headers: DEFAULT_HEADERS4,
  flowType: "implicit",
  debug: false,
  hasCustomAuthorizationHeader: false
};
var AUTO_REFRESH_TICK_DURATION = 30 * 1e3;
var AUTO_REFRESH_TICK_THRESHOLD = 3;
async function lockNoOp(name, acquireTimeout, fn) {
  return await fn();
}
var GoTrueClient = class _GoTrueClient {
  /**
   * Create a new client for use in the browser.
   */
  constructor(options) {
    var _a, _b;
    this.memoryStorage = null;
    this.stateChangeEmitters = /* @__PURE__ */ new Map();
    this.autoRefreshTicker = null;
    this.visibilityChangedCallback = null;
    this.refreshingDeferred = null;
    this.initializePromise = null;
    this.detectSessionInUrl = true;
    this.hasCustomAuthorizationHeader = false;
    this.suppressGetSessionWarning = false;
    this.lockAcquired = false;
    this.pendingInLock = [];
    this.broadcastChannel = null;
    this.logger = console.log;
    this.instanceID = _GoTrueClient.nextInstanceID;
    _GoTrueClient.nextInstanceID += 1;
    if (this.instanceID > 0 && isBrowser()) {
      console.warn("Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.");
    }
    const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);
    this.logDebugMessages = !!settings.debug;
    if (typeof settings.debug === "function") {
      this.logger = settings.debug;
    }
    this.persistSession = settings.persistSession;
    this.storageKey = settings.storageKey;
    this.autoRefreshToken = settings.autoRefreshToken;
    this.admin = new GoTrueAdminApi({
      url: settings.url,
      headers: settings.headers,
      fetch: settings.fetch
    });
    this.url = settings.url;
    this.headers = settings.headers;
    this.fetch = resolveFetch4(settings.fetch);
    this.lock = settings.lock || lockNoOp;
    this.detectSessionInUrl = settings.detectSessionInUrl;
    this.flowType = settings.flowType;
    this.hasCustomAuthorizationHeader = settings.hasCustomAuthorizationHeader;
    if (settings.lock) {
      this.lock = settings.lock;
    } else if (isBrowser() && ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.navigator) === null || _a === void 0 ? void 0 : _a.locks)) {
      this.lock = navigatorLock;
    } else {
      this.lock = lockNoOp;
    }
    this.mfa = {
      verify: this._verify.bind(this),
      enroll: this._enroll.bind(this),
      unenroll: this._unenroll.bind(this),
      challenge: this._challenge.bind(this),
      listFactors: this._listFactors.bind(this),
      challengeAndVerify: this._challengeAndVerify.bind(this),
      getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this)
    };
    if (this.persistSession) {
      if (settings.storage) {
        this.storage = settings.storage;
      } else {
        if (supportsLocalStorage()) {
          this.storage = localStorageAdapter;
        } else {
          this.memoryStorage = {};
          this.storage = memoryLocalStorageAdapter(this.memoryStorage);
        }
      }
    } else {
      this.memoryStorage = {};
      this.storage = memoryLocalStorageAdapter(this.memoryStorage);
    }
    if (isBrowser() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {
      try {
        this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey);
      } catch (e36) {
        console.error("Failed to create a new BroadcastChannel, multi-tab state changes will not be available", e36);
      }
      (_b = this.broadcastChannel) === null || _b === void 0 ? void 0 : _b.addEventListener("message", async (event) => {
        this._debug("received broadcast notification from other tab or client", event);
        await this._notifyAllSubscribers(event.data.event, event.data.session, false);
      });
    }
    this.initialize();
  }
  _debug(...args) {
    if (this.logDebugMessages) {
      this.logger(`GoTrueClient@${this.instanceID} (${version4}) ${(/* @__PURE__ */ new Date()).toISOString()}`, ...args);
    }
    return this;
  }
  /**
   * Initializes the client session either from the url or from storage.
   * This method is automatically called when instantiating the client, but should also be called
   * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).
   */
  async initialize() {
    if (this.initializePromise) {
      return await this.initializePromise;
    }
    this.initializePromise = (async () => {
      return await this._acquireLock(-1, async () => {
        return await this._initialize();
      });
    })();
    return await this.initializePromise;
  }
  /**
   * IMPORTANT:
   * 1. Never throw in this method, as it is called from the constructor
   * 2. Never return a session from this method as it would be cached over
   *    the whole lifetime of the client
   */
  async _initialize() {
    try {
      const isPKCEFlow = isBrowser() ? await this._isPKCEFlow() : false;
      this._debug("#_initialize()", "begin", "is PKCE flow", isPKCEFlow);
      if (isPKCEFlow || this.detectSessionInUrl && this._isImplicitGrantFlow()) {
        const { data, error } = await this._getSessionFromURL(isPKCEFlow);
        if (error) {
          this._debug("#_initialize()", "error detecting session from URL", error);
          if ((error === null || error === void 0 ? void 0 : error.code) === "identity_already_exists") {
            return { error };
          }
          await this._removeSession();
          return { error };
        }
        const { session, redirectType } = data;
        this._debug("#_initialize()", "detected session in URL", session, "redirect type", redirectType);
        await this._saveSession(session);
        setTimeout(async () => {
          if (redirectType === "recovery") {
            await this._notifyAllSubscribers("PASSWORD_RECOVERY", session);
          } else {
            await this._notifyAllSubscribers("SIGNED_IN", session);
          }
        }, 0);
        return { error: null };
      }
      await this._recoverAndRefresh();
      return { error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { error };
      }
      return {
        error: new AuthUnknownError("Unexpected error during initialization", error)
      };
    } finally {
      await this._handleVisibilityChange();
      this._debug("#_initialize()", "end");
    }
  }
  /**
   * Creates a new anonymous user.
   *
   * @returns A session where the is_anonymous claim in the access token JWT set to true
   */
  async signInAnonymously(credentials) {
    var _a, _b, _c;
    try {
      const res = await _request(this.fetch, "POST", `${this.url}/signup`, {
        headers: this.headers,
        body: {
          data: (_b = (_a = credentials === null || credentials === void 0 ? void 0 : credentials.options) === null || _a === void 0 ? void 0 : _a.data) !== null && _b !== void 0 ? _b : {},
          gotrue_meta_security: { captcha_token: (_c = credentials === null || credentials === void 0 ? void 0 : credentials.options) === null || _c === void 0 ? void 0 : _c.captchaToken }
        },
        xform: _sessionResponse
      });
      const { data, error } = res;
      if (error || !data) {
        return { data: { user: null, session: null }, error };
      }
      const session = data.session;
      const user = data.user;
      if (data.session) {
        await this._saveSession(data.session);
        await this._notifyAllSubscribers("SIGNED_IN", session);
      }
      return { data: { user, session }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Creates a new user.
   *
   * Be aware that if a user account exists in the system you may get back an
   * error message that attempts to hide this information from the user.
   * This method has support for PKCE via email signups. The PKCE flow cannot be used when autoconfirm is enabled.
   *
   * @returns A logged-in session if the server has "autoconfirm" ON
   * @returns A user if the server has "autoconfirm" OFF
   */
  async signUp(credentials) {
    var _a, _b, _c;
    try {
      let res;
      if ("email" in credentials) {
        const { email, password, options } = credentials;
        let codeChallenge = null;
        let codeChallengeMethod = null;
        if (this.flowType === "pkce") {
          ;
          [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
        }
        res = await _request(this.fetch, "POST", `${this.url}/signup`, {
          headers: this.headers,
          redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,
          body: {
            email,
            password,
            data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },
            code_challenge: codeChallenge,
            code_challenge_method: codeChallengeMethod
          },
          xform: _sessionResponse
        });
      } else if ("phone" in credentials) {
        const { phone, password, options } = credentials;
        res = await _request(this.fetch, "POST", `${this.url}/signup`, {
          headers: this.headers,
          body: {
            phone,
            password,
            data: (_b = options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : {},
            channel: (_c = options === null || options === void 0 ? void 0 : options.channel) !== null && _c !== void 0 ? _c : "sms",
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          },
          xform: _sessionResponse
        });
      } else {
        throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a password");
      }
      const { data, error } = res;
      if (error || !data) {
        return { data: { user: null, session: null }, error };
      }
      const session = data.session;
      const user = data.user;
      if (data.session) {
        await this._saveSession(data.session);
        await this._notifyAllSubscribers("SIGNED_IN", session);
      }
      return { data: { user, session }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Log in an existing user with an email and password or phone and password.
   *
   * Be aware that you may get back an error message that will not distinguish
   * between the cases where the account does not exist or that the
   * email/phone and password combination is wrong or that the account can only
   * be accessed via social login.
   */
  async signInWithPassword(credentials) {
    try {
      let res;
      if ("email" in credentials) {
        const { email, password, options } = credentials;
        res = await _request(this.fetch, "POST", `${this.url}/token?grant_type=password`, {
          headers: this.headers,
          body: {
            email,
            password,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          },
          xform: _sessionResponsePassword
        });
      } else if ("phone" in credentials) {
        const { phone, password, options } = credentials;
        res = await _request(this.fetch, "POST", `${this.url}/token?grant_type=password`, {
          headers: this.headers,
          body: {
            phone,
            password,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          },
          xform: _sessionResponsePassword
        });
      } else {
        throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a password");
      }
      const { data, error } = res;
      if (error) {
        return { data: { user: null, session: null }, error };
      } else if (!data || !data.session || !data.user) {
        return { data: { user: null, session: null }, error: new AuthInvalidTokenResponseError() };
      }
      if (data.session) {
        await this._saveSession(data.session);
        await this._notifyAllSubscribers("SIGNED_IN", data.session);
      }
      return {
        data: Object.assign({ user: data.user, session: data.session }, data.weak_password ? { weakPassword: data.weak_password } : null),
        error
      };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Log in an existing user via a third-party provider.
   * This method supports the PKCE flow.
   */
  async signInWithOAuth(credentials) {
    var _a, _b, _c, _d;
    return await this._handleProviderSignIn(credentials.provider, {
      redirectTo: (_a = credentials.options) === null || _a === void 0 ? void 0 : _a.redirectTo,
      scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,
      queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams,
      skipBrowserRedirect: (_d = credentials.options) === null || _d === void 0 ? void 0 : _d.skipBrowserRedirect
    });
  }
  /**
   * Log in an existing user by exchanging an Auth Code issued during the PKCE flow.
   */
  async exchangeCodeForSession(authCode) {
    await this.initializePromise;
    return this._acquireLock(-1, async () => {
      return this._exchangeCodeForSession(authCode);
    });
  }
  async _exchangeCodeForSession(authCode) {
    const storageItem = await getItemAsync(this.storage, `${this.storageKey}-code-verifier`);
    const [codeVerifier, redirectType] = (storageItem !== null && storageItem !== void 0 ? storageItem : "").split("/");
    try {
      const { data, error } = await _request(this.fetch, "POST", `${this.url}/token?grant_type=pkce`, {
        headers: this.headers,
        body: {
          auth_code: authCode,
          code_verifier: codeVerifier
        },
        xform: _sessionResponse
      });
      await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`);
      if (error) {
        throw error;
      }
      if (!data || !data.session || !data.user) {
        return {
          data: { user: null, session: null, redirectType: null },
          error: new AuthInvalidTokenResponseError()
        };
      }
      if (data.session) {
        await this._saveSession(data.session);
        await this._notifyAllSubscribers("SIGNED_IN", data.session);
      }
      return { data: Object.assign(Object.assign({}, data), { redirectType: redirectType !== null && redirectType !== void 0 ? redirectType : null }), error };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null, redirectType: null }, error };
      }
      throw error;
    }
  }
  /**
   * Allows signing in with an OIDC ID token. The authentication provider used
   * should be enabled and configured.
   */
  async signInWithIdToken(credentials) {
    try {
      const { options, provider, token, access_token, nonce } = credentials;
      const res = await _request(this.fetch, "POST", `${this.url}/token?grant_type=id_token`, {
        headers: this.headers,
        body: {
          provider,
          id_token: token,
          access_token,
          nonce,
          gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
        },
        xform: _sessionResponse
      });
      const { data, error } = res;
      if (error) {
        return { data: { user: null, session: null }, error };
      } else if (!data || !data.session || !data.user) {
        return {
          data: { user: null, session: null },
          error: new AuthInvalidTokenResponseError()
        };
      }
      if (data.session) {
        await this._saveSession(data.session);
        await this._notifyAllSubscribers("SIGNED_IN", data.session);
      }
      return { data, error };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Log in a user using magiclink or a one-time password (OTP).
   *
   * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.
   * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.
   * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.
   *
   * Be aware that you may get back an error message that will not distinguish
   * between the cases where the account does not exist or, that the account
   * can only be accessed via social login.
   *
   * Do note that you will need to configure a Whatsapp sender on Twilio
   * if you are using phone sign in with the 'whatsapp' channel. The whatsapp
   * channel is not supported on other providers
   * at this time.
   * This method supports PKCE when an email is passed.
   */
  async signInWithOtp(credentials) {
    var _a, _b, _c, _d, _e2;
    try {
      if ("email" in credentials) {
        const { email, options } = credentials;
        let codeChallenge = null;
        let codeChallengeMethod = null;
        if (this.flowType === "pkce") {
          ;
          [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
        }
        const { error } = await _request(this.fetch, "POST", `${this.url}/otp`, {
          headers: this.headers,
          body: {
            email,
            data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},
            create_user: (_b = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _b !== void 0 ? _b : true,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },
            code_challenge: codeChallenge,
            code_challenge_method: codeChallengeMethod
          },
          redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo
        });
        return { data: { user: null, session: null }, error };
      }
      if ("phone" in credentials) {
        const { phone, options } = credentials;
        const { data, error } = await _request(this.fetch, "POST", `${this.url}/otp`, {
          headers: this.headers,
          body: {
            phone,
            data: (_c = options === null || options === void 0 ? void 0 : options.data) !== null && _c !== void 0 ? _c : {},
            create_user: (_d = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _d !== void 0 ? _d : true,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },
            channel: (_e2 = options === null || options === void 0 ? void 0 : options.channel) !== null && _e2 !== void 0 ? _e2 : "sms"
          }
        });
        return { data: { user: null, session: null, messageId: data === null || data === void 0 ? void 0 : data.message_id }, error };
      }
      throw new AuthInvalidCredentialsError("You must provide either an email or phone number.");
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Log in a user given a User supplied OTP or TokenHash received through mobile or email.
   */
  async verifyOtp(params) {
    var _a, _b;
    try {
      let redirectTo = void 0;
      let captchaToken = void 0;
      if ("options" in params) {
        redirectTo = (_a = params.options) === null || _a === void 0 ? void 0 : _a.redirectTo;
        captchaToken = (_b = params.options) === null || _b === void 0 ? void 0 : _b.captchaToken;
      }
      const { data, error } = await _request(this.fetch, "POST", `${this.url}/verify`, {
        headers: this.headers,
        body: Object.assign(Object.assign({}, params), { gotrue_meta_security: { captcha_token: captchaToken } }),
        redirectTo,
        xform: _sessionResponse
      });
      if (error) {
        throw error;
      }
      if (!data) {
        throw new Error("An error occurred on token verification.");
      }
      const session = data.session;
      const user = data.user;
      if (session === null || session === void 0 ? void 0 : session.access_token) {
        await this._saveSession(session);
        await this._notifyAllSubscribers(params.type == "recovery" ? "PASSWORD_RECOVERY" : "SIGNED_IN", session);
      }
      return { data: { user, session }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Attempts a single-sign on using an enterprise Identity Provider. A
   * successful SSO attempt will redirect the current page to the identity
   * provider authorization page. The redirect URL is implementation and SSO
   * protocol specific.
   *
   * You can use it by providing a SSO domain. Typically you can extract this
   * domain by asking users for their email address. If this domain is
   * registered on the Auth instance the redirect will use that organization's
   * currently active SSO Identity Provider for the login.
   *
   * If you have built an organization-specific login page, you can use the
   * organization's SSO Identity Provider UUID directly instead.
   */
  async signInWithSSO(params) {
    var _a, _b, _c;
    try {
      let codeChallenge = null;
      let codeChallengeMethod = null;
      if (this.flowType === "pkce") {
        ;
        [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
      }
      return await _request(this.fetch, "POST", `${this.url}/sso`, {
        body: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, "providerId" in params ? { provider_id: params.providerId } : null), "domain" in params ? { domain: params.domain } : null), { redirect_to: (_b = (_a = params.options) === null || _a === void 0 ? void 0 : _a.redirectTo) !== null && _b !== void 0 ? _b : void 0 }), ((_c = params === null || params === void 0 ? void 0 : params.options) === null || _c === void 0 ? void 0 : _c.captchaToken) ? { gotrue_meta_security: { captcha_token: params.options.captchaToken } } : null), { skip_http_redirect: true, code_challenge: codeChallenge, code_challenge_method: codeChallengeMethod }),
        headers: this.headers,
        xform: _ssoResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  /**
   * Sends a reauthentication OTP to the user's email or phone number.
   * Requires the user to be signed-in.
   */
  async reauthenticate() {
    await this.initializePromise;
    return await this._acquireLock(-1, async () => {
      return await this._reauthenticate();
    });
  }
  async _reauthenticate() {
    try {
      return await this._useSession(async (result) => {
        const { data: { session }, error: sessionError } = result;
        if (sessionError)
          throw sessionError;
        if (!session)
          throw new AuthSessionMissingError();
        const { error } = await _request(this.fetch, "GET", `${this.url}/reauthenticate`, {
          headers: this.headers,
          jwt: session.access_token
        });
        return { data: { user: null, session: null }, error };
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Resends an existing signup confirmation email, email change email, SMS OTP or phone change OTP.
   */
  async resend(credentials) {
    try {
      const endpoint = `${this.url}/resend`;
      if ("email" in credentials) {
        const { email, type, options } = credentials;
        const { error } = await _request(this.fetch, "POST", endpoint, {
          headers: this.headers,
          body: {
            email,
            type,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          },
          redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo
        });
        return { data: { user: null, session: null }, error };
      } else if ("phone" in credentials) {
        const { phone, type, options } = credentials;
        const { data, error } = await _request(this.fetch, "POST", endpoint, {
          headers: this.headers,
          body: {
            phone,
            type,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          }
        });
        return { data: { user: null, session: null, messageId: data === null || data === void 0 ? void 0 : data.message_id }, error };
      }
      throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a type");
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Returns the session, refreshing it if necessary.
   *
   * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.
   *
   * **IMPORTANT:** This method loads values directly from the storage attached
   * to the client. If that storage is based on request cookies for example,
   * the values in it may not be authentic and therefore it's strongly advised
   * against using this method and its results in such circumstances. A warning
   * will be emitted if this is detected. Use {@link #getUser()} instead.
   */
  async getSession() {
    await this.initializePromise;
    const result = await this._acquireLock(-1, async () => {
      return this._useSession(async (result2) => {
        return result2;
      });
    });
    return result;
  }
  /**
   * Acquires a global lock based on the storage key.
   */
  async _acquireLock(acquireTimeout, fn) {
    this._debug("#_acquireLock", "begin", acquireTimeout);
    try {
      if (this.lockAcquired) {
        const last = this.pendingInLock.length ? this.pendingInLock[this.pendingInLock.length - 1] : Promise.resolve();
        const result = (async () => {
          await last;
          return await fn();
        })();
        this.pendingInLock.push((async () => {
          try {
            await result;
          } catch (e36) {
          }
        })());
        return result;
      }
      return await this.lock(`lock:${this.storageKey}`, acquireTimeout, async () => {
        this._debug("#_acquireLock", "lock acquired for storage key", this.storageKey);
        try {
          this.lockAcquired = true;
          const result = fn();
          this.pendingInLock.push((async () => {
            try {
              await result;
            } catch (e36) {
            }
          })());
          await result;
          while (this.pendingInLock.length) {
            const waitOn = [...this.pendingInLock];
            await Promise.all(waitOn);
            this.pendingInLock.splice(0, waitOn.length);
          }
          return await result;
        } finally {
          this._debug("#_acquireLock", "lock released for storage key", this.storageKey);
          this.lockAcquired = false;
        }
      });
    } finally {
      this._debug("#_acquireLock", "end");
    }
  }
  /**
   * Use instead of {@link #getSession} inside the library. It is
   * semantically usually what you want, as getting a session involves some
   * processing afterwards that requires only one client operating on the
   * session at once across multiple tabs or processes.
   */
  async _useSession(fn) {
    this._debug("#_useSession", "begin");
    try {
      const result = await this.__loadSession();
      return await fn(result);
    } finally {
      this._debug("#_useSession", "end");
    }
  }
  /**
   * NEVER USE DIRECTLY!
   *
   * Always use {@link #_useSession}.
   */
  async __loadSession() {
    this._debug("#__loadSession()", "begin");
    if (!this.lockAcquired) {
      this._debug("#__loadSession()", "used outside of an acquired lock!", new Error().stack);
    }
    try {
      let currentSession = null;
      const maybeSession = await getItemAsync(this.storage, this.storageKey);
      this._debug("#getSession()", "session from storage", maybeSession);
      if (maybeSession !== null) {
        if (this._isValidSession(maybeSession)) {
          currentSession = maybeSession;
        } else {
          this._debug("#getSession()", "session from storage is not valid");
          await this._removeSession();
        }
      }
      if (!currentSession) {
        return { data: { session: null }, error: null };
      }
      const hasExpired = currentSession.expires_at ? currentSession.expires_at <= Date.now() / 1e3 : false;
      this._debug("#__loadSession()", `session has${hasExpired ? "" : " not"} expired`, "expires_at", currentSession.expires_at);
      if (!hasExpired) {
        if (this.storage.isServer) {
          let suppressWarning = this.suppressGetSessionWarning;
          const proxySession = new Proxy(currentSession, {
            get: (target, prop, receiver) => {
              if (!suppressWarning && prop === "user") {
                console.warn("Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and many not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.");
                suppressWarning = true;
                this.suppressGetSessionWarning = true;
              }
              return Reflect.get(target, prop, receiver);
            }
          });
          currentSession = proxySession;
        }
        return { data: { session: currentSession }, error: null };
      }
      const { session, error } = await this._callRefreshToken(currentSession.refresh_token);
      if (error) {
        return { data: { session: null }, error };
      }
      return { data: { session }, error: null };
    } finally {
      this._debug("#__loadSession()", "end");
    }
  }
  /**
   * Gets the current user details if there is an existing session. This method
   * performs a network request to the Supabase Auth server, so the returned
   * value is authentic and can be used to base authorization rules on.
   *
   * @param jwt Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.
   */
  async getUser(jwt) {
    if (jwt) {
      return await this._getUser(jwt);
    }
    await this.initializePromise;
    const result = await this._acquireLock(-1, async () => {
      return await this._getUser();
    });
    return result;
  }
  async _getUser(jwt) {
    try {
      if (jwt) {
        return await _request(this.fetch, "GET", `${this.url}/user`, {
          headers: this.headers,
          jwt,
          xform: _userResponse
        });
      }
      return await this._useSession(async (result) => {
        var _a, _b, _c;
        const { data, error } = result;
        if (error) {
          throw error;
        }
        if (!((_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) && !this.hasCustomAuthorizationHeader) {
          return { data: { user: null }, error: new AuthSessionMissingError() };
        }
        return await _request(this.fetch, "GET", `${this.url}/user`, {
          headers: this.headers,
          jwt: (_c = (_b = data.session) === null || _b === void 0 ? void 0 : _b.access_token) !== null && _c !== void 0 ? _c : void 0,
          xform: _userResponse
        });
      });
    } catch (error) {
      if (isAuthError(error)) {
        if (isAuthSessionMissingError(error)) {
          await this._removeSession();
          await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`);
        }
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  /**
   * Updates user data for a logged in user.
   */
  async updateUser(attributes, options = {}) {
    await this.initializePromise;
    return await this._acquireLock(-1, async () => {
      return await this._updateUser(attributes, options);
    });
  }
  async _updateUser(attributes, options = {}) {
    try {
      return await this._useSession(async (result) => {
        const { data: sessionData, error: sessionError } = result;
        if (sessionError) {
          throw sessionError;
        }
        if (!sessionData.session) {
          throw new AuthSessionMissingError();
        }
        const session = sessionData.session;
        let codeChallenge = null;
        let codeChallengeMethod = null;
        if (this.flowType === "pkce" && attributes.email != null) {
          ;
          [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
        }
        const { data, error: userError } = await _request(this.fetch, "PUT", `${this.url}/user`, {
          headers: this.headers,
          redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,
          body: Object.assign(Object.assign({}, attributes), { code_challenge: codeChallenge, code_challenge_method: codeChallengeMethod }),
          jwt: session.access_token,
          xform: _userResponse
        });
        if (userError)
          throw userError;
        session.user = data.user;
        await this._saveSession(session);
        await this._notifyAllSubscribers("USER_UPDATED", session);
        return { data: { user: session.user }, error: null };
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  /**
   * Decodes a JWT (without performing any validation).
   */
  _decodeJWT(jwt) {
    return decodeJWTPayload(jwt);
  }
  /**
   * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.
   * If the refresh token or access token in the current session is invalid, an error will be thrown.
   * @param currentSession The current session that minimally contains an access token and refresh token.
   */
  async setSession(currentSession) {
    await this.initializePromise;
    return await this._acquireLock(-1, async () => {
      return await this._setSession(currentSession);
    });
  }
  async _setSession(currentSession) {
    try {
      if (!currentSession.access_token || !currentSession.refresh_token) {
        throw new AuthSessionMissingError();
      }
      const timeNow = Date.now() / 1e3;
      let expiresAt2 = timeNow;
      let hasExpired = true;
      let session = null;
      const payload = decodeJWTPayload(currentSession.access_token);
      if (payload.exp) {
        expiresAt2 = payload.exp;
        hasExpired = expiresAt2 <= timeNow;
      }
      if (hasExpired) {
        const { session: refreshedSession, error } = await this._callRefreshToken(currentSession.refresh_token);
        if (error) {
          return { data: { user: null, session: null }, error };
        }
        if (!refreshedSession) {
          return { data: { user: null, session: null }, error: null };
        }
        session = refreshedSession;
      } else {
        const { data, error } = await this._getUser(currentSession.access_token);
        if (error) {
          throw error;
        }
        session = {
          access_token: currentSession.access_token,
          refresh_token: currentSession.refresh_token,
          user: data.user,
          token_type: "bearer",
          expires_in: expiresAt2 - timeNow,
          expires_at: expiresAt2
        };
        await this._saveSession(session);
        await this._notifyAllSubscribers("SIGNED_IN", session);
      }
      return { data: { user: session.user, session }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { session: null, user: null }, error };
      }
      throw error;
    }
  }
  /**
   * Returns a new session, regardless of expiry status.
   * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().
   * If the current session's refresh token is invalid, an error will be thrown.
   * @param currentSession The current session. If passed in, it must contain a refresh token.
   */
  async refreshSession(currentSession) {
    await this.initializePromise;
    return await this._acquireLock(-1, async () => {
      return await this._refreshSession(currentSession);
    });
  }
  async _refreshSession(currentSession) {
    try {
      return await this._useSession(async (result) => {
        var _a;
        if (!currentSession) {
          const { data, error: error2 } = result;
          if (error2) {
            throw error2;
          }
          currentSession = (_a = data.session) !== null && _a !== void 0 ? _a : void 0;
        }
        if (!(currentSession === null || currentSession === void 0 ? void 0 : currentSession.refresh_token)) {
          throw new AuthSessionMissingError();
        }
        const { session, error } = await this._callRefreshToken(currentSession.refresh_token);
        if (error) {
          return { data: { user: null, session: null }, error };
        }
        if (!session) {
          return { data: { user: null, session: null }, error: null };
        }
        return { data: { user: session.user, session }, error: null };
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Gets the session data from a URL string
   */
  async _getSessionFromURL(isPKCEFlow) {
    try {
      if (!isBrowser())
        throw new AuthImplicitGrantRedirectError("No browser detected.");
      if (this.flowType === "implicit" && !this._isImplicitGrantFlow()) {
        throw new AuthImplicitGrantRedirectError("Not a valid implicit grant flow url.");
      } else if (this.flowType == "pkce" && !isPKCEFlow) {
        throw new AuthPKCEGrantCodeExchangeError("Not a valid PKCE flow url.");
      }
      const params = parseParametersFromURL(window.location.href);
      if (isPKCEFlow) {
        if (!params.code)
          throw new AuthPKCEGrantCodeExchangeError("No code detected.");
        const { data: data2, error: error2 } = await this._exchangeCodeForSession(params.code);
        if (error2)
          throw error2;
        const url = new URL(window.location.href);
        url.searchParams.delete("code");
        window.history.replaceState(window.history.state, "", url.toString());
        return { data: { session: data2.session, redirectType: null }, error: null };
      }
      if (params.error || params.error_description || params.error_code) {
        throw new AuthImplicitGrantRedirectError(params.error_description || "Error in URL with unspecified error_description", {
          error: params.error || "unspecified_error",
          code: params.error_code || "unspecified_code"
        });
      }
      const { provider_token, provider_refresh_token, access_token, refresh_token, expires_in, expires_at, token_type } = params;
      if (!access_token || !expires_in || !refresh_token || !token_type) {
        throw new AuthImplicitGrantRedirectError("No session defined in URL");
      }
      const timeNow = Math.round(Date.now() / 1e3);
      const expiresIn = parseInt(expires_in);
      let expiresAt2 = timeNow + expiresIn;
      if (expires_at) {
        expiresAt2 = parseInt(expires_at);
      }
      const actuallyExpiresIn = expiresAt2 - timeNow;
      if (actuallyExpiresIn * 1e3 <= AUTO_REFRESH_TICK_DURATION) {
        console.warn(`@supabase/gotrue-js: Session as retrieved from URL expires in ${actuallyExpiresIn}s, should have been closer to ${expiresIn}s`);
      }
      const issuedAt = expiresAt2 - expiresIn;
      if (timeNow - issuedAt >= 120) {
        console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale", issuedAt, expiresAt2, timeNow);
      } else if (timeNow - issuedAt < 0) {
        console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew", issuedAt, expiresAt2, timeNow);
      }
      const { data, error } = await this._getUser(access_token);
      if (error)
        throw error;
      const session = {
        provider_token,
        provider_refresh_token,
        access_token,
        expires_in: expiresIn,
        expires_at: expiresAt2,
        refresh_token,
        token_type,
        user: data.user
      };
      window.location.hash = "";
      this._debug("#_getSessionFromURL()", "clearing window.location.hash");
      return { data: { session, redirectType: params.type }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { session: null, redirectType: null }, error };
      }
      throw error;
    }
  }
  /**
   * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)
   */
  _isImplicitGrantFlow() {
    const params = parseParametersFromURL(window.location.href);
    return !!(isBrowser() && (params.access_token || params.error_description));
  }
  /**
   * Checks if the current URL and backing storage contain parameters given by a PKCE flow
   */
  async _isPKCEFlow() {
    const params = parseParametersFromURL(window.location.href);
    const currentStorageContent = await getItemAsync(this.storage, `${this.storageKey}-code-verifier`);
    return !!(params.code && currentStorageContent);
  }
  /**
   * Inside a browser context, `signOut()` will remove the logged in user from the browser session and log them out - removing all items from localstorage and then trigger a `"SIGNED_OUT"` event.
   *
   * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.
   * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.
   *
   * If using `others` scope, no `SIGNED_OUT` event is fired!
   */
  async signOut(options = { scope: "global" }) {
    await this.initializePromise;
    return await this._acquireLock(-1, async () => {
      return await this._signOut(options);
    });
  }
  async _signOut({ scope } = { scope: "global" }) {
    return await this._useSession(async (result) => {
      var _a;
      const { data, error: sessionError } = result;
      if (sessionError) {
        return { error: sessionError };
      }
      const accessToken = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token;
      if (accessToken) {
        const { error } = await this.admin.signOut(accessToken, scope);
        if (error) {
          if (!(isAuthApiError(error) && (error.status === 404 || error.status === 401 || error.status === 403))) {
            return { error };
          }
        }
      }
      if (scope !== "others") {
        await this._removeSession();
        await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`);
      }
      return { error: null };
    });
  }
  /**
   * Receive a notification every time an auth event happens.
   * @param callback A callback function to be invoked when an auth event happens.
   */
  onAuthStateChange(callback) {
    const id = uuid();
    const subscription = {
      id,
      callback,
      unsubscribe: () => {
        this._debug("#unsubscribe()", "state change callback with id removed", id);
        this.stateChangeEmitters.delete(id);
      }
    };
    this._debug("#onAuthStateChange()", "registered callback with id", id);
    this.stateChangeEmitters.set(id, subscription);
    (async () => {
      await this.initializePromise;
      await this._acquireLock(-1, async () => {
        this._emitInitialSession(id);
      });
    })();
    return { data: { subscription } };
  }
  async _emitInitialSession(id) {
    return await this._useSession(async (result) => {
      var _a, _b;
      try {
        const { data: { session }, error } = result;
        if (error)
          throw error;
        await ((_a = this.stateChangeEmitters.get(id)) === null || _a === void 0 ? void 0 : _a.callback("INITIAL_SESSION", session));
        this._debug("INITIAL_SESSION", "callback id", id, "session", session);
      } catch (err) {
        await ((_b = this.stateChangeEmitters.get(id)) === null || _b === void 0 ? void 0 : _b.callback("INITIAL_SESSION", null));
        this._debug("INITIAL_SESSION", "callback id", id, "error", err);
        console.error(err);
      }
    });
  }
  /**
   * Sends a password reset request to an email address. This method supports the PKCE flow.
   *
   * @param email The email address of the user.
   * @param options.redirectTo The URL to send the user to after they click the password reset link.
   * @param options.captchaToken Verification token received when the user completes the captcha on the site.
   */
  async resetPasswordForEmail(email, options = {}) {
    let codeChallenge = null;
    let codeChallengeMethod = null;
    if (this.flowType === "pkce") {
      ;
      [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(
        this.storage,
        this.storageKey,
        true
        // isPasswordRecovery
      );
    }
    try {
      return await _request(this.fetch, "POST", `${this.url}/recover`, {
        body: {
          email,
          code_challenge: codeChallenge,
          code_challenge_method: codeChallengeMethod,
          gotrue_meta_security: { captcha_token: options.captchaToken }
        },
        headers: this.headers,
        redirectTo: options.redirectTo
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  /**
   * Gets all the identities linked to a user.
   */
  async getUserIdentities() {
    var _a;
    try {
      const { data, error } = await this.getUser();
      if (error)
        throw error;
      return { data: { identities: (_a = data.user.identities) !== null && _a !== void 0 ? _a : [] }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  /**
   * Links an oauth identity to an existing user.
   * This method supports the PKCE flow.
   */
  async linkIdentity(credentials) {
    var _a;
    try {
      const { data, error } = await this._useSession(async (result) => {
        var _a2, _b, _c, _d, _e2;
        const { data: data2, error: error2 } = result;
        if (error2)
          throw error2;
        const url = await this._getUrlForProvider(`${this.url}/user/identities/authorize`, credentials.provider, {
          redirectTo: (_a2 = credentials.options) === null || _a2 === void 0 ? void 0 : _a2.redirectTo,
          scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,
          queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams,
          skipBrowserRedirect: true
        });
        return await _request(this.fetch, "GET", url, {
          headers: this.headers,
          jwt: (_e2 = (_d = data2.session) === null || _d === void 0 ? void 0 : _d.access_token) !== null && _e2 !== void 0 ? _e2 : void 0
        });
      });
      if (error)
        throw error;
      if (isBrowser() && !((_a = credentials.options) === null || _a === void 0 ? void 0 : _a.skipBrowserRedirect)) {
        window.location.assign(data === null || data === void 0 ? void 0 : data.url);
      }
      return { data: { provider: credentials.provider, url: data === null || data === void 0 ? void 0 : data.url }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { provider: credentials.provider, url: null }, error };
      }
      throw error;
    }
  }
  /**
   * Unlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked.
   */
  async unlinkIdentity(identity3) {
    try {
      return await this._useSession(async (result) => {
        var _a, _b;
        const { data, error } = result;
        if (error) {
          throw error;
        }
        return await _request(this.fetch, "DELETE", `${this.url}/user/identities/${identity3.identity_id}`, {
          headers: this.headers,
          jwt: (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : void 0
        });
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  /**
   * Generates a new JWT.
   * @param refreshToken A valid refresh token that was returned on login.
   */
  async _refreshAccessToken(refreshToken) {
    const debugName = `#_refreshAccessToken(${refreshToken.substring(0, 5)}...)`;
    this._debug(debugName, "begin");
    try {
      const startedAt = Date.now();
      return await retryable(async (attempt) => {
        if (attempt > 0) {
          await sleep(200 * Math.pow(2, attempt - 1));
        }
        this._debug(debugName, "refreshing attempt", attempt);
        return await _request(this.fetch, "POST", `${this.url}/token?grant_type=refresh_token`, {
          body: { refresh_token: refreshToken },
          headers: this.headers,
          xform: _sessionResponse
        });
      }, (attempt, error) => {
        const nextBackOffInterval = 200 * Math.pow(2, attempt);
        return error && isAuthRetryableFetchError(error) && // retryable only if the request can be sent before the backoff overflows the tick duration
        Date.now() + nextBackOffInterval - startedAt < AUTO_REFRESH_TICK_DURATION;
      });
    } catch (error) {
      this._debug(debugName, "error", error);
      if (isAuthError(error)) {
        return { data: { session: null, user: null }, error };
      }
      throw error;
    } finally {
      this._debug(debugName, "end");
    }
  }
  _isValidSession(maybeSession) {
    const isValidSession = typeof maybeSession === "object" && maybeSession !== null && "access_token" in maybeSession && "refresh_token" in maybeSession && "expires_at" in maybeSession;
    return isValidSession;
  }
  async _handleProviderSignIn(provider, options) {
    const url = await this._getUrlForProvider(`${this.url}/authorize`, provider, {
      redirectTo: options.redirectTo,
      scopes: options.scopes,
      queryParams: options.queryParams
    });
    this._debug("#_handleProviderSignIn()", "provider", provider, "options", options, "url", url);
    if (isBrowser() && !options.skipBrowserRedirect) {
      window.location.assign(url);
    }
    return { data: { provider, url }, error: null };
  }
  /**
   * Recovers the session from LocalStorage and refreshes the token
   * Note: this method is async to accommodate for AsyncStorage e.g. in React native.
   */
  async _recoverAndRefresh() {
    var _a;
    const debugName = "#_recoverAndRefresh()";
    this._debug(debugName, "begin");
    try {
      const currentSession = await getItemAsync(this.storage, this.storageKey);
      this._debug(debugName, "session from storage", currentSession);
      if (!this._isValidSession(currentSession)) {
        this._debug(debugName, "session is not valid");
        if (currentSession !== null) {
          await this._removeSession();
        }
        return;
      }
      const timeNow = Math.round(Date.now() / 1e3);
      const expiresWithMargin = ((_a = currentSession.expires_at) !== null && _a !== void 0 ? _a : Infinity) < timeNow + EXPIRY_MARGIN;
      this._debug(debugName, `session has${expiresWithMargin ? "" : " not"} expired with margin of ${EXPIRY_MARGIN}s`);
      if (expiresWithMargin) {
        if (this.autoRefreshToken && currentSession.refresh_token) {
          const { error } = await this._callRefreshToken(currentSession.refresh_token);
          if (error) {
            console.error(error);
            if (!isAuthRetryableFetchError(error)) {
              this._debug(debugName, "refresh failed with a non-retryable error, removing the session", error);
              await this._removeSession();
            }
          }
        }
      } else {
        await this._notifyAllSubscribers("SIGNED_IN", currentSession);
      }
    } catch (err) {
      this._debug(debugName, "error", err);
      console.error(err);
      return;
    } finally {
      this._debug(debugName, "end");
    }
  }
  async _callRefreshToken(refreshToken) {
    var _a, _b;
    if (!refreshToken) {
      throw new AuthSessionMissingError();
    }
    if (this.refreshingDeferred) {
      return this.refreshingDeferred.promise;
    }
    const debugName = `#_callRefreshToken(${refreshToken.substring(0, 5)}...)`;
    this._debug(debugName, "begin");
    try {
      this.refreshingDeferred = new Deferred();
      const { data, error } = await this._refreshAccessToken(refreshToken);
      if (error)
        throw error;
      if (!data.session)
        throw new AuthSessionMissingError();
      await this._saveSession(data.session);
      await this._notifyAllSubscribers("TOKEN_REFRESHED", data.session);
      const result = { session: data.session, error: null };
      this.refreshingDeferred.resolve(result);
      return result;
    } catch (error) {
      this._debug(debugName, "error", error);
      if (isAuthError(error)) {
        const result = { session: null, error };
        if (!isAuthRetryableFetchError(error)) {
          await this._removeSession();
        }
        (_a = this.refreshingDeferred) === null || _a === void 0 ? void 0 : _a.resolve(result);
        return result;
      }
      (_b = this.refreshingDeferred) === null || _b === void 0 ? void 0 : _b.reject(error);
      throw error;
    } finally {
      this.refreshingDeferred = null;
      this._debug(debugName, "end");
    }
  }
  async _notifyAllSubscribers(event, session, broadcast = true) {
    const debugName = `#_notifyAllSubscribers(${event})`;
    this._debug(debugName, "begin", session, `broadcast = ${broadcast}`);
    try {
      if (this.broadcastChannel && broadcast) {
        this.broadcastChannel.postMessage({ event, session });
      }
      const errors = [];
      const promises = Array.from(this.stateChangeEmitters.values()).map(async (x3) => {
        try {
          await x3.callback(event, session);
        } catch (e36) {
          errors.push(e36);
        }
      });
      await Promise.all(promises);
      if (errors.length > 0) {
        for (let i11 = 0; i11 < errors.length; i11 += 1) {
          console.error(errors[i11]);
        }
        throw errors[0];
      }
    } finally {
      this._debug(debugName, "end");
    }
  }
  /**
   * set currentSession and currentUser
   * process to _startAutoRefreshToken if possible
   */
  async _saveSession(session) {
    this._debug("#_saveSession()", session);
    this.suppressGetSessionWarning = true;
    await setItemAsync(this.storage, this.storageKey, session);
  }
  async _removeSession() {
    this._debug("#_removeSession()");
    await removeItemAsync(this.storage, this.storageKey);
    await this._notifyAllSubscribers("SIGNED_OUT", null);
  }
  /**
   * Removes any registered visibilitychange callback.
   *
   * {@see #startAutoRefresh}
   * {@see #stopAutoRefresh}
   */
  _removeVisibilityChangedCallback() {
    this._debug("#_removeVisibilityChangedCallback()");
    const callback = this.visibilityChangedCallback;
    this.visibilityChangedCallback = null;
    try {
      if (callback && isBrowser() && (window === null || window === void 0 ? void 0 : window.removeEventListener)) {
        window.removeEventListener("visibilitychange", callback);
      }
    } catch (e36) {
      console.error("removing visibilitychange callback failed", e36);
    }
  }
  /**
   * This is the private implementation of {@link #startAutoRefresh}. Use this
   * within the library.
   */
  async _startAutoRefresh() {
    await this._stopAutoRefresh();
    this._debug("#_startAutoRefresh()");
    const ticker = setInterval(() => this._autoRefreshTokenTick(), AUTO_REFRESH_TICK_DURATION);
    this.autoRefreshTicker = ticker;
    if (ticker && typeof ticker === "object" && typeof ticker.unref === "function") {
      ticker.unref();
    } else if (typeof Deno !== "undefined" && typeof Deno.unrefTimer === "function") {
      Deno.unrefTimer(ticker);
    }
    setTimeout(async () => {
      await this.initializePromise;
      await this._autoRefreshTokenTick();
    }, 0);
  }
  /**
   * This is the private implementation of {@link #stopAutoRefresh}. Use this
   * within the library.
   */
  async _stopAutoRefresh() {
    this._debug("#_stopAutoRefresh()");
    const ticker = this.autoRefreshTicker;
    this.autoRefreshTicker = null;
    if (ticker) {
      clearInterval(ticker);
    }
  }
  /**
   * Starts an auto-refresh process in the background. The session is checked
   * every few seconds. Close to the time of expiration a process is started to
   * refresh the session. If refreshing fails it will be retried for as long as
   * necessary.
   *
   * If you set the {@link GoTrueClientOptions#autoRefreshToken} you don't need
   * to call this function, it will be called for you.
   *
   * On browsers the refresh process works only when the tab/window is in the
   * foreground to conserve resources as well as prevent race conditions and
   * flooding auth with requests. If you call this method any managed
   * visibility change callback will be removed and you must manage visibility
   * changes on your own.
   *
   * On non-browser platforms the refresh process works *continuously* in the
   * background, which may not be desirable. You should hook into your
   * platform's foreground indication mechanism and call these methods
   * appropriately to conserve resources.
   *
   * {@see #stopAutoRefresh}
   */
  async startAutoRefresh() {
    this._removeVisibilityChangedCallback();
    await this._startAutoRefresh();
  }
  /**
   * Stops an active auto refresh process running in the background (if any).
   *
   * If you call this method any managed visibility change callback will be
   * removed and you must manage visibility changes on your own.
   *
   * See {@link #startAutoRefresh} for more details.
   */
  async stopAutoRefresh() {
    this._removeVisibilityChangedCallback();
    await this._stopAutoRefresh();
  }
  /**
   * Runs the auto refresh token tick.
   */
  async _autoRefreshTokenTick() {
    this._debug("#_autoRefreshTokenTick()", "begin");
    try {
      await this._acquireLock(0, async () => {
        try {
          const now = Date.now();
          try {
            return await this._useSession(async (result) => {
              const { data: { session } } = result;
              if (!session || !session.refresh_token || !session.expires_at) {
                this._debug("#_autoRefreshTokenTick()", "no session");
                return;
              }
              const expiresInTicks = Math.floor((session.expires_at * 1e3 - now) / AUTO_REFRESH_TICK_DURATION);
              this._debug("#_autoRefreshTokenTick()", `access token expires in ${expiresInTicks} ticks, a tick lasts ${AUTO_REFRESH_TICK_DURATION}ms, refresh threshold is ${AUTO_REFRESH_TICK_THRESHOLD} ticks`);
              if (expiresInTicks <= AUTO_REFRESH_TICK_THRESHOLD) {
                await this._callRefreshToken(session.refresh_token);
              }
            });
          } catch (e36) {
            console.error("Auto refresh tick failed with error. This is likely a transient error.", e36);
          }
        } finally {
          this._debug("#_autoRefreshTokenTick()", "end");
        }
      });
    } catch (e36) {
      if (e36.isAcquireTimeout || e36 instanceof LockAcquireTimeoutError) {
        this._debug("auto refresh token tick lock not available");
      } else {
        throw e36;
      }
    }
  }
  /**
   * Registers callbacks on the browser / platform, which in-turn run
   * algorithms when the browser window/tab are in foreground. On non-browser
   * platforms it assumes always foreground.
   */
  async _handleVisibilityChange() {
    this._debug("#_handleVisibilityChange()");
    if (!isBrowser() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {
      if (this.autoRefreshToken) {
        this.startAutoRefresh();
      }
      return false;
    }
    try {
      this.visibilityChangedCallback = async () => await this._onVisibilityChanged(false);
      window === null || window === void 0 ? void 0 : window.addEventListener("visibilitychange", this.visibilityChangedCallback);
      await this._onVisibilityChanged(true);
    } catch (error) {
      console.error("_handleVisibilityChange", error);
    }
  }
  /**
   * Callback registered with `window.addEventListener('visibilitychange')`.
   */
  async _onVisibilityChanged(calledFromInitialize) {
    const methodName = `#_onVisibilityChanged(${calledFromInitialize})`;
    this._debug(methodName, "visibilityState", document.visibilityState);
    if (document.visibilityState === "visible") {
      if (this.autoRefreshToken) {
        this._startAutoRefresh();
      }
      if (!calledFromInitialize) {
        await this.initializePromise;
        await this._acquireLock(-1, async () => {
          if (document.visibilityState !== "visible") {
            this._debug(methodName, "acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting");
            return;
          }
          await this._recoverAndRefresh();
        });
      }
    } else if (document.visibilityState === "hidden") {
      if (this.autoRefreshToken) {
        this._stopAutoRefresh();
      }
    }
  }
  /**
   * Generates the relevant login URL for a third-party provider.
   * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.
   * @param options.scopes A space-separated list of scopes granted to the OAuth application.
   * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.
   */
  async _getUrlForProvider(url, provider, options) {
    const urlParams = [`provider=${encodeURIComponent(provider)}`];
    if (options === null || options === void 0 ? void 0 : options.redirectTo) {
      urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`);
    }
    if (options === null || options === void 0 ? void 0 : options.scopes) {
      urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`);
    }
    if (this.flowType === "pkce") {
      const [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
      const flowParams = new URLSearchParams({
        code_challenge: `${encodeURIComponent(codeChallenge)}`,
        code_challenge_method: `${encodeURIComponent(codeChallengeMethod)}`
      });
      urlParams.push(flowParams.toString());
    }
    if (options === null || options === void 0 ? void 0 : options.queryParams) {
      const query = new URLSearchParams(options.queryParams);
      urlParams.push(query.toString());
    }
    if (options === null || options === void 0 ? void 0 : options.skipBrowserRedirect) {
      urlParams.push(`skip_http_redirect=${options.skipBrowserRedirect}`);
    }
    return `${url}?${urlParams.join("&")}`;
  }
  async _unenroll(params) {
    try {
      return await this._useSession(async (result) => {
        var _a;
        const { data: sessionData, error: sessionError } = result;
        if (sessionError) {
          return { data: null, error: sessionError };
        }
        return await _request(this.fetch, "DELETE", `${this.url}/factors/${params.factorId}`, {
          headers: this.headers,
          jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token
        });
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  async _enroll(params) {
    try {
      return await this._useSession(async (result) => {
        var _a, _b;
        const { data: sessionData, error: sessionError } = result;
        if (sessionError) {
          return { data: null, error: sessionError };
        }
        const body = Object.assign({ friendly_name: params.friendlyName, factor_type: params.factorType }, params.factorType === "phone" ? { phone: params.phone } : { issuer: params.issuer });
        const { data, error } = await _request(this.fetch, "POST", `${this.url}/factors`, {
          body,
          headers: this.headers,
          jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token
        });
        if (error) {
          return { data: null, error };
        }
        if (params.factorType === "totp" && ((_b = data === null || data === void 0 ? void 0 : data.totp) === null || _b === void 0 ? void 0 : _b.qr_code)) {
          data.totp.qr_code = `data:image/svg+xml;utf-8,${data.totp.qr_code}`;
        }
        return { data, error: null };
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  /**
   * {@see GoTrueMFAApi#verify}
   */
  async _verify(params) {
    return this._acquireLock(-1, async () => {
      try {
        return await this._useSession(async (result) => {
          var _a;
          const { data: sessionData, error: sessionError } = result;
          if (sessionError) {
            return { data: null, error: sessionError };
          }
          const { data, error } = await _request(this.fetch, "POST", `${this.url}/factors/${params.factorId}/verify`, {
            body: { code: params.code, challenge_id: params.challengeId },
            headers: this.headers,
            jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token
          });
          if (error) {
            return { data: null, error };
          }
          await this._saveSession(Object.assign({ expires_at: Math.round(Date.now() / 1e3) + data.expires_in }, data));
          await this._notifyAllSubscribers("MFA_CHALLENGE_VERIFIED", data);
          return { data, error };
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * {@see GoTrueMFAApi#challenge}
   */
  async _challenge(params) {
    return this._acquireLock(-1, async () => {
      try {
        return await this._useSession(async (result) => {
          var _a;
          const { data: sessionData, error: sessionError } = result;
          if (sessionError) {
            return { data: null, error: sessionError };
          }
          return await _request(this.fetch, "POST", `${this.url}/factors/${params.factorId}/challenge`, {
            body: { channel: params.channel },
            headers: this.headers,
            jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token
          });
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * {@see GoTrueMFAApi#challengeAndVerify}
   */
  async _challengeAndVerify(params) {
    const { data: challengeData, error: challengeError } = await this._challenge({
      factorId: params.factorId
    });
    if (challengeError) {
      return { data: null, error: challengeError };
    }
    return await this._verify({
      factorId: params.factorId,
      challengeId: challengeData.id,
      code: params.code
    });
  }
  /**
   * {@see GoTrueMFAApi#listFactors}
   */
  async _listFactors() {
    const { data: { user }, error: userError } = await this.getUser();
    if (userError) {
      return { data: null, error: userError };
    }
    const factors = (user === null || user === void 0 ? void 0 : user.factors) || [];
    const totp = factors.filter((factor) => factor.factor_type === "totp" && factor.status === "verified");
    const phone = factors.filter((factor) => factor.factor_type === "phone" && factor.status === "verified");
    return {
      data: {
        all: factors,
        totp,
        phone
      },
      error: null
    };
  }
  /**
   * {@see GoTrueMFAApi#getAuthenticatorAssuranceLevel}
   */
  async _getAuthenticatorAssuranceLevel() {
    return this._acquireLock(-1, async () => {
      return await this._useSession(async (result) => {
        var _a, _b;
        const { data: { session }, error: sessionError } = result;
        if (sessionError) {
          return { data: null, error: sessionError };
        }
        if (!session) {
          return {
            data: { currentLevel: null, nextLevel: null, currentAuthenticationMethods: [] },
            error: null
          };
        }
        const payload = this._decodeJWT(session.access_token);
        let currentLevel = null;
        if (payload.aal) {
          currentLevel = payload.aal;
        }
        let nextLevel = currentLevel;
        const verifiedFactors = (_b = (_a = session.user.factors) === null || _a === void 0 ? void 0 : _a.filter((factor) => factor.status === "verified")) !== null && _b !== void 0 ? _b : [];
        if (verifiedFactors.length > 0) {
          nextLevel = "aal2";
        }
        const currentAuthenticationMethods = payload.amr || [];
        return { data: { currentLevel, nextLevel, currentAuthenticationMethods }, error: null };
      });
    });
  }
};
GoTrueClient.nextInstanceID = 0;

// node_modules/@supabase/auth-js/dist/module/AuthClient.js
var AuthClient = GoTrueClient;
var AuthClient_default = AuthClient;

// node_modules/@supabase/supabase-js/dist/module/lib/SupabaseAuthClient.js
var SupabaseAuthClient = class extends AuthClient_default {
  constructor(options) {
    super(options);
  }
};

// node_modules/@supabase/supabase-js/dist/module/SupabaseClient.js
var __awaiter8 = function(thisArg, _arguments, P6, generator) {
  function adopt(value) {
    return value instanceof P6 ? value : new P6(function(resolve) {
      resolve(value);
    });
  }
  return new (P6 || (P6 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e36) {
        reject(e36);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e36) {
        reject(e36);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var SupabaseClient = class {
  /**
   * Create a new client for use in the browser.
   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.
   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.
   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.
   * @param options.auth.autoRefreshToken Set to "true" if you want to automatically refresh the token before expiring.
   * @param options.auth.persistSession Set to "true" if you want to automatically save the user session into local storage.
   * @param options.auth.detectSessionInUrl Set to "true" if you want to automatically detects OAuth grants in the URL and signs in the user.
   * @param options.realtime Options passed along to realtime-js constructor.
   * @param options.global.fetch A custom fetch implementation.
   * @param options.global.headers Any additional headers to send with each network request.
   */
  constructor(supabaseUrl, supabaseKey, options) {
    var _a, _b, _c;
    this.supabaseUrl = supabaseUrl;
    this.supabaseKey = supabaseKey;
    if (!supabaseUrl)
      throw new Error("supabaseUrl is required.");
    if (!supabaseKey)
      throw new Error("supabaseKey is required.");
    const _supabaseUrl = stripTrailingSlash(supabaseUrl);
    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, "ws");
    this.authUrl = `${_supabaseUrl}/auth/v1`;
    this.storageUrl = `${_supabaseUrl}/storage/v1`;
    this.functionsUrl = `${_supabaseUrl}/functions/v1`;
    const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split(".")[0]}-auth-token`;
    const DEFAULTS = {
      db: DEFAULT_DB_OPTIONS,
      realtime: DEFAULT_REALTIME_OPTIONS,
      auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), { storageKey: defaultStorageKey }),
      global: DEFAULT_GLOBAL_OPTIONS
    };
    const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);
    this.storageKey = (_a = settings.auth.storageKey) !== null && _a !== void 0 ? _a : "";
    this.headers = (_b = settings.global.headers) !== null && _b !== void 0 ? _b : {};
    if (!settings.accessToken) {
      this.auth = this._initSupabaseAuthClient((_c = settings.auth) !== null && _c !== void 0 ? _c : {}, this.headers, settings.global.fetch);
    } else {
      this.accessToken = settings.accessToken;
      this.auth = new Proxy({}, {
        get: (_7, prop) => {
          throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(prop)} is not possible`);
        }
      });
    }
    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global.fetch);
    this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers }, settings.realtime));
    this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {
      headers: this.headers,
      schema: settings.db.schema,
      fetch: this.fetch
    });
    if (!settings.accessToken) {
      this._listenForAuthEvents();
    }
  }
  /**
   * Supabase Functions allows you to deploy and invoke edge functions.
   */
  get functions() {
    return new FunctionsClient(this.functionsUrl, {
      headers: this.headers,
      customFetch: this.fetch
    });
  }
  /**
   * Supabase Storage allows you to manage user-generated content, such as photos or videos.
   */
  get storage() {
    return new StorageClient(this.storageUrl, this.headers, this.fetch);
  }
  /**
   * Perform a query on a table or a view.
   *
   * @param relation - The table or view name to query
   */
  from(relation) {
    return this.rest.from(relation);
  }
  // NOTE: signatures must be kept in sync with PostgrestClient.schema
  /**
   * Select a schema to query or perform an function (rpc) call.
   *
   * The schema needs to be on the list of exposed schemas inside Supabase.
   *
   * @param schema - The schema to query
   */
  schema(schema) {
    return this.rest.schema(schema);
  }
  // NOTE: signatures must be kept in sync with PostgrestClient.rpc
  /**
   * Perform a function call.
   *
   * @param fn - The function name to call
   * @param args - The arguments to pass to the function call
   * @param options - Named parameters
   * @param options.head - When set to `true`, `data` will not be returned.
   * Useful if you only need the count.
   * @param options.get - When set to `true`, the function will be called with
   * read-only access mode.
   * @param options.count - Count algorithm to use to count rows returned by the
   * function. Only applicable for [set-returning
   * functions](https://www.postgresql.org/docs/current/functions-srf.html).
   *
   * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
   * hood.
   *
   * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
   * statistics under the hood.
   *
   * `"estimated"`: Uses exact count for low numbers and planned count for high
   * numbers.
   */
  rpc(fn, args = {}, options = {}) {
    return this.rest.rpc(fn, args, options);
  }
  /**
   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.
   *
   * @param {string} name - The name of the Realtime channel.
   * @param {Object} opts - The options to pass to the Realtime channel.
   *
   */
  channel(name, opts = { config: {} }) {
    return this.realtime.channel(name, opts);
  }
  /**
   * Returns all Realtime channels.
   */
  getChannels() {
    return this.realtime.getChannels();
  }
  /**
   * Unsubscribes and removes Realtime channel from Realtime client.
   *
   * @param {RealtimeChannel} channel - The name of the Realtime channel.
   *
   */
  removeChannel(channel) {
    return this.realtime.removeChannel(channel);
  }
  /**
   * Unsubscribes and removes all Realtime channels from Realtime client.
   */
  removeAllChannels() {
    return this.realtime.removeAllChannels();
  }
  _getAccessToken() {
    var _a, _b;
    return __awaiter8(this, void 0, void 0, function* () {
      if (this.accessToken) {
        return yield this.accessToken();
      }
      const { data } = yield this.auth.getSession();
      return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null;
    });
  }
  _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, storage, storageKey, flowType, lock, debug }, headers, fetch2) {
    var _a;
    const authHeaders = {
      Authorization: `Bearer ${this.supabaseKey}`,
      apikey: `${this.supabaseKey}`
    };
    return new SupabaseAuthClient({
      url: this.authUrl,
      headers: Object.assign(Object.assign({}, authHeaders), headers),
      storageKey,
      autoRefreshToken,
      persistSession,
      detectSessionInUrl,
      storage,
      flowType,
      lock,
      debug,
      fetch: fetch2,
      // auth checks if there is a custom authorizaiton header using this flag
      // so it knows whether to return an error when getUser is called with no session
      hasCustomAuthorizationHeader: (_a = "Authorization" in this.headers) !== null && _a !== void 0 ? _a : false
    });
  }
  _initRealtimeClient(options) {
    return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), { params: Object.assign({ apikey: this.supabaseKey }, options === null || options === void 0 ? void 0 : options.params) }));
  }
  _listenForAuthEvents() {
    let data = this.auth.onAuthStateChange((event, session) => {
      this._handleTokenChanged(event, "CLIENT", session === null || session === void 0 ? void 0 : session.access_token);
    });
    return data;
  }
  _handleTokenChanged(event, source, token) {
    if ((event === "TOKEN_REFRESHED" || event === "SIGNED_IN") && this.changedAccessToken !== token) {
      this.realtime.setAuth(token !== null && token !== void 0 ? token : null);
      this.changedAccessToken = token;
    } else if (event === "SIGNED_OUT") {
      this.realtime.setAuth(this.supabaseKey);
      if (source == "STORAGE")
        this.auth.signOut();
      this.changedAccessToken = void 0;
    }
  }
};

// node_modules/@supabase/supabase-js/dist/module/index.js
var createClient = (supabaseUrl, supabaseKey, options) => {
  return new SupabaseClient(supabaseUrl, supabaseKey, options);
};

// node_modules/@cosmograph/cosmograph/api/supabase/supabase.js
var i7 = createClient("https://xovkkfhojasbjinfslpx.supabase.co", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhvdmtrZmhvamFzYmppbmZzbHB4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE2OTM1ODQ0ODAsImV4cCI6MjAwOTE2MDQ4MH0.L3-X0p_un0oSTNubPwtfGo0D8g2bkPIfz7CaZ-iRYXY");
async function I7(s15) {
  const { error: I8 } = await i7.from("metrics").insert(s15);
  return I8;
}

// node_modules/@cosmograph/cosmograph/ext/rollup-plugin-styles/dist/runtime/inject-css.js
var e29 = [];
var t18 = [];
function n11(n17, r14) {
  if (n17 && "undefined" != typeof document) {
    var a13, s15 = true === r14.prepend ? "prepend" : "append", d13 = true === r14.singleTag, i11 = "string" == typeof r14.container ? document.querySelector(r14.container) : document.getElementsByTagName("head")[0];
    if (d13) {
      var u8 = e29.indexOf(i11);
      -1 === u8 && (u8 = e29.push(i11) - 1, t18[u8] = {}), a13 = t18[u8] && t18[u8][s15] ? t18[u8][s15] : t18[u8][s15] = c11();
    } else a13 = c11();
    65279 === n17.charCodeAt(0) && (n17 = n17.substring(1)), a13.styleSheet ? a13.styleSheet.cssText += n17 : a13.appendChild(document.createTextNode(n17));
  }
  function c11() {
    var e36 = document.createElement("style");
    if (e36.setAttribute("type", "text/css"), r14.attributes) for (var t23 = Object.keys(r14.attributes), n18 = 0; n18 < t23.length; n18++) e36.setAttribute(t23[n18], r14.attributes[t23[n18]]);
    var a14 = "prepend" === s15 ? "afterbegin" : "beforeend";
    return i11.insertAdjacentElement(a14, e36), e36;
  }
}

// node_modules/@cosmograph/cosmograph/modules/cosmograph/style.module.css.js
var e30 = ":root{--cosmograph-watermark-color:#fff}.style_module_watermark__6b4371ae{bottom:0;color:var(--cosmograph-watermark-color);cursor:pointer;line-height:0;margin:0 .6rem .6rem 0;position:absolute;right:0;user-select:none}.style_module_cosmograph__6b4371ae{display:flex;height:100%;overflow:hidden;position:relative;width:100%}.style_module_cosmographShowLabelsFor__6b4371ae{opacity:1}.style_module_cosmographShowTopLabels__6b4371ae{opacity:.9}.style_module_cosmographShowDynamicLabels__6b4371ae{opacity:.7}";
var a11 = { watermark: "style_module_watermark__6b4371ae", cosmograph: "style_module_cosmograph__6b4371ae", cosmographShowLabelsFor: "style_module_cosmographShowLabelsFor__6b4371ae", cosmographShowTopLabels: "style_module_cosmographShowTopLabels__6b4371ae", cosmographShowDynamicLabels: "style_module_cosmographShowDynamicLabels__6b4371ae" };
n11(e30, {});

// node_modules/@cosmograph/cosmograph/modules/cosmograph/config.js
var o15 = { disableSimulation: null, showDynamicLabels: true, showTopLabels: false, showTopLabelsLimit: 100, showTopLabelsValueKey: void 0, showLabelsFor: void 0, showHoveredNodeLabel: true, nodeLabelAccessor: (o22) => o22.id, nodeLabelClassName: void 0, nodeLabelColor: void 0, hoveredNodeLabelClassName: void 0, hoveredNodeLabelColor: void 0, onSetData: void 0, onNodesFiltered: void 0, onLinksFiltered: void 0, onLabelClick: void 0 };

// node_modules/crossfilter2/src/array.js
var array8 = arrayUntyped;
var array16 = arrayUntyped;
var array32 = arrayUntyped;
var arrayLengthen = arrayLengthenUntyped;
var arrayWiden = arrayWidenUntyped;
if (typeof Uint8Array !== "undefined") {
  array8 = function(n17) {
    return new Uint8Array(n17);
  };
  array16 = function(n17) {
    return new Uint16Array(n17);
  };
  array32 = function(n17) {
    return new Uint32Array(n17);
  };
  arrayLengthen = function(array, length4) {
    if (array.length >= length4) return array;
    var copy4 = new array.constructor(length4);
    copy4.set(array);
    return copy4;
  };
  arrayWiden = function(array, width) {
    var copy4;
    switch (width) {
      case 16:
        copy4 = array16(array.length);
        break;
      case 32:
        copy4 = array32(array.length);
        break;
      default:
        throw new Error("invalid array width!");
    }
    copy4.set(array);
    return copy4;
  };
}
function arrayUntyped(n17) {
  var array = new Array(n17), i11 = -1;
  while (++i11 < n17) array[i11] = 0;
  return array;
}
function arrayLengthenUntyped(array, length4) {
  var n17 = array.length;
  while (n17 < length4) array[n17++] = 0;
  return array;
}
function arrayWidenUntyped(array, width) {
  if (width > 32) throw new Error("invalid array width!");
  return array;
}
function bitarray(n17) {
  this.length = n17;
  this.subarrays = 1;
  this.width = 8;
  this.masks = {
    0: 0
  };
  this[0] = array8(n17);
}
bitarray.prototype.lengthen = function(n17) {
  var i11, len2;
  for (i11 = 0, len2 = this.subarrays; i11 < len2; ++i11) {
    this[i11] = arrayLengthen(this[i11], n17);
  }
  this.length = n17;
};
bitarray.prototype.add = function() {
  var m6, w3, one, i11, len2;
  for (i11 = 0, len2 = this.subarrays; i11 < len2; ++i11) {
    m6 = this.masks[i11];
    w3 = this.width - 32 * i11;
    one = (~m6 & m6 + 1) >>> 0;
    if (w3 >= 32 && !one) {
      continue;
    }
    if (w3 < 32 && one & 1 << w3) {
      this[i11] = arrayWiden(this[i11], w3 <<= 1);
      this.width = 32 * i11 + w3;
    }
    this.masks[i11] |= one;
    return {
      offset: i11,
      one
    };
  }
  this[this.subarrays] = array8(this.length);
  this.masks[this.subarrays] = 1;
  this.width += 8;
  return {
    offset: this.subarrays++,
    one: 1
  };
};
bitarray.prototype.copy = function(dest, src) {
  var i11, len2;
  for (i11 = 0, len2 = this.subarrays; i11 < len2; ++i11) {
    this[i11][dest] = this[i11][src];
  }
};
bitarray.prototype.truncate = function(n17) {
  var i11, len2;
  for (i11 = 0, len2 = this.subarrays; i11 < len2; ++i11) {
    for (var j6 = this.length - 1; j6 >= n17; j6--) {
      this[i11][j6] = 0;
    }
  }
  this.length = n17;
};
bitarray.prototype.zero = function(n17) {
  var i11, len2;
  for (i11 = 0, len2 = this.subarrays; i11 < len2; ++i11) {
    if (this[i11][n17]) {
      return false;
    }
  }
  return true;
};
bitarray.prototype.zeroExcept = function(n17, offset, zero) {
  var i11, len2;
  for (i11 = 0, len2 = this.subarrays; i11 < len2; ++i11) {
    if (i11 === offset ? this[i11][n17] & zero : this[i11][n17]) {
      return false;
    }
  }
  return true;
};
bitarray.prototype.zeroExceptMask = function(n17, mask) {
  var i11, len2;
  for (i11 = 0, len2 = this.subarrays; i11 < len2; ++i11) {
    if (this[i11][n17] & mask[i11]) {
      return false;
    }
  }
  return true;
};
bitarray.prototype.only = function(n17, offset, one) {
  var i11, len2;
  for (i11 = 0, len2 = this.subarrays; i11 < len2; ++i11) {
    if (this[i11][n17] != (i11 === offset ? one : 0)) {
      return false;
    }
  }
  return true;
};
bitarray.prototype.onlyExcept = function(n17, offset, zero, onlyOffset, onlyOne) {
  var mask;
  var i11, len2;
  for (i11 = 0, len2 = this.subarrays; i11 < len2; ++i11) {
    mask = this[i11][n17];
    if (i11 === offset)
      mask = (mask & zero) >>> 0;
    if (mask != (i11 === onlyOffset ? onlyOne : 0)) {
      return false;
    }
  }
  return true;
};
var array_default = {
  array8: arrayUntyped,
  array16: arrayUntyped,
  array32: arrayUntyped,
  arrayLengthen: arrayLengthenUntyped,
  arrayWiden: arrayWidenUntyped,
  bitarray
};

// node_modules/crossfilter2/src/filter.js
var filterExact = (bisect2, value) => {
  return function(values) {
    var n17 = values.length;
    return [bisect2.left(values, value, 0, n17), bisect2.right(values, value, 0, n17)];
  };
};
var filterRange = (bisect2, range2) => {
  var min = range2[0], max = range2[1];
  return function(values) {
    var n17 = values.length;
    return [bisect2.left(values, min, 0, n17), bisect2.left(values, max, 0, n17)];
  };
};
var filterAll = (values) => {
  return [0, values.length];
};
var filter_default = {
  filterExact,
  filterRange,
  filterAll
};

// node_modules/crossfilter2/src/identity.js
var identity_default = (d13) => {
  return d13;
};

// node_modules/crossfilter2/src/null.js
var null_default = () => {
  return null;
};

// node_modules/crossfilter2/src/zero.js
var zero_default = () => {
  return 0;
};

// node_modules/crossfilter2/src/heap.js
function heap_by(f6) {
  function heap(a13, lo, hi) {
    var n17 = hi - lo, i11 = (n17 >>> 1) + 1;
    while (--i11 > 0) sift(a13, i11, n17, lo);
    return a13;
  }
  function sort(a13, lo, hi) {
    var n17 = hi - lo, t23;
    while (--n17 > 0) t23 = a13[lo], a13[lo] = a13[lo + n17], a13[lo + n17] = t23, sift(a13, 1, n17, lo);
    return a13;
  }
  function sift(a13, i11, n17, lo) {
    var d13 = a13[--lo + i11], x3 = f6(d13), child;
    while ((child = i11 << 1) <= n17) {
      if (child < n17 && f6(a13[lo + child]) > f6(a13[lo + child + 1])) child++;
      if (x3 <= f6(a13[lo + child])) break;
      a13[lo + i11] = a13[lo + child];
      i11 = child;
    }
    a13[lo + i11] = d13;
  }
  heap.sort = sort;
  return heap;
}
var h3 = heap_by(identity_default);
h3.by = heap_by;
var heap_default = h3;

// node_modules/crossfilter2/src/heapselect.js
function heapselect_by(f6) {
  var heap = heap_default.by(f6);
  function heapselect(a13, lo, hi, k5) {
    var queue = new Array(k5 = Math.min(hi - lo, k5)), min, i11, d13;
    for (i11 = 0; i11 < k5; ++i11) queue[i11] = a13[lo++];
    heap(queue, 0, k5);
    if (lo < hi) {
      min = f6(queue[0]);
      do {
        if (f6(d13 = a13[lo]) > min) {
          queue[0] = d13;
          min = f6(heap(queue, 0, k5)[0]);
        }
      } while (++lo < hi);
    }
    return queue;
  }
  return heapselect;
}
var h4 = heapselect_by(identity_default);
h4.by = heapselect_by;
var heapselect_default = h4;

// node_modules/crossfilter2/src/bisect.js
function bisect_by(f6) {
  function bisectLeft(a13, x3, lo, hi) {
    while (lo < hi) {
      var mid = lo + hi >>> 1;
      if (f6(a13[mid]) < x3) lo = mid + 1;
      else hi = mid;
    }
    return lo;
  }
  function bisectRight(a13, x3, lo, hi) {
    while (lo < hi) {
      var mid = lo + hi >>> 1;
      if (x3 < f6(a13[mid])) hi = mid;
      else lo = mid + 1;
    }
    return lo;
  }
  bisectRight.right = bisectRight;
  bisectRight.left = bisectLeft;
  return bisectRight;
}
var bisect = bisect_by(identity_default);
bisect.by = bisect_by;
var bisect_default = bisect;

// node_modules/crossfilter2/src/permute.js
var permute_default = (array, index2, deep) => {
  for (var i11 = 0, n17 = index2.length, copy4 = deep ? JSON.parse(JSON.stringify(array)) : new Array(n17); i11 < n17; ++i11) {
    copy4[i11] = array[index2[i11]];
  }
  return copy4;
};

// node_modules/crossfilter2/src/reduce.js
var reduceIncrement = (p5) => {
  return p5 + 1;
};
var reduceDecrement = (p5) => {
  return p5 - 1;
};
var reduceAdd = (f6) => {
  return function(p5, v3) {
    return p5 + +f6(v3);
  };
};
var reduceSubtract = (f6) => {
  return function(p5, v3) {
    return p5 - f6(v3);
  };
};
var reduce_default = {
  reduceIncrement,
  reduceDecrement,
  reduceAdd,
  reduceSubtract
};

// node_modules/@ranfdev/deepobj/dist/deepobj.m.js
function deepobj_m_default(t23, e36, i11, n17, r14) {
  for (r14 in n17 = (i11 = i11.split(".")).splice(-1, 1), i11) e36 = e36[i11[r14]] = e36[i11[r14]] || {};
  return t23(e36, n17);
}

// node_modules/crossfilter2/src/result.js
var get2 = (obj, prop) => {
  const value = obj[prop];
  return typeof value === "function" ? value.call(obj) : value;
};
var reg = /\[([\w\d]+)\]/g;
var result_default = (obj, path) => {
  return deepobj_m_default(get2, obj, path.replace(reg, ".$1"));
};

// node_modules/crossfilter2/src/index.js
var REMOVED_INDEX = -1;
crossfilter.heap = heap_default;
crossfilter.heapselect = heapselect_default;
crossfilter.bisect = bisect_default;
crossfilter.permute = permute_default;
var src_default = crossfilter;
function crossfilter() {
  var crossfilter2 = {
    add: add3,
    remove: removeData,
    dimension,
    groupAll,
    size: size2,
    all,
    allFiltered,
    onChange,
    isElementFiltered
  };
  var data = [], n17 = 0, filters, filterListeners = [], dataListeners = [], removeDataListeners = [], callbacks2 = [];
  filters = new array_default.bitarray(0);
  function add3(newData) {
    var n0 = n17, n1 = newData.length;
    if (n1) {
      data = data.concat(newData);
      filters.lengthen(n17 += n1);
      dataListeners.forEach(function(l6) {
        l6(newData, n0, n1);
      });
      triggerOnChange("dataAdded");
    }
    return crossfilter2;
  }
  function removeData(predicate) {
    var newIndex = new Array(n17), removed = [], usePred = typeof predicate === "function", shouldRemove = function(i11) {
      return usePred ? predicate(data[i11], i11) : filters.zero(i11);
    };
    for (var index1 = 0, index2 = 0; index1 < n17; ++index1) {
      if (shouldRemove(index1)) {
        removed.push(index1);
        newIndex[index1] = REMOVED_INDEX;
      } else {
        newIndex[index1] = index2++;
      }
    }
    filterListeners.forEach(function(l6) {
      l6(-1, -1, [], removed, true);
    });
    removeDataListeners.forEach(function(l6) {
      l6(newIndex);
    });
    for (var index3 = 0, index4 = 0; index3 < n17; ++index3) {
      if (newIndex[index3] !== REMOVED_INDEX) {
        if (index3 !== index4) filters.copy(index4, index3), data[index4] = data[index3];
        ++index4;
      }
    }
    data.length = n17 = index4;
    filters.truncate(index4);
    triggerOnChange("dataRemoved");
  }
  function maskForDimensions(dimensions) {
    var n18, d13, len2, id, mask = Array(filters.subarrays);
    for (n18 = 0; n18 < filters.subarrays; n18++) {
      mask[n18] = ~0;
    }
    for (d13 = 0, len2 = dimensions.length; d13 < len2; d13++) {
      id = dimensions[d13].id();
      mask[id >> 7] &= ~(1 << (id & 63));
    }
    return mask;
  }
  function isElementFiltered(i11, ignore_dimensions) {
    var mask = maskForDimensions(ignore_dimensions || []);
    return filters.zeroExceptMask(i11, mask);
  }
  function dimension(value, iterable) {
    if (typeof value === "string") {
      var accessorPath = value;
      value = function(d13) {
        return result_default(d13, accessorPath);
      };
    }
    var dimension2 = {
      filter,
      filterExact: filterExact2,
      filterRange: filterRange2,
      filterFunction,
      filterAll: filterAll2,
      currentFilter,
      hasCurrentFilter,
      top,
      bottom,
      group,
      groupAll: groupAll2,
      dispose,
      remove: dispose,
      // for backwards-compatibility
      accessor: value,
      id: function() {
        return id;
      }
    };
    var one, zero, offset, id, values, index2, newValues, newIndex, iterablesIndexCount, iterablesIndexFilterStatus, iterablesEmptyRows = [], sortRange = function(n18) {
      return cr_range(n18).sort(function(A5, B4) {
        var a13 = newValues[A5], b5 = newValues[B4];
        return a13 < b5 ? -1 : a13 > b5 ? 1 : A5 - B4;
      });
    }, refilter = filter_default.filterAll, refilterFunction, filterValue, filterValuePresent, indexListeners = [], dimensionGroups = [], lo0 = 0, hi0 = 0, t23 = 0, k5;
    dataListeners.unshift(preAdd);
    dataListeners.push(postAdd);
    removeDataListeners.push(removeData2);
    var tmp = filters.add();
    offset = tmp.offset;
    one = tmp.one;
    zero = ~one;
    id = offset << 7 | Math.log(one) / Math.log(2);
    preAdd(data, 0, n17);
    postAdd(data, 0, n17);
    function preAdd(newData, n0, n1) {
      var newIterablesIndexCount, newIterablesIndexFilterStatus;
      if (iterable) {
        t23 = 0;
        j6 = 0;
        k5 = [];
        for (var i0 = 0; i0 < newData.length; i0++) {
          for (j6 = 0, k5 = value(newData[i0]); j6 < k5.length; j6++) {
            t23++;
          }
        }
        newValues = [];
        newIterablesIndexCount = cr_range(newData.length);
        newIterablesIndexFilterStatus = cr_index(t23, 1);
        var unsortedIndex = cr_range(t23);
        for (var l6 = 0, index1 = 0; index1 < newData.length; index1++) {
          k5 = value(newData[index1]);
          if (!k5.length) {
            newIterablesIndexCount[index1] = 0;
            iterablesEmptyRows.push(index1 + n0);
            continue;
          }
          newIterablesIndexCount[index1] = k5.length;
          for (j6 = 0; j6 < k5.length; j6++) {
            newValues.push(k5[j6]);
            unsortedIndex[l6] = index1;
            l6++;
          }
        }
        var sortMap = sortRange(t23);
        newValues = permute_default(newValues, sortMap);
        newIndex = permute_default(unsortedIndex, sortMap);
      } else {
        newValues = newData.map(value);
        newIndex = sortRange(n1);
        newValues = permute_default(newValues, newIndex);
      }
      var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1];
      var index22, index3, index4;
      if (iterable) {
        n1 = t23;
        if (refilterFunction) {
          for (index22 = 0; index22 < n1; ++index22) {
            if (!refilterFunction(newValues[index22], index22)) {
              if (--newIterablesIndexCount[newIndex[index22]] === 0) {
                filters[offset][newIndex[index22] + n0] |= one;
              }
              newIterablesIndexFilterStatus[index22] = 1;
            }
          }
        } else {
          for (index3 = 0; index3 < lo1; ++index3) {
            if (--newIterablesIndexCount[newIndex[index3]] === 0) {
              filters[offset][newIndex[index3] + n0] |= one;
            }
            newIterablesIndexFilterStatus[index3] = 1;
          }
          for (index4 = hi1; index4 < n1; ++index4) {
            if (--newIterablesIndexCount[newIndex[index4]] === 0) {
              filters[offset][newIndex[index4] + n0] |= one;
            }
            newIterablesIndexFilterStatus[index4] = 1;
          }
        }
      } else {
        if (refilterFunction) {
          for (index22 = 0; index22 < n1; ++index22) {
            if (!refilterFunction(newValues[index22], index22)) {
              filters[offset][newIndex[index22] + n0] |= one;
            }
          }
        } else {
          for (index3 = 0; index3 < lo1; ++index3) {
            filters[offset][newIndex[index3] + n0] |= one;
          }
          for (index4 = hi1; index4 < n1; ++index4) {
            filters[offset][newIndex[index4] + n0] |= one;
          }
        }
      }
      if (!n0) {
        values = newValues;
        index2 = newIndex;
        iterablesIndexCount = newIterablesIndexCount;
        iterablesIndexFilterStatus = newIterablesIndexFilterStatus;
        lo0 = lo1;
        hi0 = hi1;
        return;
      }
      var oldValues = values, oldIndex = index2, oldIterablesIndexFilterStatus = iterablesIndexFilterStatus, old_n0, i1 = 0;
      i0 = 0;
      if (iterable) {
        old_n0 = n0;
        n0 = oldValues.length;
        n1 = t23;
      }
      values = iterable ? new Array(n0 + n1) : new Array(n17);
      index2 = iterable ? new Array(n0 + n1) : cr_index(n17, n17);
      if (iterable) iterablesIndexFilterStatus = cr_index(n0 + n1, 1);
      if (iterable) {
        var oldiiclength = iterablesIndexCount.length;
        iterablesIndexCount = array_default.arrayLengthen(iterablesIndexCount, n17);
        for (var j6 = 0; j6 + oldiiclength < n17; j6++) {
          iterablesIndexCount[j6 + oldiiclength] = newIterablesIndexCount[j6];
        }
      }
      var index5 = 0;
      for (; i0 < n0 && i1 < n1; ++index5) {
        if (oldValues[i0] < newValues[i1]) {
          values[index5] = oldValues[i0];
          if (iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];
          index2[index5] = oldIndex[i0++];
        } else {
          values[index5] = newValues[i1];
          if (iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];
          index2[index5] = newIndex[i1++] + (iterable ? old_n0 : n0);
        }
      }
      for (; i0 < n0; ++i0, ++index5) {
        values[index5] = oldValues[i0];
        if (iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];
        index2[index5] = oldIndex[i0];
      }
      for (; i1 < n1; ++i1, ++index5) {
        values[index5] = newValues[i1];
        if (iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];
        index2[index5] = newIndex[i1] + (iterable ? old_n0 : n0);
      }
      bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];
    }
    function postAdd(newData, n0, n1) {
      indexListeners.forEach(function(l6) {
        l6(newValues, newIndex, n0, n1);
      });
      newValues = newIndex = null;
    }
    function removeData2(reIndex) {
      if (iterable) {
        for (var i0 = 0, i1 = 0; i0 < iterablesEmptyRows.length; i0++) {
          if (reIndex[iterablesEmptyRows[i0]] !== REMOVED_INDEX) {
            iterablesEmptyRows[i1] = reIndex[iterablesEmptyRows[i0]];
            i1++;
          }
        }
        iterablesEmptyRows.length = i1;
        for (i0 = 0, i1 = 0; i0 < n17; i0++) {
          if (reIndex[i0] !== REMOVED_INDEX) {
            if (i1 !== i0) iterablesIndexCount[i1] = iterablesIndexCount[i0];
            i1++;
          }
        }
        iterablesIndexCount = iterablesIndexCount.slice(0, i1);
      }
      var n0 = values.length;
      for (var i11 = 0, j6 = 0, oldDataIndex; i11 < n0; ++i11) {
        oldDataIndex = index2[i11];
        if (reIndex[oldDataIndex] !== REMOVED_INDEX) {
          if (i11 !== j6) values[j6] = values[i11];
          index2[j6] = reIndex[oldDataIndex];
          if (iterable) {
            iterablesIndexFilterStatus[j6] = iterablesIndexFilterStatus[i11];
          }
          ++j6;
        }
      }
      values.length = j6;
      if (iterable) iterablesIndexFilterStatus = iterablesIndexFilterStatus.slice(0, j6);
      while (j6 < n0) index2[j6++] = 0;
      var bounds = refilter(values);
      lo0 = bounds[0], hi0 = bounds[1];
    }
    function filterIndexBounds(bounds) {
      var lo1 = bounds[0], hi1 = bounds[1];
      if (refilterFunction) {
        refilterFunction = null;
        filterIndexFunction(function(d13, i12) {
          return lo1 <= i12 && i12 < hi1;
        }, bounds[0] === 0 && bounds[1] === values.length);
        lo0 = lo1;
        hi0 = hi1;
        return dimension2;
      }
      var i11, j6, k6, added = [], removed = [], valueIndexAdded = [], valueIndexRemoved = [];
      if (lo1 < lo0) {
        for (i11 = lo1, j6 = Math.min(lo0, hi1); i11 < j6; ++i11) {
          added.push(index2[i11]);
          valueIndexAdded.push(i11);
        }
      } else if (lo1 > lo0) {
        for (i11 = lo0, j6 = Math.min(lo1, hi0); i11 < j6; ++i11) {
          removed.push(index2[i11]);
          valueIndexRemoved.push(i11);
        }
      }
      if (hi1 > hi0) {
        for (i11 = Math.max(lo1, hi0), j6 = hi1; i11 < j6; ++i11) {
          added.push(index2[i11]);
          valueIndexAdded.push(i11);
        }
      } else if (hi1 < hi0) {
        for (i11 = Math.max(lo0, hi1), j6 = hi0; i11 < j6; ++i11) {
          removed.push(index2[i11]);
          valueIndexRemoved.push(i11);
        }
      }
      if (!iterable) {
        for (i11 = 0; i11 < added.length; i11++) {
          filters[offset][added[i11]] ^= one;
        }
        for (i11 = 0; i11 < removed.length; i11++) {
          filters[offset][removed[i11]] ^= one;
        }
      } else {
        var newAdded = [];
        var newRemoved = [];
        for (i11 = 0; i11 < added.length; i11++) {
          iterablesIndexCount[added[i11]]++;
          iterablesIndexFilterStatus[valueIndexAdded[i11]] = 0;
          if (iterablesIndexCount[added[i11]] === 1) {
            filters[offset][added[i11]] ^= one;
            newAdded.push(added[i11]);
          }
        }
        for (i11 = 0; i11 < removed.length; i11++) {
          iterablesIndexCount[removed[i11]]--;
          iterablesIndexFilterStatus[valueIndexRemoved[i11]] = 1;
          if (iterablesIndexCount[removed[i11]] === 0) {
            filters[offset][removed[i11]] ^= one;
            newRemoved.push(removed[i11]);
          }
        }
        added = newAdded;
        removed = newRemoved;
        if (refilter === filter_default.filterAll) {
          for (i11 = 0; i11 < iterablesEmptyRows.length; i11++) {
            if (filters[offset][k6 = iterablesEmptyRows[i11]] & one) {
              filters[offset][k6] ^= one;
              added.push(k6);
            }
          }
        } else {
          for (i11 = 0; i11 < iterablesEmptyRows.length; i11++) {
            if (!(filters[offset][k6 = iterablesEmptyRows[i11]] & one)) {
              filters[offset][k6] ^= one;
              removed.push(k6);
            }
          }
        }
      }
      lo0 = lo1;
      hi0 = hi1;
      filterListeners.forEach(function(l6) {
        l6(one, offset, added, removed);
      });
      triggerOnChange("filtered");
      return dimension2;
    }
    function filter(range2) {
      return range2 == null ? filterAll2() : Array.isArray(range2) ? filterRange2(range2) : typeof range2 === "function" ? filterFunction(range2) : filterExact2(range2);
    }
    function filterExact2(value2) {
      filterValue = value2;
      filterValuePresent = true;
      return filterIndexBounds((refilter = filter_default.filterExact(bisect_default, value2))(values));
    }
    function filterRange2(range2) {
      filterValue = range2;
      filterValuePresent = true;
      return filterIndexBounds((refilter = filter_default.filterRange(bisect_default, range2))(values));
    }
    function filterAll2() {
      filterValue = void 0;
      filterValuePresent = false;
      return filterIndexBounds((refilter = filter_default.filterAll)(values));
    }
    function filterFunction(f6) {
      filterValue = f6;
      filterValuePresent = true;
      refilterFunction = f6;
      refilter = filter_default.filterAll;
      filterIndexFunction(f6, false);
      var bounds = refilter(values);
      lo0 = bounds[0], hi0 = bounds[1];
      return dimension2;
    }
    function filterIndexFunction(f6, filterAll3) {
      var i11, k6, x3, added = [], removed = [], valueIndexAdded = [], valueIndexRemoved = [], indexLength = values.length;
      if (!iterable) {
        for (i11 = 0; i11 < indexLength; ++i11) {
          if (!(filters[offset][k6 = index2[i11]] & one) ^ !!(x3 = f6(values[i11], i11))) {
            if (x3) added.push(k6);
            else removed.push(k6);
          }
        }
      }
      if (iterable) {
        for (i11 = 0; i11 < indexLength; ++i11) {
          if (f6(values[i11], i11)) {
            added.push(index2[i11]);
            valueIndexAdded.push(i11);
          } else {
            removed.push(index2[i11]);
            valueIndexRemoved.push(i11);
          }
        }
      }
      if (!iterable) {
        for (i11 = 0; i11 < added.length; i11++) {
          if (filters[offset][added[i11]] & one) filters[offset][added[i11]] &= zero;
        }
        for (i11 = 0; i11 < removed.length; i11++) {
          if (!(filters[offset][removed[i11]] & one)) filters[offset][removed[i11]] |= one;
        }
      } else {
        var newAdded = [];
        var newRemoved = [];
        for (i11 = 0; i11 < added.length; i11++) {
          if (iterablesIndexFilterStatus[valueIndexAdded[i11]] === 1) {
            iterablesIndexCount[added[i11]]++;
            iterablesIndexFilterStatus[valueIndexAdded[i11]] = 0;
            if (iterablesIndexCount[added[i11]] === 1) {
              filters[offset][added[i11]] ^= one;
              newAdded.push(added[i11]);
            }
          }
        }
        for (i11 = 0; i11 < removed.length; i11++) {
          if (iterablesIndexFilterStatus[valueIndexRemoved[i11]] === 0) {
            iterablesIndexCount[removed[i11]]--;
            iterablesIndexFilterStatus[valueIndexRemoved[i11]] = 1;
            if (iterablesIndexCount[removed[i11]] === 0) {
              filters[offset][removed[i11]] ^= one;
              newRemoved.push(removed[i11]);
            }
          }
        }
        added = newAdded;
        removed = newRemoved;
        if (filterAll3) {
          for (i11 = 0; i11 < iterablesEmptyRows.length; i11++) {
            if (filters[offset][k6 = iterablesEmptyRows[i11]] & one) {
              filters[offset][k6] ^= one;
              added.push(k6);
            }
          }
        } else {
          for (i11 = 0; i11 < iterablesEmptyRows.length; i11++) {
            if (!(filters[offset][k6 = iterablesEmptyRows[i11]] & one)) {
              filters[offset][k6] ^= one;
              removed.push(k6);
            }
          }
        }
      }
      filterListeners.forEach(function(l6) {
        l6(one, offset, added, removed);
      });
      triggerOnChange("filtered");
    }
    function currentFilter() {
      return filterValue;
    }
    function hasCurrentFilter() {
      return filterValuePresent;
    }
    function top(k6, top_offset) {
      var array = [], i11 = hi0, j6, toSkip = 0;
      if (top_offset && top_offset > 0) toSkip = top_offset;
      while (--i11 >= lo0 && k6 > 0) {
        if (filters.zero(j6 = index2[i11])) {
          if (toSkip > 0) {
            --toSkip;
          } else {
            array.push(data[j6]);
            --k6;
          }
        }
      }
      if (iterable) {
        for (i11 = 0; i11 < iterablesEmptyRows.length && k6 > 0; i11++) {
          if (filters.zero(j6 = iterablesEmptyRows[i11])) {
            if (toSkip > 0) {
              --toSkip;
            } else {
              array.push(data[j6]);
              --k6;
            }
          }
        }
      }
      return array;
    }
    function bottom(k6, bottom_offset) {
      var array = [], i11, j6, toSkip = 0;
      if (bottom_offset && bottom_offset > 0) toSkip = bottom_offset;
      if (iterable) {
        for (i11 = 0; i11 < iterablesEmptyRows.length && k6 > 0; i11++) {
          if (filters.zero(j6 = iterablesEmptyRows[i11])) {
            if (toSkip > 0) {
              --toSkip;
            } else {
              array.push(data[j6]);
              --k6;
            }
          }
        }
      }
      i11 = lo0;
      while (i11 < hi0 && k6 > 0) {
        if (filters.zero(j6 = index2[i11])) {
          if (toSkip > 0) {
            --toSkip;
          } else {
            array.push(data[j6]);
            --k6;
          }
        }
        i11++;
      }
      return array;
    }
    function group(key) {
      var group2 = {
        top: top2,
        all: all2,
        reduce,
        reduceCount,
        reduceSum,
        order,
        orderNatural,
        size: size3,
        dispose: dispose2,
        remove: dispose2
        // for backwards-compatibility
      };
      dimensionGroups.push(group2);
      var groups, groupIndex, groupWidth = 8, groupCapacity = capacity(groupWidth), k6 = 0, select, heap, reduceAdd2, reduceRemove, reduceInitial, update = null_default, reset = null_default, resetNeeded = true, groupAll3 = key === null_default, n0old;
      if (arguments.length < 1) key = identity_default;
      filterListeners.push(update);
      indexListeners.push(add4);
      removeDataListeners.push(removeData3);
      add4(values, index2, 0, n17);
      function add4(newValues2, newIndex2, n0, n1) {
        if (iterable) {
          n0old = n0;
          n0 = values.length - newValues2.length;
          n1 = newValues2.length;
        }
        var oldGroups = groups, reIndex = iterable ? [] : cr_index(k6, groupCapacity), add5 = reduceAdd2, remove2 = reduceRemove, initial = reduceInitial, k0 = k6, i0 = 0, i1 = 0, j6, g0, x0, x1, g2, x3;
        if (resetNeeded) add5 = initial = null_default;
        if (resetNeeded) remove2 = initial = null_default;
        groups = new Array(k6), k6 = 0;
        if (iterable) {
          groupIndex = k0 ? groupIndex : [];
        } else {
          groupIndex = k0 > 1 ? array_default.arrayLengthen(groupIndex, n17) : cr_index(n17, groupCapacity);
        }
        if (k0) x0 = (g0 = oldGroups[0]).key;
        while (i1 < n1 && !((x1 = key(newValues2[i1])) >= x1)) ++i1;
        while (i1 < n1) {
          if (g0 && x0 <= x1) {
            g2 = g0, x3 = x0;
            reIndex[i0] = k6;
            g0 = oldGroups[++i0];
            if (g0) x0 = g0.key;
          } else {
            g2 = { key: x1, value: initial() }, x3 = x1;
          }
          groups[k6] = g2;
          while (x1 <= x3) {
            j6 = newIndex2[i1] + (iterable ? n0old : n0);
            if (iterable) {
              if (groupIndex[j6]) {
                groupIndex[j6].push(k6);
              } else {
                groupIndex[j6] = [k6];
              }
            } else {
              groupIndex[j6] = k6;
            }
            g2.value = add5(g2.value, data[j6], true);
            if (!filters.zeroExcept(j6, offset, zero)) g2.value = remove2(g2.value, data[j6], false);
            if (++i1 >= n1) break;
            x1 = key(newValues2[i1]);
          }
          groupIncrement();
        }
        while (i0 < k0) {
          groups[reIndex[i0] = k6] = oldGroups[i0++];
          groupIncrement();
        }
        if (iterable) {
          for (var index1 = 0; index1 < n17; index1++) {
            if (!groupIndex[index1]) {
              groupIndex[index1] = [];
            }
          }
        }
        if (k6 > i0) {
          if (iterable) {
            for (i0 = 0; i0 < n0old; ++i0) {
              for (index1 = 0; index1 < groupIndex[i0].length; index1++) {
                groupIndex[i0][index1] = reIndex[groupIndex[i0][index1]];
              }
            }
          } else {
            for (i0 = 0; i0 < n0; ++i0) {
              groupIndex[i0] = reIndex[groupIndex[i0]];
            }
          }
        }
        j6 = filterListeners.indexOf(update);
        if (k6 > 1 || iterable) {
          update = updateMany;
          reset = resetMany;
        } else {
          if (!k6 && groupAll3) {
            k6 = 1;
            groups = [{ key: null, value: initial() }];
          }
          if (k6 === 1) {
            update = updateOne;
            reset = resetOne;
          } else {
            update = null_default;
            reset = null_default;
          }
          groupIndex = null;
        }
        filterListeners[j6] = update;
        function groupIncrement() {
          if (iterable) {
            k6++;
            return;
          }
          if (++k6 === groupCapacity) {
            reIndex = array_default.arrayWiden(reIndex, groupWidth <<= 1);
            groupIndex = array_default.arrayWiden(groupIndex, groupWidth);
            groupCapacity = capacity(groupWidth);
          }
        }
      }
      function removeData3(reIndex) {
        if (k6 > 1 || iterable) {
          var oldK = k6, oldGroups = groups, seenGroups = cr_index(oldK, oldK), i11, i0, j6;
          if (!iterable) {
            for (i11 = 0, j6 = 0; i11 < n17; ++i11) {
              if (reIndex[i11] !== REMOVED_INDEX) {
                seenGroups[groupIndex[j6] = groupIndex[i11]] = 1;
                ++j6;
              }
            }
          } else {
            for (i11 = 0, j6 = 0; i11 < n17; ++i11) {
              if (reIndex[i11] !== REMOVED_INDEX) {
                groupIndex[j6] = groupIndex[i11];
                for (i0 = 0; i0 < groupIndex[j6].length; i0++) {
                  seenGroups[groupIndex[j6][i0]] = 1;
                }
                ++j6;
              }
            }
            groupIndex = groupIndex.slice(0, j6);
          }
          groups = [], k6 = 0;
          for (i11 = 0; i11 < oldK; ++i11) {
            if (seenGroups[i11]) {
              seenGroups[i11] = k6++;
              groups.push(oldGroups[i11]);
            }
          }
          if (k6 > 1 || iterable) {
            if (!iterable) {
              for (i11 = 0; i11 < j6; ++i11) groupIndex[i11] = seenGroups[groupIndex[i11]];
            } else {
              for (i11 = 0; i11 < j6; ++i11) {
                for (i0 = 0; i0 < groupIndex[i11].length; ++i0) {
                  groupIndex[i11][i0] = seenGroups[groupIndex[i11][i0]];
                }
              }
            }
          } else {
            groupIndex = null;
          }
          filterListeners[filterListeners.indexOf(update)] = k6 > 1 || iterable ? (reset = resetMany, update = updateMany) : k6 === 1 ? (reset = resetOne, update = updateOne) : reset = update = null_default;
        } else if (k6 === 1) {
          if (groupAll3) return;
          for (var index3 = 0; index3 < n17; ++index3) if (reIndex[index3] !== REMOVED_INDEX) return;
          groups = [], k6 = 0;
          filterListeners[filterListeners.indexOf(update)] = update = reset = null_default;
        }
      }
      function updateMany(filterOne, filterOffset, added, removed, notFilter) {
        if (filterOne === one && filterOffset === offset || resetNeeded) return;
        var i11, j6, k7, n18, g2;
        if (iterable) {
          for (i11 = 0, n18 = added.length; i11 < n18; ++i11) {
            if (filters.zeroExcept(k7 = added[i11], offset, zero)) {
              for (j6 = 0; j6 < groupIndex[k7].length; j6++) {
                g2 = groups[groupIndex[k7][j6]];
                g2.value = reduceAdd2(g2.value, data[k7], false, j6);
              }
            }
          }
          for (i11 = 0, n18 = removed.length; i11 < n18; ++i11) {
            if (filters.onlyExcept(k7 = removed[i11], offset, zero, filterOffset, filterOne)) {
              for (j6 = 0; j6 < groupIndex[k7].length; j6++) {
                g2 = groups[groupIndex[k7][j6]];
                g2.value = reduceRemove(g2.value, data[k7], notFilter, j6);
              }
            }
          }
          return;
        }
        for (i11 = 0, n18 = added.length; i11 < n18; ++i11) {
          if (filters.zeroExcept(k7 = added[i11], offset, zero)) {
            g2 = groups[groupIndex[k7]];
            g2.value = reduceAdd2(g2.value, data[k7], false);
          }
        }
        for (i11 = 0, n18 = removed.length; i11 < n18; ++i11) {
          if (filters.onlyExcept(k7 = removed[i11], offset, zero, filterOffset, filterOne)) {
            g2 = groups[groupIndex[k7]];
            g2.value = reduceRemove(g2.value, data[k7], notFilter);
          }
        }
      }
      function updateOne(filterOne, filterOffset, added, removed, notFilter) {
        if (filterOne === one && filterOffset === offset || resetNeeded) return;
        var i11, k7, n18, g2 = groups[0];
        for (i11 = 0, n18 = added.length; i11 < n18; ++i11) {
          if (filters.zeroExcept(k7 = added[i11], offset, zero)) {
            g2.value = reduceAdd2(g2.value, data[k7], false);
          }
        }
        for (i11 = 0, n18 = removed.length; i11 < n18; ++i11) {
          if (filters.onlyExcept(k7 = removed[i11], offset, zero, filterOffset, filterOne)) {
            g2.value = reduceRemove(g2.value, data[k7], notFilter);
          }
        }
      }
      function resetMany() {
        var i11, j6, g2;
        for (i11 = 0; i11 < k6; ++i11) {
          groups[i11].value = reduceInitial();
        }
        if (iterable) {
          for (i11 = 0; i11 < n17; ++i11) {
            for (j6 = 0; j6 < groupIndex[i11].length; j6++) {
              g2 = groups[groupIndex[i11][j6]];
              g2.value = reduceAdd2(g2.value, data[i11], true, j6);
            }
          }
          for (i11 = 0; i11 < n17; ++i11) {
            if (!filters.zeroExcept(i11, offset, zero)) {
              for (j6 = 0; j6 < groupIndex[i11].length; j6++) {
                g2 = groups[groupIndex[i11][j6]];
                g2.value = reduceRemove(g2.value, data[i11], false, j6);
              }
            }
          }
          return;
        }
        for (i11 = 0; i11 < n17; ++i11) {
          g2 = groups[groupIndex[i11]];
          g2.value = reduceAdd2(g2.value, data[i11], true);
        }
        for (i11 = 0; i11 < n17; ++i11) {
          if (!filters.zeroExcept(i11, offset, zero)) {
            g2 = groups[groupIndex[i11]];
            g2.value = reduceRemove(g2.value, data[i11], false);
          }
        }
      }
      function resetOne() {
        var i11, g2 = groups[0];
        g2.value = reduceInitial();
        for (i11 = 0; i11 < n17; ++i11) {
          g2.value = reduceAdd2(g2.value, data[i11], true);
        }
        for (i11 = 0; i11 < n17; ++i11) {
          if (!filters.zeroExcept(i11, offset, zero)) {
            g2.value = reduceRemove(g2.value, data[i11], false);
          }
        }
      }
      function all2() {
        if (resetNeeded) reset(), resetNeeded = false;
        return groups;
      }
      function top2(k7) {
        var top3 = select(all2(), 0, groups.length, k7);
        return heap.sort(top3, 0, top3.length);
      }
      function reduce(add5, remove2, initial) {
        reduceAdd2 = add5;
        reduceRemove = remove2;
        reduceInitial = initial;
        resetNeeded = true;
        return group2;
      }
      function reduceCount() {
        return reduce(reduce_default.reduceIncrement, reduce_default.reduceDecrement, zero_default);
      }
      function reduceSum(value2) {
        return reduce(reduce_default.reduceAdd(value2), reduce_default.reduceSubtract(value2), zero_default);
      }
      function order(value2) {
        select = heapselect_default.by(valueOf);
        heap = heap_default.by(valueOf);
        function valueOf(d13) {
          return value2(d13.value);
        }
        return group2;
      }
      function orderNatural() {
        return order(identity_default);
      }
      function size3() {
        return k6;
      }
      function dispose2() {
        var i11 = filterListeners.indexOf(update);
        if (i11 >= 0) filterListeners.splice(i11, 1);
        i11 = indexListeners.indexOf(add4);
        if (i11 >= 0) indexListeners.splice(i11, 1);
        i11 = removeDataListeners.indexOf(removeData3);
        if (i11 >= 0) removeDataListeners.splice(i11, 1);
        i11 = dimensionGroups.indexOf(group2);
        if (i11 >= 0) dimensionGroups.splice(i11, 1);
        return group2;
      }
      return reduceCount().orderNatural();
    }
    function groupAll2() {
      var g2 = group(null_default), all2 = g2.all;
      delete g2.all;
      delete g2.top;
      delete g2.order;
      delete g2.orderNatural;
      delete g2.size;
      g2.value = function() {
        return all2()[0].value;
      };
      return g2;
    }
    function dispose() {
      dimensionGroups.forEach(function(group2) {
        group2.dispose();
      });
      var i11 = dataListeners.indexOf(preAdd);
      if (i11 >= 0) dataListeners.splice(i11, 1);
      i11 = dataListeners.indexOf(postAdd);
      if (i11 >= 0) dataListeners.splice(i11, 1);
      i11 = removeDataListeners.indexOf(removeData2);
      if (i11 >= 0) removeDataListeners.splice(i11, 1);
      filters.masks[offset] &= zero;
      return filterAll2();
    }
    return dimension2;
  }
  function groupAll() {
    var group = {
      reduce,
      reduceCount,
      reduceSum,
      value,
      dispose,
      remove: dispose
      // for backwards-compatibility
    };
    var reduceValue, reduceAdd2, reduceRemove, reduceInitial, resetNeeded = true;
    filterListeners.push(update);
    dataListeners.push(add4);
    add4(data, 0, n17);
    function add4(newData, n0) {
      var i11;
      if (resetNeeded) return;
      for (i11 = n0; i11 < n17; ++i11) {
        reduceValue = reduceAdd2(reduceValue, data[i11], true);
        if (!filters.zero(i11)) {
          reduceValue = reduceRemove(reduceValue, data[i11], false);
        }
      }
    }
    function update(filterOne, filterOffset, added, removed, notFilter) {
      var i11, k5, n18;
      if (resetNeeded) return;
      for (i11 = 0, n18 = added.length; i11 < n18; ++i11) {
        if (filters.zero(k5 = added[i11])) {
          reduceValue = reduceAdd2(reduceValue, data[k5], notFilter);
        }
      }
      for (i11 = 0, n18 = removed.length; i11 < n18; ++i11) {
        if (filters.only(k5 = removed[i11], filterOffset, filterOne)) {
          reduceValue = reduceRemove(reduceValue, data[k5], notFilter);
        }
      }
    }
    function reset() {
      var i11;
      reduceValue = reduceInitial();
      for (i11 = 0; i11 < n17; ++i11) {
        reduceValue = reduceAdd2(reduceValue, data[i11], true);
        if (!filters.zero(i11)) {
          reduceValue = reduceRemove(reduceValue, data[i11], false);
        }
      }
    }
    function reduce(add5, remove2, initial) {
      reduceAdd2 = add5;
      reduceRemove = remove2;
      reduceInitial = initial;
      resetNeeded = true;
      return group;
    }
    function reduceCount() {
      return reduce(reduce_default.reduceIncrement, reduce_default.reduceDecrement, zero_default);
    }
    function reduceSum(value2) {
      return reduce(reduce_default.reduceAdd(value2), reduce_default.reduceSubtract(value2), zero_default);
    }
    function value() {
      if (resetNeeded) reset(), resetNeeded = false;
      return reduceValue;
    }
    function dispose() {
      var i11 = filterListeners.indexOf(update);
      if (i11 >= 0) filterListeners.splice(i11, 1);
      i11 = dataListeners.indexOf(add4);
      if (i11 >= 0) dataListeners.splice(i11, 1);
      return group;
    }
    return reduceCount();
  }
  function size2() {
    return n17;
  }
  function all() {
    return data;
  }
  function allFiltered(ignore_dimensions) {
    var array = [], i11 = 0, mask = maskForDimensions(ignore_dimensions || []);
    for (i11 = 0; i11 < n17; i11++) {
      if (filters.zeroExceptMask(i11, mask)) {
        array.push(data[i11]);
      }
    }
    return array;
  }
  function onChange(cb) {
    if (typeof cb !== "function") {
      console.warn("onChange callback parameter must be a function!");
      return;
    }
    callbacks2.push(cb);
    return function() {
      callbacks2.splice(callbacks2.indexOf(cb), 1);
    };
  }
  function triggerOnChange(eventName) {
    for (var i11 = 0; i11 < callbacks2.length; i11++) {
      callbacks2[i11](eventName);
    }
  }
  return arguments.length ? add3(arguments[0]) : crossfilter2;
}
function cr_index(n17, m6) {
  return (m6 < 257 ? array_default.array8 : m6 < 65537 ? array_default.array16 : array_default.array32)(n17);
}
function cr_range(n17) {
  var range2 = cr_index(n17, n17);
  for (var i11 = -1; ++i11 < n17; ) range2[i11] = i11;
  return range2;
}
function capacity(w3) {
  return w3 === 8 ? 256 : w3 === 16 ? 65536 : 4294967296;
}

// node_modules/@cosmograph/cosmograph/modules/cosmograph/crossfilter.js
var i8 = class {
  constructor(s15, i11, e36) {
    this._crossfilter = s15, this._selfRemove = i11, this._syncUp = e36;
  }
  setAccessor(s15) {
    const { _crossfilter: i11 } = this;
    this.dispose(), this._dimension = i11.dimension(s15);
  }
  applyFilter(s15) {
    var i11, e36;
    null === (i11 = this._dimension) || void 0 === i11 || i11.filter(s15), null === (e36 = this._syncUp) || void 0 === e36 || e36.call(this);
  }
  clear() {
    var s15, i11;
    null === (s15 = this._dimension) || void 0 === s15 || s15.filterAll(), null === (i11 = this._syncUp) || void 0 === i11 || i11.call(this);
  }
  getAllValues() {
    const { _crossfilter: s15, _dimension: i11 } = this;
    if (i11) return s15.all().map(i11.accessor);
  }
  getFilteredValues() {
    const { _crossfilter: s15, _dimension: i11 } = this;
    if (i11) return s15.allFiltered().map(i11.accessor);
  }
  getFilteredRecords() {
    return this._crossfilter.allFiltered([this._dimension]);
  }
  isActive() {
    var s15;
    return (null === (s15 = this._dimension) || void 0 === s15 ? void 0 : s15.hasCurrentFilter()) || false;
  }
  dispose() {
    var s15;
    null === (s15 = this._dimension) || void 0 === s15 || s15.dispose();
  }
  remove() {
    this.dispose(), this._selfRemove();
  }
};
var e31 = class {
  constructor(i11) {
    this._crossfilter = src_default(), this._filters = /* @__PURE__ */ new Set(), this._syncUpFunction = i11, this._crossfilter.onChange((s15) => {
      var i12, e36, t23;
      switch (s15) {
        case "filtered":
          null === (i12 = this.onFiltered) || void 0 === i12 || i12.call(this), this._filters.forEach((s16) => {
            var i13;
            null === (i13 = s16.onFiltered) || void 0 === i13 || i13.call(s16);
          });
          break;
        case "dataAdded":
          null === (e36 = this.onDataAdded) || void 0 === e36 || e36.call(this), this._filters.forEach((s16) => {
            var i13;
            null === (i13 = s16.onDataAdded) || void 0 === i13 || i13.call(s16);
          });
          break;
        case "dataRemoved":
          null === (t23 = this.onDataRemoved) || void 0 === t23 || t23.call(this), this._filters.forEach((s16) => {
            var i13;
            null === (i13 = s16.onDataRemoved) || void 0 === i13 || i13.call(s16);
          });
      }
    });
  }
  addRecords(s15) {
    const { _crossfilter: i11 } = this;
    this._records = s15, i11.remove(), i11.add(s15);
  }
  getFilteredRecords(s15) {
    const { _crossfilter: i11 } = this;
    return (null == s15 ? void 0 : s15.getFilteredRecords()) || i11.allFiltered();
  }
  addFilter(s15 = true) {
    const e36 = new i8(this._crossfilter, () => {
      this._filters.delete(e36);
    }, s15 ? this._syncUpFunction : void 0);
    return this._filters.add(e36), e36;
  }
  clearFilters() {
    this._filters.forEach((s15) => {
      s15.clear();
    });
  }
  isAnyFiltersActive(s15) {
    for (const i11 of this._filters.values()) if (i11 !== s15 && i11.isActive()) return true;
    return false;
  }
  getAllRecords() {
    return this._records;
  }
};

// node_modules/@cosmograph/cosmograph/modules/cosmograph/index.js
var h5 = class {
  constructor(s15, i11) {
    var l6;
    this._data = { nodes: [], links: [] }, this._previousData = { nodes: [], links: [] }, this._cosmographConfig = {}, this._cosmosConfig = {}, this._nodesForTopLabels = /* @__PURE__ */ new Set(), this._nodesForForcedLabels = /* @__PURE__ */ new Set(), this._trackedNodeToLabel = /* @__PURE__ */ new Map(), this._isLabelsDestroyed = false, this._svgParser = new DOMParser(), this._nodesCrossfilter = new e31(this._applyLinksFilter.bind(this)), this._linksCrossfilter = new e31(this._applyNodesFilter.bind(this)), this._nodesFilter = this._nodesCrossfilter.addFilter(false), this._linksFilter = this._linksCrossfilter.addFilter(false), this._selectedNodesFilter = this._nodesCrossfilter.addFilter(), this._isDataDifferent = () => {
      const s16 = JSON.stringify(this._data.nodes), e36 = JSON.stringify(this._previousData.nodes), o22 = JSON.stringify(this._data.links), t23 = JSON.stringify(this._previousData.links);
      return s16 !== e36 || o22 !== t23;
    }, this._onClick = (...s16) => {
      var e36, o22;
      null === (o22 = (e36 = this._cosmographConfig).onClick) || void 0 === o22 || o22.call(e36, ...s16);
    }, this._onLabelClick = (s16, e36) => {
      var o22, t23, i12;
      const n17 = null === (o22 = this._cosmos) || void 0 === o22 ? void 0 : o22.graph.getNodeById(e36.id);
      n17 && (null === (i12 = (t23 = this._cosmographConfig).onLabelClick) || void 0 === i12 || i12.call(t23, n17, s16));
    }, this._onHoveredNodeClick = (s16) => {
      var e36, o22;
      this._hoveredNode && (null === (o22 = (e36 = this._cosmographConfig).onLabelClick) || void 0 === o22 || o22.call(e36, this._hoveredNode, s16));
    }, this._onNodeMouseOver = (...s16) => {
      var e36, o22;
      null === (o22 = (e36 = this._cosmographConfig).onNodeMouseOver) || void 0 === o22 || o22.call(e36, ...s16);
      const [t23, , i12] = s16;
      this._hoveredNode = t23, this._renderLabelForHovered(t23, i12);
    }, this._onNodeMouseOut = (...s16) => {
      var e36, o22;
      null === (o22 = (e36 = this._cosmographConfig).onNodeMouseOut) || void 0 === o22 || o22.call(e36, ...s16), this._renderLabelForHovered();
    }, this._onMouseMove = (...s16) => {
      var e36, o22;
      null === (o22 = (e36 = this._cosmographConfig).onMouseMove) || void 0 === o22 || o22.call(e36, ...s16);
      const [t23, , i12] = s16;
      this._renderLabelForHovered(t23, i12);
    }, this._onZoomStart = (...s16) => {
      var e36, o22;
      null === (o22 = (e36 = this._cosmographConfig).onZoomStart) || void 0 === o22 || o22.call(e36, ...s16);
    }, this._onZoom = (...s16) => {
      var e36, o22;
      null === (o22 = (e36 = this._cosmographConfig).onZoom) || void 0 === o22 || o22.call(e36, ...s16), this._renderLabelForHovered(), this._renderLabels();
    }, this._onZoomEnd = (...s16) => {
      var e36, o22;
      null === (o22 = (e36 = this._cosmographConfig).onZoomEnd) || void 0 === o22 || o22.call(e36, ...s16);
    }, this._onStart = (...s16) => {
      var e36, o22;
      null === (o22 = (e36 = this._cosmographConfig).onSimulationStart) || void 0 === o22 || o22.call(e36, ...s16);
    }, this._onTick = (...s16) => {
      var e36, o22;
      null === (o22 = (e36 = this._cosmographConfig).onSimulationTick) || void 0 === o22 || o22.call(e36, ...s16), this._renderLabels();
    }, this._onEnd = (...s16) => {
      var e36, o22;
      null === (o22 = (e36 = this._cosmographConfig).onSimulationEnd) || void 0 === o22 || o22.call(e36, ...s16);
    }, this._onPause = (...s16) => {
      var e36, o22;
      null === (o22 = (e36 = this._cosmographConfig).onSimulationPause) || void 0 === o22 || o22.call(e36, ...s16);
    }, this._onRestart = (...s16) => {
      var e36, o22;
      null === (o22 = (e36 = this._cosmographConfig).onSimulationRestart) || void 0 === o22 || o22.call(e36, ...s16);
    }, this._containerNode = s15, this._containerNode.classList.add(a11.cosmograph), this._cosmographConfig = a2(o15, null != i11 ? i11 : {}), this._cosmosConfig = this._createCosmosConfig(i11), this._canvasElement = document.createElement("canvas"), this._labelsDivElement = document.createElement("div"), this._watermarkDivElement = document.createElement("div"), this._watermarkDivElement.classList.add(a11.watermark), this._watermarkDivElement.onclick = () => {
      var s16;
      return null === (s16 = window.open("https://cosmograph.app/", "_blank")) || void 0 === s16 ? void 0 : s16.focus();
    }, s15.appendChild(this._canvasElement), s15.appendChild(this._labelsDivElement), s15.appendChild(this._watermarkDivElement), this._cssLabelsRenderer = new LabelRenderer(this._labelsDivElement, { dispatchWheelEventElement: this._canvasElement, pointerEvents: "all", onLabelClick: this._onLabelClick.bind(this) }), this._hoveredCssLabel = new CssLabel(this._labelsDivElement), this._hoveredCssLabel.setPointerEvents("all"), this._hoveredCssLabel.element.addEventListener("click", this._onHoveredNodeClick.bind(this)), this._linksFilter.setAccessor((s16) => [s16.source, s16.target]), this._nodesFilter.setAccessor((s16) => s16.id), this._selectedNodesFilter.setAccessor((s16) => s16.id), this._nodesCrossfilter.onFiltered = () => {
      var s16, e36, o22, t23;
      let i12;
      this._nodesCrossfilter.isAnyFiltersActive() ? (i12 = this._nodesCrossfilter.getFilteredRecords(), null === (s16 = this._cosmos) || void 0 === s16 || s16.selectNodesByIds(i12.map((s17) => s17.id))) : null === (e36 = this._cosmos) || void 0 === e36 || e36.unselectNodes(), this._updateSelectedNodesSet(i12), null === (t23 = (o22 = this._cosmographConfig).onNodesFiltered) || void 0 === t23 || t23.call(o22, i12);
    }, this._linksCrossfilter.onFiltered = () => {
      var s16, e36;
      let o22;
      this._linksCrossfilter.isAnyFiltersActive() && (o22 = this._linksCrossfilter.getFilteredRecords()), null === (e36 = (s16 = this._cosmographConfig).onLinksFiltered) || void 0 === e36 || e36.call(s16, o22);
    };
    const h6 = this._svgParser.parseFromString(c8, "image/svg+xml").firstChild;
    null === (l6 = this._watermarkDivElement) || void 0 === l6 || l6.appendChild(h6);
  }
  get data() {
    return this._data;
  }
  get progress() {
    var s15;
    return null === (s15 = this._cosmos) || void 0 === s15 ? void 0 : s15.progress;
  }
  get isSimulationRunning() {
    var s15;
    return null === (s15 = this._cosmos) || void 0 === s15 ? void 0 : s15.isSimulationRunning;
  }
  get maxPointSize() {
    var s15;
    return null === (s15 = this._cosmos) || void 0 === s15 ? void 0 : s15.maxPointSize;
  }
  setData(e36, o22, t23 = true) {
    var i11, n17, r14, a13;
    const { _cosmographConfig: d13 } = this;
    this._data = { nodes: e36, links: o22 };
    const h6 = null === d13.disableSimulation ? !o22.length : d13.disableSimulation;
    this._cosmos || (this._disableSimulation = h6, this._cosmosConfig.disableSimulation = this._disableSimulation, this._cosmos = new Graph(this._canvasElement, this._cosmosConfig), this.cosmos = this._cosmos), this._disableSimulation !== h6 && console.warn(`The \`disableSimulation\` was initialized to \`${this._disableSimulation}\` during initialization and will not be modified.`), this._cosmos.setData(e36, o22, t23), this._nodesCrossfilter.addRecords(e36), this._linksCrossfilter.addRecords(o22), this._updateLabels(), null === (n17 = (i11 = this._cosmographConfig).onSetData) || void 0 === n17 || n17.call(i11, e36, o22), this._isDataDifferent() && (["cosmograph.app"].includes(window.location.hostname) || I7({ browser: navigator.userAgent, hostname: window.location.hostname, mode: null, is_library_metric: true, links_count: o22.length, links_have_time: null, links_raw_columns: o22.length && null !== (r14 = Object.keys(null == o22 ? void 0 : o22[0]).length) && void 0 !== r14 ? r14 : 0, links_raw_lines: null, nodes_count: e36.length, nodes_have_time: null, nodes_raw_columns: e36.length && null !== (a13 = Object.keys(null == e36 ? void 0 : e36[0]).length) && void 0 !== a13 ? a13 : 0, nodes_raw_lines: null })), this._previousData = { nodes: e36, links: o22 };
  }
  setConfig(s15) {
    var e36, o22;
    if (this._cosmographConfig = a2(o15, null != s15 ? s15 : {}), this._cosmosConfig = this._createCosmosConfig(s15), null === (e36 = this._cosmos) || void 0 === e36 || e36.setConfig(this._cosmosConfig), null == s15 ? void 0 : s15.backgroundColor) {
      const e37 = null === (o22 = color(null == s15 ? void 0 : s15.backgroundColor)) || void 0 === o22 ? void 0 : o22.formatHex();
      if (e37) {
        const s16 = this._checkBrightness(e37), o23 = document.querySelector(":root");
        s16 > 0.65 ? null == o23 || o23.style.setProperty("--cosmograph-watermark-color", "#000000") : null == o23 || o23.style.setProperty("--cosmograph-watermark-color", "#ffffff");
      }
    }
    this._updateLabels();
  }
  addNodesFilter() {
    return this._nodesCrossfilter.addFilter();
  }
  addLinksFilter() {
    return this._linksCrossfilter.addFilter();
  }
  selectNodesInRange(s15) {
    var e36;
    if (!this._cosmos) return;
    this._cosmos.selectNodesInRange(s15);
    const o22 = new Set((null !== (e36 = this.getSelectedNodes()) && void 0 !== e36 ? e36 : []).map((s16) => s16.id));
    this._selectedNodesFilter.applyFilter((s16) => o22.has(s16));
  }
  selectNodes(s15) {
    if (!this._cosmos) return;
    const e36 = new Set(s15.map((s16) => s16.id));
    this._selectedNodesFilter.applyFilter((s16) => e36.has(s16));
  }
  selectNode(s15, e36 = false) {
    if (!this._cosmos) return;
    const o22 = new Set([s15, ...e36 && this._cosmos.getAdjacentNodes(s15.id) || []].map((s16) => s16.id));
    this._selectedNodesFilter.applyFilter((s16) => o22.has(s16));
  }
  unselectNodes() {
    this._cosmos && this._selectedNodesFilter.clear();
  }
  getSelectedNodes() {
    if (this._cosmos) return this._cosmos.getSelectedNodes();
  }
  zoomToNode(s15) {
    this._cosmos && this._cosmos.zoomToNodeById(s15.id);
  }
  setZoomLevel(s15, e36 = 0) {
    this._cosmos && this._cosmos.setZoomLevel(s15, e36);
  }
  getZoomLevel() {
    if (this._cosmos) return this._cosmos.getZoomLevel();
  }
  getNodePositions() {
    if (this._cosmos) return this._cosmos.getNodePositions();
  }
  getNodePositionsMap() {
    if (this._cosmos) return this._cosmos.getNodePositionsMap();
  }
  getNodePositionsArray() {
    if (this._cosmos) return this._cosmos.getNodePositionsArray();
  }
  fitView(s15 = 250) {
    this._cosmos && this._cosmos.fitView(s15);
  }
  fitViewByNodeIds(s15, e36 = 250) {
    this._cosmos && this._cosmos.fitViewByNodeIds(s15, e36);
  }
  focusNode(s15) {
    this._cosmos && this._cosmos.setFocusedNodeById(null == s15 ? void 0 : s15.id);
  }
  getAdjacentNodes(s15) {
    if (this._cosmos) return this._cosmos.getAdjacentNodes(s15);
  }
  spaceToScreenPosition(s15) {
    if (this._cosmos) return this._cosmos.spaceToScreenPosition(s15);
  }
  spaceToScreenRadius(s15) {
    if (this._cosmos) return this._cosmos.spaceToScreenRadius(s15);
  }
  getNodeRadiusByIndex(s15) {
    if (this._cosmos) return this._cosmos.getNodeRadiusByIndex(s15);
  }
  getNodeRadiusById(s15) {
    if (this._cosmos) return this._cosmos.getNodeRadiusById(s15);
  }
  getSampledNodePositionsMap() {
    if (this._cosmos) return this._cosmos.getSampledNodePositionsMap();
  }
  start(s15 = 1) {
    this._cosmos && this._cosmos.start(s15);
  }
  pause() {
    this._cosmos && this._cosmos.pause();
  }
  restart() {
    this._cosmos && this._cosmos.restart();
  }
  step() {
    this._cosmos && this._cosmos.step();
  }
  remove() {
    var s15;
    null === (s15 = this._cosmos) || void 0 === s15 || s15.destroy(), this._isLabelsDestroyed || (this._containerNode.innerHTML = "", this._isLabelsDestroyed = true, this._hoveredCssLabel.element.removeEventListener("click", this._onHoveredNodeClick.bind(this)), this._hoveredCssLabel.destroy(), this._cssLabelsRenderer.destroy());
  }
  create() {
    this._cosmos && this._cosmos.create();
  }
  getNodeDegrees() {
    if (this._cosmos) return this._cosmos.graph.degree;
  }
  _createCosmosConfig(s15) {
    const e36 = { ...s15, simulation: { ...Object.keys(null != s15 ? s15 : {}).filter((s16) => -1 !== s16.indexOf("simulation")).reduce((e37, o22) => {
      const t23 = o22.replace("simulation", "");
      return e37[t23.charAt(0).toLowerCase() + t23.slice(1)] = null == s15 ? void 0 : s15[o22], e37;
    }, {}), onStart: this._onStart.bind(this), onTick: this._onTick.bind(this), onEnd: this._onEnd.bind(this), onPause: this._onPause.bind(this), onRestart: this._onRestart.bind(this) }, events: { onClick: this._onClick.bind(this), onNodeMouseOver: this._onNodeMouseOver.bind(this), onNodeMouseOut: this._onNodeMouseOut.bind(this), onMouseMove: this._onMouseMove.bind(this), onZoomStart: this._onZoomStart.bind(this), onZoom: this._onZoom.bind(this), onZoomEnd: this._onZoomEnd.bind(this) } };
    return delete e36.disableSimulation, e36;
  }
  _updateLabels() {
    if (this._isLabelsDestroyed || !this._cosmos) return;
    const { _cosmos: s15, data: { nodes: e36 }, _cosmographConfig: { showTopLabels: o22, showTopLabelsLimit: t23, showLabelsFor: i11, showTopLabelsValueKey: n17, nodeLabelAccessor: l6 } } = this;
    if (this._nodesForTopLabels.clear(), o22 && t23) {
      let o23;
      o23 = n17 ? [...e36].sort((s16, e37) => {
        const o24 = s16[n17], t24 = e37[n17];
        return "number" == typeof o24 && "number" == typeof t24 ? t24 - o24 : 0;
      }) : Object.entries(s15.graph.degree).sort((s16, e37) => e37[1] - s16[1]).slice(0, t23).map((e37) => s15.graph.getNodeByIndex(+e37[0]));
      for (let s16 = 0; s16 < t23 && !(s16 >= e36.length); s16++) {
        const e37 = o23[s16];
        e37 && this._nodesForTopLabels.add(e37);
      }
    }
    this._nodesForForcedLabels.clear(), null == i11 || i11.forEach(this._nodesForForcedLabels.add, this._nodesForForcedLabels), this._trackedNodeToLabel.clear(), s15.trackNodePositionsByIds([...o22 ? this._nodesForTopLabels : [], ...this._nodesForForcedLabels].map((s16) => {
      var e37;
      return this._trackedNodeToLabel.set(s16, null !== (e37 = null == l6 ? void 0 : l6(s16)) && void 0 !== e37 ? e37 : s16.id), s16.id;
    })), this._renderLabels();
  }
  _updateSelectedNodesSet(s15) {
    this._isLabelsDestroyed || (s15 ? (this._selectedNodesSet = /* @__PURE__ */ new Set(), null == s15 || s15.forEach(this._selectedNodesSet.add, this._selectedNodesSet)) : this._selectedNodesSet = void 0, this._renderLabels());
  }
  _renderLabels() {
    if (this._isLabelsDestroyed || !this._cosmos) return;
    const { _cosmos: s15, _selectedNodesSet: e36, _cosmographConfig: { showDynamicLabels: o22, nodeLabelAccessor: t23, nodeLabelColor: i11, nodeLabelClassName: n17 } } = this;
    let l6 = [];
    const a13 = s15.getTrackedNodePositionsMap(), d13 = /* @__PURE__ */ new Map();
    if (o22) {
      const e37 = this.getSampledNodePositionsMap();
      null == e37 || e37.forEach((e38, o23) => {
        var i12;
        const n18 = s15.graph.getNodeById(o23);
        n18 && d13.set(n18, [null !== (i12 = null == t23 ? void 0 : t23(n18)) && void 0 !== i12 ? i12 : n18.id, e38, a11.cosmographShowDynamicLabels, 0.7]);
      });
    }
    this._nodesForTopLabels.forEach((s16) => {
      d13.set(s16, [this._trackedNodeToLabel.get(s16), a13.get(s16.id), a11.cosmographShowTopLabels, 0.9]);
    }), this._nodesForForcedLabels.forEach((s16) => {
      d13.set(s16, [this._trackedNodeToLabel.get(s16), a13.get(s16.id), a11.cosmographShowLabelsFor, 1]);
    }), l6 = [...d13.entries()].map(([o23, [t24, l7, r14, a14]]) => {
      var d14, h6, c11;
      const _7 = this.spaceToScreenPosition([null !== (d14 = null == l7 ? void 0 : l7[0]) && void 0 !== d14 ? d14 : 0, null !== (h6 = null == l7 ? void 0 : l7[1]) && void 0 !== h6 ? h6 : 0]), m6 = this.spaceToScreenRadius(s15.config.nodeSizeScale * this.getNodeRadiusById(o23.id)), u8 = !!e36, v3 = null == e36 ? void 0 : e36.has(o23);
      return { id: o23.id, text: null != t24 ? t24 : "", x: _7[0], y: _7[1] - (m6 + 2), weight: u8 && !v3 ? 0.1 : a14, shouldBeShown: this._nodesForForcedLabels.has(o23), style: u8 && !v3 ? "opacity: 0.1;" : "", color: i11 && ("string" == typeof i11 ? i11 : null == i11 ? void 0 : i11(o23)), className: null !== (c11 = "string" == typeof n17 ? n17 : null == n17 ? void 0 : n17(o23)) && void 0 !== c11 ? c11 : r14 };
    }), this._cssLabelsRenderer.setLabels(l6), this._cssLabelsRenderer.draw(true);
  }
  _renderLabelForHovered(s15, e36) {
    var o22, t23;
    if (!this._cosmos) return;
    const { _cosmographConfig: { showHoveredNodeLabel: i11, nodeLabelAccessor: n17, hoveredNodeLabelClassName: l6, hoveredNodeLabelColor: r14 } } = this;
    if (!this._isLabelsDestroyed) {
      if (i11 && s15 && e36) {
        const i12 = this.spaceToScreenPosition(e36), a13 = this.spaceToScreenRadius(this.getNodeRadiusById(s15.id));
        this._hoveredCssLabel.setText(null !== (o22 = null == n17 ? void 0 : n17(s15)) && void 0 !== o22 ? o22 : s15.id), this._hoveredCssLabel.setVisibility(true), this._hoveredCssLabel.setPosition(i12[0], i12[1] - (a13 + 2)), this._hoveredCssLabel.setClassName("string" == typeof l6 ? l6 : null !== (t23 = null == l6 ? void 0 : l6(s15)) && void 0 !== t23 ? t23 : "");
        const d13 = r14 && ("string" == typeof r14 ? r14 : null == r14 ? void 0 : r14(s15));
        d13 && this._hoveredCssLabel.setColor(d13);
      } else this._hoveredCssLabel.setVisibility(false);
      this._hoveredCssLabel.draw();
    }
  }
  _applyLinksFilter() {
    if (this._nodesCrossfilter.isAnyFiltersActive(this._nodesFilter)) {
      const s15 = this._nodesCrossfilter.getFilteredRecords(this._nodesFilter), e36 = new Set(s15.map((s16) => s16.id));
      this._linksFilter.applyFilter((s16) => {
        const o22 = null == s16 ? void 0 : s16[0], t23 = null == s16 ? void 0 : s16[1];
        return e36.has(o22) && e36.has(t23);
      });
    } else this._linksFilter.clear();
  }
  _applyNodesFilter() {
    if (this._linksCrossfilter.isAnyFiltersActive(this._linksFilter)) {
      const s15 = this._linksCrossfilter.getFilteredRecords(this._linksFilter), e36 = new Set(s15.map((s16) => [s16.source, s16.target]).flat());
      this._nodesFilter.applyFilter((s16) => e36.has(s16));
    } else this._nodesFilter.clear();
  }
  _checkBrightness(s15) {
    const e36 = ((s16) => {
      const e37 = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(s16);
      return e37 ? { r: parseInt((e37[1] || 0).toString(), 16), g: parseInt((e37[2] || 0).toString(), 16), b: parseInt((e37[3] || 0).toString(), 16) } : { r: 0, g: 0, b: 0 };
    })(s15);
    return (0.2126 * e36.r + 0.7152 * e36.g + 0.0722 * e36.b) / 255;
  }
};

// node_modules/@cosmograph/cosmograph/modules/search/config.js
var o16 = { onSelectResult: void 0, accessors: void 0 };

// node_modules/@cosmograph/cosmograph/modules/search/index.js
var i9 = class {
  constructor(i11, o22, c11) {
    this._config = {}, this._data = [], this._defaultAccessors = [], this._createDefaultAccessorOptions = (s15) => s15.length > 0 && s15[0] ? Object.keys(s15[0]).map((s16) => ({ label: s16, accessor: (t23) => String(t23[s16]) })) : [{ label: "id", accessor: (s16) => s16.id }], this._onSelect = (...s15) => {
      this._onSelectResult(...s15);
    }, this._onSearch = (...s15) => {
      var t23, e36;
      null === (e36 = (t23 = this._config).onSearch) || void 0 === e36 || e36.call(t23, ...s15);
    }, this._onEnter = (...s15) => {
      var t23, e36;
      null === (e36 = (t23 = this._config).onEnter) || void 0 === e36 || e36.call(t23, ...s15);
    }, this._onAccessorSelect = (...s15) => {
      var t23, e36;
      null === (e36 = (t23 = this._config).onAccessorSelect) || void 0 === e36 || e36.call(t23, ...s15);
    }, this._cosmograph = i11, this._config = a2(o16, null != c11 ? c11 : {}), this.search = new o14(o22, this._createSearchConfig(c11)), this._filter = this._cosmograph.addNodesFilter(), this._filter.onDataAdded = () => {
      this._updateData();
    }, this._updateData();
  }
  setConfig(t23) {
    const i11 = a2(o16, null != t23 ? t23 : {});
    this._data.length && void 0 === i11.accessors && (i11.accessors = this._defaultAccessors), this.search.setConfig(this._createSearchConfig(i11)), this._config = i11;
  }
  _updateData() {
    const s15 = this._cosmograph.data.nodes;
    (null == s15 ? void 0 : s15.length) && (this._data = s15, this.search.setData(this._data), void 0 === this._config.accessors && (this._defaultAccessors = this._createDefaultAccessorOptions(this._data), this.setConfig({ accessors: this._defaultAccessors })));
  }
  getConfig() {
    return this._config;
  }
  remove() {
    this.search.destroy();
  }
  setListState(s15) {
    this.search.setListState(s15);
  }
  clearInput() {
    this.search.clearInput();
  }
  _onSelectResult(s15) {
    var t23, e36;
    this._cosmograph.pause(), this._cosmograph.zoomToNode(s15), this._cosmograph.selectNode(s15), null === (e36 = (t23 = this._config).onSelectResult) || void 0 === e36 || e36.call(t23, s15);
  }
  _createSearchConfig(s15) {
    return { ...s15, events: { onSelect: this._onSelect.bind(this), onSearch: this._onSearch.bind(this), onEnter: this._onEnter.bind(this), onAccessorSelect: this._onAccessorSelect.bind(this) } };
  }
};

// node_modules/@cosmograph/cosmograph/modules/cosmograph/types.js
var n12;
!function(n17) {
  n17.Nodes = "nodes", n17.Links = "links";
}(n12 || (n12 = {}));

// node_modules/@cosmograph/cosmograph/modules/timeline/config.js
var s11 = { accessor: (o22) => o22.date, filterType: n12.Links };

// node_modules/@cosmograph/cosmograph/modules/timeline/index.js
var s12 = class {
  constructor(s15, o22, a13) {
    this._config = {}, this.playAnimation = () => {
      this.timeline.playAnimation();
    }, this.pauseAnimation = () => {
      this.timeline.pauseAnimation();
    }, this.stopAnimation = () => {
      this.timeline.stopAnimation();
    }, this._onBrush = (i11, t23) => {
      var e36, n17;
      this._applyFilter(i11), null === (n17 = (e36 = this._config).onSelection) || void 0 === n17 || n17.call(e36, i11, t23);
    }, this._onBarHover = (...i11) => {
      var t23, e36;
      null === (e36 = (t23 = this._config).onBarHover) || void 0 === e36 || e36.call(t23, ...i11);
    }, this._onAnimationPlay = (...i11) => {
      var t23, e36;
      null === (e36 = (t23 = this._config).onAnimationPlay) || void 0 === e36 || e36.call(t23, ...i11);
    }, this._onAnimationPause = (...i11) => {
      var t23, e36;
      null === (e36 = (t23 = this._config).onAnimationPause) || void 0 === e36 || e36.call(t23, ...i11);
    }, this._config = a2(s11, null != a13 ? a13 : {}), this.timeline = new p(o22, this._createTimelineConfig(a13)), this._cosmograph = s15, this._filter = this._config.filterType === n12.Nodes ? this._cosmograph.addNodesFilter() : this._cosmograph.addLinksFilter(), this._filter.onDataAdded = () => {
      this._updateData();
    }, this._updateDimension(), this._updateData();
  }
  setConfig(t23) {
    var e36, s15;
    const o22 = a2(s11, null != t23 ? t23 : {});
    this.timeline.setConfig(this._createTimelineConfig(t23)), (null === (e36 = this._config.accessor) || void 0 === e36 ? void 0 : e36.toString()) !== (null === (s15 = o22.accessor) || void 0 === s15 ? void 0 : s15.toString()) && this._updateData(), this._config = o22;
  }
  getCurrentSelection() {
    return this.timeline.getCurrentSelection();
  }
  getCurrentSelectionInPixels() {
    return this.timeline.getCurrentSelectionInPixels();
  }
  getBarWidth() {
    return this.timeline.getBarWidth();
  }
  getIsAnimationRunning() {
    return this.timeline.getIsAnimationRunning();
  }
  setSelection(i11) {
    this.timeline.setSelection(i11);
  }
  setSelectionInPixels(i11) {
    this.timeline.setSelectionInPixels(i11);
  }
  _updateData() {
    const i11 = this._filter.getAllValues();
    i11 && this.timeline.setTimeData(i11), this.timeline.render(), this.timeline.resize();
  }
  _updateDimension() {
    const { _config: { accessor: i11 }, _filter: t23 } = this;
    t23.setAccessor(i11);
  }
  _applyFilter(i11) {
    const { _filter: t23 } = this;
    i11 ? t23.applyFilter((t24) => t24 >= i11[0] && t24 <= i11[1]) : t23.clear();
  }
  getConfig() {
    return this._config;
  }
  remove() {
    this.timeline.destroy();
  }
  _createTimelineConfig(i11) {
    return { ...i11, events: { onBrush: this._onBrush.bind(this), onBarHover: this._onBarHover.bind(this), onAnimationPlay: this._onAnimationPlay.bind(this), onAnimationPause: this._onAnimationPause.bind(this) } };
  }
};

// node_modules/@cosmograph/cosmograph/modules/histogram/config.js
var t19 = { accessor: (o22) => o22.value, customExtent: void 0, data: void 0, filterFunction: void 0, filterType: n12.Nodes, onSelection: void 0, highlightCrossfiltered: true };

// node_modules/@cosmograph/cosmograph/modules/histogram/index.js
var o17 = class {
  constructor(o22, r14, a13) {
    this._onBrush = (t23, i11) => {
      var e36, s15;
      this._applyFilter(t23), null === (s15 = (e36 = this._config).onSelection) || void 0 === s15 || s15.call(e36, t23, i11);
    }, this._onBarHover = (...t23) => {
      var i11, e36;
      null === (e36 = (i11 = this._config).onBarHover) || void 0 === e36 || e36.call(i11, ...t23);
    }, this._cosmograph = o22, this._config = a2(t19, null != a13 ? a13 : {}), this._histogram = new d(r14, this._createHistogramConfig(a13)), this._filter = this._config.filterType === n12.Nodes ? this._cosmograph.addNodesFilter() : this._cosmograph.addLinksFilter(), this._filter.onDataAdded = () => {
      this._updateData();
    }, this._filter.onFiltered = () => {
      this._config.highlightCrossfiltered && this._updateDynamicData();
    }, this._updateDimension(), this._updateData();
  }
  setConfig(i11) {
    const e36 = a2(t19, null != i11 ? i11 : {});
    this._histogram.setConfig(this._createHistogramConfig(i11)), e36.accessor === this._config.accessor && e36.data === this._config.data && e36.filterFunction === this._config.filterFunction || (this._updateDimension(), this._updateData(), this.setSelection()), this._config = e36;
  }
  getCurrentSelection() {
    return this._histogram.getCurrentSelection;
  }
  getCurrentSelectionInPixels() {
    return this._histogram.getCurrentSelectionInPixels;
  }
  getBarWidth() {
    return this._histogram.getBarWidth();
  }
  setSelection(t23) {
    this._histogram.setSelection(t23);
  }
  getConfig() {
    return this._config;
  }
  remove() {
    this._histogram.destroy();
  }
  _createHistogramConfig(t23) {
    return { ...t23, events: { onBrush: this._onBrush.bind(this), onBarHover: this._onBarHover.bind(this) } };
  }
  _updateDimension() {
    const { _config: { accessor: t23, filterFunction: i11, data: s15, filterType: o22 }, _filter: r14 } = this;
    if (!t23) return;
    i11 && s15 ? o22 === n12.Nodes ? r14.setAccessor((t24) => t24.id) : r14.setAccessor((t24) => [t24.source, t24.target]) : r14.setAccessor(t23);
  }
  _applyFilter(t23) {
    const { _filter: i11, _config: { filterFunction: s15, data: o22, filterType: r14 } } = this;
    if (t23) {
      if (s15 && o22) {
        const a13 = i11.getFilteredRecords();
        if (r14 === n12.Nodes) {
          const e36 = s15(t23, o22, a13), r15 = new Set(e36.map((t24) => t24.id));
          i11.applyFilter((t24) => r15.has(t24));
        } else {
          const e36 = s15(t23, o22, a13), r15 = new Set(e36.map((t24) => [t24.source, t24.target]).flat());
          i11.applyFilter((t24) => {
            const i12 = null == t24 ? void 0 : t24[0], e37 = null == t24 ? void 0 : t24[1];
            return r15.has(i12) && r15.has(e37);
          });
        }
      } else i11.applyFilter((i12) => i12 >= t23[0] && i12 <= t23[1]);
    } else i11.clear();
  }
  _updateData() {
    const { _config: { data: t23, filterFunction: i11, accessor: e36 } } = this, s15 = i11 && t23 && e36 ? t23.map(e36) : this._filter.getAllValues();
    s15 && this._histogram.setHistogramData(s15, this._config.customExtent);
  }
  _updateDynamicData() {
    const t23 = this._filter.getFilteredValues();
    this._histogram.setHighlightedData(t23);
  }
};

// node_modules/@cosmograph/react/components/timeline/index.js
function m4({ style: m6, className: s15, ...a13 }, i11) {
  const u8 = c(), p5 = (0, import_react2.useRef)(null), v3 = (0, import_react2.useRef)(), [d13, f6] = (0, import_react2.useState)(false);
  return (0, import_react2.useEffect)(() => (p5.current && (null == u8 ? void 0 : u8.cosmograph) && (v3.current = new s12(null == u8 ? void 0 : u8.cosmograph, p5.current, a13), f6(true)), () => {
    var r14;
    null === (r14 = v3.current) || void 0 === r14 || r14.remove();
  }), [null == u8 ? void 0 : u8.cosmograph]), (0, import_react2.useEffect)(() => {
    var r14;
    null === (r14 = v3.current) || void 0 === r14 || r14.setConfig(a13);
  }, [a13]), (0, import_react2.useImperativeHandle)(i11, () => v3.current, [d13]), import_react2.default.createElement("div", { id: "CosmographTimeline", style: m6, className: s15, ref: p5 });
}
var s13 = import_react2.default.forwardRef(m4);

// node_modules/@cosmograph/react/components/histogram/index.js
var import_react3 = __toESM(require_react(), 1);
function c9({ style: c11, className: m6, ...l6 }, i11) {
  const u8 = c(), p5 = (0, import_react3.useRef)(null), g2 = (0, import_react3.useRef)(), [v3, d13] = (0, import_react3.useState)(false);
  return (0, import_react3.useEffect)(() => (p5.current && (null == u8 ? void 0 : u8.cosmograph) && (g2.current = new o17(null == u8 ? void 0 : u8.cosmograph, p5.current, l6), d13(true)), () => {
    var r14;
    null === (r14 = g2.current) || void 0 === r14 || r14.remove();
  }), [null == u8 ? void 0 : u8.cosmograph]), (0, import_react3.useEffect)(() => {
    var r14;
    null === (r14 = g2.current) || void 0 === r14 || r14.setConfig(l6);
  }, [l6]), (0, import_react3.useImperativeHandle)(i11, () => g2.current, [v3]), import_react3.default.createElement("div", { id: "CosmographHistogram", style: c11, className: m6, ref: p5 });
}
var m5 = import_react3.default.forwardRef(c9);

// node_modules/@cosmograph/react/components/search/index.js
var import_react5 = __toESM(require_react(), 1);

// node_modules/@cosmograph/react/components/cosmograph/index.js
var import_react4 = __toESM(require_react(), 1);
function s14({ style: s15, className: i11, nodes: a13, links: c11, ...d13 }, v3) {
  const m6 = c(), f6 = (0, import_react4.useRef)(null), p5 = (0, import_react4.useRef)(), [g2, h6] = (0, import_react4.useState)(false);
  return (0, import_react4.useEffect)(() => (f6.current && (p5.current = new h5(f6.current, d13), h6(true), null == m6 || m6.initCosmograph(p5.current)), () => {
    var n17;
    null === (n17 = p5.current) || void 0 === n17 || n17.remove();
  }), []), (0, import_react4.useEffect)(() => {
    var n17;
    null === (n17 = p5.current) || void 0 === n17 || n17.setConfig(d13);
  }, [d13]), (0, import_react4.useEffect)(() => {
    var n17;
    (a13 || c11) && (null === (n17 = p5.current) || void 0 === n17 || n17.setData(null != a13 ? a13 : [], null != c11 ? c11 : []));
  }, [a13, c11]), (0, import_react4.useEffect)(() => {
    var n17, l6, r14;
    a13 || c11 || !(null == m6 ? void 0 : m6.nodes) && !(null == m6 ? void 0 : m6.links) || null === (n17 = p5.current) || void 0 === n17 || n17.setData(null !== (l6 = null == m6 ? void 0 : m6.nodes) && void 0 !== l6 ? l6 : [], null !== (r14 = null == m6 ? void 0 : m6.links) && void 0 !== r14 ? r14 : []);
  }, [null == m6 ? void 0 : m6.nodes, null == m6 ? void 0 : m6.links]), (0, import_react4.useImperativeHandle)(v3, () => p5.current, [g2]), import_react4.default.createElement("div", { style: { ...s15 }, className: i11, ref: f6 });
}
var i10 = import_react4.default.forwardRef(s14);

// node_modules/@cosmograph/react/components/search/index.js
function c10({ style: c11, className: a13, ...i11 }, l6) {
  const p5 = c(), u8 = (0, import_react5.useRef)(null), d13 = (0, import_react5.useRef)(), [h6, g2] = (0, import_react5.useState)(false);
  return (0, import_react5.useEffect)(() => (u8.current && (null == p5 ? void 0 : p5.cosmograph) && (d13.current = new i9(null == p5 ? void 0 : p5.cosmograph, u8.current, i11), g2(true)), () => {
    var r14;
    null === (r14 = d13.current) || void 0 === r14 || r14.remove();
  }), [null == p5 ? void 0 : p5.cosmograph]), (0, import_react5.useEffect)(() => {
    var r14;
    null === (r14 = d13.current) || void 0 === r14 || r14.setConfig(i11);
  }, [i11]), (0, import_react5.useImperativeHandle)(l6, () => d13.current, [h6]), import_react5.default.createElement("div", { id: "CosmographSearch", style: c11, className: a13, ref: u8 });
}
var a12 = import_react5.default.forwardRef(c10);
export {
  i10 as Cosmograph,
  s as CosmographContext,
  s14 as CosmographFC,
  m5 as CosmographHistogram,
  c9 as CosmographHistogramFC,
  t as CosmographProvider,
  a12 as CosmographSearch,
  c10 as CosmographSearchFC,
  s13 as CosmographTimeline,
  m4 as CosmographTimelineFC,
  c as useCosmograph
};
/*! Bundled license information:

@cosmograph/ui/ext/@material/dom/ponyfill.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/base/foundation.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/dom/keyboard.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/list/constants.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/list/events.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/list/typeahead.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/list/foundation.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/dom/events.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/ripple/constants.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/ripple/foundation.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/floating-label/constants.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/floating-label/foundation.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/line-ripple/constants.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/line-ripple/foundation.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/notched-outline/constants.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/notched-outline/foundation.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/textfield/constants.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/textfield/foundation.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/textfield/icon/constants.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/textfield/icon/foundation.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/menu-surface/constants.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/menu-surface/foundation.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/menu/constants.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@cosmograph/ui/ext/@material/menu/foundation.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)
*/
//# sourceMappingURL=@cosmograph_react.js.map
