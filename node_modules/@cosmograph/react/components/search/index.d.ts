import { useState, useRef, useCallback } from "react";
import { Play, Pause } from "lucide-react";
import {
  CosmographProvider,
  Cosmograph,
  CosmographHistogram,
  CosmographTimeline,
  CosmographSearch,
  CosmographRef,
  CosmographTimelineRef,
  CosmographSearchRef,
} from "@cosmograph/react";
import { nodes, links, Node, Link } from "./data";
import "./style.css";

const App = () => {
  const cosmographRef = useRef<CosmographRef<Node, Link>>(null);
  const timelineRef = useRef<CosmographTimelineRef<Node>>(null);
  const searchRef = useRef<CosmographSearchRef<Node>>(null);
  const [isPlaying, setIsPlaying] = useState(true);
  const [currentView, setCurrentView] = useState<'general' | 'info' | 'analysis'>('analysis');
  const [selectedNode, setSelectedNode] = useState<Node | null>(null);
  const [isTimelineAnimating, setIsTimelineAnimating] = useState(false);

  const handlePlayPause = useCallback(() => {
    if (isPlaying) {
      cosmographRef.current?.pause();
    } else {
      cosmographRef.current?.restart();
    }
    setIsPlaying(!isPlaying);
  }, [isPlaying]);

  const handleNodeClick = useCallback((node: Node | undefined) => {
    if (node) {
      setSelectedNode(node);
      cosmographRef.current?.selectNode(node);
    } else {
      setSelectedNode(null);
      cosmographRef.current?.unselectNodes();
    }
  }, []);

  const handleSearchSelect = useCallback((node: Node) => {
    setSelectedNode(node);
    cosmographRef.current?.selectNode(node);
    cosmographRef.current?.focusNode(node);
  }, []);

  const handleTimelineAnimationPlay = useCallback((isRunning: boolean) => {
    setIsTimelineAnimating(isRunning);
  }, []);

  const handleTimelineAnimationPause = useCallback((isRunning: boolean) => {
    setIsTimelineAnimating(isRunning);
  }, []);

  const handleTimelineSelection = useCallback((selection?: [Date, Date]) => {
    if (selection) {
      console.log('Timeline selection:', selection);
    }
  }, []);

  return (
    <CosmographProvider nodes={nodes} links={links}>
      <div className="app-container">
        {/* Top Navigation */}
        <div className="nav-container">
          <div className="nav-brand">Teads OG</div>
          <div className="nav-tabs">
            <button
              className={`nav-tab ${currentView === 'general' ? 'active' : ''}`}
              onClick={() => setCurrentView('general')}
            >
              General
            </button>
            <button
              className={`nav-tab ${currentView === 'info' ? 'active' : ''}`}
              onClick={() => setCurrentView('info')}
            >
              Info
            </button>
            <button
              className={`nav-tab ${currentView === 'analysis' ? 'active' : ''}`}
              onClick={() => setCurrentView('analysis')}
            >
              Analysis
            </button>
          </div>
          <div className="nav-actions">
            <CosmographSearch<Node>
              ref={searchRef}
              className="search-input"
              accessors={[
                { label: 'ID', accessor: (node) => node.id },
                { label: 'Environment', accessor: (node) => node.env },
                { label: 'IP Hash', accessor: (node) => node.ip_hash },
                { label: 'Browser', accessor: (node) => node.browsers },
                { label: 'Device', accessor: (node) => node.ua_devices },
                { label: 'City', accessor: (node) => node.cities }
              ]}
              maxVisibleItems={5}
              placeholder="Search nodes..."
              onSelectResult={handleSearchSelect}
            />
            <button className="play-button" onClick={handlePlayPause}>
              {isPlaying ? <Pause size={20} /> : <Play size={20} />}
            </button>
          </div>
        </div>

        {/* Main Content */}
        <div className="content-container">
          {/* Analysis Sidebar */}
          <div className="sidebar">
            {/* Node Info Section */}
            {selectedNode && (
              <div className="info-container">
                <h3 className="info-title">Node Information</h3>
                <div className="info-content">
                  <p>ID: {selectedNode.id}</p>
                  <p>Environment: {selectedNode.env}</p>
                  <p>IP Hash: {selectedNode.ip_hash}</p>
                  <p>Browsers: {selectedNode.browsers}</p>
                  <p>Devices: {selectedNode.ua_devices}</p>
                  <p>Cities: {selectedNode.cities}</p>
                  <p>Incoming Links: {selectedNode.inLinksCount}</p>
                  <p>Outgoing Links: {selectedNode.outLinksCount}</p>
                </div>
              </div>
            )}

            {/* Histograms */}
            <div className="histogram-container">
              <h3 className="histogram-title">Total Links</h3>
              <CosmographHistogram<Node>
                accessor={(node) => node.inLinksCount! + node.outLinksCount!}
              />
            </div>

            <div className="histogram-container">
              <h3 className="histogram-title">Incoming Links</h3>
              <CosmographHistogram<Node>
                accessor={(node) => node.inLinksCount!}
              />
            </div>

            <div className="histogram-container">
              <h3 className="histogram-title">Outgoing Links</h3>
              <CosmographHistogram<Node>
                accessor={(node) => node.outLinksCount!}
              />
            </div>

            <div className="histogram-container">
              <h3 className="histogram-title">Metadata | IP_Hash</h3>
              <CosmographHistogram<Node>
                accessor={(node) => parseFloat(node.ip_hash)}
              />
            </div>
          </div>

          {/* Graph Area */}
          <div className="graph-container">
            <Cosmograph
              ref={cosmographRef}
              backgroundColor="#06172C"
              nodeColor={(n) => n.color || '#666666'}
              nodeSize={(n) => n.size || 5}
              linkWidth={1}
              linkColor="rgba(102, 102, 102, 0.3)"
              curvedLinks={false}
              fitViewOnInit
              linkArrows={false}
              onClick={handleNodeClick}
              showHoveredNodeLabel={true}
            />
          </div>

          {/* Timeline */}
          <div className="timeline-container">
            <CosmographTimeline<Node>
              ref={timelineRef}
              showAnimationControls
              animationSpeed={50}
              accessor={(link: Link) => new Date(link.time)}
              filterType="links"
              onAnimationPlay={handleTimelineAnimationPlay}
              onAnimationPause={handleTimelineAnimationPause}
              onSelection={handleTimelineSelection}
            />
          </div>

          {/* Stats Display */}
          <div className="stats-container">
            <div>{nodes.length.toLocaleString()} Nodes</div>
            <div>{links.length.toLocaleString()} Links</div>
          </div>
        </div>
      </div>
    </CosmographProvider>
  );
};

export default App;